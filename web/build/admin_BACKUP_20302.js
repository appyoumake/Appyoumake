/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/admin.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/admin.js":
/*!****************************!*\
  !*** ./assets/js/admin.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
__webpack_require__(/*! script-loader!./jstree-3.3.3.js */ "./node_modules/script-loader/index.js!./assets/js/jstree-3.3.3.js");

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jstree-3.3.3.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jstree-3.3.3.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*globals jQuery, define, module, exports, require, window, document, postMessage */\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], factory);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(require('jquery'));\n  } else {\n    factory(jQuery);\n  }\n})(function ($, undefined) {\n  \"use strict\";\n  /*!\n   * jsTree 3.3.3\n   * http://jstree.com/\n   *\n   * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)\n   *\n   * Licensed same as jquery - under the terms of the MIT License\n   *   http://www.opensource.org/licenses/mit-license.php\n   */\n\n  /*!\n   * if using jslint please allow for the jQuery global and use following options:\n   * jslint: loopfunc: true, browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true\n   */\n\n  /*jshint -W083 */\n  // prevent another load? maybe there is a better way?\n\n  if ($.jstree) {\n    return;\n  }\n  /**\n   * ### jsTree core functionality\n   */\n  // internal variables\n\n\n  var instance_counter = 0,\n      ccp_node = false,\n      ccp_mode = false,\n      ccp_inst = false,\n      themes_loaded = [],\n      src = $('script:last').attr('src'),\n      document = window.document; // local variable is always faster to access then a global\n\n  /**\n   * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.\n   * @name $.jstree\n   */\n\n  $.jstree = {\n    /**\n     * specifies the jstree version in use\n     * @name $.jstree.version\n     */\n    version: '3.3.3',\n\n    /**\n     * holds all the default options used when creating new instances\n     * @name $.jstree.defaults\n     */\n    defaults: {\n      /**\n       * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`\n       * @name $.jstree.defaults.plugins\n       */\n      plugins: []\n    },\n\n    /**\n     * stores all loaded jstree plugins (used internally)\n     * @name $.jstree.plugins\n     */\n    plugins: {},\n    path: src && src.indexOf('/') !== -1 ? src.replace(/\\/[^\\/]+$/, '') : '',\n    idregex: /[\\\\:&!^|()\\[\\]<>@*'+~#\";.,=\\- \\/${}%?`]/g,\n    root: '#'\n  };\n  /**\n   * creates a jstree instance\n   * @name $.jstree.create(el [, options])\n   * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector\n   * @param {Object} options options for this instance (extends `$.jstree.defaults`)\n   * @return {jsTree} the new instance\n   */\n\n  $.jstree.create = function (el, options) {\n    var tmp = new $.jstree.core(++instance_counter),\n        opt = options;\n    options = $.extend(true, {}, $.jstree.defaults, options);\n\n    if (opt && opt.plugins) {\n      options.plugins = opt.plugins;\n    }\n\n    $.each(options.plugins, function (i, k) {\n      if (i !== 'core') {\n        tmp = tmp.plugin(k, options[k]);\n      }\n    });\n    $(el).data('jstree', tmp);\n    tmp.init(el, options);\n    return tmp;\n  };\n  /**\n   * remove all traces of jstree from the DOM and destroy all instances\n   * @name $.jstree.destroy()\n   */\n\n\n  $.jstree.destroy = function () {\n    $('.jstree:jstree').jstree('destroy');\n    $(document).off('.jstree');\n  };\n  /**\n   * the jstree class constructor, used only internally\n   * @private\n   * @name $.jstree.core(id)\n   * @param {Number} id this instance's index\n   */\n\n\n  $.jstree.core = function (id) {\n    this._id = id;\n    this._cnt = 0;\n    this._wrk = null;\n    this._data = {\n      core: {\n        themes: {\n          name: false,\n          dots: false,\n          icons: false,\n          ellipsis: false\n        },\n        selected: [],\n        last_error: {},\n        working: false,\n        worker_queue: [],\n        focused: null\n      }\n    };\n  };\n  /**\n   * get a reference to an existing instance\n   *\n   * __Examples__\n   *\n   *\t// provided a container with an ID of \"tree\", and a nested node with an ID of \"branch\"\n   *\t// all of there will return the same instance\n   *\t$.jstree.reference('tree');\n   *\t$.jstree.reference('#tree');\n   *\t$.jstree.reference($('#tree'));\n   *\t$.jstree.reference(document.getElementByID('tree'));\n   *\t$.jstree.reference('branch');\n   *\t$.jstree.reference('#branch');\n   *\t$.jstree.reference($('#branch'));\n   *\t$.jstree.reference(document.getElementByID('branch'));\n   *\n   * @name $.jstree.reference(needle)\n   * @param {DOMElement|jQuery|String} needle\n   * @return {jsTree|null} the instance or `null` if not found\n   */\n\n\n  $.jstree.reference = function (needle) {\n    var tmp = null,\n        obj = null;\n\n    if (needle && needle.id && (!needle.tagName || !needle.nodeType)) {\n      needle = needle.id;\n    }\n\n    if (!obj || !obj.length) {\n      try {\n        obj = $(needle);\n      } catch (ignore) {}\n    }\n\n    if (!obj || !obj.length) {\n      try {\n        obj = $('#' + needle.replace($.jstree.idregex, '\\\\$&'));\n      } catch (ignore) {}\n    }\n\n    if (obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {\n      tmp = obj;\n    } else {\n      $('.jstree').each(function () {\n        var inst = $(this).data('jstree');\n\n        if (inst && inst._model.data[needle]) {\n          tmp = inst;\n          return false;\n        }\n      });\n    }\n\n    return tmp;\n  };\n  /**\n   * Create an instance, get an instance or invoke a command on a instance.\n   *\n   * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).\n   *\n   * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).\n   *\n   * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).\n   *\n   * In any other case - nothing is returned and chaining is not broken.\n   *\n   * __Examples__\n   *\n   *\t$('#tree1').jstree(); // creates an instance\n   *\t$('#tree2').jstree({ plugins : [] }); // create an instance with some options\n   *\t$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments\n   *\t$('#tree2').jstree(); // get an existing instance (or create an instance)\n   *\t$('#tree2').jstree(true); // get an existing instance (will not create new instance)\n   *\t$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)\n   *\n   * @name $().jstree([arg])\n   * @param {String|Object} arg\n   * @return {Mixed}\n   */\n\n\n  $.fn.jstree = function (arg) {\n    // check for string argument\n    var is_method = typeof arg === 'string',\n        args = Array.prototype.slice.call(arguments, 1),\n        result = null;\n\n    if (arg === true && !this.length) {\n      return false;\n    }\n\n    this.each(function () {\n      // get the instance (if there is one) and method (if it exists)\n      var instance = $.jstree.reference(this),\n          method = is_method && instance ? instance[arg] : null; // if calling a method, and method is available - execute on the instance\n\n      result = is_method && method ? method.apply(instance, args) : null; // if there is no instance and no method is being called - create one\n\n      if (!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {\n        $.jstree.create(this, arg);\n      } // if there is an instance and no method is called - return the instance\n\n\n      if (instance && !is_method || arg === true) {\n        result = instance || false;\n      } // if there was a method call which returned a result - break and return the value\n\n\n      if (result !== null && result !== undefined) {\n        return false;\n      }\n    }); // if there was a method call with a valid return value - return that, otherwise continue the chain\n\n    return result !== null && result !== undefined ? result : this;\n  };\n  /**\n   * used to find elements containing an instance\n   *\n   * __Examples__\n   *\n   *\t$('div:jstree').each(function () {\n   *\t\t$(this).jstree('destroy');\n   *\t});\n   *\n   * @name $(':jstree')\n   * @return {jQuery}\n   */\n\n\n  $.expr.pseudos.jstree = $.expr.createPseudo(function (search) {\n    return function (a) {\n      return $(a).hasClass('jstree') && $(a).data('jstree') !== undefined;\n    };\n  });\n  /**\n   * stores all defaults for the core\n   * @name $.jstree.defaults.core\n   */\n\n  $.jstree.defaults.core = {\n    /**\n     * data configuration\n     *\n     * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).\n     *\n     * You can also pass in a HTML string or a JSON array here.\n     *\n     * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.\n     * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.\n     *\n     * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.\n     *\n     * __Examples__\n     *\n     *\t// AJAX\n     *\t$('#tree').jstree({\n     *\t\t'core' : {\n     *\t\t\t'data' : {\n     *\t\t\t\t'url' : '/get/children/',\n     *\t\t\t\t'data' : function (node) {\n     *\t\t\t\t\treturn { 'id' : node.id };\n     *\t\t\t\t}\n     *\t\t\t}\n     *\t\t});\n     *\n     *\t// direct data\n     *\t$('#tree').jstree({\n     *\t\t'core' : {\n     *\t\t\t'data' : [\n     *\t\t\t\t'Simple root node',\n     *\t\t\t\t{\n     *\t\t\t\t\t'id' : 'node_2',\n     *\t\t\t\t\t'text' : 'Root node with options',\n     *\t\t\t\t\t'state' : { 'opened' : true, 'selected' : true },\n     *\t\t\t\t\t'children' : [ { 'text' : 'Child 1' }, 'Child 2']\n     *\t\t\t\t}\n     *\t\t\t]\n     *\t\t}\n     *\t});\n     *\n     *\t// function\n     *\t$('#tree').jstree({\n     *\t\t'core' : {\n     *\t\t\t'data' : function (obj, callback) {\n     *\t\t\t\tcallback.call(this, ['Root 1', 'Root 2']);\n     *\t\t\t}\n     *\t\t});\n     *\n     * @name $.jstree.defaults.core.data\n     */\n    data: false,\n\n    /**\n     * configure the various strings used throughout the tree\n     *\n     * You can use an object where the key is the string you need to replace and the value is your replacement.\n     * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.\n     * If left as `false` no replacement is made.\n     *\n     * __Examples__\n     *\n     *\t$('#tree').jstree({\n     *\t\t'core' : {\n     *\t\t\t'strings' : {\n     *\t\t\t\t'Loading ...' : 'Please wait ...'\n     *\t\t\t}\n     *\t\t}\n     *\t});\n     *\n     * @name $.jstree.defaults.core.strings\n     */\n    strings: false,\n\n    /**\n     * determines what happens when a user tries to modify the structure of the tree\n     * If left as `false` all operations like create, rename, delete, move or copy are prevented.\n     * You can set this to `true` to allow all interactions or use a function to have better control.\n     *\n     * __Examples__\n     *\n     *\t$('#tree').jstree({\n     *\t\t'core' : {\n     *\t\t\t'check_callback' : function (operation, node, node_parent, node_position, more) {\n     *\t\t\t\t// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node' or 'copy_node'\n     *\t\t\t\t// in case of 'rename_node' node_position is filled with the new node name\n     *\t\t\t\treturn operation === 'rename_node' ? true : false;\n     *\t\t\t}\n     *\t\t}\n     *\t});\n     *\n     * @name $.jstree.defaults.core.check_callback\n     */\n    check_callback: false,\n\n    /**\n     * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)\n     * @name $.jstree.defaults.core.error\n     */\n    error: $.noop,\n\n    /**\n     * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)\n     * @name $.jstree.defaults.core.animation\n     */\n    animation: 200,\n\n    /**\n     * a boolean indicating if multiple nodes can be selected\n     * @name $.jstree.defaults.core.multiple\n     */\n    multiple: true,\n\n    /**\n     * theme configuration object\n     * @name $.jstree.defaults.core.themes\n     */\n    themes: {\n      /**\n       * the name of the theme to use (if left as `false` the default theme is used)\n       * @name $.jstree.defaults.core.themes.name\n       */\n      name: false,\n\n      /**\n       * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.\n       * @name $.jstree.defaults.core.themes.url\n       */\n      url: false,\n\n      /**\n       * the location of all jstree themes - only used if `url` is set to `true`\n       * @name $.jstree.defaults.core.themes.dir\n       */\n      dir: false,\n\n      /**\n       * a boolean indicating if connecting dots are shown\n       * @name $.jstree.defaults.core.themes.dots\n       */\n      dots: true,\n\n      /**\n       * a boolean indicating if node icons are shown\n       * @name $.jstree.defaults.core.themes.icons\n       */\n      icons: true,\n\n      /**\n       * a boolean indicating if node ellipsis should be shown - this only works with a fixed with on the container\n       * @name $.jstree.defaults.core.themes.ellipsis\n       */\n      ellipsis: false,\n\n      /**\n       * a boolean indicating if the tree background is striped\n       * @name $.jstree.defaults.core.themes.stripes\n       */\n      stripes: false,\n\n      /**\n       * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)\n       * @name $.jstree.defaults.core.themes.variant\n       */\n      variant: false,\n\n      /**\n       * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.\n       * @name $.jstree.defaults.core.themes.responsive\n       */\n      responsive: false\n    },\n\n    /**\n     * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)\n     * @name $.jstree.defaults.core.expand_selected_onload\n     */\n    expand_selected_onload: true,\n\n    /**\n     * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`\n     * @name $.jstree.defaults.core.worker\n     */\n    worker: true,\n\n    /**\n     * Force node text to plain text (and escape HTML). Defaults to `false`\n     * @name $.jstree.defaults.core.force_text\n     */\n    force_text: false,\n\n    /**\n     * Should the node should be toggled if the text is double clicked . Defaults to `true`\n     * @name $.jstree.defaults.core.dblclick_toggle\n     */\n    dblclick_toggle: true\n  };\n  $.jstree.core.prototype = {\n    /**\n     * used to decorate an instance with a plugin. Used internally.\n     * @private\n     * @name plugin(deco [, opts])\n     * @param  {String} deco the plugin to decorate with\n     * @param  {Object} opts options for the plugin\n     * @return {jsTree}\n     */\n    plugin: function plugin(deco, opts) {\n      var Child = $.jstree.plugins[deco];\n\n      if (Child) {\n        this._data[deco] = {};\n        Child.prototype = this;\n        return new Child(opts, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * initialize the instance. Used internally.\n     * @private\n     * @name init(el, optons)\n     * @param {DOMElement|jQuery|String} el the element we are transforming\n     * @param {Object} options options for this instance\n     * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree\n     */\n    init: function init(el, options) {\n      this._model = {\n        data: {},\n        changed: [],\n        force_full_redraw: false,\n        redraw_timeout: false,\n        default_state: {\n          loaded: true,\n          opened: false,\n          selected: false,\n          disabled: false\n        }\n      };\n      this._model.data[$.jstree.root] = {\n        id: $.jstree.root,\n        parent: null,\n        parents: [],\n        children: [],\n        children_d: [],\n        state: {\n          loaded: false\n        }\n      };\n      this.element = $(el).addClass('jstree jstree-' + this._id);\n      this.settings = options;\n      this._data.core.ready = false;\n      this._data.core.loaded = false;\n      this._data.core.rtl = this.element.css(\"direction\") === \"rtl\";\n      this.element[this._data.core.rtl ? 'addClass' : 'removeClass'](\"jstree-rtl\");\n      this.element.attr('role', 'tree');\n\n      if (this.settings.core.multiple) {\n        this.element.attr('aria-multiselectable', true);\n      }\n\n      if (!this.element.attr('tabindex')) {\n        this.element.attr('tabindex', '0');\n      }\n\n      this.bind();\n      /**\n       * triggered after all events are bound\n       * @event\n       * @name init.jstree\n       */\n\n      this.trigger(\"init\");\n      this._data.core.original_container_html = this.element.find(\" > ul > li\").clone(true);\n\n      this._data.core.original_container_html.find(\"li\").addBack().contents().filter(function () {\n        return this.nodeType === 3 && (!this.nodeValue || /^\\s+$/.test(this.nodeValue));\n      }).remove();\n\n      this.element.html(\"<\" + \"ul class='jstree-container-ul jstree-children' role='group'><\" + \"li id='j\" + this._id + \"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><\" + \"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\n      this.element.attr('aria-activedescendant', 'j' + this._id + '_loading');\n      this._data.core.li_height = this.get_container_ul().children(\"li\").first().height() || 24;\n      this._data.core.node = this._create_prototype_node();\n      /**\n       * triggered after the loading text is shown and before loading starts\n       * @event\n       * @name loading.jstree\n       */\n\n      this.trigger(\"loading\");\n      this.load_node($.jstree.root);\n    },\n\n    /**\n     * destroy an instance\n     * @name destroy()\n     * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact\n     */\n    destroy: function destroy(keep_html) {\n      if (this._wrk) {\n        try {\n          window.URL.revokeObjectURL(this._wrk);\n          this._wrk = null;\n        } catch (ignore) {}\n      }\n\n      if (!keep_html) {\n        this.element.empty();\n      }\n\n      this.teardown();\n    },\n\n    /**\n     * Create prototype node\n     */\n    _create_prototype_node: function _create_prototype_node() {\n      var _node = document.createElement('LI'),\n          _temp1,\n          _temp2;\n\n      _node.setAttribute('role', 'treeitem');\n\n      _temp1 = document.createElement('I');\n      _temp1.className = 'jstree-icon jstree-ocl';\n\n      _temp1.setAttribute('role', 'presentation');\n\n      _node.appendChild(_temp1);\n\n      _temp1 = document.createElement('A');\n      _temp1.className = 'jstree-anchor';\n\n      _temp1.setAttribute('href', '#');\n\n      _temp1.setAttribute('tabindex', '-1');\n\n      _temp2 = document.createElement('I');\n      _temp2.className = 'jstree-icon jstree-themeicon';\n\n      _temp2.setAttribute('role', 'presentation');\n\n      _temp1.appendChild(_temp2);\n\n      _node.appendChild(_temp1);\n\n      _temp1 = _temp2 = null;\n      return _node;\n    },\n\n    /**\n     * part of the destroying of an instance. Used internally.\n     * @private\n     * @name teardown()\n     */\n    teardown: function teardown() {\n      this.unbind();\n      this.element.removeClass('jstree').removeData('jstree').find(\"[class^='jstree']\").addBack().attr(\"class\", function () {\n        return this.className.replace(/jstree[^ ]*|$/ig, '');\n      });\n      this.element = null;\n    },\n\n    /**\n     * bind all events. Used internally.\n     * @private\n     * @name bind()\n     */\n    bind: function bind() {\n      var word = '',\n          tout = null,\n          was_click = 0;\n      this.element.on(\"dblclick.jstree\", function (e) {\n        if (e.target.tagName && e.target.tagName.toLowerCase() === \"input\") {\n          return true;\n        }\n\n        if (document.selection && document.selection.empty) {\n          document.selection.empty();\n        } else {\n          if (window.getSelection) {\n            var sel = window.getSelection();\n\n            try {\n              sel.removeAllRanges();\n              sel.collapse();\n            } catch (ignore) {}\n          }\n        }\n      }).on(\"mousedown.jstree\", $.proxy(function (e) {\n        if (e.target === this.element[0]) {\n          e.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)\n\n          was_click = +new Date(); // ie does not allow to prevent losing focus\n        }\n      }, this)).on(\"mousedown.jstree\", \".jstree-ocl\", function (e) {\n        e.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon\n      }).on(\"click.jstree\", \".jstree-ocl\", $.proxy(function (e) {\n        this.toggle_node(e.target);\n      }, this)).on(\"dblclick.jstree\", \".jstree-anchor\", $.proxy(function (e) {\n        if (e.target.tagName && e.target.tagName.toLowerCase() === \"input\") {\n          return true;\n        }\n\n        if (this.settings.core.dblclick_toggle) {\n          this.toggle_node(e.target);\n        }\n      }, this)).on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\n        e.preventDefault();\n\n        if (e.currentTarget !== document.activeElement) {\n          $(e.currentTarget).focus();\n        }\n\n        this.activate_node(e.currentTarget, e);\n      }, this)).on('keydown.jstree', '.jstree-anchor', $.proxy(function (e) {\n        if (e.target.tagName && e.target.tagName.toLowerCase() === \"input\") {\n          return true;\n        }\n\n        if (e.which !== 32 && e.which !== 13 && (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey)) {\n          return true;\n        }\n\n        var o = null;\n\n        if (this._data.core.rtl) {\n          if (e.which === 37) {\n            e.which = 39;\n          } else if (e.which === 39) {\n            e.which = 37;\n          }\n        }\n\n        switch (e.which) {\n          case 32:\n            // aria defines space only with Ctrl\n            if (e.ctrlKey) {\n              e.type = \"click\";\n              $(e.currentTarget).trigger(e);\n            }\n\n            break;\n\n          case 13:\n            // enter\n            e.type = \"click\";\n            $(e.currentTarget).trigger(e);\n            break;\n\n          case 37:\n            // left\n            e.preventDefault();\n\n            if (this.is_open(e.currentTarget)) {\n              this.close_node(e.currentTarget);\n            } else {\n              o = this.get_parent(e.currentTarget);\n\n              if (o && o.id !== $.jstree.root) {\n                this.get_node(o, true).children('.jstree-anchor').focus();\n              }\n            }\n\n            break;\n\n          case 38:\n            // up\n            e.preventDefault();\n            o = this.get_prev_dom(e.currentTarget);\n\n            if (o && o.length) {\n              o.children('.jstree-anchor').focus();\n            }\n\n            break;\n\n          case 39:\n            // right\n            e.preventDefault();\n\n            if (this.is_closed(e.currentTarget)) {\n              this.open_node(e.currentTarget, function (o) {\n                this.get_node(o, true).children('.jstree-anchor').focus();\n              });\n            } else if (this.is_open(e.currentTarget)) {\n              o = this.get_node(e.currentTarget, true).children('.jstree-children')[0];\n\n              if (o) {\n                $(this._firstChild(o)).children('.jstree-anchor').focus();\n              }\n            }\n\n            break;\n\n          case 40:\n            // down\n            e.preventDefault();\n            o = this.get_next_dom(e.currentTarget);\n\n            if (o && o.length) {\n              o.children('.jstree-anchor').focus();\n            }\n\n            break;\n\n          case 106:\n            // aria defines * on numpad as open_all - not very common\n            this.open_all();\n            break;\n\n          case 36:\n            // home\n            e.preventDefault();\n            o = this._firstChild(this.get_container_ul()[0]);\n\n            if (o) {\n              $(o).children('.jstree-anchor').filter(':visible').focus();\n            }\n\n            break;\n\n          case 35:\n            // end\n            e.preventDefault();\n            this.element.find('.jstree-anchor').filter(':visible').last().focus();\n            break;\n\n          case 113:\n            // f2 - safe to include - if check_callback is false it will fail\n            e.preventDefault();\n            this.edit(e.currentTarget);\n            break;\n\n          default:\n            break;\n\n          /*!\n          // delete\n          case 46:\n          \te.preventDefault();\n          \to = this.get_node(e.currentTarget);\n          \tif(o && o.id && o.id !== $.jstree.root) {\n          \t\to = this.is_selected(o) ? this.get_selected() : o;\n          \t\tthis.delete_node(o);\n          \t}\n          \tbreak;\n          \t*/\n        }\n      }, this)).on(\"load_node.jstree\", $.proxy(function (e, data) {\n        if (data.status) {\n          if (data.node.id === $.jstree.root && !this._data.core.loaded) {\n            this._data.core.loaded = true;\n\n            if (this._firstChild(this.get_container_ul()[0])) {\n              this.element.attr('aria-activedescendant', this._firstChild(this.get_container_ul()[0]).id);\n            }\n            /**\n             * triggered after the root node is loaded for the first time\n             * @event\n             * @name loaded.jstree\n             */\n\n\n            this.trigger(\"loaded\");\n          }\n\n          if (!this._data.core.ready) {\n            setTimeout($.proxy(function () {\n              if (this.element && !this.get_container_ul().find('.jstree-loading').length) {\n                this._data.core.ready = true;\n\n                if (this._data.core.selected.length) {\n                  if (this.settings.core.expand_selected_onload) {\n                    var tmp = [],\n                        i,\n                        j;\n\n                    for (i = 0, j = this._data.core.selected.length; i < j; i++) {\n                      tmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);\n                    }\n\n                    tmp = $.vakata.array_unique(tmp);\n\n                    for (i = 0, j = tmp.length; i < j; i++) {\n                      this.open_node(tmp[i], false, 0);\n                    }\n                  }\n\n                  this.trigger('changed', {\n                    'action': 'ready',\n                    'selected': this._data.core.selected\n                  });\n                }\n                /**\n                 * triggered after all nodes are finished loading\n                 * @event\n                 * @name ready.jstree\n                 */\n\n\n                this.trigger(\"ready\");\n              }\n            }, this), 0);\n          }\n        }\n      }, this)) // quick searching when the tree is focused\n      .on('keypress.jstree', $.proxy(function (e) {\n        if (e.target.tagName && e.target.tagName.toLowerCase() === \"input\") {\n          return true;\n        }\n\n        if (tout) {\n          clearTimeout(tout);\n        }\n\n        tout = setTimeout(function () {\n          word = '';\n        }, 500);\n        var chr = String.fromCharCode(e.which).toLowerCase(),\n            col = this.element.find('.jstree-anchor').filter(':visible'),\n            ind = col.index(document.activeElement) || 0,\n            end = false;\n        word += chr; // match for whole word from current node down (including the current node)\n\n        if (word.length > 1) {\n          col.slice(ind).each($.proxy(function (i, v) {\n            if ($(v).text().toLowerCase().indexOf(word) === 0) {\n              $(v).focus();\n              end = true;\n              return false;\n            }\n          }, this));\n\n          if (end) {\n            return;\n          } // match for whole word from the beginning of the tree\n\n\n          col.slice(0, ind).each($.proxy(function (i, v) {\n            if ($(v).text().toLowerCase().indexOf(word) === 0) {\n              $(v).focus();\n              end = true;\n              return false;\n            }\n          }, this));\n\n          if (end) {\n            return;\n          }\n        } // list nodes that start with that letter (only if word consists of a single char)\n\n\n        if (new RegExp('^' + chr.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + '+$').test(word)) {\n          // search for the next node starting with that letter\n          col.slice(ind + 1).each($.proxy(function (i, v) {\n            if ($(v).text().toLowerCase().charAt(0) === chr) {\n              $(v).focus();\n              end = true;\n              return false;\n            }\n          }, this));\n\n          if (end) {\n            return;\n          } // search from the beginning\n\n\n          col.slice(0, ind + 1).each($.proxy(function (i, v) {\n            if ($(v).text().toLowerCase().charAt(0) === chr) {\n              $(v).focus();\n              end = true;\n              return false;\n            }\n          }, this));\n\n          if (end) {\n            return;\n          }\n        }\n      }, this)) // THEME RELATED\n      .on(\"init.jstree\", $.proxy(function () {\n        var s = this.settings.core.themes;\n        this._data.core.themes.dots = s.dots;\n        this._data.core.themes.stripes = s.stripes;\n        this._data.core.themes.icons = s.icons;\n        this._data.core.themes.ellipsis = s.ellipsis;\n        this.set_theme(s.name || \"default\", s.url);\n        this.set_theme_variant(s.variant);\n      }, this)).on(\"loading.jstree\", $.proxy(function () {\n        this[this._data.core.themes.dots ? \"show_dots\" : \"hide_dots\"]();\n        this[this._data.core.themes.icons ? \"show_icons\" : \"hide_icons\"]();\n        this[this._data.core.themes.stripes ? \"show_stripes\" : \"hide_stripes\"]();\n        this[this._data.core.themes.ellipsis ? \"show_ellipsis\" : \"hide_ellipsis\"]();\n      }, this)).on('blur.jstree', '.jstree-anchor', $.proxy(function (e) {\n        this._data.core.focused = null;\n        $(e.currentTarget).filter('.jstree-hovered').mouseleave();\n        this.element.attr('tabindex', '0');\n      }, this)).on('focus.jstree', '.jstree-anchor', $.proxy(function (e) {\n        var tmp = this.get_node(e.currentTarget);\n\n        if (tmp && tmp.id) {\n          this._data.core.focused = tmp.id;\n        }\n\n        this.element.find('.jstree-hovered').not(e.currentTarget).mouseleave();\n        $(e.currentTarget).mouseenter();\n        this.element.attr('tabindex', '-1');\n      }, this)).on('focus.jstree', $.proxy(function () {\n        if (+new Date() - was_click > 500 && !this._data.core.focused) {\n          was_click = 0;\n          var act = this.get_node(this.element.attr('aria-activedescendant'), true);\n\n          if (act) {\n            act.find('> .jstree-anchor').focus();\n          }\n        }\n      }, this)).on('mouseenter.jstree', '.jstree-anchor', $.proxy(function (e) {\n        this.hover_node(e.currentTarget);\n      }, this)).on('mouseleave.jstree', '.jstree-anchor', $.proxy(function (e) {\n        this.dehover_node(e.currentTarget);\n      }, this));\n    },\n\n    /**\n     * part of the destroying of an instance. Used internally.\n     * @private\n     * @name unbind()\n     */\n    unbind: function unbind() {\n      this.element.off('.jstree');\n      $(document).off('.jstree-' + this._id);\n    },\n\n    /**\n     * trigger an event. Used internally.\n     * @private\n     * @name trigger(ev [, data])\n     * @param  {String} ev the name of the event to trigger\n     * @param  {Object} data additional data to pass with the event\n     */\n    trigger: function trigger(ev, data) {\n      if (!data) {\n        data = {};\n      }\n\n      data.instance = this;\n      this.element.triggerHandler(ev.replace('.jstree', '') + '.jstree', data);\n    },\n\n    /**\n     * returns the jQuery extended instance container\n     * @name get_container()\n     * @return {jQuery}\n     */\n    get_container: function get_container() {\n      return this.element;\n    },\n\n    /**\n     * returns the jQuery extended main UL node inside the instance container. Used internally.\n     * @private\n     * @name get_container_ul()\n     * @return {jQuery}\n     */\n    get_container_ul: function get_container_ul() {\n      return this.element.children(\".jstree-children\").first();\n    },\n\n    /**\n     * gets string replacements (localization). Used internally.\n     * @private\n     * @name get_string(key)\n     * @param  {String} key\n     * @return {String}\n     */\n    get_string: function get_string(key) {\n      var a = this.settings.core.strings;\n\n      if ($.isFunction(a)) {\n        return a.call(this, key);\n      }\n\n      if (a && a[key]) {\n        return a[key];\n      }\n\n      return key;\n    },\n\n    /**\n     * gets the first child of a DOM node. Used internally.\n     * @private\n     * @name _firstChild(dom)\n     * @param  {DOMElement} dom\n     * @return {DOMElement}\n     */\n    _firstChild: function _firstChild(dom) {\n      dom = dom ? dom.firstChild : null;\n\n      while (dom !== null && dom.nodeType !== 1) {\n        dom = dom.nextSibling;\n      }\n\n      return dom;\n    },\n\n    /**\n     * gets the next sibling of a DOM node. Used internally.\n     * @private\n     * @name _nextSibling(dom)\n     * @param  {DOMElement} dom\n     * @return {DOMElement}\n     */\n    _nextSibling: function _nextSibling(dom) {\n      dom = dom ? dom.nextSibling : null;\n\n      while (dom !== null && dom.nodeType !== 1) {\n        dom = dom.nextSibling;\n      }\n\n      return dom;\n    },\n\n    /**\n     * gets the previous sibling of a DOM node. Used internally.\n     * @private\n     * @name _previousSibling(dom)\n     * @param  {DOMElement} dom\n     * @return {DOMElement}\n     */\n    _previousSibling: function _previousSibling(dom) {\n      dom = dom ? dom.previousSibling : null;\n\n      while (dom !== null && dom.nodeType !== 1) {\n        dom = dom.previousSibling;\n      }\n\n      return dom;\n    },\n\n    /**\n     * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)\n     * @name get_node(obj [, as_dom])\n     * @param  {mixed} obj\n     * @param  {Boolean} as_dom\n     * @return {Object|jQuery}\n     */\n    get_node: function get_node(obj, as_dom) {\n      if (obj && obj.id) {\n        obj = obj.id;\n      }\n\n      var dom;\n\n      try {\n        if (this._model.data[obj]) {\n          obj = this._model.data[obj];\n        } else if (typeof obj === \"string\" && this._model.data[obj.replace(/^#/, '')]) {\n          obj = this._model.data[obj.replace(/^#/, '')];\n        } else if (typeof obj === \"string\" && (dom = $('#' + obj.replace($.jstree.idregex, '\\\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\n          obj = this._model.data[dom.closest('.jstree-node').attr('id')];\n        } else if ((dom = $(obj, this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\n          obj = this._model.data[dom.closest('.jstree-node').attr('id')];\n        } else if ((dom = $(obj, this.element)).length && dom.hasClass('jstree')) {\n          obj = this._model.data[$.jstree.root];\n        } else {\n          return false;\n        }\n\n        if (as_dom) {\n          obj = obj.id === $.jstree.root ? this.element : $('#' + obj.id.replace($.jstree.idregex, '\\\\$&'), this.element);\n        }\n\n        return obj;\n      } catch (ex) {\n        return false;\n      }\n    },\n\n    /**\n     * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)\n     * @name get_path(obj [, glue, ids])\n     * @param  {mixed} obj the node\n     * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned\n     * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used\n     * @return {mixed}\n     */\n    get_path: function get_path(obj, glue, ids) {\n      obj = obj.parents ? obj : this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root || !obj.parents) {\n        return false;\n      }\n\n      var i,\n          j,\n          p = [];\n      p.push(ids ? obj.id : obj.text);\n\n      for (i = 0, j = obj.parents.length; i < j; i++) {\n        p.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));\n      }\n\n      p = p.reverse().slice(1);\n      return glue ? p.join(glue) : p;\n    },\n\n    /**\n     * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\n     * @name get_next_dom(obj [, strict])\n     * @param  {mixed} obj\n     * @param  {Boolean} strict\n     * @return {jQuery}\n     */\n    get_next_dom: function get_next_dom(obj, strict) {\n      var tmp;\n      obj = this.get_node(obj, true);\n\n      if (obj[0] === this.element[0]) {\n        tmp = this._firstChild(this.get_container_ul()[0]);\n\n        while (tmp && tmp.offsetHeight === 0) {\n          tmp = this._nextSibling(tmp);\n        }\n\n        return tmp ? $(tmp) : false;\n      }\n\n      if (!obj || !obj.length) {\n        return false;\n      }\n\n      if (strict) {\n        tmp = obj[0];\n\n        do {\n          tmp = this._nextSibling(tmp);\n        } while (tmp && tmp.offsetHeight === 0);\n\n        return tmp ? $(tmp) : false;\n      }\n\n      if (obj.hasClass(\"jstree-open\")) {\n        tmp = this._firstChild(obj.children('.jstree-children')[0]);\n\n        while (tmp && tmp.offsetHeight === 0) {\n          tmp = this._nextSibling(tmp);\n        }\n\n        if (tmp !== null) {\n          return $(tmp);\n        }\n      }\n\n      tmp = obj[0];\n\n      do {\n        tmp = this._nextSibling(tmp);\n      } while (tmp && tmp.offsetHeight === 0);\n\n      if (tmp !== null) {\n        return $(tmp);\n      }\n\n      return obj.parentsUntil(\".jstree\", \".jstree-node\").nextAll(\".jstree-node:visible\").first();\n    },\n\n    /**\n     * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\n     * @name get_prev_dom(obj [, strict])\n     * @param  {mixed} obj\n     * @param  {Boolean} strict\n     * @return {jQuery}\n     */\n    get_prev_dom: function get_prev_dom(obj, strict) {\n      var tmp;\n      obj = this.get_node(obj, true);\n\n      if (obj[0] === this.element[0]) {\n        tmp = this.get_container_ul()[0].lastChild;\n\n        while (tmp && tmp.offsetHeight === 0) {\n          tmp = this._previousSibling(tmp);\n        }\n\n        return tmp ? $(tmp) : false;\n      }\n\n      if (!obj || !obj.length) {\n        return false;\n      }\n\n      if (strict) {\n        tmp = obj[0];\n\n        do {\n          tmp = this._previousSibling(tmp);\n        } while (tmp && tmp.offsetHeight === 0);\n\n        return tmp ? $(tmp) : false;\n      }\n\n      tmp = obj[0];\n\n      do {\n        tmp = this._previousSibling(tmp);\n      } while (tmp && tmp.offsetHeight === 0);\n\n      if (tmp !== null) {\n        obj = $(tmp);\n\n        while (obj.hasClass(\"jstree-open\")) {\n          obj = obj.children(\".jstree-children\").first().children(\".jstree-node:visible:last\");\n        }\n\n        return obj;\n      }\n\n      tmp = obj[0].parentNode.parentNode;\n      return tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;\n    },\n\n    /**\n     * get the parent ID of a node\n     * @name get_parent(obj)\n     * @param  {mixed} obj\n     * @return {String}\n     */\n    get_parent: function get_parent(obj) {\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      return obj.parent;\n    },\n\n    /**\n     * get a jQuery collection of all the children of a node (node must be rendered)\n     * @name get_children_dom(obj)\n     * @param  {mixed} obj\n     * @return {jQuery}\n     */\n    get_children_dom: function get_children_dom(obj) {\n      obj = this.get_node(obj, true);\n\n      if (obj[0] === this.element[0]) {\n        return this.get_container_ul().children(\".jstree-node\");\n      }\n\n      if (!obj || !obj.length) {\n        return false;\n      }\n\n      return obj.children(\".jstree-children\").children(\".jstree-node\");\n    },\n\n    /**\n     * checks if a node has children\n     * @name is_parent(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n    is_parent: function is_parent(obj) {\n      obj = this.get_node(obj);\n      return obj && (obj.state.loaded === false || obj.children.length > 0);\n    },\n\n    /**\n     * checks if a node is loaded (its children are available)\n     * @name is_loaded(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n    is_loaded: function is_loaded(obj) {\n      obj = this.get_node(obj);\n      return obj && obj.state.loaded;\n    },\n\n    /**\n     * check if a node is currently loading (fetching children)\n     * @name is_loading(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n    is_loading: function is_loading(obj) {\n      obj = this.get_node(obj);\n      return obj && obj.state && obj.state.loading;\n    },\n\n    /**\n     * check if a node is opened\n     * @name is_open(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n    is_open: function is_open(obj) {\n      obj = this.get_node(obj);\n      return obj && obj.state.opened;\n    },\n\n    /**\n     * check if a node is in a closed state\n     * @name is_closed(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n    is_closed: function is_closed(obj) {\n      obj = this.get_node(obj);\n      return obj && this.is_parent(obj) && !obj.state.opened;\n    },\n\n    /**\n     * check if a node has no children\n     * @name is_leaf(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n    is_leaf: function is_leaf(obj) {\n      return !this.is_parent(obj);\n    },\n\n    /**\n     * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.\n     * @name load_node(obj [, callback])\n     * @param  {mixed} obj\n     * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status\n     * @return {Boolean}\n     * @trigger load_node.jstree\n     */\n    load_node: function load_node(obj, callback) {\n      var k, l, i, j, c;\n\n      if ($.isArray(obj)) {\n        this._load_nodes(obj.slice(), callback);\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj) {\n        if (callback) {\n          callback.call(this, obj, false);\n        }\n\n        return false;\n      } // if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?\n\n\n      if (obj.state.loaded) {\n        obj.state.loaded = false;\n\n        for (i = 0, j = obj.parents.length; i < j; i++) {\n          this._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\n            return $.inArray(v, obj.children_d) === -1;\n          });\n        }\n\n        for (k = 0, l = obj.children_d.length; k < l; k++) {\n          if (this._model.data[obj.children_d[k]].state.selected) {\n            c = true;\n          }\n\n          delete this._model.data[obj.children_d[k]];\n        }\n\n        if (c) {\n          this._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\n            return $.inArray(v, obj.children_d) === -1;\n          });\n        }\n\n        obj.children = [];\n        obj.children_d = [];\n\n        if (c) {\n          this.trigger('changed', {\n            'action': 'load_node',\n            'node': obj,\n            'selected': this._data.core.selected\n          });\n        }\n      }\n\n      obj.state.failed = false;\n      obj.state.loading = true;\n      this.get_node(obj, true).addClass(\"jstree-loading\").attr('aria-busy', true);\n\n      this._load_node(obj, $.proxy(function (status) {\n        obj = this._model.data[obj.id];\n        obj.state.loading = false;\n        obj.state.loaded = status;\n        obj.state.failed = !obj.state.loaded;\n        var dom = this.get_node(obj, true),\n            i = 0,\n            j = 0,\n            m = this._model.data,\n            has_children = false;\n\n        for (i = 0, j = obj.children.length; i < j; i++) {\n          if (m[obj.children[i]] && !m[obj.children[i]].state.hidden) {\n            has_children = true;\n            break;\n          }\n        }\n\n        if (obj.state.loaded && dom && dom.length) {\n          dom.removeClass('jstree-closed jstree-open jstree-leaf');\n\n          if (!has_children) {\n            dom.addClass('jstree-leaf');\n          } else {\n            if (obj.id !== '#') {\n              dom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');\n            }\n          }\n        }\n\n        dom.removeClass(\"jstree-loading\").attr('aria-busy', false);\n        /**\n         * triggered after a node is loaded\n         * @event\n         * @name load_node.jstree\n         * @param {Object} node the node that was loading\n         * @param {Boolean} status was the node loaded successfully\n         */\n\n        this.trigger('load_node', {\n          \"node\": obj,\n          \"status\": status\n        });\n\n        if (callback) {\n          callback.call(this, obj, status);\n        }\n      }, this));\n\n      return true;\n    },\n\n    /**\n     * load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.\n     * @private\n     * @name _load_nodes(nodes [, callback])\n     * @param  {array} nodes\n     * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes\n     */\n    _load_nodes: function _load_nodes(nodes, callback, is_callback, force_reload) {\n      var r = true,\n          c = function c() {\n        this._load_nodes(nodes, callback, true);\n      },\n          m = this._model.data,\n          i,\n          j,\n          tmp = [];\n\n      for (i = 0, j = nodes.length; i < j; i++) {\n        if (m[nodes[i]] && (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed || !is_callback && force_reload)) {\n          if (!this.is_loading(nodes[i])) {\n            this.load_node(nodes[i], c);\n          }\n\n          r = false;\n        }\n      }\n\n      if (r) {\n        for (i = 0, j = nodes.length; i < j; i++) {\n          if (m[nodes[i]] && m[nodes[i]].state.loaded) {\n            tmp.push(nodes[i]);\n          }\n        }\n\n        if (callback && !callback.done) {\n          callback.call(this, tmp);\n          callback.done = true;\n        }\n      }\n    },\n\n    /**\n     * loads all unloaded nodes\n     * @name load_all([obj, callback])\n     * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree\n     * @param {function} callback a function to be executed once loading all the nodes is complete,\n     * @trigger load_all.jstree\n     */\n    load_all: function load_all(obj, callback) {\n      if (!obj) {\n        obj = $.jstree.root;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj) {\n        return false;\n      }\n\n      var to_load = [],\n          m = this._model.data,\n          c = m[obj.id].children_d,\n          i,\n          j;\n\n      if (obj.state && !obj.state.loaded) {\n        to_load.push(obj.id);\n      }\n\n      for (i = 0, j = c.length; i < j; i++) {\n        if (m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {\n          to_load.push(c[i]);\n        }\n      }\n\n      if (to_load.length) {\n        this._load_nodes(to_load, function () {\n          this.load_all(obj, callback);\n        });\n      } else {\n        /**\n         * triggered after a load_all call completes\n         * @event\n         * @name load_all.jstree\n         * @param {Object} node the recursively loaded node\n         */\n        if (callback) {\n          callback.call(this, obj);\n        }\n\n        this.trigger('load_all', {\n          \"node\": obj\n        });\n      }\n    },\n\n    /**\n     * handles the actual loading of a node. Used only internally.\n     * @private\n     * @name _load_node(obj [, callback])\n     * @param  {mixed} obj\n     * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status\n     * @return {Boolean}\n     */\n    _load_node: function _load_node(obj, callback) {\n      var s = this.settings.core.data,\n          t;\n\n      var notTextOrCommentNode = function notTextOrCommentNode() {\n        return this.nodeType !== 3 && this.nodeType !== 8;\n      }; // use original HTML\n\n\n      if (!s) {\n        if (obj.id === $.jstree.root) {\n          return this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {\n            callback.call(this, status);\n          });\n        } else {\n          return callback.call(this, false);\n        } // return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);\n\n      }\n\n      if ($.isFunction(s)) {\n        return s.call(this, obj, $.proxy(function (d) {\n          if (d === false) {\n            callback.call(this, false);\n          } else {\n            this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $($.parseHTML(d)).filter(notTextOrCommentNode) : d, function (status) {\n              callback.call(this, status);\n            });\n          } // return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));\n\n        }, this));\n      }\n\n      if (_typeof(s) === 'object') {\n        if (s.url) {\n          s = $.extend(true, {}, s);\n\n          if ($.isFunction(s.url)) {\n            s.url = s.url.call(this, obj);\n          }\n\n          if ($.isFunction(s.data)) {\n            s.data = s.data.call(this, obj);\n          }\n\n          return $.ajax(s).done($.proxy(function (d, t, x) {\n            var type = x.getResponseHeader('Content-Type');\n\n            if (type && type.indexOf('json') !== -1 || _typeof(d) === \"object\") {\n              return this._append_json_data(obj, d, function (status) {\n                callback.call(this, status);\n              }); //return callback.call(this, this._append_json_data(obj, d));\n            }\n\n            if (type && type.indexOf('html') !== -1 || typeof d === \"string\") {\n              return this._append_html_data(obj, $($.parseHTML(d)).filter(notTextOrCommentNode), function (status) {\n                callback.call(this, status);\n              }); // return callback.call(this, this._append_html_data(obj, $(d)));\n            }\n\n            this._data.core.last_error = {\n              'error': 'ajax',\n              'plugin': 'core',\n              'id': 'core_04',\n              'reason': 'Could not load node',\n              'data': JSON.stringify({\n                'id': obj.id,\n                'xhr': x\n              })\n            };\n            this.settings.core.error.call(this, this._data.core.last_error);\n            return callback.call(this, false);\n          }, this)).fail($.proxy(function (f) {\n            callback.call(this, false);\n            this._data.core.last_error = {\n              'error': 'ajax',\n              'plugin': 'core',\n              'id': 'core_04',\n              'reason': 'Could not load node',\n              'data': JSON.stringify({\n                'id': obj.id,\n                'xhr': f\n              })\n            };\n            this.settings.core.error.call(this, this._data.core.last_error);\n          }, this));\n        }\n\n        t = $.isArray(s) || $.isPlainObject(s) ? JSON.parse(JSON.stringify(s)) : s;\n\n        if (obj.id === $.jstree.root) {\n          return this._append_json_data(obj, t, function (status) {\n            callback.call(this, status);\n          });\n        } else {\n          this._data.core.last_error = {\n            'error': 'nodata',\n            'plugin': 'core',\n            'id': 'core_05',\n            'reason': 'Could not load node',\n            'data': JSON.stringify({\n              'id': obj.id\n            })\n          };\n          this.settings.core.error.call(this, this._data.core.last_error);\n          return callback.call(this, false);\n        } //return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );\n\n      }\n\n      if (typeof s === 'string') {\n        if (obj.id === $.jstree.root) {\n          return this._append_html_data(obj, $($.parseHTML(s)).filter(notTextOrCommentNode), function (status) {\n            callback.call(this, status);\n          });\n        } else {\n          this._data.core.last_error = {\n            'error': 'nodata',\n            'plugin': 'core',\n            'id': 'core_06',\n            'reason': 'Could not load node',\n            'data': JSON.stringify({\n              'id': obj.id\n            })\n          };\n          this.settings.core.error.call(this, this._data.core.last_error);\n          return callback.call(this, false);\n        } //return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );\n\n      }\n\n      return callback.call(this, false);\n    },\n\n    /**\n     * adds a node to the list of nodes to redraw. Used only internally.\n     * @private\n     * @name _node_changed(obj [, callback])\n     * @param  {mixed} obj\n     */\n    _node_changed: function _node_changed(obj) {\n      obj = this.get_node(obj);\n\n      if (obj) {\n        this._model.changed.push(obj.id);\n      }\n    },\n\n    /**\n     * appends HTML content to the tree. Used internally.\n     * @private\n     * @name _append_html_data(obj, data)\n     * @param  {mixed} obj the node to append to\n     * @param  {String} data the HTML string to parse and append\n     * @trigger model.jstree, changed.jstree\n     */\n    _append_html_data: function _append_html_data(dom, data, cb) {\n      dom = this.get_node(dom);\n      dom.children = [];\n      dom.children_d = [];\n      var dat = data.is('ul') ? data.children() : data,\n          par = dom.id,\n          chd = [],\n          dpc = [],\n          m = this._model.data,\n          p = m[par],\n          s = this._data.core.selected.length,\n          tmp,\n          i,\n          j;\n      dat.each($.proxy(function (i, v) {\n        tmp = this._parse_model_from_html($(v), par, p.parents.concat());\n\n        if (tmp) {\n          chd.push(tmp);\n          dpc.push(tmp);\n\n          if (m[tmp].children_d.length) {\n            dpc = dpc.concat(m[tmp].children_d);\n          }\n        }\n      }, this));\n      p.children = chd;\n      p.children_d = dpc;\n\n      for (i = 0, j = p.parents.length; i < j; i++) {\n        m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\n      }\n      /**\n       * triggered when new data is inserted to the tree model\n       * @event\n       * @name model.jstree\n       * @param {Array} nodes an array of node IDs\n       * @param {String} parent the parent ID of the nodes\n       */\n\n\n      this.trigger('model', {\n        \"nodes\": dpc,\n        'parent': par\n      });\n\n      if (par !== $.jstree.root) {\n        this._node_changed(par);\n\n        this.redraw();\n      } else {\n        this.get_container_ul().children('.jstree-initial-node').remove();\n        this.redraw(true);\n      }\n\n      if (this._data.core.selected.length !== s) {\n        this.trigger('changed', {\n          'action': 'model',\n          'selected': this._data.core.selected\n        });\n      }\n\n      cb.call(this, true);\n    },\n\n    /**\n     * appends JSON content to the tree. Used internally.\n     * @private\n     * @name _append_json_data(obj, data)\n     * @param  {mixed} obj the node to append to\n     * @param  {String} data the JSON object to parse and append\n     * @param  {Boolean} force_processing internal param - do not set\n     * @trigger model.jstree, changed.jstree\n     */\n    _append_json_data: function _append_json_data(dom, data, cb, force_processing) {\n      if (this.element === null) {\n        return;\n      }\n\n      dom = this.get_node(dom);\n      dom.children = [];\n      dom.children_d = []; // *%$@!!!\n\n      if (data.d) {\n        data = data.d;\n\n        if (typeof data === \"string\") {\n          data = JSON.parse(data);\n        }\n      }\n\n      if (!$.isArray(data)) {\n        data = [data];\n      }\n\n      var w = null,\n          args = {\n        'df': this._model.default_state,\n        'dat': data,\n        'par': dom.id,\n        'm': this._model.data,\n        't_id': this._id,\n        't_cnt': this._cnt,\n        'sel': this._data.core.selected\n      },\n          func = function func(data, undefined) {\n        if (data.data) {\n          data = data.data;\n        }\n\n        var dat = data.dat,\n            par = data.par,\n            chd = [],\n            dpc = [],\n            add = [],\n            df = data.df,\n            t_id = data.t_id,\n            t_cnt = data.t_cnt,\n            m = data.m,\n            p = m[par],\n            sel = data.sel,\n            tmp,\n            i,\n            j,\n            rslt,\n            parse_flat = function parse_flat(d, p, ps) {\n          if (!ps) {\n            ps = [];\n          } else {\n            ps = ps.concat();\n          }\n\n          if (p) {\n            ps.unshift(p);\n          }\n\n          var tid = d.id.toString(),\n              i,\n              j,\n              c,\n              e,\n              tmp = {\n            id: tid,\n            text: d.text || '',\n            icon: d.icon !== undefined ? d.icon : true,\n            parent: p,\n            parents: ps,\n            children: d.children || [],\n            children_d: d.children_d || [],\n            data: d.data,\n            state: {},\n            li_attr: {\n              id: false\n            },\n            a_attr: {\n              href: '#'\n            },\n            original: false\n          };\n\n          for (i in df) {\n            if (df.hasOwnProperty(i)) {\n              tmp.state[i] = df[i];\n            }\n          }\n\n          if (d && d.data && d.data.jstree && d.data.jstree.icon) {\n            tmp.icon = d.data.jstree.icon;\n          }\n\n          if (tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\n            tmp.icon = true;\n          }\n\n          if (d && d.data) {\n            tmp.data = d.data;\n\n            if (d.data.jstree) {\n              for (i in d.data.jstree) {\n                if (d.data.jstree.hasOwnProperty(i)) {\n                  tmp.state[i] = d.data.jstree[i];\n                }\n              }\n            }\n          }\n\n          if (d && _typeof(d.state) === 'object') {\n            for (i in d.state) {\n              if (d.state.hasOwnProperty(i)) {\n                tmp.state[i] = d.state[i];\n              }\n            }\n          }\n\n          if (d && _typeof(d.li_attr) === 'object') {\n            for (i in d.li_attr) {\n              if (d.li_attr.hasOwnProperty(i)) {\n                tmp.li_attr[i] = d.li_attr[i];\n              }\n            }\n          }\n\n          if (!tmp.li_attr.id) {\n            tmp.li_attr.id = tid;\n          }\n\n          if (d && _typeof(d.a_attr) === 'object') {\n            for (i in d.a_attr) {\n              if (d.a_attr.hasOwnProperty(i)) {\n                tmp.a_attr[i] = d.a_attr[i];\n              }\n            }\n          }\n\n          if (d && d.children && d.children === true) {\n            tmp.state.loaded = false;\n            tmp.children = [];\n            tmp.children_d = [];\n          }\n\n          m[tmp.id] = tmp;\n\n          for (i = 0, j = tmp.children.length; i < j; i++) {\n            c = parse_flat(m[tmp.children[i]], tmp.id, ps);\n            e = m[c];\n            tmp.children_d.push(c);\n\n            if (e.children_d.length) {\n              tmp.children_d = tmp.children_d.concat(e.children_d);\n            }\n          }\n\n          delete d.data;\n          delete d.children;\n          m[tmp.id].original = d;\n\n          if (tmp.state.selected) {\n            add.push(tmp.id);\n          }\n\n          return tmp.id;\n        },\n            parse_nest = function parse_nest(d, p, ps) {\n          if (!ps) {\n            ps = [];\n          } else {\n            ps = ps.concat();\n          }\n\n          if (p) {\n            ps.unshift(p);\n          }\n\n          var tid = false,\n              i,\n              j,\n              c,\n              e,\n              tmp;\n\n          do {\n            tid = 'j' + t_id + '_' + ++t_cnt;\n          } while (m[tid]);\n\n          tmp = {\n            id: false,\n            text: typeof d === 'string' ? d : '',\n            icon: _typeof(d) === 'object' && d.icon !== undefined ? d.icon : true,\n            parent: p,\n            parents: ps,\n            children: [],\n            children_d: [],\n            data: null,\n            state: {},\n            li_attr: {\n              id: false\n            },\n            a_attr: {\n              href: '#'\n            },\n            original: false\n          };\n\n          for (i in df) {\n            if (df.hasOwnProperty(i)) {\n              tmp.state[i] = df[i];\n            }\n          }\n\n          if (d && d.id) {\n            tmp.id = d.id.toString();\n          }\n\n          if (d && d.text) {\n            tmp.text = d.text;\n          }\n\n          if (d && d.data && d.data.jstree && d.data.jstree.icon) {\n            tmp.icon = d.data.jstree.icon;\n          }\n\n          if (tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\n            tmp.icon = true;\n          }\n\n          if (d && d.data) {\n            tmp.data = d.data;\n\n            if (d.data.jstree) {\n              for (i in d.data.jstree) {\n                if (d.data.jstree.hasOwnProperty(i)) {\n                  tmp.state[i] = d.data.jstree[i];\n                }\n              }\n            }\n          }\n\n          if (d && _typeof(d.state) === 'object') {\n            for (i in d.state) {\n              if (d.state.hasOwnProperty(i)) {\n                tmp.state[i] = d.state[i];\n              }\n            }\n          }\n\n          if (d && _typeof(d.li_attr) === 'object') {\n            for (i in d.li_attr) {\n              if (d.li_attr.hasOwnProperty(i)) {\n                tmp.li_attr[i] = d.li_attr[i];\n              }\n            }\n          }\n\n          if (tmp.li_attr.id && !tmp.id) {\n            tmp.id = tmp.li_attr.id.toString();\n          }\n\n          if (!tmp.id) {\n            tmp.id = tid;\n          }\n\n          if (!tmp.li_attr.id) {\n            tmp.li_attr.id = tmp.id;\n          }\n\n          if (d && _typeof(d.a_attr) === 'object') {\n            for (i in d.a_attr) {\n              if (d.a_attr.hasOwnProperty(i)) {\n                tmp.a_attr[i] = d.a_attr[i];\n              }\n            }\n          }\n\n          if (d && d.children && d.children.length) {\n            for (i = 0, j = d.children.length; i < j; i++) {\n              c = parse_nest(d.children[i], tmp.id, ps);\n              e = m[c];\n              tmp.children.push(c);\n\n              if (e.children_d.length) {\n                tmp.children_d = tmp.children_d.concat(e.children_d);\n              }\n            }\n\n            tmp.children_d = tmp.children_d.concat(tmp.children);\n          }\n\n          if (d && d.children && d.children === true) {\n            tmp.state.loaded = false;\n            tmp.children = [];\n            tmp.children_d = [];\n          }\n\n          delete d.data;\n          delete d.children;\n          tmp.original = d;\n          m[tmp.id] = tmp;\n\n          if (tmp.state.selected) {\n            add.push(tmp.id);\n          }\n\n          return tmp.id;\n        };\n\n        if (dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {\n          // Flat JSON support (for easy import from DB):\n          // 1) convert to object (foreach)\n          for (i = 0, j = dat.length; i < j; i++) {\n            if (!dat[i].children) {\n              dat[i].children = [];\n            }\n\n            m[dat[i].id.toString()] = dat[i];\n          } // 2) populate children (foreach)\n\n\n          for (i = 0, j = dat.length; i < j; i++) {\n            m[dat[i].parent.toString()].children.push(dat[i].id.toString()); // populate parent.children_d\n\n            p.children_d.push(dat[i].id.toString());\n          } // 3) normalize && populate parents and children_d with recursion\n\n\n          for (i = 0, j = p.children.length; i < j; i++) {\n            tmp = parse_flat(m[p.children[i]], par, p.parents.concat());\n            dpc.push(tmp);\n\n            if (m[tmp].children_d.length) {\n              dpc = dpc.concat(m[tmp].children_d);\n            }\n          }\n\n          for (i = 0, j = p.parents.length; i < j; i++) {\n            m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\n          } // ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;\n\n\n          rslt = {\n            'cnt': t_cnt,\n            'mod': m,\n            'sel': sel,\n            'par': par,\n            'dpc': dpc,\n            'add': add\n          };\n        } else {\n          for (i = 0, j = dat.length; i < j; i++) {\n            tmp = parse_nest(dat[i], par, p.parents.concat());\n\n            if (tmp) {\n              chd.push(tmp);\n              dpc.push(tmp);\n\n              if (m[tmp].children_d.length) {\n                dpc = dpc.concat(m[tmp].children_d);\n              }\n            }\n          }\n\n          p.children = chd;\n          p.children_d = dpc;\n\n          for (i = 0, j = p.parents.length; i < j; i++) {\n            m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\n          }\n\n          rslt = {\n            'cnt': t_cnt,\n            'mod': m,\n            'sel': sel,\n            'par': par,\n            'dpc': dpc,\n            'add': add\n          };\n        }\n\n        if (typeof window === 'undefined' || typeof window.document === 'undefined') {\n          postMessage(rslt);\n        } else {\n          return rslt;\n        }\n      },\n          rslt = function rslt(_rslt, worker) {\n        if (this.element === null) {\n          return;\n        }\n\n        this._cnt = _rslt.cnt;\n        var i,\n            m = this._model.data;\n\n        for (i in m) {\n          if (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && _rslt.mod[i]) {\n            _rslt.mod[i].state.loading = true;\n          }\n        }\n\n        this._model.data = _rslt.mod; // breaks the reference in load_node - careful\n\n        if (worker) {\n          var j,\n              a = _rslt.add,\n              r = _rslt.sel,\n              s = this._data.core.selected.slice();\n\n          m = this._model.data; // if selection was changed while calculating in worker\n\n          if (r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {\n            // deselect nodes that are no longer selected\n            for (i = 0, j = r.length; i < j; i++) {\n              if ($.inArray(r[i], a) === -1 && $.inArray(r[i], s) === -1) {\n                m[r[i]].state.selected = false;\n              }\n            } // select nodes that were selected in the mean time\n\n\n            for (i = 0, j = s.length; i < j; i++) {\n              if ($.inArray(s[i], r) === -1) {\n                m[s[i]].state.selected = true;\n              }\n            }\n          }\n        }\n\n        if (_rslt.add.length) {\n          this._data.core.selected = this._data.core.selected.concat(_rslt.add);\n        }\n\n        this.trigger('model', {\n          \"nodes\": _rslt.dpc,\n          'parent': _rslt.par\n        });\n\n        if (_rslt.par !== $.jstree.root) {\n          this._node_changed(_rslt.par);\n\n          this.redraw();\n        } else {\n          // this.get_container_ul().children('.jstree-initial-node').remove();\n          this.redraw(true);\n        }\n\n        if (_rslt.add.length) {\n          this.trigger('changed', {\n            'action': 'model',\n            'selected': this._data.core.selected\n          });\n        }\n\n        cb.call(this, true);\n      };\n\n      if (this.settings.core.worker && window.Blob && window.URL && window.Worker) {\n        try {\n          if (this._wrk === null) {\n            this._wrk = window.URL.createObjectURL(new window.Blob(['self.onmessage = ' + func.toString()], {\n              type: \"text/javascript\"\n            }));\n          }\n\n          if (!this._data.core.working || force_processing) {\n            this._data.core.working = true;\n            w = new window.Worker(this._wrk);\n            w.onmessage = $.proxy(function (e) {\n              rslt.call(this, e.data, true);\n\n              try {\n                w.terminate();\n                w = null;\n              } catch (ignore) {}\n\n              if (this._data.core.worker_queue.length) {\n                this._append_json_data.apply(this, this._data.core.worker_queue.shift());\n              } else {\n                this._data.core.working = false;\n              }\n            }, this);\n\n            if (!args.par) {\n              if (this._data.core.worker_queue.length) {\n                this._append_json_data.apply(this, this._data.core.worker_queue.shift());\n              } else {\n                this._data.core.working = false;\n              }\n            } else {\n              w.postMessage(args);\n            }\n          } else {\n            this._data.core.worker_queue.push([dom, data, cb, true]);\n          }\n        } catch (e) {\n          rslt.call(this, func(args), false);\n\n          if (this._data.core.worker_queue.length) {\n            this._append_json_data.apply(this, this._data.core.worker_queue.shift());\n          } else {\n            this._data.core.working = false;\n          }\n        }\n      } else {\n        rslt.call(this, func(args), false);\n      }\n    },\n\n    /**\n     * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.\n     * @private\n     * @name _parse_model_from_html(d [, p, ps])\n     * @param  {jQuery} d the jQuery object to parse\n     * @param  {String} p the parent ID\n     * @param  {Array} ps list of all parents\n     * @return {String} the ID of the object added to the model\n     */\n    _parse_model_from_html: function _parse_model_from_html(d, p, ps) {\n      if (!ps) {\n        ps = [];\n      } else {\n        ps = [].concat(ps);\n      }\n\n      if (p) {\n        ps.unshift(p);\n      }\n\n      var c,\n          e,\n          m = this._model.data,\n          data = {\n        id: false,\n        text: false,\n        icon: true,\n        parent: p,\n        parents: ps,\n        children: [],\n        children_d: [],\n        data: null,\n        state: {},\n        li_attr: {\n          id: false\n        },\n        a_attr: {\n          href: '#'\n        },\n        original: false\n      },\n          i,\n          tmp,\n          tid;\n\n      for (i in this._model.default_state) {\n        if (this._model.default_state.hasOwnProperty(i)) {\n          data.state[i] = this._model.default_state[i];\n        }\n      }\n\n      tmp = $.vakata.attributes(d, true);\n      $.each(tmp, function (i, v) {\n        v = $.trim(v);\n\n        if (!v.length) {\n          return true;\n        }\n\n        data.li_attr[i] = v;\n\n        if (i === 'id') {\n          data.id = v.toString();\n        }\n      });\n      tmp = d.children('a').first();\n\n      if (tmp.length) {\n        tmp = $.vakata.attributes(tmp, true);\n        $.each(tmp, function (i, v) {\n          v = $.trim(v);\n\n          if (v.length) {\n            data.a_attr[i] = v;\n          }\n        });\n      }\n\n      tmp = d.children(\"a\").first().length ? d.children(\"a\").first().clone() : d.clone();\n      tmp.children(\"ins, i, ul\").remove();\n      tmp = tmp.html();\n      tmp = $('<div />').html(tmp);\n      data.text = this.settings.core.force_text ? tmp.text() : tmp.html();\n      tmp = d.data();\n      data.data = tmp ? $.extend(true, {}, tmp) : null;\n      data.state.opened = d.hasClass('jstree-open');\n      data.state.selected = d.children('a').hasClass('jstree-clicked');\n      data.state.disabled = d.children('a').hasClass('jstree-disabled');\n\n      if (data.data && data.data.jstree) {\n        for (i in data.data.jstree) {\n          if (data.data.jstree.hasOwnProperty(i)) {\n            data.state[i] = data.data.jstree[i];\n          }\n        }\n      }\n\n      tmp = d.children(\"a\").children(\".jstree-themeicon\");\n\n      if (tmp.length) {\n        data.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');\n      }\n\n      if (data.state.icon !== undefined) {\n        data.icon = data.state.icon;\n      }\n\n      if (data.icon === undefined || data.icon === null || data.icon === \"\") {\n        data.icon = true;\n      }\n\n      tmp = d.children(\"ul\").children(\"li\");\n\n      do {\n        tid = 'j' + this._id + '_' + ++this._cnt;\n      } while (m[tid]);\n\n      data.id = data.li_attr.id ? data.li_attr.id.toString() : tid;\n\n      if (tmp.length) {\n        tmp.each($.proxy(function (i, v) {\n          c = this._parse_model_from_html($(v), data.id, ps);\n          e = this._model.data[c];\n          data.children.push(c);\n\n          if (e.children_d.length) {\n            data.children_d = data.children_d.concat(e.children_d);\n          }\n        }, this));\n        data.children_d = data.children_d.concat(data.children);\n      } else {\n        if (d.hasClass('jstree-closed')) {\n          data.state.loaded = false;\n        }\n      }\n\n      if (data.li_attr['class']) {\n        data.li_attr['class'] = data.li_attr['class'].replace('jstree-closed', '').replace('jstree-open', '');\n      }\n\n      if (data.a_attr['class']) {\n        data.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked', '').replace('jstree-disabled', '');\n      }\n\n      m[data.id] = data;\n\n      if (data.state.selected) {\n        this._data.core.selected.push(data.id);\n      }\n\n      return data.id;\n    },\n\n    /**\n     * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.\n     * @private\n     * @name _parse_model_from_flat_json(d [, p, ps])\n     * @param  {Object} d the JSON object to parse\n     * @param  {String} p the parent ID\n     * @param  {Array} ps list of all parents\n     * @return {String} the ID of the object added to the model\n     */\n    _parse_model_from_flat_json: function _parse_model_from_flat_json(d, p, ps) {\n      if (!ps) {\n        ps = [];\n      } else {\n        ps = ps.concat();\n      }\n\n      if (p) {\n        ps.unshift(p);\n      }\n\n      var tid = d.id.toString(),\n          m = this._model.data,\n          df = this._model.default_state,\n          i,\n          j,\n          c,\n          e,\n          tmp = {\n        id: tid,\n        text: d.text || '',\n        icon: d.icon !== undefined ? d.icon : true,\n        parent: p,\n        parents: ps,\n        children: d.children || [],\n        children_d: d.children_d || [],\n        data: d.data,\n        state: {},\n        li_attr: {\n          id: false\n        },\n        a_attr: {\n          href: '#'\n        },\n        original: false\n      };\n\n      for (i in df) {\n        if (df.hasOwnProperty(i)) {\n          tmp.state[i] = df[i];\n        }\n      }\n\n      if (d && d.data && d.data.jstree && d.data.jstree.icon) {\n        tmp.icon = d.data.jstree.icon;\n      }\n\n      if (tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\n        tmp.icon = true;\n      }\n\n      if (d && d.data) {\n        tmp.data = d.data;\n\n        if (d.data.jstree) {\n          for (i in d.data.jstree) {\n            if (d.data.jstree.hasOwnProperty(i)) {\n              tmp.state[i] = d.data.jstree[i];\n            }\n          }\n        }\n      }\n\n      if (d && _typeof(d.state) === 'object') {\n        for (i in d.state) {\n          if (d.state.hasOwnProperty(i)) {\n            tmp.state[i] = d.state[i];\n          }\n        }\n      }\n\n      if (d && _typeof(d.li_attr) === 'object') {\n        for (i in d.li_attr) {\n          if (d.li_attr.hasOwnProperty(i)) {\n            tmp.li_attr[i] = d.li_attr[i];\n          }\n        }\n      }\n\n      if (!tmp.li_attr.id) {\n        tmp.li_attr.id = tid;\n      }\n\n      if (d && _typeof(d.a_attr) === 'object') {\n        for (i in d.a_attr) {\n          if (d.a_attr.hasOwnProperty(i)) {\n            tmp.a_attr[i] = d.a_attr[i];\n          }\n        }\n      }\n\n      if (d && d.children && d.children === true) {\n        tmp.state.loaded = false;\n        tmp.children = [];\n        tmp.children_d = [];\n      }\n\n      m[tmp.id] = tmp;\n\n      for (i = 0, j = tmp.children.length; i < j; i++) {\n        c = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);\n        e = m[c];\n        tmp.children_d.push(c);\n\n        if (e.children_d.length) {\n          tmp.children_d = tmp.children_d.concat(e.children_d);\n        }\n      }\n\n      delete d.data;\n      delete d.children;\n      m[tmp.id].original = d;\n\n      if (tmp.state.selected) {\n        this._data.core.selected.push(tmp.id);\n      }\n\n      return tmp.id;\n    },\n\n    /**\n     * parses a node from a JSON object and appends it to the in memory tree model. Used internally.\n     * @private\n     * @name _parse_model_from_json(d [, p, ps])\n     * @param  {Object} d the JSON object to parse\n     * @param  {String} p the parent ID\n     * @param  {Array} ps list of all parents\n     * @return {String} the ID of the object added to the model\n     */\n    _parse_model_from_json: function _parse_model_from_json(d, p, ps) {\n      if (!ps) {\n        ps = [];\n      } else {\n        ps = ps.concat();\n      }\n\n      if (p) {\n        ps.unshift(p);\n      }\n\n      var tid = false,\n          i,\n          j,\n          c,\n          e,\n          m = this._model.data,\n          df = this._model.default_state,\n          tmp;\n\n      do {\n        tid = 'j' + this._id + '_' + ++this._cnt;\n      } while (m[tid]);\n\n      tmp = {\n        id: false,\n        text: typeof d === 'string' ? d : '',\n        icon: _typeof(d) === 'object' && d.icon !== undefined ? d.icon : true,\n        parent: p,\n        parents: ps,\n        children: [],\n        children_d: [],\n        data: null,\n        state: {},\n        li_attr: {\n          id: false\n        },\n        a_attr: {\n          href: '#'\n        },\n        original: false\n      };\n\n      for (i in df) {\n        if (df.hasOwnProperty(i)) {\n          tmp.state[i] = df[i];\n        }\n      }\n\n      if (d && d.id) {\n        tmp.id = d.id.toString();\n      }\n\n      if (d && d.text) {\n        tmp.text = d.text;\n      }\n\n      if (d && d.data && d.data.jstree && d.data.jstree.icon) {\n        tmp.icon = d.data.jstree.icon;\n      }\n\n      if (tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\n        tmp.icon = true;\n      }\n\n      if (d && d.data) {\n        tmp.data = d.data;\n\n        if (d.data.jstree) {\n          for (i in d.data.jstree) {\n            if (d.data.jstree.hasOwnProperty(i)) {\n              tmp.state[i] = d.data.jstree[i];\n            }\n          }\n        }\n      }\n\n      if (d && _typeof(d.state) === 'object') {\n        for (i in d.state) {\n          if (d.state.hasOwnProperty(i)) {\n            tmp.state[i] = d.state[i];\n          }\n        }\n      }\n\n      if (d && _typeof(d.li_attr) === 'object') {\n        for (i in d.li_attr) {\n          if (d.li_attr.hasOwnProperty(i)) {\n            tmp.li_attr[i] = d.li_attr[i];\n          }\n        }\n      }\n\n      if (tmp.li_attr.id && !tmp.id) {\n        tmp.id = tmp.li_attr.id.toString();\n      }\n\n      if (!tmp.id) {\n        tmp.id = tid;\n      }\n\n      if (!tmp.li_attr.id) {\n        tmp.li_attr.id = tmp.id;\n      }\n\n      if (d && _typeof(d.a_attr) === 'object') {\n        for (i in d.a_attr) {\n          if (d.a_attr.hasOwnProperty(i)) {\n            tmp.a_attr[i] = d.a_attr[i];\n          }\n        }\n      }\n\n      if (d && d.children && d.children.length) {\n        for (i = 0, j = d.children.length; i < j; i++) {\n          c = this._parse_model_from_json(d.children[i], tmp.id, ps);\n          e = m[c];\n          tmp.children.push(c);\n\n          if (e.children_d.length) {\n            tmp.children_d = tmp.children_d.concat(e.children_d);\n          }\n        }\n\n        tmp.children_d = tmp.children_d.concat(tmp.children);\n      }\n\n      if (d && d.children && d.children === true) {\n        tmp.state.loaded = false;\n        tmp.children = [];\n        tmp.children_d = [];\n      }\n\n      delete d.data;\n      delete d.children;\n      tmp.original = d;\n      m[tmp.id] = tmp;\n\n      if (tmp.state.selected) {\n        this._data.core.selected.push(tmp.id);\n      }\n\n      return tmp.id;\n    },\n\n    /**\n     * redraws all nodes that need to be redrawn. Used internally.\n     * @private\n     * @name _redraw()\n     * @trigger redraw.jstree\n     */\n    _redraw: function _redraw() {\n      var nodes = this._model.force_full_redraw ? this._model.data[$.jstree.root].children.concat([]) : this._model.changed.concat([]),\n          f = document.createElement('UL'),\n          tmp,\n          i,\n          j,\n          fe = this._data.core.focused;\n\n      for (i = 0, j = nodes.length; i < j; i++) {\n        tmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);\n\n        if (tmp && this._model.force_full_redraw) {\n          f.appendChild(tmp);\n        }\n      }\n\n      if (this._model.force_full_redraw) {\n        f.className = this.get_container_ul()[0].className;\n        f.setAttribute('role', 'group');\n        this.element.empty().append(f); //this.get_container_ul()[0].appendChild(f);\n      }\n\n      if (fe !== null) {\n        tmp = this.get_node(fe, true);\n\n        if (tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) {\n          tmp.children('.jstree-anchor').focus();\n        } else {\n          this._data.core.focused = null;\n        }\n      }\n\n      this._model.force_full_redraw = false;\n      this._model.changed = [];\n      /**\n       * triggered after nodes are redrawn\n       * @event\n       * @name redraw.jstree\n       * @param {array} nodes the redrawn nodes\n       */\n\n      this.trigger('redraw', {\n        \"nodes\": nodes\n      });\n    },\n\n    /**\n     * redraws all nodes that need to be redrawn or optionally - the whole tree\n     * @name redraw([full])\n     * @param {Boolean} full if set to `true` all nodes are redrawn.\n     */\n    redraw: function redraw(full) {\n      if (full) {\n        this._model.force_full_redraw = true;\n      } //if(this._model.redraw_timeout) {\n      //\tclearTimeout(this._model.redraw_timeout);\n      //}\n      //this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);\n\n\n      this._redraw();\n    },\n\n    /**\n     * redraws a single node's children. Used internally.\n     * @private\n     * @name draw_children(node)\n     * @param {mixed} node the node whose children will be redrawn\n     */\n    draw_children: function draw_children(node) {\n      var obj = this.get_node(node),\n          i = false,\n          j = false,\n          k = false,\n          d = document;\n\n      if (!obj) {\n        return false;\n      }\n\n      if (obj.id === $.jstree.root) {\n        return this.redraw(true);\n      }\n\n      node = this.get_node(node, true);\n\n      if (!node || !node.length) {\n        return false;\n      } // TODO: quick toggle\n\n\n      node.children('.jstree-children').remove();\n      node = node[0];\n\n      if (obj.children.length && obj.state.loaded) {\n        k = d.createElement('UL');\n        k.setAttribute('role', 'group');\n        k.className = 'jstree-children';\n\n        for (i = 0, j = obj.children.length; i < j; i++) {\n          k.appendChild(this.redraw_node(obj.children[i], true, true));\n        }\n\n        node.appendChild(k);\n      }\n    },\n\n    /**\n     * redraws a single node. Used internally.\n     * @private\n     * @name redraw_node(node, deep, is_callback, force_render)\n     * @param {mixed} node the node to redraw\n     * @param {Boolean} deep should child nodes be redrawn too\n     * @param {Boolean} is_callback is this a recursion call\n     * @param {Boolean} force_render should children of closed parents be drawn anyway\n     */\n    redraw_node: function redraw_node(node, deep, is_callback, force_render) {\n      var obj = this.get_node(node),\n          par = false,\n          ind = false,\n          old = false,\n          i = false,\n          j = false,\n          k = false,\n          c = '',\n          d = document,\n          m = this._model.data,\n          f = false,\n          s = false,\n          tmp = null,\n          t = 0,\n          l = 0,\n          has_children = false,\n          last_sibling = false;\n\n      if (!obj) {\n        return false;\n      }\n\n      if (obj.id === $.jstree.root) {\n        return this.redraw(true);\n      }\n\n      deep = deep || obj.children.length === 0;\n      node = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + (\"0123456789\".indexOf(obj.id[0]) !== -1 ? '\\\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex, '\\\\$&') : obj.id.replace($.jstree.idregex, '\\\\$&'))); //, this.element);\n\n      if (!node) {\n        deep = true; //node = d.createElement('LI');\n\n        if (!is_callback) {\n          par = obj.parent !== $.jstree.root ? $('#' + obj.parent.replace($.jstree.idregex, '\\\\$&'), this.element)[0] : null;\n\n          if (par !== null && (!par || !m[obj.parent].state.opened)) {\n            return false;\n          }\n\n          ind = $.inArray(obj.id, par === null ? m[$.jstree.root].children : m[obj.parent].children);\n        }\n      } else {\n        node = $(node);\n\n        if (!is_callback) {\n          par = node.parent().parent()[0];\n\n          if (par === this.element[0]) {\n            par = null;\n          }\n\n          ind = node.index();\n        } // m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage\n\n\n        if (!deep && obj.children.length && !node.children('.jstree-children').length) {\n          deep = true;\n        }\n\n        if (!deep) {\n          old = node.children('.jstree-children')[0];\n        }\n\n        f = node.children('.jstree-anchor')[0] === document.activeElement;\n        node.remove(); //node = d.createElement('LI');\n        //node = node[0];\n      }\n\n      node = this._data.core.node.cloneNode(true); // node is DOM, deep is boolean\n\n      c = 'jstree-node ';\n\n      for (i in obj.li_attr) {\n        if (obj.li_attr.hasOwnProperty(i)) {\n          if (i === 'id') {\n            continue;\n          }\n\n          if (i !== 'class') {\n            node.setAttribute(i, obj.li_attr[i]);\n          } else {\n            c += obj.li_attr[i];\n          }\n        }\n      }\n\n      if (!obj.a_attr.id) {\n        obj.a_attr.id = obj.id + '_anchor';\n      }\n\n      node.setAttribute('aria-selected', !!obj.state.selected);\n      node.setAttribute('aria-level', obj.parents.length);\n      node.setAttribute('aria-labelledby', obj.a_attr.id);\n\n      if (obj.state.disabled) {\n        node.setAttribute('aria-disabled', true);\n      }\n\n      for (i = 0, j = obj.children.length; i < j; i++) {\n        if (!m[obj.children[i]].state.hidden) {\n          has_children = true;\n          break;\n        }\n      }\n\n      if (obj.parent !== null && m[obj.parent] && !obj.state.hidden) {\n        i = $.inArray(obj.id, m[obj.parent].children);\n        last_sibling = obj.id;\n\n        if (i !== -1) {\n          i++;\n\n          for (j = m[obj.parent].children.length; i < j; i++) {\n            if (!m[m[obj.parent].children[i]].state.hidden) {\n              last_sibling = m[obj.parent].children[i];\n            }\n\n            if (last_sibling !== obj.id) {\n              break;\n            }\n          }\n        }\n      }\n\n      if (obj.state.hidden) {\n        c += ' jstree-hidden';\n      }\n\n      if (obj.state.loaded && !has_children) {\n        c += ' jstree-leaf';\n      } else {\n        c += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';\n        node.setAttribute('aria-expanded', obj.state.opened && obj.state.loaded);\n      }\n\n      if (last_sibling === obj.id) {\n        c += ' jstree-last';\n      }\n\n      node.id = obj.id;\n      node.className = c;\n      c = (obj.state.selected ? ' jstree-clicked' : '') + (obj.state.disabled ? ' jstree-disabled' : '');\n\n      for (j in obj.a_attr) {\n        if (obj.a_attr.hasOwnProperty(j)) {\n          if (j === 'href' && obj.a_attr[j] === '#') {\n            continue;\n          }\n\n          if (j !== 'class') {\n            node.childNodes[1].setAttribute(j, obj.a_attr[j]);\n          } else {\n            c += ' ' + obj.a_attr[j];\n          }\n        }\n      }\n\n      if (c.length) {\n        node.childNodes[1].className = 'jstree-anchor ' + c;\n      }\n\n      if (obj.icon && obj.icon !== true || obj.icon === false) {\n        if (obj.icon === false) {\n          node.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';\n        } else if (obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {\n          node.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';\n        } else {\n          node.childNodes[1].childNodes[0].style.backgroundImage = 'url(\"' + obj.icon + '\")';\n          node.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';\n          node.childNodes[1].childNodes[0].style.backgroundSize = 'auto';\n          node.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';\n        }\n      }\n\n      if (this.settings.core.force_text) {\n        node.childNodes[1].appendChild(d.createTextNode(obj.text));\n      } else {\n        node.childNodes[1].innerHTML += obj.text;\n      }\n\n      if (deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {\n        k = d.createElement('UL');\n        k.setAttribute('role', 'group');\n        k.className = 'jstree-children';\n\n        for (i = 0, j = obj.children.length; i < j; i++) {\n          k.appendChild(this.redraw_node(obj.children[i], deep, true));\n        }\n\n        node.appendChild(k);\n      }\n\n      if (old) {\n        node.appendChild(old);\n      }\n\n      if (!is_callback) {\n        // append back using par / ind\n        if (!par) {\n          par = this.element[0];\n        }\n\n        for (i = 0, j = par.childNodes.length; i < j; i++) {\n          if (par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {\n            tmp = par.childNodes[i];\n            break;\n          }\n        }\n\n        if (!tmp) {\n          tmp = d.createElement('UL');\n          tmp.setAttribute('role', 'group');\n          tmp.className = 'jstree-children';\n          par.appendChild(tmp);\n        }\n\n        par = tmp;\n\n        if (ind < par.childNodes.length) {\n          par.insertBefore(node, par.childNodes[ind]);\n        } else {\n          par.appendChild(node);\n        }\n\n        if (f) {\n          t = this.element[0].scrollTop;\n          l = this.element[0].scrollLeft;\n          node.childNodes[1].focus();\n          this.element[0].scrollTop = t;\n          this.element[0].scrollLeft = l;\n        }\n      }\n\n      if (obj.state.opened && !obj.state.loaded) {\n        obj.state.opened = false;\n        setTimeout($.proxy(function () {\n          this.open_node(obj.id, false, 0);\n        }, this), 0);\n      }\n\n      return node;\n    },\n\n    /**\n     * opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.\n     * @name open_node(obj [, callback, animation])\n     * @param {mixed} obj the node to open\n     * @param {Function} callback a function to execute once the node is opened\n     * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.\n     * @trigger open_node.jstree, after_open.jstree, before_open.jstree\n     */\n    open_node: function open_node(obj, callback, animation) {\n      var t1, t2, d, t;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.open_node(obj[t1], callback, animation);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      animation = animation === undefined ? this.settings.core.animation : animation;\n\n      if (!this.is_closed(obj)) {\n        if (callback) {\n          callback.call(this, obj, false);\n        }\n\n        return false;\n      }\n\n      if (!this.is_loaded(obj)) {\n        if (this.is_loading(obj)) {\n          return setTimeout($.proxy(function () {\n            this.open_node(obj, callback, animation);\n          }, this), 500);\n        }\n\n        this.load_node(obj, function (o, ok) {\n          return ok ? this.open_node(o, callback, animation) : callback ? callback.call(this, o, false) : false;\n        });\n      } else {\n        d = this.get_node(obj, true);\n        t = this;\n\n        if (d.length) {\n          if (animation && d.children(\".jstree-children\").length) {\n            d.children(\".jstree-children\").stop(true, true);\n          }\n\n          if (obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {\n            this.draw_children(obj); //d = this.get_node(obj, true);\n          }\n\n          if (!animation) {\n            this.trigger('before_open', {\n              \"node\": obj\n            });\n            d[0].className = d[0].className.replace('jstree-closed', 'jstree-open');\n            d[0].setAttribute(\"aria-expanded\", true);\n          } else {\n            this.trigger('before_open', {\n              \"node\": obj\n            });\n            d.children(\".jstree-children\").css(\"display\", \"none\").end().removeClass(\"jstree-closed\").addClass(\"jstree-open\").attr(\"aria-expanded\", true).children(\".jstree-children\").stop(true, true).slideDown(animation, function () {\n              this.style.display = \"\";\n\n              if (t.element) {\n                t.trigger(\"after_open\", {\n                  \"node\": obj\n                });\n              }\n            });\n          }\n        }\n\n        obj.state.opened = true;\n\n        if (callback) {\n          callback.call(this, obj, true);\n        }\n\n        if (!d.length) {\n          /**\n           * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)\n           * @event\n           * @name before_open.jstree\n           * @param {Object} node the opened node\n           */\n          this.trigger('before_open', {\n            \"node\": obj\n          });\n        }\n        /**\n         * triggered when a node is opened (if there is an animation it will not be completed yet)\n         * @event\n         * @name open_node.jstree\n         * @param {Object} node the opened node\n         */\n\n\n        this.trigger('open_node', {\n          \"node\": obj\n        });\n\n        if (!animation || !d.length) {\n          /**\n           * triggered when a node is opened and the animation is complete\n           * @event\n           * @name after_open.jstree\n           * @param {Object} node the opened node\n           */\n          this.trigger(\"after_open\", {\n            \"node\": obj\n          });\n        }\n\n        return true;\n      }\n    },\n\n    /**\n     * opens every parent of a node (node should be loaded)\n     * @name _open_to(obj)\n     * @param {mixed} obj the node to reveal\n     * @private\n     */\n    _open_to: function _open_to(obj) {\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      var i,\n          j,\n          p = obj.parents;\n\n      for (i = 0, j = p.length; i < j; i += 1) {\n        if (i !== $.jstree.root) {\n          this.open_node(p[i], false, 0);\n        }\n      }\n\n      return $('#' + obj.id.replace($.jstree.idregex, '\\\\$&'), this.element);\n    },\n\n    /**\n     * closes a node, hiding its children\n     * @name close_node(obj [, animation])\n     * @param {mixed} obj the node to close\n     * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.\n     * @trigger close_node.jstree, after_close.jstree\n     */\n    close_node: function close_node(obj, animation) {\n      var t1, t2, t, d;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.close_node(obj[t1], animation);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      if (this.is_closed(obj)) {\n        return false;\n      }\n\n      animation = animation === undefined ? this.settings.core.animation : animation;\n      t = this;\n      d = this.get_node(obj, true);\n      obj.state.opened = false;\n      /**\n       * triggered when a node is closed (if there is an animation it will not be complete yet)\n       * @event\n       * @name close_node.jstree\n       * @param {Object} node the closed node\n       */\n\n      this.trigger('close_node', {\n        \"node\": obj\n      });\n\n      if (!d.length) {\n        /**\n         * triggered when a node is closed and the animation is complete\n         * @event\n         * @name after_close.jstree\n         * @param {Object} node the closed node\n         */\n        this.trigger(\"after_close\", {\n          \"node\": obj\n        });\n      } else {\n        if (!animation) {\n          d[0].className = d[0].className.replace('jstree-open', 'jstree-closed');\n          d.attr(\"aria-expanded\", false).children('.jstree-children').remove();\n          this.trigger(\"after_close\", {\n            \"node\": obj\n          });\n        } else {\n          d.children(\".jstree-children\").attr(\"style\", \"display:block !important\").end().removeClass(\"jstree-open\").addClass(\"jstree-closed\").attr(\"aria-expanded\", false).children(\".jstree-children\").stop(true, true).slideUp(animation, function () {\n            this.style.display = \"\";\n            d.children('.jstree-children').remove();\n\n            if (t.element) {\n              t.trigger(\"after_close\", {\n                \"node\": obj\n              });\n            }\n          });\n        }\n      }\n    },\n\n    /**\n     * toggles a node - closing it if it is open, opening it if it is closed\n     * @name toggle_node(obj)\n     * @param {mixed} obj the node to toggle\n     */\n    toggle_node: function toggle_node(obj) {\n      var t1, t2;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.toggle_node(obj[t1]);\n        }\n\n        return true;\n      }\n\n      if (this.is_closed(obj)) {\n        return this.open_node(obj);\n      }\n\n      if (this.is_open(obj)) {\n        return this.close_node(obj);\n      }\n    },\n\n    /**\n     * opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.\n     * @name open_all([obj, animation, original_obj])\n     * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree\n     * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation\n     * @param {jQuery} reference to the node that started the process (internal use)\n     * @trigger open_all.jstree\n     */\n    open_all: function open_all(obj, animation, original_obj) {\n      if (!obj) {\n        obj = $.jstree.root;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj) {\n        return false;\n      }\n\n      var dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),\n          i,\n          j,\n          _this;\n\n      if (!dom.length) {\n        for (i = 0, j = obj.children_d.length; i < j; i++) {\n          if (this.is_closed(this._model.data[obj.children_d[i]])) {\n            this._model.data[obj.children_d[i]].state.opened = true;\n          }\n        }\n\n        return this.trigger('open_all', {\n          \"node\": obj\n        });\n      }\n\n      original_obj = original_obj || dom;\n      _this = this;\n      dom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');\n      dom.each(function () {\n        _this.open_node(this, function (node, status) {\n          if (status && this.is_parent(node)) {\n            this.open_all(node, animation, original_obj);\n          }\n        }, animation || 0);\n      });\n\n      if (original_obj.find('.jstree-closed').length === 0) {\n        /**\n         * triggered when an `open_all` call completes\n         * @event\n         * @name open_all.jstree\n         * @param {Object} node the opened node\n         */\n        this.trigger('open_all', {\n          \"node\": this.get_node(original_obj)\n        });\n      }\n    },\n\n    /**\n     * closes all nodes within a node (or the tree), revaling their children\n     * @name close_all([obj, animation])\n     * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree\n     * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation\n     * @trigger close_all.jstree\n     */\n    close_all: function close_all(obj, animation) {\n      if (!obj) {\n        obj = $.jstree.root;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj) {\n        return false;\n      }\n\n      var dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),\n          _this = this,\n          i,\n          j;\n\n      if (dom.length) {\n        dom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');\n        $(dom.get().reverse()).each(function () {\n          _this.close_node(this, animation || 0);\n        });\n      }\n\n      for (i = 0, j = obj.children_d.length; i < j; i++) {\n        this._model.data[obj.children_d[i]].state.opened = false;\n      }\n      /**\n       * triggered when an `close_all` call completes\n       * @event\n       * @name close_all.jstree\n       * @param {Object} node the closed node\n       */\n\n\n      this.trigger('close_all', {\n        \"node\": obj\n      });\n    },\n\n    /**\n     * checks if a node is disabled (not selectable)\n     * @name is_disabled(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n    is_disabled: function is_disabled(obj) {\n      obj = this.get_node(obj);\n      return obj && obj.state && obj.state.disabled;\n    },\n\n    /**\n     * enables a node - so that it can be selected\n     * @name enable_node(obj)\n     * @param {mixed} obj the node to enable\n     * @trigger enable_node.jstree\n     */\n    enable_node: function enable_node(obj) {\n      var t1, t2;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.enable_node(obj[t1]);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      obj.state.disabled = false;\n      this.get_node(obj, true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);\n      /**\n       * triggered when an node is enabled\n       * @event\n       * @name enable_node.jstree\n       * @param {Object} node the enabled node\n       */\n\n      this.trigger('enable_node', {\n        'node': obj\n      });\n    },\n\n    /**\n     * disables a node - so that it can not be selected\n     * @name disable_node(obj)\n     * @param {mixed} obj the node to disable\n     * @trigger disable_node.jstree\n     */\n    disable_node: function disable_node(obj) {\n      var t1, t2;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.disable_node(obj[t1]);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      obj.state.disabled = true;\n      this.get_node(obj, true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);\n      /**\n       * triggered when an node is disabled\n       * @event\n       * @name disable_node.jstree\n       * @param {Object} node the disabled node\n       */\n\n      this.trigger('disable_node', {\n        'node': obj\n      });\n    },\n\n    /**\n     * determines if a node is hidden\n     * @name is_hidden(obj)\n     * @param {mixed} obj the node\n     */\n    is_hidden: function is_hidden(obj) {\n      obj = this.get_node(obj);\n      return obj.state.hidden === true;\n    },\n\n    /**\n     * hides a node - it is still in the structure but will not be visible\n     * @name hide_node(obj)\n     * @param {mixed} obj the node to hide\n     * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\n     * @trigger hide_node.jstree\n     */\n    hide_node: function hide_node(obj, skip_redraw) {\n      var t1, t2;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.hide_node(obj[t1], true);\n        }\n\n        if (!skip_redraw) {\n          this.redraw();\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      if (!obj.state.hidden) {\n        obj.state.hidden = true;\n\n        this._node_changed(obj.parent);\n\n        if (!skip_redraw) {\n          this.redraw();\n        }\n        /**\n         * triggered when an node is hidden\n         * @event\n         * @name hide_node.jstree\n         * @param {Object} node the hidden node\n         */\n\n\n        this.trigger('hide_node', {\n          'node': obj\n        });\n      }\n    },\n\n    /**\n     * shows a node\n     * @name show_node(obj)\n     * @param {mixed} obj the node to show\n     * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\n     * @trigger show_node.jstree\n     */\n    show_node: function show_node(obj, skip_redraw) {\n      var t1, t2;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.show_node(obj[t1], true);\n        }\n\n        if (!skip_redraw) {\n          this.redraw();\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      if (obj.state.hidden) {\n        obj.state.hidden = false;\n\n        this._node_changed(obj.parent);\n\n        if (!skip_redraw) {\n          this.redraw();\n        }\n        /**\n         * triggered when an node is shown\n         * @event\n         * @name show_node.jstree\n         * @param {Object} node the shown node\n         */\n\n\n        this.trigger('show_node', {\n          'node': obj\n        });\n      }\n    },\n\n    /**\n     * hides all nodes\n     * @name hide_all()\n     * @trigger hide_all.jstree\n     */\n    hide_all: function hide_all(skip_redraw) {\n      var i,\n          m = this._model.data,\n          ids = [];\n\n      for (i in m) {\n        if (m.hasOwnProperty(i) && i !== $.jstree.root && !m[i].state.hidden) {\n          m[i].state.hidden = true;\n          ids.push(i);\n        }\n      }\n\n      this._model.force_full_redraw = true;\n\n      if (!skip_redraw) {\n        this.redraw();\n      }\n      /**\n       * triggered when all nodes are hidden\n       * @event\n       * @name hide_all.jstree\n       * @param {Array} nodes the IDs of all hidden nodes\n       */\n\n\n      this.trigger('hide_all', {\n        'nodes': ids\n      });\n      return ids;\n    },\n\n    /**\n     * shows all nodes\n     * @name show_all()\n     * @trigger show_all.jstree\n     */\n    show_all: function show_all(skip_redraw) {\n      var i,\n          m = this._model.data,\n          ids = [];\n\n      for (i in m) {\n        if (m.hasOwnProperty(i) && i !== $.jstree.root && m[i].state.hidden) {\n          m[i].state.hidden = false;\n          ids.push(i);\n        }\n      }\n\n      this._model.force_full_redraw = true;\n\n      if (!skip_redraw) {\n        this.redraw();\n      }\n      /**\n       * triggered when all nodes are shown\n       * @event\n       * @name show_all.jstree\n       * @param {Array} nodes the IDs of all shown nodes\n       */\n\n\n      this.trigger('show_all', {\n        'nodes': ids\n      });\n      return ids;\n    },\n\n    /**\n     * called when a node is selected by the user. Used internally.\n     * @private\n     * @name activate_node(obj, e)\n     * @param {mixed} obj the node\n     * @param {Object} e the related event\n     * @trigger activate_node.jstree, changed.jstree\n     */\n    activate_node: function activate_node(obj, e) {\n      if (this.is_disabled(obj)) {\n        return false;\n      }\n\n      if (!e || _typeof(e) !== 'object') {\n        e = {};\n      } // ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node\n\n\n      this._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;\n\n      if (this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) {\n        this._data.core.last_clicked = null;\n      }\n\n      if (!this._data.core.last_clicked && this._data.core.selected.length) {\n        this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]);\n      }\n\n      if (!this.settings.core.multiple || !e.metaKey && !e.ctrlKey && !e.shiftKey || e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent)) {\n        if (!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {\n          this.deselect_node(obj, false, e);\n        } else {\n          this.deselect_all(true);\n          this.select_node(obj, false, false, e);\n          this._data.core.last_clicked = this.get_node(obj);\n        }\n      } else {\n        if (e.shiftKey) {\n          var o = this.get_node(obj).id,\n              l = this._data.core.last_clicked.id,\n              p = this.get_node(this._data.core.last_clicked.parent).children,\n              c = false,\n              i,\n              j;\n\n          for (i = 0, j = p.length; i < j; i += 1) {\n            // separate IFs work whem o and l are the same\n            if (p[i] === o) {\n              c = !c;\n            }\n\n            if (p[i] === l) {\n              c = !c;\n            }\n\n            if (!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {\n              if (!this.is_hidden(p[i])) {\n                this.select_node(p[i], true, false, e);\n              }\n            } else {\n              this.deselect_node(p[i], true, e);\n            }\n          }\n\n          this.trigger('changed', {\n            'action': 'select_node',\n            'node': this.get_node(obj),\n            'selected': this._data.core.selected,\n            'event': e\n          });\n        } else {\n          if (!this.is_selected(obj)) {\n            this.select_node(obj, false, false, e);\n          } else {\n            this.deselect_node(obj, false, e);\n          }\n        }\n      }\n      /**\n       * triggered when an node is clicked or intercated with by the user\n       * @event\n       * @name activate_node.jstree\n       * @param {Object} node\n       * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)\n       */\n\n\n      this.trigger('activate_node', {\n        'node': this.get_node(obj),\n        'event': e\n      });\n    },\n\n    /**\n     * applies the hover state on a node, called when a node is hovered by the user. Used internally.\n     * @private\n     * @name hover_node(obj)\n     * @param {mixed} obj\n     * @trigger hover_node.jstree\n     */\n    hover_node: function hover_node(obj) {\n      obj = this.get_node(obj, true);\n\n      if (!obj || !obj.length || obj.children('.jstree-hovered').length) {\n        return false;\n      }\n\n      var o = this.element.find('.jstree-hovered'),\n          t = this.element;\n\n      if (o && o.length) {\n        this.dehover_node(o);\n      }\n\n      obj.children('.jstree-anchor').addClass('jstree-hovered');\n      /**\n       * triggered when an node is hovered\n       * @event\n       * @name hover_node.jstree\n       * @param {Object} node\n       */\n\n      this.trigger('hover_node', {\n        'node': this.get_node(obj)\n      });\n      setTimeout(function () {\n        t.attr('aria-activedescendant', obj[0].id);\n      }, 0);\n    },\n\n    /**\n     * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.\n     * @private\n     * @name dehover_node(obj)\n     * @param {mixed} obj\n     * @trigger dehover_node.jstree\n     */\n    dehover_node: function dehover_node(obj) {\n      obj = this.get_node(obj, true);\n\n      if (!obj || !obj.length || !obj.children('.jstree-hovered').length) {\n        return false;\n      }\n\n      obj.children('.jstree-anchor').removeClass('jstree-hovered');\n      /**\n       * triggered when an node is no longer hovered\n       * @event\n       * @name dehover_node.jstree\n       * @param {Object} node\n       */\n\n      this.trigger('dehover_node', {\n        'node': this.get_node(obj)\n      });\n    },\n\n    /**\n     * select a node\n     * @name select_node(obj [, supress_event, prevent_open])\n     * @param {mixed} obj an array can be used to select multiple nodes\n     * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n     * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened\n     * @trigger select_node.jstree, changed.jstree\n     */\n    select_node: function select_node(obj, supress_event, prevent_open, e) {\n      var dom, t1, t2, th;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.select_node(obj[t1], supress_event, prevent_open, e);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      dom = this.get_node(obj, true);\n\n      if (!obj.state.selected) {\n        obj.state.selected = true;\n\n        this._data.core.selected.push(obj.id);\n\n        if (!prevent_open) {\n          dom = this._open_to(obj);\n        }\n\n        if (dom && dom.length) {\n          dom.attr('aria-selected', true).children('.jstree-anchor').addClass('jstree-clicked');\n        }\n        /**\n         * triggered when an node is selected\n         * @event\n         * @name select_node.jstree\n         * @param {Object} node\n         * @param {Array} selected the current selection\n         * @param {Object} event the event (if any) that triggered this select_node\n         */\n\n\n        this.trigger('select_node', {\n          'node': obj,\n          'selected': this._data.core.selected,\n          'event': e\n        });\n\n        if (!supress_event) {\n          /**\n           * triggered when selection changes\n           * @event\n           * @name changed.jstree\n           * @param {Object} node\n           * @param {Object} action the action that caused the selection to change\n           * @param {Array} selected the current selection\n           * @param {Object} event the event (if any) that triggered this changed event\n           */\n          this.trigger('changed', {\n            'action': 'select_node',\n            'node': obj,\n            'selected': this._data.core.selected,\n            'event': e\n          });\n        }\n      }\n    },\n\n    /**\n     * deselect a node\n     * @name deselect_node(obj [, supress_event])\n     * @param {mixed} obj an array can be used to deselect multiple nodes\n     * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n     * @trigger deselect_node.jstree, changed.jstree\n     */\n    deselect_node: function deselect_node(obj, supress_event, e) {\n      var t1, t2, dom;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.deselect_node(obj[t1], supress_event, e);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      dom = this.get_node(obj, true);\n\n      if (obj.state.selected) {\n        obj.state.selected = false;\n        this._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);\n\n        if (dom.length) {\n          dom.attr('aria-selected', false).children('.jstree-anchor').removeClass('jstree-clicked');\n        }\n        /**\n         * triggered when an node is deselected\n         * @event\n         * @name deselect_node.jstree\n         * @param {Object} node\n         * @param {Array} selected the current selection\n         * @param {Object} event the event (if any) that triggered this deselect_node\n         */\n\n\n        this.trigger('deselect_node', {\n          'node': obj,\n          'selected': this._data.core.selected,\n          'event': e\n        });\n\n        if (!supress_event) {\n          this.trigger('changed', {\n            'action': 'deselect_node',\n            'node': obj,\n            'selected': this._data.core.selected,\n            'event': e\n          });\n        }\n      }\n    },\n\n    /**\n     * select all nodes in the tree\n     * @name select_all([supress_event])\n     * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n     * @trigger select_all.jstree, changed.jstree\n     */\n    select_all: function select_all(supress_event) {\n      var tmp = this._data.core.selected.concat([]),\n          i,\n          j;\n\n      this._data.core.selected = this._model.data[$.jstree.root].children_d.concat();\n\n      for (i = 0, j = this._data.core.selected.length; i < j; i++) {\n        if (this._model.data[this._data.core.selected[i]]) {\n          this._model.data[this._data.core.selected[i]].state.selected = true;\n        }\n      }\n\n      this.redraw(true);\n      /**\n       * triggered when all nodes are selected\n       * @event\n       * @name select_all.jstree\n       * @param {Array} selected the current selection\n       */\n\n      this.trigger('select_all', {\n        'selected': this._data.core.selected\n      });\n\n      if (!supress_event) {\n        this.trigger('changed', {\n          'action': 'select_all',\n          'selected': this._data.core.selected,\n          'old_selection': tmp\n        });\n      }\n    },\n\n    /**\n     * deselect all selected nodes\n     * @name deselect_all([supress_event])\n     * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n     * @trigger deselect_all.jstree, changed.jstree\n     */\n    deselect_all: function deselect_all(supress_event) {\n      var tmp = this._data.core.selected.concat([]),\n          i,\n          j;\n\n      for (i = 0, j = this._data.core.selected.length; i < j; i++) {\n        if (this._model.data[this._data.core.selected[i]]) {\n          this._model.data[this._data.core.selected[i]].state.selected = false;\n        }\n      }\n\n      this._data.core.selected = [];\n      this.element.find('.jstree-clicked').removeClass('jstree-clicked').parent().attr('aria-selected', false);\n      /**\n       * triggered when all nodes are deselected\n       * @event\n       * @name deselect_all.jstree\n       * @param {Object} node the previous selection\n       * @param {Array} selected the current selection\n       */\n\n      this.trigger('deselect_all', {\n        'selected': this._data.core.selected,\n        'node': tmp\n      });\n\n      if (!supress_event) {\n        this.trigger('changed', {\n          'action': 'deselect_all',\n          'selected': this._data.core.selected,\n          'old_selection': tmp\n        });\n      }\n    },\n\n    /**\n     * checks if a node is selected\n     * @name is_selected(obj)\n     * @param  {mixed}  obj\n     * @return {Boolean}\n     */\n    is_selected: function is_selected(obj) {\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      return obj.state.selected;\n    },\n\n    /**\n     * get an array of all selected nodes\n     * @name get_selected([full])\n     * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n     * @return {Array}\n     */\n    get_selected: function get_selected(full) {\n      return full ? $.map(this._data.core.selected, $.proxy(function (i) {\n        return this.get_node(i);\n      }, this)) : this._data.core.selected.slice();\n    },\n\n    /**\n     * get an array of all top level selected nodes (ignoring children of selected nodes)\n     * @name get_top_selected([full])\n     * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n     * @return {Array}\n     */\n    get_top_selected: function get_top_selected(full) {\n      var tmp = this.get_selected(true),\n          obj = {},\n          i,\n          j,\n          k,\n          l;\n\n      for (i = 0, j = tmp.length; i < j; i++) {\n        obj[tmp[i].id] = tmp[i];\n      }\n\n      for (i = 0, j = tmp.length; i < j; i++) {\n        for (k = 0, l = tmp[i].children_d.length; k < l; k++) {\n          if (obj[tmp[i].children_d[k]]) {\n            delete obj[tmp[i].children_d[k]];\n          }\n        }\n      }\n\n      tmp = [];\n\n      for (i in obj) {\n        if (obj.hasOwnProperty(i)) {\n          tmp.push(i);\n        }\n      }\n\n      return full ? $.map(tmp, $.proxy(function (i) {\n        return this.get_node(i);\n      }, this)) : tmp;\n    },\n\n    /**\n     * get an array of all bottom level selected nodes (ignoring selected parents)\n     * @name get_bottom_selected([full])\n     * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n     * @return {Array}\n     */\n    get_bottom_selected: function get_bottom_selected(full) {\n      var tmp = this.get_selected(true),\n          obj = [],\n          i,\n          j;\n\n      for (i = 0, j = tmp.length; i < j; i++) {\n        if (!tmp[i].children.length) {\n          obj.push(tmp[i].id);\n        }\n      }\n\n      return full ? $.map(obj, $.proxy(function (i) {\n        return this.get_node(i);\n      }, this)) : obj;\n    },\n\n    /**\n     * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.\n     * @name get_state()\n     * @private\n     * @return {Object}\n     */\n    get_state: function get_state() {\n      var state = {\n        'core': {\n          'open': [],\n          'scroll': {\n            'left': this.element.scrollLeft(),\n            'top': this.element.scrollTop()\n          },\n\n          /*!\n          'themes' : {\n          \t'name' : this.get_theme(),\n          \t'icons' : this._data.core.themes.icons,\n          \t'dots' : this._data.core.themes.dots\n          },\n          */\n          'selected': []\n        }\n      },\n          i;\n\n      for (i in this._model.data) {\n        if (this._model.data.hasOwnProperty(i)) {\n          if (i !== $.jstree.root) {\n            if (this._model.data[i].state.opened) {\n              state.core.open.push(i);\n            }\n\n            if (this._model.data[i].state.selected) {\n              state.core.selected.push(i);\n            }\n          }\n        }\n      }\n\n      return state;\n    },\n\n    /**\n     * sets the state of the tree. Used internally.\n     * @name set_state(state [, callback])\n     * @private\n     * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.\n     * @param {Function} callback an optional function to execute once the state is restored.\n     * @trigger set_state.jstree\n     */\n    set_state: function set_state(state, callback) {\n      if (state) {\n        if (state.core) {\n          var res, n, t, _this, i;\n\n          if (state.core.open) {\n            if (!$.isArray(state.core.open) || !state.core.open.length) {\n              delete state.core.open;\n              this.set_state(state, callback);\n            } else {\n              this._load_nodes(state.core.open, function (nodes) {\n                this.open_node(nodes, false, 0);\n                delete state.core.open;\n                this.set_state(state, callback);\n              });\n            }\n\n            return false;\n          }\n\n          if (state.core.scroll) {\n            if (state.core.scroll && state.core.scroll.left !== undefined) {\n              this.element.scrollLeft(state.core.scroll.left);\n            }\n\n            if (state.core.scroll && state.core.scroll.top !== undefined) {\n              this.element.scrollTop(state.core.scroll.top);\n            }\n\n            delete state.core.scroll;\n            this.set_state(state, callback);\n            return false;\n          }\n\n          if (state.core.selected) {\n            _this = this;\n            this.deselect_all();\n            $.each(state.core.selected, function (i, v) {\n              _this.select_node(v, false, true);\n            });\n            delete state.core.selected;\n            this.set_state(state, callback);\n            return false;\n          }\n\n          for (i in state) {\n            if (state.hasOwnProperty(i) && i !== \"core\" && $.inArray(i, this.settings.plugins) === -1) {\n              delete state[i];\n            }\n          }\n\n          if ($.isEmptyObject(state.core)) {\n            delete state.core;\n            this.set_state(state, callback);\n            return false;\n          }\n        }\n\n        if ($.isEmptyObject(state)) {\n          state = null;\n\n          if (callback) {\n            callback.call(this);\n          }\n          /**\n           * triggered when a `set_state` call completes\n           * @event\n           * @name set_state.jstree\n           */\n\n\n          this.trigger('set_state');\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * refreshes the tree - all nodes are reloaded with calls to `load_node`.\n     * @name refresh()\n     * @param {Boolean} skip_loading an option to skip showing the loading indicator\n     * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state\n     * @trigger refresh.jstree\n     */\n    refresh: function refresh(skip_loading, forget_state) {\n      this._data.core.state = forget_state === true ? {} : this.get_state();\n\n      if (forget_state && $.isFunction(forget_state)) {\n        this._data.core.state = forget_state.call(this, this._data.core.state);\n      }\n\n      this._cnt = 0;\n      this._model.data = {};\n      this._model.data[$.jstree.root] = {\n        id: $.jstree.root,\n        parent: null,\n        parents: [],\n        children: [],\n        children_d: [],\n        state: {\n          loaded: false\n        }\n      };\n      this._data.core.selected = [];\n      this._data.core.last_clicked = null;\n      this._data.core.focused = null;\n      var c = this.get_container_ul()[0].className;\n\n      if (!skip_loading) {\n        this.element.html(\"<\" + \"ul class='\" + c + \"' role='group'><\" + \"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j\" + this._id + \"_loading'><i class='jstree-icon jstree-ocl'></i><\" + \"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\n        this.element.attr('aria-activedescendant', 'j' + this._id + '_loading');\n      }\n\n      this.load_node($.jstree.root, function (o, s) {\n        if (s) {\n          this.get_container_ul()[0].className = c;\n\n          if (this._firstChild(this.get_container_ul()[0])) {\n            this.element.attr('aria-activedescendant', this._firstChild(this.get_container_ul()[0]).id);\n          }\n\n          this.set_state($.extend(true, {}, this._data.core.state), function () {\n            /**\n             * triggered when a `refresh` call completes\n             * @event\n             * @name refresh.jstree\n             */\n            this.trigger('refresh');\n          });\n        }\n\n        this._data.core.state = null;\n      });\n    },\n\n    /**\n     * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.\n     * @name refresh_node(obj)\n     * @param  {mixed} obj the node\n     * @trigger refresh_node.jstree\n     */\n    refresh_node: function refresh_node(obj) {\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      var opened = [],\n          to_load = [],\n          s = this._data.core.selected.concat([]);\n\n      to_load.push(obj.id);\n\n      if (obj.state.opened === true) {\n        opened.push(obj.id);\n      }\n\n      this.get_node(obj, true).find('.jstree-open').each(function () {\n        to_load.push(this.id);\n        opened.push(this.id);\n      });\n\n      this._load_nodes(to_load, $.proxy(function (nodes) {\n        this.open_node(opened, false, 0);\n        this.select_node(s);\n        /**\n         * triggered when a node is refreshed\n         * @event\n         * @name refresh_node.jstree\n         * @param {Object} node - the refreshed node\n         * @param {Array} nodes - an array of the IDs of the nodes that were reloaded\n         */\n\n        this.trigger('refresh_node', {\n          'node': obj,\n          'nodes': nodes\n        });\n      }, this), false, true);\n    },\n\n    /**\n     * set (change) the ID of a node\n     * @name set_id(obj, id)\n     * @param  {mixed} obj the node\n     * @param  {String} id the new ID\n     * @return {Boolean}\n     * @trigger set_id.jstree\n     */\n    set_id: function set_id(obj, id) {\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      var i,\n          j,\n          m = this._model.data,\n          old = obj.id;\n      id = id.toString(); // update parents (replace current ID with new one in children and children_d)\n\n      m[obj.parent].children[$.inArray(obj.id, m[obj.parent].children)] = id;\n\n      for (i = 0, j = obj.parents.length; i < j; i++) {\n        m[obj.parents[i]].children_d[$.inArray(obj.id, m[obj.parents[i]].children_d)] = id;\n      } // update children (replace current ID with new one in parent and parents)\n\n\n      for (i = 0, j = obj.children.length; i < j; i++) {\n        m[obj.children[i]].parent = id;\n      }\n\n      for (i = 0, j = obj.children_d.length; i < j; i++) {\n        m[obj.children_d[i]].parents[$.inArray(obj.id, m[obj.children_d[i]].parents)] = id;\n      }\n\n      i = $.inArray(obj.id, this._data.core.selected);\n\n      if (i !== -1) {\n        this._data.core.selected[i] = id;\n      } // update model and obj itself (obj.id, this._model.data[KEY])\n\n\n      i = this.get_node(obj.id, true);\n\n      if (i) {\n        i.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');\n\n        if (this.element.attr('aria-activedescendant') === obj.id) {\n          this.element.attr('aria-activedescendant', id);\n        }\n      }\n\n      delete m[obj.id];\n      obj.id = id;\n      obj.li_attr.id = id;\n      m[id] = obj;\n      /**\n       * triggered when a node id value is changed\n       * @event\n       * @name set_id.jstree\n       * @param {Object} node\n       * @param {String} old the old id\n       */\n\n      this.trigger('set_id', {\n        \"node\": obj,\n        \"new\": obj.id,\n        \"old\": old\n      });\n      return true;\n    },\n\n    /**\n     * get the text value of a node\n     * @name get_text(obj)\n     * @param  {mixed} obj the node\n     * @return {String}\n     */\n    get_text: function get_text(obj) {\n      obj = this.get_node(obj);\n      return !obj || obj.id === $.jstree.root ? false : obj.text;\n    },\n\n    /**\n     * set the text value of a node. Used internally, please use `rename_node(obj, val)`.\n     * @private\n     * @name set_text(obj, val)\n     * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes\n     * @param  {String} val the new text value\n     * @return {Boolean}\n     * @trigger set_text.jstree\n     */\n    set_text: function set_text(obj, val) {\n      var t1, t2;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.set_text(obj[t1], val);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      obj.text = val;\n\n      if (this.get_node(obj, true).length) {\n        this.redraw_node(obj.id);\n      }\n      /**\n       * triggered when a node text value is changed\n       * @event\n       * @name set_text.jstree\n       * @param {Object} obj\n       * @param {String} text the new value\n       */\n\n\n      this.trigger('set_text', {\n        \"obj\": obj,\n        \"text\": val\n      });\n      return true;\n    },\n\n    /**\n     * gets a JSON representation of a node (or the whole tree)\n     * @name get_json([obj, options])\n     * @param  {mixed} obj\n     * @param  {Object} options\n     * @param  {Boolean} options.no_state do not return state information\n     * @param  {Boolean} options.no_id do not return ID\n     * @param  {Boolean} options.no_children do not include children\n     * @param  {Boolean} options.no_data do not include node data\n     * @param  {Boolean} options.no_li_attr do not include LI attributes\n     * @param  {Boolean} options.no_a_attr do not include A attributes\n     * @param  {Boolean} options.flat return flat JSON instead of nested\n     * @return {Object}\n     */\n    get_json: function get_json(obj, options, flat) {\n      obj = this.get_node(obj || $.jstree.root);\n\n      if (!obj) {\n        return false;\n      }\n\n      if (options && options.flat && !flat) {\n        flat = [];\n      }\n\n      var tmp = {\n        'id': obj.id,\n        'text': obj.text,\n        'icon': this.get_icon(obj),\n        'li_attr': $.extend(true, {}, obj.li_attr),\n        'a_attr': $.extend(true, {}, obj.a_attr),\n        'state': {},\n        'data': options && options.no_data ? false : $.extend(true, {}, obj.data) //( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),\n\n      },\n          i,\n          j;\n\n      if (options && options.flat) {\n        tmp.parent = obj.parent;\n      } else {\n        tmp.children = [];\n      }\n\n      if (!options || !options.no_state) {\n        for (i in obj.state) {\n          if (obj.state.hasOwnProperty(i)) {\n            tmp.state[i] = obj.state[i];\n          }\n        }\n      } else {\n        delete tmp.state;\n      }\n\n      if (options && options.no_li_attr) {\n        delete tmp.li_attr;\n      }\n\n      if (options && options.no_a_attr) {\n        delete tmp.a_attr;\n      }\n\n      if (options && options.no_id) {\n        delete tmp.id;\n\n        if (tmp.li_attr && tmp.li_attr.id) {\n          delete tmp.li_attr.id;\n        }\n\n        if (tmp.a_attr && tmp.a_attr.id) {\n          delete tmp.a_attr.id;\n        }\n      }\n\n      if (options && options.flat && obj.id !== $.jstree.root) {\n        flat.push(tmp);\n      }\n\n      if (!options || !options.no_children) {\n        for (i = 0, j = obj.children.length; i < j; i++) {\n          if (options && options.flat) {\n            this.get_json(obj.children[i], options, flat);\n          } else {\n            tmp.children.push(this.get_json(obj.children[i], options));\n          }\n        }\n      }\n\n      return options && options.flat ? flat : obj.id === $.jstree.root ? tmp.children : tmp;\n    },\n\n    /**\n     * create a new node (do not confuse with load_node)\n     * @name create_node([par, node, pos, callback, is_loaded])\n     * @param  {mixed}   par       the parent node (to create a root node use either \"#\" (string) or `null`)\n     * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)\n     * @param  {mixed}   pos       the index at which to insert the node, \"first\" and \"last\" are also supported, default is \"last\"\n     * @param  {Function} callback a function to be called once the node is created\n     * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded\n     * @return {String}            the ID of the newly create node\n     * @trigger model.jstree, create_node.jstree\n     */\n    create_node: function create_node(par, node, pos, callback, is_loaded) {\n      if (par === null) {\n        par = $.jstree.root;\n      }\n\n      par = this.get_node(par);\n\n      if (!par) {\n        return false;\n      }\n\n      pos = pos === undefined ? \"last\" : pos;\n\n      if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n        return this.load_node(par, function () {\n          this.create_node(par, node, pos, callback, true);\n        });\n      }\n\n      if (!node) {\n        node = {\n          \"text\": this.get_string('New node')\n        };\n      }\n\n      if (typeof node === \"string\") {\n        node = {\n          \"text\": node\n        };\n      }\n\n      if (node.text === undefined) {\n        node.text = this.get_string('New node');\n      }\n\n      var tmp, dpc, i, j;\n\n      if (par.id === $.jstree.root) {\n        if (pos === \"before\") {\n          pos = \"first\";\n        }\n\n        if (pos === \"after\") {\n          pos = \"last\";\n        }\n      }\n\n      switch (pos) {\n        case \"before\":\n          tmp = this.get_node(par.parent);\n          pos = $.inArray(par.id, tmp.children);\n          par = tmp;\n          break;\n\n        case \"after\":\n          tmp = this.get_node(par.parent);\n          pos = $.inArray(par.id, tmp.children) + 1;\n          par = tmp;\n          break;\n\n        case \"inside\":\n        case \"first\":\n          pos = 0;\n          break;\n\n        case \"last\":\n          pos = par.children.length;\n          break;\n\n        default:\n          if (!pos) {\n            pos = 0;\n          }\n\n          break;\n      }\n\n      if (pos > par.children.length) {\n        pos = par.children.length;\n      }\n\n      if (!node.id) {\n        node.id = true;\n      }\n\n      if (!this.check(\"create_node\", node, par, pos)) {\n        this.settings.core.error.call(this, this._data.core.last_error);\n        return false;\n      }\n\n      if (node.id === true) {\n        delete node.id;\n      }\n\n      node = this._parse_model_from_json(node, par.id, par.parents.concat());\n\n      if (!node) {\n        return false;\n      }\n\n      tmp = this.get_node(node);\n      dpc = [];\n      dpc.push(node);\n      dpc = dpc.concat(tmp.children_d);\n      this.trigger('model', {\n        \"nodes\": dpc,\n        \"parent\": par.id\n      });\n      par.children_d = par.children_d.concat(dpc);\n\n      for (i = 0, j = par.parents.length; i < j; i++) {\n        this._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);\n      }\n\n      node = tmp;\n      tmp = [];\n\n      for (i = 0, j = par.children.length; i < j; i++) {\n        tmp[i >= pos ? i + 1 : i] = par.children[i];\n      }\n\n      tmp[pos] = node.id;\n      par.children = tmp;\n      this.redraw_node(par, true);\n\n      if (callback) {\n        callback.call(this, this.get_node(node));\n      }\n      /**\n       * triggered when a node is created\n       * @event\n       * @name create_node.jstree\n       * @param {Object} node\n       * @param {String} parent the parent's ID\n       * @param {Number} position the position of the new node among the parent's children\n       */\n\n\n      this.trigger('create_node', {\n        \"node\": this.get_node(node),\n        \"parent\": par.id,\n        \"position\": pos\n      });\n      return node.id;\n    },\n\n    /**\n     * set the text value of a node\n     * @name rename_node(obj, val)\n     * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name\n     * @param  {String} val the new text value\n     * @return {Boolean}\n     * @trigger rename_node.jstree\n     */\n    rename_node: function rename_node(obj, val) {\n      var t1, t2, old;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.rename_node(obj[t1], val);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      old = obj.text;\n\n      if (!this.check(\"rename_node\", obj, this.get_parent(obj), val)) {\n        this.settings.core.error.call(this, this._data.core.last_error);\n        return false;\n      }\n\n      this.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))\n\n      /**\n       * triggered when a node is renamed\n       * @event\n       * @name rename_node.jstree\n       * @param {Object} node\n       * @param {String} text the new value\n       * @param {String} old the old value\n       */\n\n      this.trigger('rename_node', {\n        \"node\": obj,\n        \"text\": val,\n        \"old\": old\n      });\n      return true;\n    },\n\n    /**\n     * remove a node\n     * @name delete_node(obj)\n     * @param  {mixed} obj the node, you can pass an array to delete multiple nodes\n     * @return {Boolean}\n     * @trigger delete_node.jstree, changed.jstree\n     */\n    delete_node: function delete_node(obj) {\n      var t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.delete_node(obj[t1]);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      par = this.get_node(obj.parent);\n      pos = $.inArray(obj.id, par.children);\n      c = false;\n\n      if (!this.check(\"delete_node\", obj, par, pos)) {\n        this.settings.core.error.call(this, this._data.core.last_error);\n        return false;\n      }\n\n      if (pos !== -1) {\n        par.children = $.vakata.array_remove(par.children, pos);\n      }\n\n      tmp = obj.children_d.concat([]);\n      tmp.push(obj.id);\n\n      for (i = 0, j = obj.parents.length; i < j; i++) {\n        this._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\n          return $.inArray(v, tmp) === -1;\n        });\n      }\n\n      for (k = 0, l = tmp.length; k < l; k++) {\n        if (this._model.data[tmp[k]].state.selected) {\n          c = true;\n          break;\n        }\n      }\n\n      if (c) {\n        this._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\n          return $.inArray(v, tmp) === -1;\n        });\n      }\n      /**\n       * triggered when a node is deleted\n       * @event\n       * @name delete_node.jstree\n       * @param {Object} node\n       * @param {String} parent the parent's ID\n       */\n\n\n      this.trigger('delete_node', {\n        \"node\": obj,\n        \"parent\": par.id\n      });\n\n      if (c) {\n        this.trigger('changed', {\n          'action': 'delete_node',\n          'node': obj,\n          'selected': this._data.core.selected,\n          'parent': par.id\n        });\n      }\n\n      for (k = 0, l = tmp.length; k < l; k++) {\n        delete this._model.data[tmp[k]];\n      }\n\n      if ($.inArray(this._data.core.focused, tmp) !== -1) {\n        this._data.core.focused = null;\n        top = this.element[0].scrollTop;\n        lft = this.element[0].scrollLeft;\n\n        if (par.id === $.jstree.root) {\n          if (this._model.data[$.jstree.root].children[0]) {\n            this.get_node(this._model.data[$.jstree.root].children[0], true).children('.jstree-anchor').focus();\n          }\n        } else {\n          this.get_node(par, true).children('.jstree-anchor').focus();\n        }\n\n        this.element[0].scrollTop = top;\n        this.element[0].scrollLeft = lft;\n      }\n\n      this.redraw_node(par, true);\n      return true;\n    },\n\n    /**\n     * check if an operation is premitted on the tree. Used internally.\n     * @private\n     * @name check(chk, obj, par, pos)\n     * @param  {String} chk the operation to check, can be \"create_node\", \"rename_node\", \"delete_node\", \"copy_node\" or \"move_node\"\n     * @param  {mixed} obj the node\n     * @param  {mixed} par the parent\n     * @param  {mixed} pos the position to insert at, or if \"rename_node\" - the new name\n     * @param  {mixed} more some various additional information, for example if a \"move_node\" operations is triggered by DND this will be the hovered node\n     * @return {Boolean}\n     */\n    check: function check(chk, obj, par, pos, more) {\n      obj = obj && obj.id ? obj : this.get_node(obj);\n      par = par && par.id ? par : this.get_node(par);\n      var tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj,\n          chc = this.settings.core.check_callback;\n\n      if (chk === \"move_node\" || chk === \"copy_node\") {\n        if ((!more || !more.is_multi) && (obj.id === par.id || chk === \"move_node\" && $.inArray(obj.id, par.children) === pos || $.inArray(par.id, obj.children_d) !== -1)) {\n          this._data.core.last_error = {\n            'error': 'check',\n            'plugin': 'core',\n            'id': 'core_01',\n            'reason': 'Moving parent inside child',\n            'data': JSON.stringify({\n              'chk': chk,\n              'pos': pos,\n              'obj': obj && obj.id ? obj.id : false,\n              'par': par && par.id ? par.id : false\n            })\n          };\n          return false;\n        }\n      }\n\n      if (tmp && tmp.data) {\n        tmp = tmp.data;\n      }\n\n      if (tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {\n        if (tmp.functions[chk] === false) {\n          this._data.core.last_error = {\n            'error': 'check',\n            'plugin': 'core',\n            'id': 'core_02',\n            'reason': 'Node data prevents function: ' + chk,\n            'data': JSON.stringify({\n              'chk': chk,\n              'pos': pos,\n              'obj': obj && obj.id ? obj.id : false,\n              'par': par && par.id ? par.id : false\n            })\n          };\n        }\n\n        return tmp.functions[chk];\n      }\n\n      if (chc === false || $.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false || chc && chc[chk] === false) {\n        this._data.core.last_error = {\n          'error': 'check',\n          'plugin': 'core',\n          'id': 'core_03',\n          'reason': 'User config for core.check_callback prevents function: ' + chk,\n          'data': JSON.stringify({\n            'chk': chk,\n            'pos': pos,\n            'obj': obj && obj.id ? obj.id : false,\n            'par': par && par.id ? par.id : false\n          })\n        };\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * get the last error\n     * @name last_error()\n     * @return {Object}\n     */\n    last_error: function last_error() {\n      return this._data.core.last_error;\n    },\n\n    /**\n     * move a node to a new parent\n     * @name move_node(obj, par [, pos, callback, is_loaded])\n     * @param  {mixed} obj the node to move, pass an array to move multiple nodes\n     * @param  {mixed} par the new parent\n     * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\n     * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\n     * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\n     * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\n     * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\n     * @trigger move_node.jstree\n     */\n    move_node: function move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin) {\n      var t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;\n      par = this.get_node(par);\n      pos = pos === undefined ? 0 : pos;\n\n      if (!par) {\n        return false;\n      }\n\n      if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n        return this.load_node(par, function () {\n          this.move_node(obj, par, pos, callback, true, false, origin);\n        });\n      }\n\n      if ($.isArray(obj)) {\n        if (obj.length === 1) {\n          obj = obj[0];\n        } else {\n          //obj = obj.slice();\n          for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n            if (tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin)) {\n              par = tmp;\n              pos = \"after\";\n            }\n          }\n\n          this.redraw();\n          return true;\n        }\n      }\n\n      obj = obj && obj.id ? obj : this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      old_par = (obj.parent || $.jstree.root).toString();\n      new_par = !pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root ? par : this.get_node(par.parent);\n      old_ins = origin ? origin : this._model.data[obj.id] ? this : $.jstree.reference(obj.id);\n      is_multi = !old_ins || !old_ins._id || this._id !== old_ins._id;\n      old_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1;\n\n      if (old_ins && old_ins._id) {\n        obj = old_ins._model.data[obj.id];\n      }\n\n      if (is_multi) {\n        if (tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin)) {\n          if (old_ins) {\n            old_ins.delete_node(obj);\n          }\n\n          return tmp;\n        }\n\n        return false;\n      } //var m = this._model.data;\n\n\n      if (par.id === $.jstree.root) {\n        if (pos === \"before\") {\n          pos = \"first\";\n        }\n\n        if (pos === \"after\") {\n          pos = \"last\";\n        }\n      }\n\n      switch (pos) {\n        case \"before\":\n          pos = $.inArray(par.id, new_par.children);\n          break;\n\n        case \"after\":\n          pos = $.inArray(par.id, new_par.children) + 1;\n          break;\n\n        case \"inside\":\n        case \"first\":\n          pos = 0;\n          break;\n\n        case \"last\":\n          pos = new_par.children.length;\n          break;\n\n        default:\n          if (!pos) {\n            pos = 0;\n          }\n\n          break;\n      }\n\n      if (pos > new_par.children.length) {\n        pos = new_par.children.length;\n      }\n\n      if (!this.check(\"move_node\", obj, new_par, pos, {\n        'core': true,\n        'origin': origin,\n        'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,\n        'is_foreign': !old_ins || !old_ins._id\n      })) {\n        this.settings.core.error.call(this, this._data.core.last_error);\n        return false;\n      }\n\n      if (obj.parent === new_par.id) {\n        dpc = new_par.children.concat();\n        tmp = $.inArray(obj.id, dpc);\n\n        if (tmp !== -1) {\n          dpc = $.vakata.array_remove(dpc, tmp);\n\n          if (pos > tmp) {\n            pos--;\n          }\n        }\n\n        tmp = [];\n\n        for (i = 0, j = dpc.length; i < j; i++) {\n          tmp[i >= pos ? i + 1 : i] = dpc[i];\n        }\n\n        tmp[pos] = obj.id;\n        new_par.children = tmp;\n\n        this._node_changed(new_par.id);\n\n        this.redraw(new_par.id === $.jstree.root);\n      } else {\n        // clean old parent and up\n        tmp = obj.children_d.concat();\n        tmp.push(obj.id);\n\n        for (i = 0, j = obj.parents.length; i < j; i++) {\n          dpc = [];\n          p = old_ins._model.data[obj.parents[i]].children_d;\n\n          for (k = 0, l = p.length; k < l; k++) {\n            if ($.inArray(p[k], tmp) === -1) {\n              dpc.push(p[k]);\n            }\n          }\n\n          old_ins._model.data[obj.parents[i]].children_d = dpc;\n        }\n\n        old_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id); // insert into new parent and up\n\n        for (i = 0, j = new_par.parents.length; i < j; i++) {\n          this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);\n        }\n\n        dpc = [];\n\n        for (i = 0, j = new_par.children.length; i < j; i++) {\n          dpc[i >= pos ? i + 1 : i] = new_par.children[i];\n        }\n\n        dpc[pos] = obj.id;\n        new_par.children = dpc;\n        new_par.children_d.push(obj.id);\n        new_par.children_d = new_par.children_d.concat(obj.children_d); // update object\n\n        obj.parent = new_par.id;\n        tmp = new_par.parents.concat();\n        tmp.unshift(new_par.id);\n        p = obj.parents.length;\n        obj.parents = tmp; // update object children\n\n        tmp = tmp.concat();\n\n        for (i = 0, j = obj.children_d.length; i < j; i++) {\n          this._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0, p * -1);\n          Array.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);\n        }\n\n        if (old_par === $.jstree.root || new_par.id === $.jstree.root) {\n          this._model.force_full_redraw = true;\n        }\n\n        if (!this._model.force_full_redraw) {\n          this._node_changed(old_par);\n\n          this._node_changed(new_par.id);\n        }\n\n        if (!skip_redraw) {\n          this.redraw();\n        }\n      }\n\n      if (callback) {\n        callback.call(this, obj, new_par, pos);\n      }\n      /**\n       * triggered when a node is moved\n       * @event\n       * @name move_node.jstree\n       * @param {Object} node\n       * @param {String} parent the parent's ID\n       * @param {Number} position the position of the node among the parent's children\n       * @param {String} old_parent the old parent of the node\n       * @param {Number} old_position the old position of the node\n       * @param {Boolean} is_multi do the node and new parent belong to different instances\n       * @param {jsTree} old_instance the instance the node came from\n       * @param {jsTree} new_instance the instance of the new parent\n       */\n\n\n      this.trigger('move_node', {\n        \"node\": obj,\n        \"parent\": new_par.id,\n        \"position\": pos,\n        \"old_parent\": old_par,\n        \"old_position\": old_pos,\n        'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,\n        'is_foreign': !old_ins || !old_ins._id,\n        'old_instance': old_ins,\n        'new_instance': this\n      });\n      return obj.id;\n    },\n\n    /**\n     * copy a node to a new parent\n     * @name copy_node(obj, par [, pos, callback, is_loaded])\n     * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes\n     * @param  {mixed} par the new parent\n     * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\n     * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\n     * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\n     * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\n     * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\n     * @trigger model.jstree copy_node.jstree\n     */\n    copy_node: function copy_node(obj, par, pos, callback, is_loaded, skip_redraw, origin) {\n      var t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;\n      par = this.get_node(par);\n      pos = pos === undefined ? 0 : pos;\n\n      if (!par) {\n        return false;\n      }\n\n      if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n        return this.load_node(par, function () {\n          this.copy_node(obj, par, pos, callback, true, false, origin);\n        });\n      }\n\n      if ($.isArray(obj)) {\n        if (obj.length === 1) {\n          obj = obj[0];\n        } else {\n          //obj = obj.slice();\n          for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n            if (tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin)) {\n              par = tmp;\n              pos = \"after\";\n            }\n          }\n\n          this.redraw();\n          return true;\n        }\n      }\n\n      obj = obj && obj.id ? obj : this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      old_par = (obj.parent || $.jstree.root).toString();\n      new_par = !pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root ? par : this.get_node(par.parent);\n      old_ins = origin ? origin : this._model.data[obj.id] ? this : $.jstree.reference(obj.id);\n      is_multi = !old_ins || !old_ins._id || this._id !== old_ins._id;\n\n      if (old_ins && old_ins._id) {\n        obj = old_ins._model.data[obj.id];\n      }\n\n      if (par.id === $.jstree.root) {\n        if (pos === \"before\") {\n          pos = \"first\";\n        }\n\n        if (pos === \"after\") {\n          pos = \"last\";\n        }\n      }\n\n      switch (pos) {\n        case \"before\":\n          pos = $.inArray(par.id, new_par.children);\n          break;\n\n        case \"after\":\n          pos = $.inArray(par.id, new_par.children) + 1;\n          break;\n\n        case \"inside\":\n        case \"first\":\n          pos = 0;\n          break;\n\n        case \"last\":\n          pos = new_par.children.length;\n          break;\n\n        default:\n          if (!pos) {\n            pos = 0;\n          }\n\n          break;\n      }\n\n      if (pos > new_par.children.length) {\n        pos = new_par.children.length;\n      }\n\n      if (!this.check(\"copy_node\", obj, new_par, pos, {\n        'core': true,\n        'origin': origin,\n        'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,\n        'is_foreign': !old_ins || !old_ins._id\n      })) {\n        this.settings.core.error.call(this, this._data.core.last_error);\n        return false;\n      }\n\n      node = old_ins ? old_ins.get_json(obj, {\n        no_id: true,\n        no_data: true,\n        no_state: true\n      }) : obj;\n\n      if (!node) {\n        return false;\n      }\n\n      if (node.id === true) {\n        delete node.id;\n      }\n\n      node = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());\n\n      if (!node) {\n        return false;\n      }\n\n      tmp = this.get_node(node);\n\n      if (obj && obj.state && obj.state.loaded === false) {\n        tmp.state.loaded = false;\n      }\n\n      dpc = [];\n      dpc.push(node);\n      dpc = dpc.concat(tmp.children_d);\n      this.trigger('model', {\n        \"nodes\": dpc,\n        \"parent\": new_par.id\n      }); // insert into new parent and up\n\n      for (i = 0, j = new_par.parents.length; i < j; i++) {\n        this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);\n      }\n\n      dpc = [];\n\n      for (i = 0, j = new_par.children.length; i < j; i++) {\n        dpc[i >= pos ? i + 1 : i] = new_par.children[i];\n      }\n\n      dpc[pos] = tmp.id;\n      new_par.children = dpc;\n      new_par.children_d.push(tmp.id);\n      new_par.children_d = new_par.children_d.concat(tmp.children_d);\n\n      if (new_par.id === $.jstree.root) {\n        this._model.force_full_redraw = true;\n      }\n\n      if (!this._model.force_full_redraw) {\n        this._node_changed(new_par.id);\n      }\n\n      if (!skip_redraw) {\n        this.redraw(new_par.id === $.jstree.root);\n      }\n\n      if (callback) {\n        callback.call(this, tmp, new_par, pos);\n      }\n      /**\n       * triggered when a node is copied\n       * @event\n       * @name copy_node.jstree\n       * @param {Object} node the copied node\n       * @param {Object} original the original node\n       * @param {String} parent the parent's ID\n       * @param {Number} position the position of the node among the parent's children\n       * @param {String} old_parent the old parent of the node\n       * @param {Number} old_position the position of the original node\n       * @param {Boolean} is_multi do the node and new parent belong to different instances\n       * @param {jsTree} old_instance the instance the node came from\n       * @param {jsTree} new_instance the instance of the new parent\n       */\n\n\n      this.trigger('copy_node', {\n        \"node\": tmp,\n        \"original\": obj,\n        \"parent\": new_par.id,\n        \"position\": pos,\n        \"old_parent\": old_par,\n        \"old_position\": old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1,\n        'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,\n        'is_foreign': !old_ins || !old_ins._id,\n        'old_instance': old_ins,\n        'new_instance': this\n      });\n      return tmp.id;\n    },\n\n    /**\n     * cut a node (a later call to `paste(obj)` would move the node)\n     * @name cut(obj)\n     * @param  {mixed} obj multiple objects can be passed using an array\n     * @trigger cut.jstree\n     */\n    cut: function cut(obj) {\n      if (!obj) {\n        obj = this._data.core.selected.concat();\n      }\n\n      if (!$.isArray(obj)) {\n        obj = [obj];\n      }\n\n      if (!obj.length) {\n        return false;\n      }\n\n      var tmp = [],\n          o,\n          t1,\n          t2;\n\n      for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n        o = this.get_node(obj[t1]);\n\n        if (o && o.id && o.id !== $.jstree.root) {\n          tmp.push(o);\n        }\n      }\n\n      if (!tmp.length) {\n        return false;\n      }\n\n      ccp_node = tmp;\n      ccp_inst = this;\n      ccp_mode = 'move_node';\n      /**\n       * triggered when nodes are added to the buffer for moving\n       * @event\n       * @name cut.jstree\n       * @param {Array} node\n       */\n\n      this.trigger('cut', {\n        \"node\": obj\n      });\n    },\n\n    /**\n     * copy a node (a later call to `paste(obj)` would copy the node)\n     * @name copy(obj)\n     * @param  {mixed} obj multiple objects can be passed using an array\n     * @trigger copy.jstree\n     */\n    copy: function copy(obj) {\n      if (!obj) {\n        obj = this._data.core.selected.concat();\n      }\n\n      if (!$.isArray(obj)) {\n        obj = [obj];\n      }\n\n      if (!obj.length) {\n        return false;\n      }\n\n      var tmp = [],\n          o,\n          t1,\n          t2;\n\n      for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n        o = this.get_node(obj[t1]);\n\n        if (o && o.id && o.id !== $.jstree.root) {\n          tmp.push(o);\n        }\n      }\n\n      if (!tmp.length) {\n        return false;\n      }\n\n      ccp_node = tmp;\n      ccp_inst = this;\n      ccp_mode = 'copy_node';\n      /**\n       * triggered when nodes are added to the buffer for copying\n       * @event\n       * @name copy.jstree\n       * @param {Array} node\n       */\n\n      this.trigger('copy', {\n        \"node\": obj\n      });\n    },\n\n    /**\n     * get the current buffer (any nodes that are waiting for a paste operation)\n     * @name get_buffer()\n     * @return {Object} an object consisting of `mode` (\"copy_node\" or \"move_node\"), `node` (an array of objects) and `inst` (the instance)\n     */\n    get_buffer: function get_buffer() {\n      return {\n        'mode': ccp_mode,\n        'node': ccp_node,\n        'inst': ccp_inst\n      };\n    },\n\n    /**\n     * check if there is something in the buffer to paste\n     * @name can_paste()\n     * @return {Boolean}\n     */\n    can_paste: function can_paste() {\n      return ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];\n    },\n\n    /**\n     * copy or move the previously cut or copied nodes to a new parent\n     * @name paste(obj [, pos])\n     * @param  {mixed} obj the new parent\n     * @param  {mixed} pos the position to insert at (besides integer, \"first\" and \"last\" are supported), defaults to integer `0`\n     * @trigger paste.jstree\n     */\n    paste: function paste(obj, pos) {\n      obj = this.get_node(obj);\n\n      if (!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) {\n        return false;\n      }\n\n      if (this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {\n        /**\n         * triggered when paste is invoked\n         * @event\n         * @name paste.jstree\n         * @param {String} parent the ID of the receiving node\n         * @param {Array} node the nodes in the buffer\n         * @param {String} mode the performed operation - \"copy_node\" or \"move_node\"\n         */\n        this.trigger('paste', {\n          \"parent\": obj.id,\n          \"node\": ccp_node,\n          \"mode\": ccp_mode\n        });\n      }\n\n      ccp_node = false;\n      ccp_mode = false;\n      ccp_inst = false;\n    },\n\n    /**\n     * clear the buffer of previously copied or cut nodes\n     * @name clear_buffer()\n     * @trigger clear_buffer.jstree\n     */\n    clear_buffer: function clear_buffer() {\n      ccp_node = false;\n      ccp_mode = false;\n      ccp_inst = false;\n      /**\n       * triggered when the copy / cut buffer is cleared\n       * @event\n       * @name clear_buffer.jstree\n       */\n\n      this.trigger('clear_buffer');\n    },\n\n    /**\n     * put a node in edit mode (input field to rename the node)\n     * @name edit(obj [, default_text, callback])\n     * @param  {mixed} obj\n     * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)\n     * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise) and a boolean indicating if the user cancelled the edit. You can access the node's title using .text\n     */\n    edit: function edit(obj, default_text, callback) {\n      var rtl,\n          w,\n          a,\n          s,\n          t,\n          h1,\n          h2,\n          fn,\n          tmp,\n          cancel = false;\n      obj = this.get_node(obj);\n\n      if (!obj) {\n        return false;\n      }\n\n      if (this.settings.core.check_callback === false) {\n        this._data.core.last_error = {\n          'error': 'check',\n          'plugin': 'core',\n          'id': 'core_07',\n          'reason': 'Could not edit node because of check_callback'\n        };\n        this.settings.core.error.call(this, this._data.core.last_error);\n        return false;\n      }\n\n      tmp = obj;\n      default_text = typeof default_text === 'string' ? default_text : obj.text;\n      this.set_text(obj, \"\");\n      obj = this._open_to(obj);\n      tmp.text = default_text;\n      rtl = this._data.core.rtl;\n      w = this.element.width();\n      this._data.core.focused = tmp.id;\n      a = obj.children('.jstree-anchor').focus();\n      s = $('<span>');\n      /*!\n      oi = obj.children(\"i:visible\"),\n      ai = a.children(\"i:visible\"),\n      w1 = oi.width() * oi.length,\n      w2 = ai.width() * ai.length,\n      */\n\n      t = default_text;\n      h1 = $(\"<\" + \"div />\", {\n        css: {\n          \"position\": \"absolute\",\n          \"top\": \"-200px\",\n          \"left\": rtl ? \"0px\" : \"-1000px\",\n          \"visibility\": \"hidden\"\n        }\n      }).appendTo(\"body\");\n      h2 = $(\"<\" + \"input />\", {\n        \"value\": t,\n        \"class\": \"jstree-rename-input\",\n        // \"size\" : t.length,\n        \"css\": {\n          \"padding\": \"0\",\n          \"border\": \"1px solid silver\",\n          \"box-sizing\": \"border-box\",\n          \"display\": \"inline-block\",\n          \"height\": this._data.core.li_height + \"px\",\n          \"lineHeight\": this._data.core.li_height + \"px\",\n          \"width\": \"150px\" // will be set a bit further down\n\n        },\n        \"blur\": $.proxy(function (e) {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          var i = s.children(\".jstree-rename-input\"),\n              v = i.val(),\n              f = this.settings.core.force_text,\n              nv;\n\n          if (v === \"\") {\n            v = t;\n          }\n\n          h1.remove();\n          s.replaceWith(a);\n          s.remove();\n          t = f ? t : $('<div></div>').append($.parseHTML(t)).html();\n          this.set_text(obj, t);\n          nv = !!this.rename_node(obj, f ? $('<div></div>').text(v).text() : $('<div></div>').append($.parseHTML(v)).html());\n\n          if (!nv) {\n            this.set_text(obj, t); // move this up? and fix #483\n          }\n\n          this._data.core.focused = tmp.id;\n          setTimeout($.proxy(function () {\n            var node = this.get_node(tmp.id, true);\n\n            if (node.length) {\n              this._data.core.focused = tmp.id;\n              node.children('.jstree-anchor').focus();\n            }\n          }, this), 0);\n\n          if (callback) {\n            callback.call(this, tmp, nv, cancel);\n          }\n\n          h2 = null;\n        }, this),\n        \"keydown\": function keydown(e) {\n          var key = e.which;\n\n          if (key === 27) {\n            cancel = true;\n            this.value = t;\n          }\n\n          if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\n            e.stopImmediatePropagation();\n          }\n\n          if (key === 27 || key === 13) {\n            e.preventDefault();\n            this.blur();\n          }\n        },\n        \"click\": function click(e) {\n          e.stopImmediatePropagation();\n        },\n        \"mousedown\": function mousedown(e) {\n          e.stopImmediatePropagation();\n        },\n        \"keyup\": function keyup(e) {\n          h2.width(Math.min(h1.text(\"pW\" + this.value).width(), w));\n        },\n        \"keypress\": function keypress(e) {\n          if (e.which === 13) {\n            return false;\n          }\n        }\n      });\n      fn = {\n        fontFamily: a.css('fontFamily') || '',\n        fontSize: a.css('fontSize') || '',\n        fontWeight: a.css('fontWeight') || '',\n        fontStyle: a.css('fontStyle') || '',\n        fontStretch: a.css('fontStretch') || '',\n        fontVariant: a.css('fontVariant') || '',\n        letterSpacing: a.css('letterSpacing') || '',\n        wordSpacing: a.css('wordSpacing') || ''\n      };\n      s.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);\n      a.replaceWith(s);\n      h1.css(fn);\n      h2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(), w))[0].select();\n      $(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function (e) {\n        if (h2 && e.target !== h2) {\n          $(h2).blur();\n        }\n      });\n    },\n\n    /**\n     * changes the theme\n     * @name set_theme(theme_name [, theme_url])\n     * @param {String} theme_name the name of the new theme to apply\n     * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.\n     * @trigger set_theme.jstree\n     */\n    set_theme: function set_theme(theme_name, theme_url) {\n      if (!theme_name) {\n        return false;\n      }\n\n      if (theme_url === true) {\n        var dir = this.settings.core.themes.dir;\n\n        if (!dir) {\n          dir = $.jstree.path + '/themes';\n        }\n\n        theme_url = dir + '/' + theme_name + '/style.css';\n      }\n\n      if (theme_url && $.inArray(theme_url, themes_loaded) === -1) {\n        $('head').append('<' + 'link rel=\"stylesheet\" href=\"' + theme_url + '\" type=\"text/css\" />');\n        themes_loaded.push(theme_url);\n      }\n\n      if (this._data.core.themes.name) {\n        this.element.removeClass('jstree-' + this._data.core.themes.name);\n      }\n\n      this._data.core.themes.name = theme_name;\n      this.element.addClass('jstree-' + theme_name);\n      this.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass']('jstree-' + theme_name + '-responsive');\n      /**\n       * triggered when a theme is set\n       * @event\n       * @name set_theme.jstree\n       * @param {String} theme the new theme\n       */\n\n      this.trigger('set_theme', {\n        'theme': theme_name\n      });\n    },\n\n    /**\n     * gets the name of the currently applied theme name\n     * @name get_theme()\n     * @return {String}\n     */\n    get_theme: function get_theme() {\n      return this._data.core.themes.name;\n    },\n\n    /**\n     * changes the theme variant (if the theme has variants)\n     * @name set_theme_variant(variant_name)\n     * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)\n     */\n    set_theme_variant: function set_theme_variant(variant_name) {\n      if (this._data.core.themes.variant) {\n        this.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\n      }\n\n      this._data.core.themes.variant = variant_name;\n\n      if (variant_name) {\n        this.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\n      }\n    },\n\n    /**\n     * gets the name of the currently applied theme variant\n     * @name get_theme()\n     * @return {String}\n     */\n    get_theme_variant: function get_theme_variant() {\n      return this._data.core.themes.variant;\n    },\n\n    /**\n     * shows a striped background on the container (if the theme supports it)\n     * @name show_stripes()\n     */\n    show_stripes: function show_stripes() {\n      this._data.core.themes.stripes = true;\n      this.get_container_ul().addClass(\"jstree-striped\");\n      /**\n       * triggered when stripes are shown\n       * @event\n       * @name show_stripes.jstree\n       */\n\n      this.trigger('show_stripes');\n    },\n\n    /**\n     * hides the striped background on the container\n     * @name hide_stripes()\n     */\n    hide_stripes: function hide_stripes() {\n      this._data.core.themes.stripes = false;\n      this.get_container_ul().removeClass(\"jstree-striped\");\n      /**\n       * triggered when stripes are hidden\n       * @event\n       * @name hide_stripes.jstree\n       */\n\n      this.trigger('hide_stripes');\n    },\n\n    /**\n     * toggles the striped background on the container\n     * @name toggle_stripes()\n     */\n    toggle_stripes: function toggle_stripes() {\n      if (this._data.core.themes.stripes) {\n        this.hide_stripes();\n      } else {\n        this.show_stripes();\n      }\n    },\n\n    /**\n     * shows the connecting dots (if the theme supports it)\n     * @name show_dots()\n     */\n    show_dots: function show_dots() {\n      this._data.core.themes.dots = true;\n      this.get_container_ul().removeClass(\"jstree-no-dots\");\n      /**\n       * triggered when dots are shown\n       * @event\n       * @name show_dots.jstree\n       */\n\n      this.trigger('show_dots');\n    },\n\n    /**\n     * hides the connecting dots\n     * @name hide_dots()\n     */\n    hide_dots: function hide_dots() {\n      this._data.core.themes.dots = false;\n      this.get_container_ul().addClass(\"jstree-no-dots\");\n      /**\n       * triggered when dots are hidden\n       * @event\n       * @name hide_dots.jstree\n       */\n\n      this.trigger('hide_dots');\n    },\n\n    /**\n     * toggles the connecting dots\n     * @name toggle_dots()\n     */\n    toggle_dots: function toggle_dots() {\n      if (this._data.core.themes.dots) {\n        this.hide_dots();\n      } else {\n        this.show_dots();\n      }\n    },\n\n    /**\n     * show the node icons\n     * @name show_icons()\n     */\n    show_icons: function show_icons() {\n      this._data.core.themes.icons = true;\n      this.get_container_ul().removeClass(\"jstree-no-icons\");\n      /**\n       * triggered when icons are shown\n       * @event\n       * @name show_icons.jstree\n       */\n\n      this.trigger('show_icons');\n    },\n\n    /**\n     * hide the node icons\n     * @name hide_icons()\n     */\n    hide_icons: function hide_icons() {\n      this._data.core.themes.icons = false;\n      this.get_container_ul().addClass(\"jstree-no-icons\");\n      /**\n       * triggered when icons are hidden\n       * @event\n       * @name hide_icons.jstree\n       */\n\n      this.trigger('hide_icons');\n    },\n\n    /**\n     * toggle the node icons\n     * @name toggle_icons()\n     */\n    toggle_icons: function toggle_icons() {\n      if (this._data.core.themes.icons) {\n        this.hide_icons();\n      } else {\n        this.show_icons();\n      }\n    },\n\n    /**\n     * show the node ellipsis\n     * @name show_icons()\n     */\n    show_ellipsis: function show_ellipsis() {\n      this._data.core.themes.ellipsis = true;\n      this.get_container_ul().addClass(\"jstree-ellipsis\");\n      /**\n       * triggered when ellisis is shown\n       * @event\n       * @name show_ellipsis.jstree\n       */\n\n      this.trigger('show_ellipsis');\n    },\n\n    /**\n     * hide the node ellipsis\n     * @name hide_ellipsis()\n     */\n    hide_ellipsis: function hide_ellipsis() {\n      this._data.core.themes.ellipsis = false;\n      this.get_container_ul().removeClass(\"jstree-ellipsis\");\n      /**\n       * triggered when ellisis is hidden\n       * @event\n       * @name hide_ellipsis.jstree\n       */\n\n      this.trigger('hide_ellipsis');\n    },\n\n    /**\n     * toggle the node ellipsis\n     * @name toggle_icons()\n     */\n    toggle_ellipsis: function toggle_ellipsis() {\n      if (this._data.core.themes.ellipsis) {\n        this.hide_ellipsis();\n      } else {\n        this.show_ellipsis();\n      }\n    },\n\n    /**\n     * set the node icon for a node\n     * @name set_icon(obj, icon)\n     * @param {mixed} obj\n     * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\n     */\n    set_icon: function set_icon(obj, icon) {\n      var t1, t2, dom, old;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.set_icon(obj[t1], icon);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      old = obj.icon;\n      obj.icon = icon === true || icon === null || icon === undefined || icon === '' ? true : icon;\n      dom = this.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\");\n\n      if (icon === false) {\n        this.hide_icon(obj);\n      } else if (icon === true || icon === null || icon === undefined || icon === '') {\n        dom.removeClass('jstree-themeicon-custom ' + old).css(\"background\", \"\").removeAttr(\"rel\");\n\n        if (old === false) {\n          this.show_icon(obj);\n        }\n      } else if (icon.indexOf(\"/\") === -1 && icon.indexOf(\".\") === -1) {\n        dom.removeClass(old).css(\"background\", \"\");\n        dom.addClass(icon + ' jstree-themeicon-custom').attr(\"rel\", icon);\n\n        if (old === false) {\n          this.show_icon(obj);\n        }\n      } else {\n        dom.removeClass(old).css(\"background\", \"\");\n        dom.addClass('jstree-themeicon-custom').css(\"background\", \"url('\" + icon + \"') center center no-repeat\").attr(\"rel\", icon);\n\n        if (old === false) {\n          this.show_icon(obj);\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * get the node icon for a node\n     * @name get_icon(obj)\n     * @param {mixed} obj\n     * @return {String}\n     */\n    get_icon: function get_icon(obj) {\n      obj = this.get_node(obj);\n      return !obj || obj.id === $.jstree.root ? false : obj.icon;\n    },\n\n    /**\n     * hide the icon on an individual node\n     * @name hide_icon(obj)\n     * @param {mixed} obj\n     */\n    hide_icon: function hide_icon(obj) {\n      var t1, t2;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.hide_icon(obj[t1]);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj === $.jstree.root) {\n        return false;\n      }\n\n      obj.icon = false;\n      this.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\").addClass('jstree-themeicon-hidden');\n      return true;\n    },\n\n    /**\n     * show the icon on an individual node\n     * @name show_icon(obj)\n     * @param {mixed} obj\n     */\n    show_icon: function show_icon(obj) {\n      var t1, t2, dom;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.show_icon(obj[t1]);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj === $.jstree.root) {\n        return false;\n      }\n\n      dom = this.get_node(obj, true);\n      obj.icon = dom.length ? dom.children(\".jstree-anchor\").children(\".jstree-themeicon\").attr('rel') : true;\n\n      if (!obj.icon) {\n        obj.icon = true;\n      }\n\n      dom.children(\".jstree-anchor\").children(\".jstree-themeicon\").removeClass('jstree-themeicon-hidden');\n      return true;\n    }\n  }; // helpers\n\n  $.vakata = {}; // collect attributes\n\n  $.vakata.attributes = function (node, with_values) {\n    node = $(node)[0];\n    var attr = with_values ? {} : [];\n\n    if (node && node.attributes) {\n      $.each(node.attributes, function (i, v) {\n        if ($.inArray(v.name.toLowerCase(), ['style', 'contenteditable', 'hasfocus', 'tabindex']) !== -1) {\n          return;\n        }\n\n        if (v.value !== null && $.trim(v.value) !== '') {\n          if (with_values) {\n            attr[v.name] = v.value;\n          } else {\n            attr.push(v.name);\n          }\n        }\n      });\n    }\n\n    return attr;\n  };\n\n  $.vakata.array_unique = function (array) {\n    var a = [],\n        i,\n        j,\n        l,\n        o = {};\n\n    for (i = 0, l = array.length; i < l; i++) {\n      if (o[array[i]] === undefined) {\n        a.push(array[i]);\n        o[array[i]] = true;\n      }\n    }\n\n    return a;\n  }; // remove item from array\n\n\n  $.vakata.array_remove = function (array, from) {\n    array.splice(from, 1);\n    return array; //var rest = array.slice((to || from) + 1 || array.length);\n    //array.length = from < 0 ? array.length + from : from;\n    //array.push.apply(array, rest);\n    //return array;\n  }; // remove item from array\n\n\n  $.vakata.array_remove_item = function (array, item) {\n    var tmp = $.inArray(item, array);\n    return tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;\n  };\n\n  $.vakata.array_filter = function (c, a, b, d, e) {\n    if (c.filter) {\n      return c.filter(a, b);\n    }\n\n    d = [];\n\n    for (e in c) {\n      if (~~e + '' === e + '' && e >= 0 && a.call(b, c[e], +e, c)) {\n        d.push(c[e]);\n      }\n    }\n\n    return d;\n  };\n  /**\n   * ### Changed plugin\n   *\n   * This plugin adds more information to the `changed.jstree` event. The new data is contained in the `changed` event data property, and contains a lists of `selected` and `deselected` nodes.\n   */\n\n\n  $.jstree.plugins.changed = function (options, parent) {\n    var last = [];\n\n    this.trigger = function (ev, data) {\n      var i, j;\n\n      if (!data) {\n        data = {};\n      }\n\n      if (ev.replace('.jstree', '') === 'changed') {\n        data.changed = {\n          selected: [],\n          deselected: []\n        };\n        var tmp = {};\n\n        for (i = 0, j = last.length; i < j; i++) {\n          tmp[last[i]] = 1;\n        }\n\n        for (i = 0, j = data.selected.length; i < j; i++) {\n          if (!tmp[data.selected[i]]) {\n            data.changed.selected.push(data.selected[i]);\n          } else {\n            tmp[data.selected[i]] = 2;\n          }\n        }\n\n        for (i = 0, j = last.length; i < j; i++) {\n          if (tmp[last[i]] === 1) {\n            data.changed.deselected.push(last[i]);\n          }\n        }\n\n        last = data.selected.slice();\n      }\n      /**\n       * triggered when selection changes (the \"changed\" plugin enhances the original event with more data)\n       * @event\n       * @name changed.jstree\n       * @param {Object} node\n       * @param {Object} action the action that caused the selection to change\n       * @param {Array} selected the current selection\n       * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event\n       * @param {Object} event the event (if any) that triggered this changed event\n       * @plugin changed\n       */\n\n\n      parent.trigger.call(this, ev, data);\n    };\n\n    this.refresh = function (skip_loading, forget_state) {\n      last = [];\n      return parent.refresh.apply(this, arguments);\n    };\n  };\n  /**\n   * ### Checkbox plugin\n   *\n   * This plugin renders checkbox icons in front of each node, making multiple selection much easier.\n   * It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.\n   */\n\n\n  var _i = document.createElement('I');\n\n  _i.className = 'jstree-icon jstree-checkbox';\n\n  _i.setAttribute('role', 'presentation');\n  /**\n   * stores all defaults for the checkbox plugin\n   * @name $.jstree.defaults.checkbox\n   * @plugin checkbox\n   */\n\n\n  $.jstree.defaults.checkbox = {\n    /**\n     * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.\n     * @name $.jstree.defaults.checkbox.visible\n     * @plugin checkbox\n     */\n    visible: true,\n\n    /**\n     * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.\n     * @name $.jstree.defaults.checkbox.three_state\n     * @plugin checkbox\n     */\n    three_state: true,\n\n    /**\n     * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.\n     * @name $.jstree.defaults.checkbox.whole_node\n     * @plugin checkbox\n     */\n    whole_node: true,\n\n    /**\n     * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.\n     * @name $.jstree.defaults.checkbox.keep_selected_style\n     * @plugin checkbox\n     */\n    keep_selected_style: true,\n\n    /**\n     * This setting controls how cascading and undetermined nodes are applied.\n     * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.\n     * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.\n     * @name $.jstree.defaults.checkbox.cascade\n     * @plugin checkbox\n     */\n    cascade: '',\n\n    /**\n     * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.\n     * @name $.jstree.defaults.checkbox.tie_selection\n     * @plugin checkbox\n     */\n    tie_selection: true\n  };\n\n  $.jstree.plugins.checkbox = function (options, parent) {\n    this.bind = function () {\n      parent.bind.call(this);\n      this._data.checkbox.uto = false;\n      this._data.checkbox.selected = [];\n\n      if (this.settings.checkbox.three_state) {\n        this.settings.checkbox.cascade = 'up+down+undetermined';\n      }\n\n      this.element.on(\"init.jstree\", $.proxy(function () {\n        this._data.checkbox.visible = this.settings.checkbox.visible;\n\n        if (!this.settings.checkbox.keep_selected_style) {\n          this.element.addClass('jstree-checkbox-no-clicked');\n        }\n\n        if (this.settings.checkbox.tie_selection) {\n          this.element.addClass('jstree-checkbox-selection');\n        }\n      }, this)).on(\"loading.jstree\", $.proxy(function () {\n        this[this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes']();\n      }, this));\n\n      if (this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\n        this.element.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', $.proxy(function () {\n          // only if undetermined is in setting\n          if (this._data.checkbox.uto) {\n            clearTimeout(this._data.checkbox.uto);\n          }\n\n          this._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\n        }, this));\n      }\n\n      if (!this.settings.checkbox.tie_selection) {\n        this.element.on('model.jstree', $.proxy(function (e, data) {\n          var m = this._model.data,\n              p = m[data.parent],\n              dpc = data.nodes,\n              i,\n              j;\n\n          for (i = 0, j = dpc.length; i < j; i++) {\n            m[dpc[i]].state.checked = m[dpc[i]].state.checked || m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked;\n\n            if (m[dpc[i]].state.checked) {\n              this._data.checkbox.selected.push(dpc[i]);\n            }\n          }\n        }, this));\n      }\n\n      if (this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {\n        this.element.on('model.jstree', $.proxy(function (e, data) {\n          var m = this._model.data,\n              p = m[data.parent],\n              dpc = data.nodes,\n              chd = [],\n              c,\n              i,\n              j,\n              k,\n              l,\n              tmp,\n              s = this.settings.checkbox.cascade,\n              t = this.settings.checkbox.tie_selection;\n\n          if (s.indexOf('down') !== -1) {\n            // apply down\n            if (p.state[t ? 'selected' : 'checked']) {\n              for (i = 0, j = dpc.length; i < j; i++) {\n                m[dpc[i]].state[t ? 'selected' : 'checked'] = true;\n              }\n\n              this._data[t ? 'core' : 'checkbox'].selected = this._data[t ? 'core' : 'checkbox'].selected.concat(dpc);\n            } else {\n              for (i = 0, j = dpc.length; i < j; i++) {\n                if (m[dpc[i]].state[t ? 'selected' : 'checked']) {\n                  for (k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {\n                    m[m[dpc[i]].children_d[k]].state[t ? 'selected' : 'checked'] = true;\n                  }\n\n                  this._data[t ? 'core' : 'checkbox'].selected = this._data[t ? 'core' : 'checkbox'].selected.concat(m[dpc[i]].children_d);\n                }\n              }\n            }\n          }\n\n          if (s.indexOf('up') !== -1) {\n            // apply up\n            for (i = 0, j = p.children_d.length; i < j; i++) {\n              if (!m[p.children_d[i]].children.length) {\n                chd.push(m[p.children_d[i]].parent);\n              }\n            }\n\n            chd = $.vakata.array_unique(chd);\n\n            for (k = 0, l = chd.length; k < l; k++) {\n              p = m[chd[k]];\n\n              while (p && p.id !== $.jstree.root) {\n                c = 0;\n\n                for (i = 0, j = p.children.length; i < j; i++) {\n                  c += m[p.children[i]].state[t ? 'selected' : 'checked'];\n                }\n\n                if (c === j) {\n                  p.state[t ? 'selected' : 'checked'] = true;\n\n                  this._data[t ? 'core' : 'checkbox'].selected.push(p.id);\n\n                  tmp = this.get_node(p, true);\n\n                  if (tmp && tmp.length) {\n                    tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n                  }\n                } else {\n                  break;\n                }\n\n                p = this.get_node(p.parent);\n              }\n            }\n          }\n\n          this._data[t ? 'core' : 'checkbox'].selected = $.vakata.array_unique(this._data[t ? 'core' : 'checkbox'].selected);\n        }, this)).on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', $.proxy(function (e, data) {\n          var obj = data.node,\n              m = this._model.data,\n              par = this.get_node(obj.parent),\n              dom = this.get_node(obj, true),\n              i,\n              j,\n              c,\n              tmp,\n              s = this.settings.checkbox.cascade,\n              t = this.settings.checkbox.tie_selection,\n              sel = {},\n              cur = this._data[t ? 'core' : 'checkbox'].selected;\n\n          for (i = 0, j = cur.length; i < j; i++) {\n            sel[cur[i]] = true;\n          } // apply down\n\n\n          if (s.indexOf('down') !== -1) {\n            //this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));\n            for (i = 0, j = obj.children_d.length; i < j; i++) {\n              sel[obj.children_d[i]] = true;\n              tmp = m[obj.children_d[i]];\n              tmp.state[t ? 'selected' : 'checked'] = true;\n\n              if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n                tmp.original.state.undetermined = false;\n              }\n            }\n          } // apply up\n\n\n          if (s.indexOf('up') !== -1) {\n            while (par && par.id !== $.jstree.root) {\n              c = 0;\n\n              for (i = 0, j = par.children.length; i < j; i++) {\n                c += m[par.children[i]].state[t ? 'selected' : 'checked'];\n              }\n\n              if (c === j) {\n                par.state[t ? 'selected' : 'checked'] = true;\n                sel[par.id] = true; //this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);\n\n                tmp = this.get_node(par, true);\n\n                if (tmp && tmp.length) {\n                  tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n                }\n              } else {\n                break;\n              }\n\n              par = this.get_node(par.parent);\n            }\n          }\n\n          cur = [];\n\n          for (i in sel) {\n            if (sel.hasOwnProperty(i)) {\n              cur.push(i);\n            }\n          }\n\n          this._data[t ? 'core' : 'checkbox'].selected = cur; // apply down (process .children separately?)\n\n          if (s.indexOf('down') !== -1 && dom.length) {\n            dom.find('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked').parent().attr('aria-selected', true);\n          }\n        }, this)).on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', $.proxy(function (e, data) {\n          var obj = this.get_node($.jstree.root),\n              m = this._model.data,\n              i,\n              j,\n              tmp;\n\n          for (i = 0, j = obj.children_d.length; i < j; i++) {\n            tmp = m[obj.children_d[i]];\n\n            if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n              tmp.original.state.undetermined = false;\n            }\n          }\n        }, this)).on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', $.proxy(function (e, data) {\n          var obj = data.node,\n              dom = this.get_node(obj, true),\n              i,\n              j,\n              tmp,\n              s = this.settings.checkbox.cascade,\n              t = this.settings.checkbox.tie_selection,\n              cur = this._data[t ? 'core' : 'checkbox'].selected,\n              sel = {};\n\n          if (obj && obj.original && obj.original.state && obj.original.state.undetermined) {\n            obj.original.state.undetermined = false;\n          } // apply down\n\n\n          if (s.indexOf('down') !== -1) {\n            for (i = 0, j = obj.children_d.length; i < j; i++) {\n              tmp = this._model.data[obj.children_d[i]];\n              tmp.state[t ? 'selected' : 'checked'] = false;\n\n              if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n                tmp.original.state.undetermined = false;\n              }\n            }\n          } // apply up\n\n\n          if (s.indexOf('up') !== -1) {\n            for (i = 0, j = obj.parents.length; i < j; i++) {\n              tmp = this._model.data[obj.parents[i]];\n              tmp.state[t ? 'selected' : 'checked'] = false;\n\n              if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n                tmp.original.state.undetermined = false;\n              }\n\n              tmp = this.get_node(obj.parents[i], true);\n\n              if (tmp && tmp.length) {\n                tmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\n              }\n            }\n          }\n\n          sel = {};\n\n          for (i = 0, j = cur.length; i < j; i++) {\n            // apply down + apply up\n            if ((s.indexOf('down') === -1 || $.inArray(cur[i], obj.children_d) === -1) && (s.indexOf('up') === -1 || $.inArray(cur[i], obj.parents) === -1)) {\n              sel[cur[i]] = true;\n            }\n          }\n\n          cur = [];\n\n          for (i in sel) {\n            if (sel.hasOwnProperty(i)) {\n              cur.push(i);\n            }\n          }\n\n          this._data[t ? 'core' : 'checkbox'].selected = cur; // apply down (process .children separately?)\n\n          if (s.indexOf('down') !== -1 && dom.length) {\n            dom.find('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked').parent().attr('aria-selected', false);\n          }\n        }, this));\n      }\n\n      if (this.settings.checkbox.cascade.indexOf('up') !== -1) {\n        this.element.on('delete_node.jstree', $.proxy(function (e, data) {\n          // apply up (whole handler)\n          var p = this.get_node(data.parent),\n              m = this._model.data,\n              i,\n              j,\n              c,\n              tmp,\n              t = this.settings.checkbox.tie_selection;\n\n          while (p && p.id !== $.jstree.root && !p.state[t ? 'selected' : 'checked']) {\n            c = 0;\n\n            for (i = 0, j = p.children.length; i < j; i++) {\n              c += m[p.children[i]].state[t ? 'selected' : 'checked'];\n            }\n\n            if (j > 0 && c === j) {\n              p.state[t ? 'selected' : 'checked'] = true;\n\n              this._data[t ? 'core' : 'checkbox'].selected.push(p.id);\n\n              tmp = this.get_node(p, true);\n\n              if (tmp && tmp.length) {\n                tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n              }\n            } else {\n              break;\n            }\n\n            p = this.get_node(p.parent);\n          }\n        }, this)).on('move_node.jstree', $.proxy(function (e, data) {\n          // apply up (whole handler)\n          var is_multi = data.is_multi,\n              old_par = data.old_parent,\n              new_par = this.get_node(data.parent),\n              m = this._model.data,\n              p,\n              c,\n              i,\n              j,\n              tmp,\n              t = this.settings.checkbox.tie_selection;\n\n          if (!is_multi) {\n            p = this.get_node(old_par);\n\n            while (p && p.id !== $.jstree.root && !p.state[t ? 'selected' : 'checked']) {\n              c = 0;\n\n              for (i = 0, j = p.children.length; i < j; i++) {\n                c += m[p.children[i]].state[t ? 'selected' : 'checked'];\n              }\n\n              if (j > 0 && c === j) {\n                p.state[t ? 'selected' : 'checked'] = true;\n\n                this._data[t ? 'core' : 'checkbox'].selected.push(p.id);\n\n                tmp = this.get_node(p, true);\n\n                if (tmp && tmp.length) {\n                  tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n                }\n              } else {\n                break;\n              }\n\n              p = this.get_node(p.parent);\n            }\n          }\n\n          p = new_par;\n\n          while (p && p.id !== $.jstree.root) {\n            c = 0;\n\n            for (i = 0, j = p.children.length; i < j; i++) {\n              c += m[p.children[i]].state[t ? 'selected' : 'checked'];\n            }\n\n            if (c === j) {\n              if (!p.state[t ? 'selected' : 'checked']) {\n                p.state[t ? 'selected' : 'checked'] = true;\n\n                this._data[t ? 'core' : 'checkbox'].selected.push(p.id);\n\n                tmp = this.get_node(p, true);\n\n                if (tmp && tmp.length) {\n                  tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n                }\n              }\n            } else {\n              if (p.state[t ? 'selected' : 'checked']) {\n                p.state[t ? 'selected' : 'checked'] = false;\n                this._data[t ? 'core' : 'checkbox'].selected = $.vakata.array_remove_item(this._data[t ? 'core' : 'checkbox'].selected, p.id);\n                tmp = this.get_node(p, true);\n\n                if (tmp && tmp.length) {\n                  tmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\n                }\n              } else {\n                break;\n              }\n            }\n\n            p = this.get_node(p.parent);\n          }\n        }, this));\n      }\n    };\n    /**\n     * set the undetermined state where and if necessary. Used internally.\n     * @private\n     * @name _undetermined()\n     * @plugin checkbox\n     */\n\n\n    this._undetermined = function () {\n      if (this.element === null) {\n        return;\n      }\n\n      var i,\n          j,\n          k,\n          l,\n          o = {},\n          m = this._model.data,\n          t = this.settings.checkbox.tie_selection,\n          s = this._data[t ? 'core' : 'checkbox'].selected,\n          p = [],\n          tt = this;\n\n      for (i = 0, j = s.length; i < j; i++) {\n        if (m[s[i]] && m[s[i]].parents) {\n          for (k = 0, l = m[s[i]].parents.length; k < l; k++) {\n            if (o[m[s[i]].parents[k]] !== undefined) {\n              break;\n            }\n\n            if (m[s[i]].parents[k] !== $.jstree.root) {\n              o[m[s[i]].parents[k]] = true;\n              p.push(m[s[i]].parents[k]);\n            }\n          }\n        }\n      } // attempt for server side undetermined state\n\n\n      this.element.find('.jstree-closed').not(':has(.jstree-children)').each(function () {\n        var tmp = tt.get_node(this),\n            tmp2;\n\n        if (!tmp.state.loaded) {\n          if (tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {\n            if (o[tmp.id] === undefined && tmp.id !== $.jstree.root) {\n              o[tmp.id] = true;\n              p.push(tmp.id);\n            }\n\n            for (k = 0, l = tmp.parents.length; k < l; k++) {\n              if (o[tmp.parents[k]] === undefined && tmp.parents[k] !== $.jstree.root) {\n                o[tmp.parents[k]] = true;\n                p.push(tmp.parents[k]);\n              }\n            }\n          }\n        } else {\n          for (i = 0, j = tmp.children_d.length; i < j; i++) {\n            tmp2 = m[tmp.children_d[i]];\n\n            if (!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {\n              if (o[tmp2.id] === undefined && tmp2.id !== $.jstree.root) {\n                o[tmp2.id] = true;\n                p.push(tmp2.id);\n              }\n\n              for (k = 0, l = tmp2.parents.length; k < l; k++) {\n                if (o[tmp2.parents[k]] === undefined && tmp2.parents[k] !== $.jstree.root) {\n                  o[tmp2.parents[k]] = true;\n                  p.push(tmp2.parents[k]);\n                }\n              }\n            }\n          }\n        }\n      });\n      this.element.find('.jstree-undetermined').removeClass('jstree-undetermined');\n\n      for (i = 0, j = p.length; i < j; i++) {\n        if (!m[p[i]].state[t ? 'selected' : 'checked']) {\n          s = this.get_node(p[i], true);\n\n          if (s && s.length) {\n            s.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');\n          }\n        }\n      }\n    };\n\n    this.redraw_node = function (obj, deep, is_callback, force_render) {\n      obj = parent.redraw_node.apply(this, arguments);\n\n      if (obj) {\n        var i,\n            j,\n            tmp = null,\n            icon = null;\n\n        for (i = 0, j = obj.childNodes.length; i < j; i++) {\n          if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\n            tmp = obj.childNodes[i];\n            break;\n          }\n        }\n\n        if (tmp) {\n          if (!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) {\n            tmp.className += ' jstree-checked';\n          }\n\n          icon = _i.cloneNode(false);\n\n          if (this._model.data[obj.id].state.checkbox_disabled) {\n            icon.className += ' jstree-checkbox-disabled';\n          }\n\n          tmp.insertBefore(icon, tmp.childNodes[0]);\n        }\n      }\n\n      if (!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\n        if (this._data.checkbox.uto) {\n          clearTimeout(this._data.checkbox.uto);\n        }\n\n        this._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\n      }\n\n      return obj;\n    };\n    /**\n     * show the node checkbox icons\n     * @name show_checkboxes()\n     * @plugin checkbox\n     */\n\n\n    this.show_checkboxes = function () {\n      this._data.core.themes.checkboxes = true;\n      this.get_container_ul().removeClass(\"jstree-no-checkboxes\");\n    };\n    /**\n     * hide the node checkbox icons\n     * @name hide_checkboxes()\n     * @plugin checkbox\n     */\n\n\n    this.hide_checkboxes = function () {\n      this._data.core.themes.checkboxes = false;\n      this.get_container_ul().addClass(\"jstree-no-checkboxes\");\n    };\n    /**\n     * toggle the node icons\n     * @name toggle_checkboxes()\n     * @plugin checkbox\n     */\n\n\n    this.toggle_checkboxes = function () {\n      if (this._data.core.themes.checkboxes) {\n        this.hide_checkboxes();\n      } else {\n        this.show_checkboxes();\n      }\n    };\n    /**\n     * checks if a node is in an undetermined state\n     * @name is_undetermined(obj)\n     * @param  {mixed} obj\n     * @return {Boolean}\n     */\n\n\n    this.is_undetermined = function (obj) {\n      obj = this.get_node(obj);\n      var s = this.settings.checkbox.cascade,\n          i,\n          j,\n          t = this.settings.checkbox.tie_selection,\n          d = this._data[t ? 'core' : 'checkbox'].selected,\n          m = this._model.data;\n\n      if (!obj || obj.state[t ? 'selected' : 'checked'] === true || s.indexOf('undetermined') === -1 || s.indexOf('down') === -1 && s.indexOf('up') === -1) {\n        return false;\n      }\n\n      if (!obj.state.loaded && obj.original.state.undetermined === true) {\n        return true;\n      }\n\n      for (i = 0, j = obj.children_d.length; i < j; i++) {\n        if ($.inArray(obj.children_d[i], d) !== -1 || !m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n    /**\n     * disable a node's checkbox\n     * @name disable_checkbox(obj)\n     * @param {mixed} obj an array can be used too\n     * @trigger disable_checkbox.jstree\n     * @plugin checkbox\n     */\n\n\n    this.disable_checkbox = function (obj) {\n      var t1, t2, dom;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.disable_checkbox(obj[t1]);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      dom = this.get_node(obj, true);\n\n      if (!obj.state.checkbox_disabled) {\n        obj.state.checkbox_disabled = true;\n\n        if (dom && dom.length) {\n          dom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');\n        }\n        /**\n         * triggered when an node's checkbox is disabled\n         * @event\n         * @name disable_checkbox.jstree\n         * @param {Object} node\n         * @plugin checkbox\n         */\n\n\n        this.trigger('disable_checkbox', {\n          'node': obj\n        });\n      }\n    };\n    /**\n     * enable a node's checkbox\n     * @name disable_checkbox(obj)\n     * @param {mixed} obj an array can be used too\n     * @trigger enable_checkbox.jstree\n     * @plugin checkbox\n     */\n\n\n    this.enable_checkbox = function (obj) {\n      var t1, t2, dom;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.enable_checkbox(obj[t1]);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      dom = this.get_node(obj, true);\n\n      if (obj.state.checkbox_disabled) {\n        obj.state.checkbox_disabled = false;\n\n        if (dom && dom.length) {\n          dom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');\n        }\n        /**\n         * triggered when an node's checkbox is enabled\n         * @event\n         * @name enable_checkbox.jstree\n         * @param {Object} node\n         * @plugin checkbox\n         */\n\n\n        this.trigger('enable_checkbox', {\n          'node': obj\n        });\n      }\n    };\n\n    this.activate_node = function (obj, e) {\n      if ($(e.target).hasClass('jstree-checkbox-disabled')) {\n        return false;\n      }\n\n      if (this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {\n        e.ctrlKey = true;\n      }\n\n      if (this.settings.checkbox.tie_selection || !this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox')) {\n        return parent.activate_node.call(this, obj, e);\n      }\n\n      if (this.is_disabled(obj)) {\n        return false;\n      }\n\n      if (this.is_checked(obj)) {\n        this.uncheck_node(obj, e);\n      } else {\n        this.check_node(obj, e);\n      }\n\n      this.trigger('activate_node', {\n        'node': this.get_node(obj)\n      });\n    };\n    /**\n     * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)\n     * @name check_node(obj)\n     * @param {mixed} obj an array can be used to check multiple nodes\n     * @trigger check_node.jstree\n     * @plugin checkbox\n     */\n\n\n    this.check_node = function (obj, e) {\n      if (this.settings.checkbox.tie_selection) {\n        return this.select_node(obj, false, true, e);\n      }\n\n      var dom, t1, t2, th;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.check_node(obj[t1], e);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      dom = this.get_node(obj, true);\n\n      if (!obj.state.checked) {\n        obj.state.checked = true;\n\n        this._data.checkbox.selected.push(obj.id);\n\n        if (dom && dom.length) {\n          dom.children('.jstree-anchor').addClass('jstree-checked');\n        }\n        /**\n         * triggered when an node is checked (only if tie_selection in checkbox settings is false)\n         * @event\n         * @name check_node.jstree\n         * @param {Object} node\n         * @param {Array} selected the current selection\n         * @param {Object} event the event (if any) that triggered this check_node\n         * @plugin checkbox\n         */\n\n\n        this.trigger('check_node', {\n          'node': obj,\n          'selected': this._data.checkbox.selected,\n          'event': e\n        });\n      }\n    };\n    /**\n     * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)\n     * @name uncheck_node(obj)\n     * @param {mixed} obj an array can be used to uncheck multiple nodes\n     * @trigger uncheck_node.jstree\n     * @plugin checkbox\n     */\n\n\n    this.uncheck_node = function (obj, e) {\n      if (this.settings.checkbox.tie_selection) {\n        return this.deselect_node(obj, false, e);\n      }\n\n      var t1, t2, dom;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.uncheck_node(obj[t1], e);\n        }\n\n        return true;\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      dom = this.get_node(obj, true);\n\n      if (obj.state.checked) {\n        obj.state.checked = false;\n        this._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);\n\n        if (dom.length) {\n          dom.children('.jstree-anchor').removeClass('jstree-checked');\n        }\n        /**\n         * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)\n         * @event\n         * @name uncheck_node.jstree\n         * @param {Object} node\n         * @param {Array} selected the current selection\n         * @param {Object} event the event (if any) that triggered this uncheck_node\n         * @plugin checkbox\n         */\n\n\n        this.trigger('uncheck_node', {\n          'node': obj,\n          'selected': this._data.checkbox.selected,\n          'event': e\n        });\n      }\n    };\n    /**\n     * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)\n     * @name check_all()\n     * @trigger check_all.jstree, changed.jstree\n     * @plugin checkbox\n     */\n\n\n    this.check_all = function () {\n      if (this.settings.checkbox.tie_selection) {\n        return this.select_all();\n      }\n\n      var tmp = this._data.checkbox.selected.concat([]),\n          i,\n          j;\n\n      this._data.checkbox.selected = this._model.data[$.jstree.root].children_d.concat();\n\n      for (i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\n        if (this._model.data[this._data.checkbox.selected[i]]) {\n          this._model.data[this._data.checkbox.selected[i]].state.checked = true;\n        }\n      }\n\n      this.redraw(true);\n      /**\n       * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)\n       * @event\n       * @name check_all.jstree\n       * @param {Array} selected the current selection\n       * @plugin checkbox\n       */\n\n      this.trigger('check_all', {\n        'selected': this._data.checkbox.selected\n      });\n    };\n    /**\n     * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)\n     * @name uncheck_all()\n     * @trigger uncheck_all.jstree\n     * @plugin checkbox\n     */\n\n\n    this.uncheck_all = function () {\n      if (this.settings.checkbox.tie_selection) {\n        return this.deselect_all();\n      }\n\n      var tmp = this._data.checkbox.selected.concat([]),\n          i,\n          j;\n\n      for (i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\n        if (this._model.data[this._data.checkbox.selected[i]]) {\n          this._model.data[this._data.checkbox.selected[i]].state.checked = false;\n        }\n      }\n\n      this._data.checkbox.selected = [];\n      this.element.find('.jstree-checked').removeClass('jstree-checked');\n      /**\n       * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)\n       * @event\n       * @name uncheck_all.jstree\n       * @param {Object} node the previous selection\n       * @param {Array} selected the current selection\n       * @plugin checkbox\n       */\n\n      this.trigger('uncheck_all', {\n        'selected': this._data.checkbox.selected,\n        'node': tmp\n      });\n    };\n    /**\n     * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)\n     * @name is_checked(obj)\n     * @param  {mixed}  obj\n     * @return {Boolean}\n     * @plugin checkbox\n     */\n\n\n    this.is_checked = function (obj) {\n      if (this.settings.checkbox.tie_selection) {\n        return this.is_selected(obj);\n      }\n\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      return obj.state.checked;\n    };\n    /**\n     * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)\n     * @name get_checked([full])\n     * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n     * @return {Array}\n     * @plugin checkbox\n     */\n\n\n    this.get_checked = function (full) {\n      if (this.settings.checkbox.tie_selection) {\n        return this.get_selected(full);\n      }\n\n      return full ? $.map(this._data.checkbox.selected, $.proxy(function (i) {\n        return this.get_node(i);\n      }, this)) : this._data.checkbox.selected;\n    };\n    /**\n     * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)\n     * @name get_top_checked([full])\n     * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n     * @return {Array}\n     * @plugin checkbox\n     */\n\n\n    this.get_top_checked = function (full) {\n      if (this.settings.checkbox.tie_selection) {\n        return this.get_top_selected(full);\n      }\n\n      var tmp = this.get_checked(true),\n          obj = {},\n          i,\n          j,\n          k,\n          l;\n\n      for (i = 0, j = tmp.length; i < j; i++) {\n        obj[tmp[i].id] = tmp[i];\n      }\n\n      for (i = 0, j = tmp.length; i < j; i++) {\n        for (k = 0, l = tmp[i].children_d.length; k < l; k++) {\n          if (obj[tmp[i].children_d[k]]) {\n            delete obj[tmp[i].children_d[k]];\n          }\n        }\n      }\n\n      tmp = [];\n\n      for (i in obj) {\n        if (obj.hasOwnProperty(i)) {\n          tmp.push(i);\n        }\n      }\n\n      return full ? $.map(tmp, $.proxy(function (i) {\n        return this.get_node(i);\n      }, this)) : tmp;\n    };\n    /**\n     * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)\n     * @name get_bottom_checked([full])\n     * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n     * @return {Array}\n     * @plugin checkbox\n     */\n\n\n    this.get_bottom_checked = function (full) {\n      if (this.settings.checkbox.tie_selection) {\n        return this.get_bottom_selected(full);\n      }\n\n      var tmp = this.get_checked(true),\n          obj = [],\n          i,\n          j;\n\n      for (i = 0, j = tmp.length; i < j; i++) {\n        if (!tmp[i].children.length) {\n          obj.push(tmp[i].id);\n        }\n      }\n\n      return full ? $.map(obj, $.proxy(function (i) {\n        return this.get_node(i);\n      }, this)) : obj;\n    };\n\n    this.load_node = function (obj, callback) {\n      var k, l, i, j, c, tmp;\n\n      if (!$.isArray(obj) && !this.settings.checkbox.tie_selection) {\n        tmp = this.get_node(obj);\n\n        if (tmp && tmp.state.loaded) {\n          for (k = 0, l = tmp.children_d.length; k < l; k++) {\n            if (this._model.data[tmp.children_d[k]].state.checked) {\n              c = true;\n              this._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);\n            }\n          }\n        }\n      }\n\n      return parent.load_node.apply(this, arguments);\n    };\n\n    this.get_state = function () {\n      var state = parent.get_state.apply(this, arguments);\n\n      if (this.settings.checkbox.tie_selection) {\n        return state;\n      }\n\n      state.checkbox = this._data.checkbox.selected.slice();\n      return state;\n    };\n\n    this.set_state = function (state, callback) {\n      var res = parent.set_state.apply(this, arguments);\n\n      if (res && state.checkbox) {\n        if (!this.settings.checkbox.tie_selection) {\n          this.uncheck_all();\n\n          var _this = this;\n\n          $.each(state.checkbox, function (i, v) {\n            _this.check_node(v);\n          });\n        }\n\n        delete state.checkbox;\n        this.set_state(state, callback);\n        return false;\n      }\n\n      return res;\n    };\n\n    this.refresh = function (skip_loading, forget_state) {\n      if (!this.settings.checkbox.tie_selection) {\n        this._data.checkbox.selected = [];\n      }\n\n      return parent.refresh.apply(this, arguments);\n    };\n  }; // include the checkbox plugin by default\n  // $.jstree.defaults.plugins.push(\"checkbox\");\n\n  /**\n   * ### Conditionalselect plugin\n   *\n   * This plugin allows defining a callback to allow or deny node selection by user input (activate node method).\n   */\n\n  /**\n   * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.\n   * @name $.jstree.defaults.checkbox.visible\n   * @plugin checkbox\n   */\n\n\n  $.jstree.defaults.conditionalselect = function () {\n    return true;\n  };\n\n  $.jstree.plugins.conditionalselect = function (options, parent) {\n    // own function\n    this.activate_node = function (obj, e) {\n      if (this.settings.conditionalselect.call(this, this.get_node(obj), e)) {\n        parent.activate_node.call(this, obj, e);\n      }\n    };\n  };\n  /**\n   * ### Contextmenu plugin\n   *\n   * Shows a context menu when a node is right-clicked.\n   */\n\n  /**\n   * stores all defaults for the contextmenu plugin\n   * @name $.jstree.defaults.contextmenu\n   * @plugin contextmenu\n   */\n\n\n  $.jstree.defaults.contextmenu = {\n    /**\n     * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.\n     * @name $.jstree.defaults.contextmenu.select_node\n     * @plugin contextmenu\n     */\n    select_node: true,\n\n    /**\n     * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.\n     * @name $.jstree.defaults.contextmenu.show_at_node\n     * @plugin contextmenu\n     */\n    show_at_node: true,\n\n    /**\n     * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).\n     *\n     * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.\n     *\n     * * `separator_before` - a boolean indicating if there should be a separator before this item\n     * * `separator_after` - a boolean indicating if there should be a separator after this item\n     * * `_disabled` - a boolean indicating if this action should be disabled\n     * * `label` - a string - the name of the action (could be a function returning a string)\n     * * `title` - a string - an optional tooltip for the item\n     * * `action` - a function to be executed if this item is chosen, the function will receive \n     * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\n     * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)\n     * * `shortcut_label` - shortcut label (like for example `F2` for rename)\n     * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered\n     *\n     * @name $.jstree.defaults.contextmenu.items\n     * @plugin contextmenu\n     */\n    items: function items(o, cb) {\n      // Could be an object directly\n      return {\n        \"create\": {\n          \"separator_before\": false,\n          \"separator_after\": true,\n          \"_disabled\": false,\n          //(this.check(\"create_node\", data.reference, {}, \"last\")),\n          \"label\": \"Create\",\n          \"action\": function action(data) {\n            var inst = $.jstree.reference(data.reference),\n                obj = inst.get_node(data.reference);\n            inst.create_node(obj, {}, \"last\", function (new_node) {\n              setTimeout(function () {\n                inst.edit(new_node);\n              }, 0);\n            });\n          }\n        },\n        \"rename\": {\n          \"separator_before\": false,\n          \"separator_after\": false,\n          \"_disabled\": false,\n          //(this.check(\"rename_node\", data.reference, this.get_parent(data.reference), \"\")),\n          \"label\": \"Rename\",\n\n          /*!\n          \"shortcut\"\t\t\t: 113,\n          \"shortcut_label\"\t: 'F2',\n          \"icon\"\t\t\t\t: \"glyphicon glyphicon-leaf\",\n          */\n          \"action\": function action(data) {\n            var inst = $.jstree.reference(data.reference),\n                obj = inst.get_node(data.reference);\n            inst.edit(obj);\n          }\n        },\n        \"remove\": {\n          \"separator_before\": false,\n          \"icon\": false,\n          \"separator_after\": false,\n          \"_disabled\": false,\n          //(this.check(\"delete_node\", data.reference, this.get_parent(data.reference), \"\")),\n          \"label\": \"Delete\",\n          \"action\": function action(data) {\n            var inst = $.jstree.reference(data.reference),\n                obj = inst.get_node(data.reference);\n\n            if (inst.is_selected(obj)) {\n              inst.delete_node(inst.get_selected());\n            } else {\n              inst.delete_node(obj);\n            }\n          }\n        },\n        \"ccp\": {\n          \"separator_before\": true,\n          \"icon\": false,\n          \"separator_after\": false,\n          \"label\": \"Edit\",\n          \"action\": false,\n          \"submenu\": {\n            \"cut\": {\n              \"separator_before\": false,\n              \"separator_after\": false,\n              \"label\": \"Cut\",\n              \"action\": function action(data) {\n                var inst = $.jstree.reference(data.reference),\n                    obj = inst.get_node(data.reference);\n\n                if (inst.is_selected(obj)) {\n                  inst.cut(inst.get_top_selected());\n                } else {\n                  inst.cut(obj);\n                }\n              }\n            },\n            \"copy\": {\n              \"separator_before\": false,\n              \"icon\": false,\n              \"separator_after\": false,\n              \"label\": \"Copy\",\n              \"action\": function action(data) {\n                var inst = $.jstree.reference(data.reference),\n                    obj = inst.get_node(data.reference);\n\n                if (inst.is_selected(obj)) {\n                  inst.copy(inst.get_top_selected());\n                } else {\n                  inst.copy(obj);\n                }\n              }\n            },\n            \"paste\": {\n              \"separator_before\": false,\n              \"icon\": false,\n              \"_disabled\": function _disabled(data) {\n                return !$.jstree.reference(data.reference).can_paste();\n              },\n              \"separator_after\": false,\n              \"label\": \"Paste\",\n              \"action\": function action(data) {\n                var inst = $.jstree.reference(data.reference),\n                    obj = inst.get_node(data.reference);\n                inst.paste(obj);\n              }\n            }\n          }\n        }\n      };\n    }\n  };\n\n  $.jstree.plugins.contextmenu = function (options, parent) {\n    this.bind = function () {\n      parent.bind.call(this);\n      var last_ts = 0,\n          cto = null,\n          ex,\n          ey;\n      this.element.on(\"contextmenu.jstree\", \".jstree-anchor\", $.proxy(function (e, data) {\n        if (e.target.tagName.toLowerCase() === 'input') {\n          return;\n        }\n\n        e.preventDefault();\n        last_ts = e.ctrlKey ? +new Date() : 0;\n\n        if (data || cto) {\n          last_ts = +new Date() + 10000;\n        }\n\n        if (cto) {\n          clearTimeout(cto);\n        }\n\n        if (!this.is_loading(e.currentTarget)) {\n          this.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);\n        }\n      }, this)).on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\n        if (this._data.contextmenu.visible && (!last_ts || +new Date() - last_ts > 250)) {\n          // work around safari & macOS ctrl+click\n          $.vakata.context.hide();\n        }\n\n        last_ts = 0;\n      }, this)).on(\"touchstart.jstree\", \".jstree-anchor\", function (e) {\n        if (!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {\n          return;\n        }\n\n        ex = e.originalEvent.changedTouches[0].clientX;\n        ey = e.originalEvent.changedTouches[0].clientY;\n        cto = setTimeout(function () {\n          $(e.currentTarget).trigger('contextmenu', true);\n        }, 750);\n      }).on('touchmove.vakata.jstree', function (e) {\n        if (cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 50 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 50)) {\n          clearTimeout(cto);\n        }\n      }).on('touchend.vakata.jstree', function (e) {\n        if (cto) {\n          clearTimeout(cto);\n        }\n      });\n      /*!\n      if(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {\n      \tvar el = null, tm = null;\n      \tthis.element\n      \t\t.on(\"touchstart\", \".jstree-anchor\", function (e) {\n      \t\t\tel = e.currentTarget;\n      \t\t\ttm = +new Date();\n      \t\t\t$(document).one(\"touchend\", function (e) {\n      \t\t\t\te.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);\n      \t\t\t\te.currentTarget = e.target;\n      \t\t\t\ttm = ((+(new Date())) - tm);\n      \t\t\t\tif(e.target === el && tm > 600 && tm < 1000) {\n      \t\t\t\t\te.preventDefault();\n      \t\t\t\t\t$(el).trigger('contextmenu', e);\n      \t\t\t\t}\n      \t\t\t\tel = null;\n      \t\t\t\ttm = null;\n      \t\t\t});\n      \t\t});\n      }\n      */\n\n      $(document).on(\"context_hide.vakata.jstree\", $.proxy(function (e, data) {\n        this._data.contextmenu.visible = false;\n        $(data.reference).removeClass('jstree-context');\n      }, this));\n    };\n\n    this.teardown = function () {\n      if (this._data.contextmenu.visible) {\n        $.vakata.context.hide();\n      }\n\n      parent.teardown.call(this);\n    };\n    /**\n     * prepare and show the context menu for a node\n     * @name show_contextmenu(obj [, x, y])\n     * @param {mixed} obj the node\n     * @param {Number} x the x-coordinate relative to the document to show the menu at\n     * @param {Number} y the y-coordinate relative to the document to show the menu at\n     * @param {Object} e the event if available that triggered the contextmenu\n     * @plugin contextmenu\n     * @trigger show_contextmenu.jstree\n     */\n\n\n    this.show_contextmenu = function (obj, x, y, e) {\n      obj = this.get_node(obj);\n\n      if (!obj || obj.id === $.jstree.root) {\n        return false;\n      }\n\n      var s = this.settings.contextmenu,\n          d = this.get_node(obj, true),\n          a = d.children(\".jstree-anchor\"),\n          o = false,\n          i = false;\n\n      if (s.show_at_node || x === undefined || y === undefined) {\n        o = a.offset();\n        x = o.left;\n        y = o.top + this._data.core.li_height;\n      }\n\n      if (this.settings.contextmenu.select_node && !this.is_selected(obj)) {\n        this.activate_node(obj, e);\n      }\n\n      i = s.items;\n\n      if ($.isFunction(i)) {\n        i = i.call(this, obj, $.proxy(function (i) {\n          this._show_contextmenu(obj, x, y, i);\n        }, this));\n      }\n\n      if ($.isPlainObject(i)) {\n        this._show_contextmenu(obj, x, y, i);\n      }\n    };\n    /**\n     * show the prepared context menu for a node\n     * @name _show_contextmenu(obj, x, y, i)\n     * @param {mixed} obj the node\n     * @param {Number} x the x-coordinate relative to the document to show the menu at\n     * @param {Number} y the y-coordinate relative to the document to show the menu at\n     * @param {Number} i the object of items to show\n     * @plugin contextmenu\n     * @trigger show_contextmenu.jstree\n     * @private\n     */\n\n\n    this._show_contextmenu = function (obj, x, y, i) {\n      var d = this.get_node(obj, true),\n          a = d.children(\".jstree-anchor\");\n      $(document).one(\"context_show.vakata.jstree\", $.proxy(function (e, data) {\n        var cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';\n        $(data.element).addClass(cls);\n        a.addClass('jstree-context');\n      }, this));\n      this._data.contextmenu.visible = true;\n      $.vakata.context.show(a, {\n        'x': x,\n        'y': y\n      }, i);\n      /**\n       * triggered when the contextmenu is shown for a node\n       * @event\n       * @name show_contextmenu.jstree\n       * @param {Object} node the node\n       * @param {Number} x the x-coordinate of the menu relative to the document\n       * @param {Number} y the y-coordinate of the menu relative to the document\n       * @plugin contextmenu\n       */\n\n      this.trigger('show_contextmenu', {\n        \"node\": obj,\n        \"x\": x,\n        \"y\": y\n      });\n    };\n  }; // contextmenu helper\n\n\n  (function ($) {\n    var right_to_left = false,\n        vakata_context = {\n      element: false,\n      reference: false,\n      position_x: 0,\n      position_y: 0,\n      items: [],\n      html: \"\",\n      is_visible: false\n    };\n    $.vakata.context = {\n      settings: {\n        hide_onmouseleave: 0,\n        icons: true\n      },\n      _trigger: function _trigger(event_name) {\n        $(document).triggerHandler(\"context_\" + event_name + \".vakata\", {\n          \"reference\": vakata_context.reference,\n          \"element\": vakata_context.element,\n          \"position\": {\n            \"x\": vakata_context.position_x,\n            \"y\": vakata_context.position_y\n          }\n        });\n      },\n      _execute: function _execute(i) {\n        i = vakata_context.items[i];\n        return i && (!i._disabled || $.isFunction(i._disabled) && !i._disabled({\n          \"item\": i,\n          \"reference\": vakata_context.reference,\n          \"element\": vakata_context.element\n        })) && i.action ? i.action.call(null, {\n          \"item\": i,\n          \"reference\": vakata_context.reference,\n          \"element\": vakata_context.element,\n          \"position\": {\n            \"x\": vakata_context.position_x,\n            \"y\": vakata_context.position_y\n          }\n        }) : false;\n      },\n      _parse: function _parse(o, is_callback) {\n        if (!o) {\n          return false;\n        }\n\n        if (!is_callback) {\n          vakata_context.html = \"\";\n          vakata_context.items = [];\n        }\n\n        var str = \"\",\n            sep = false,\n            tmp;\n\n        if (is_callback) {\n          str += \"<\" + \"ul>\";\n        }\n\n        $.each(o, function (i, val) {\n          if (!val) {\n            return true;\n          }\n\n          vakata_context.items.push(val);\n\n          if (!sep && val.separator_before) {\n            str += \"<\" + \"li class='vakata-context-separator'><\" + \"a href='#' \" + ($.vakata.context.settings.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\" + \"/a><\" + \"/li>\";\n          }\n\n          sep = false;\n          str += \"<\" + \"li class='\" + (val._class || \"\") + (val._disabled === true || $.isFunction(val._disabled) && val._disabled({\n            \"item\": val,\n            \"reference\": vakata_context.reference,\n            \"element\": vakata_context.element\n          }) ? \" vakata-contextmenu-disabled \" : \"\") + \"' \" + (val.shortcut ? \" data-shortcut='\" + val.shortcut + \"' \" : '') + \">\";\n          str += \"<\" + \"a href='#' rel='\" + (vakata_context.items.length - 1) + \"' \" + (val.title ? \"title='\" + val.title + \"'\" : \"\") + \">\";\n\n          if ($.vakata.context.settings.icons) {\n            str += \"<\" + \"i \";\n\n            if (val.icon) {\n              if (val.icon.indexOf(\"/\") !== -1 || val.icon.indexOf(\".\") !== -1) {\n                str += \" style='background:url(\\\"\" + val.icon + \"\\\") center center no-repeat' \";\n              } else {\n                str += \" class='\" + val.icon + \"' \";\n              }\n            }\n\n            str += \"><\" + \"/i><\" + \"span class='vakata-contextmenu-sep'>&#160;<\" + \"/span>\";\n          }\n\n          str += ($.isFunction(val.label) ? val.label({\n            \"item\": i,\n            \"reference\": vakata_context.reference,\n            \"element\": vakata_context.element\n          }) : val.label) + (val.shortcut ? ' <span class=\"vakata-contextmenu-shortcut vakata-contextmenu-shortcut-' + val.shortcut + '\">' + (val.shortcut_label || '') + '</span>' : '') + \"<\" + \"/a>\";\n\n          if (val.submenu) {\n            tmp = $.vakata.context._parse(val.submenu, true);\n\n            if (tmp) {\n              str += tmp;\n            }\n          }\n\n          str += \"<\" + \"/li>\";\n\n          if (val.separator_after) {\n            str += \"<\" + \"li class='vakata-context-separator'><\" + \"a href='#' \" + ($.vakata.context.settings.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\" + \"/a><\" + \"/li>\";\n            sep = true;\n          }\n        });\n        str = str.replace(/<li class\\='vakata-context-separator'\\><\\/li\\>$/, \"\");\n\n        if (is_callback) {\n          str += \"</ul>\";\n        }\n        /**\n         * triggered on the document when the contextmenu is parsed (HTML is built)\n         * @event\n         * @plugin contextmenu\n         * @name context_parse.vakata\n         * @param {jQuery} reference the element that was right clicked\n         * @param {jQuery} element the DOM element of the menu itself\n         * @param {Object} position the x & y coordinates of the menu\n         */\n\n\n        if (!is_callback) {\n          vakata_context.html = str;\n\n          $.vakata.context._trigger(\"parse\");\n        }\n\n        return str.length > 10 ? str : false;\n      },\n      _show_submenu: function _show_submenu(o) {\n        o = $(o);\n\n        if (!o.length || !o.children(\"ul\").length) {\n          return;\n        }\n\n        var e = o.children(\"ul\"),\n            xl = o.offset().left,\n            x = xl + o.outerWidth(),\n            y = o.offset().top,\n            w = e.width(),\n            h = e.height(),\n            dw = $(window).width() + $(window).scrollLeft(),\n            dh = $(window).height() + $(window).scrollTop(); // може да се спести е една проверка - дали няма някой от класовете вече нагоре\n\n        if (right_to_left) {\n          o[x - (w + 10 + o.outerWidth()) < 0 ? \"addClass\" : \"removeClass\"](\"vakata-context-left\");\n        } else {\n          o[x + w > dw && xl > dw - x ? \"addClass\" : \"removeClass\"](\"vakata-context-right\");\n        }\n\n        if (y + h + 10 > dh) {\n          e.css(\"bottom\", \"-1px\");\n        } //if does not fit - stick it to the side\n\n\n        if (o.hasClass('vakata-context-right')) {\n          if (xl < w) {\n            e.css(\"margin-right\", xl - w);\n          }\n        } else {\n          if (dw - x < w) {\n            e.css(\"margin-left\", dw - x - w);\n          }\n        }\n\n        e.show();\n      },\n      show: function show(reference, position, data) {\n        var o,\n            e,\n            x,\n            y,\n            w,\n            h,\n            dw,\n            dh,\n            cond = true;\n\n        if (vakata_context.element && vakata_context.element.length) {\n          vakata_context.element.width('');\n        }\n\n        switch (cond) {\n          case !position && !reference:\n            return false;\n\n          case !!position && !!reference:\n            vakata_context.reference = reference;\n            vakata_context.position_x = position.x;\n            vakata_context.position_y = position.y;\n            break;\n\n          case !position && !!reference:\n            vakata_context.reference = reference;\n            o = reference.offset();\n            vakata_context.position_x = o.left + reference.outerHeight();\n            vakata_context.position_y = o.top;\n            break;\n\n          case !!position && !reference:\n            vakata_context.position_x = position.x;\n            vakata_context.position_y = position.y;\n            break;\n        }\n\n        if (!!reference && !data && $(reference).data('vakata_contextmenu')) {\n          data = $(reference).data('vakata_contextmenu');\n        }\n\n        if ($.vakata.context._parse(data)) {\n          vakata_context.element.html(vakata_context.html);\n        }\n\n        if (vakata_context.items.length) {\n          vakata_context.element.appendTo(\"body\");\n          e = vakata_context.element;\n          x = vakata_context.position_x;\n          y = vakata_context.position_y;\n          w = e.width();\n          h = e.height();\n          dw = $(window).width() + $(window).scrollLeft();\n          dh = $(window).height() + $(window).scrollTop();\n\n          if (right_to_left) {\n            x -= e.outerWidth() - $(reference).outerWidth();\n\n            if (x < $(window).scrollLeft() + 20) {\n              x = $(window).scrollLeft() + 20;\n            }\n          }\n\n          if (x + w + 20 > dw) {\n            x = dw - (w + 20);\n          }\n\n          if (y + h + 20 > dh) {\n            y = dh - (h + 20);\n          }\n\n          vakata_context.element.css({\n            \"left\": x,\n            \"top\": y\n          }).show().find('a').first().focus().parent().addClass(\"vakata-context-hover\");\n          vakata_context.is_visible = true;\n          /**\n           * triggered on the document when the contextmenu is shown\n           * @event\n           * @plugin contextmenu\n           * @name context_show.vakata\n           * @param {jQuery} reference the element that was right clicked\n           * @param {jQuery} element the DOM element of the menu itself\n           * @param {Object} position the x & y coordinates of the menu\n           */\n\n          $.vakata.context._trigger(\"show\");\n        }\n      },\n      hide: function hide() {\n        if (vakata_context.is_visible) {\n          vakata_context.element.hide().find(\"ul\").hide().end().find(':focus').blur().end().detach();\n          vakata_context.is_visible = false;\n          /**\n           * triggered on the document when the contextmenu is hidden\n           * @event\n           * @plugin contextmenu\n           * @name context_hide.vakata\n           * @param {jQuery} reference the element that was right clicked\n           * @param {jQuery} element the DOM element of the menu itself\n           * @param {Object} position the x & y coordinates of the menu\n           */\n\n          $.vakata.context._trigger(\"hide\");\n        }\n      }\n    };\n    $(function () {\n      right_to_left = $(\"body\").css(\"direction\") === \"rtl\";\n      var to = false;\n      vakata_context.element = $(\"<ul class='vakata-context'></ul>\");\n      vakata_context.element.on(\"mouseenter\", \"li\", function (e) {\n        e.stopImmediatePropagation();\n\n        if ($.contains(this, e.relatedTarget)) {\n          // премахнато заради delegate mouseleave по-долу\n          // $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\n          return;\n        }\n\n        if (to) {\n          clearTimeout(to);\n        }\n\n        vakata_context.element.find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end();\n        $(this).siblings().find(\"ul\").hide().end().end().parentsUntil(\".vakata-context\", \"li\").addBack().addClass(\"vakata-context-hover\");\n\n        $.vakata.context._show_submenu(this);\n      }) // тестово - дали не натоварва?\n      .on(\"mouseleave\", \"li\", function (e) {\n        if ($.contains(this, e.relatedTarget)) {\n          return;\n        }\n\n        $(this).find(\".vakata-context-hover\").addBack().removeClass(\"vakata-context-hover\");\n      }).on(\"mouseleave\", function (e) {\n        $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\n\n        if ($.vakata.context.settings.hide_onmouseleave) {\n          to = setTimeout(function (t) {\n            return function () {\n              $.vakata.context.hide();\n            };\n          }(this), $.vakata.context.settings.hide_onmouseleave);\n        }\n      }).on(\"click\", \"a\", function (e) {\n        e.preventDefault(); //})\n        //.on(\"mouseup\", \"a\", function (e) {\n\n        if (!$(this).blur().parent().hasClass(\"vakata-context-disabled\") && $.vakata.context._execute($(this).attr(\"rel\")) !== false) {\n          $.vakata.context.hide();\n        }\n      }).on('keydown', 'a', function (e) {\n        var o = null;\n\n        switch (e.which) {\n          case 13:\n          case 32:\n            e.type = \"click\";\n            e.preventDefault();\n            $(e.currentTarget).trigger(e);\n            break;\n\n          case 37:\n            if (vakata_context.is_visible) {\n              vakata_context.element.find(\".vakata-context-hover\").last().closest(\"li\").first().find(\"ul\").hide().find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end().end().children('a').focus();\n              e.stopImmediatePropagation();\n              e.preventDefault();\n            }\n\n            break;\n\n          case 38:\n            if (vakata_context.is_visible) {\n              o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").prevAll(\"li:not(.vakata-context-separator)\").first();\n\n              if (!o.length) {\n                o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").last();\n              }\n\n              o.addClass(\"vakata-context-hover\").children('a').focus();\n              e.stopImmediatePropagation();\n              e.preventDefault();\n            }\n\n            break;\n\n          case 39:\n            if (vakata_context.is_visible) {\n              vakata_context.element.find(\".vakata-context-hover\").last().children(\"ul\").show().children(\"li:not(.vakata-context-separator)\").removeClass(\"vakata-context-hover\").first().addClass(\"vakata-context-hover\").children('a').focus();\n              e.stopImmediatePropagation();\n              e.preventDefault();\n            }\n\n            break;\n\n          case 40:\n            if (vakata_context.is_visible) {\n              o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").nextAll(\"li:not(.vakata-context-separator)\").first();\n\n              if (!o.length) {\n                o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").first();\n              }\n\n              o.addClass(\"vakata-context-hover\").children('a').focus();\n              e.stopImmediatePropagation();\n              e.preventDefault();\n            }\n\n            break;\n\n          case 27:\n            $.vakata.context.hide();\n            e.preventDefault();\n            break;\n\n          default:\n            //console.log(e.which);\n            break;\n        }\n      }).on('keydown', function (e) {\n        e.preventDefault();\n        var a = vakata_context.element.find('.vakata-contextmenu-shortcut-' + e.which).parent();\n\n        if (a.parent().not('.vakata-context-disabled')) {\n          a.click();\n        }\n      });\n      $(document).on(\"mousedown.vakata.jstree\", function (e) {\n        if (vakata_context.is_visible && !$.contains(vakata_context.element[0], e.target)) {\n          $.vakata.context.hide();\n        }\n      }).on(\"context_show.vakata.jstree\", function (e, data) {\n        vakata_context.element.find(\"li:has(ul)\").children(\"a\").addClass(\"vakata-context-parent\");\n\n        if (right_to_left) {\n          vakata_context.element.addClass(\"vakata-context-rtl\").css(\"direction\", \"rtl\");\n        } // also apply a RTL class?\n\n\n        vakata_context.element.find(\"ul\").hide().end();\n      });\n    });\n  })($); // $.jstree.defaults.plugins.push(\"contextmenu\");\n\n  /**\n   * ### Drag'n'drop plugin\n   *\n   * Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.\n   */\n\n  /**\n   * stores all defaults for the drag'n'drop plugin\n   * @name $.jstree.defaults.dnd\n   * @plugin dnd\n   */\n\n\n  $.jstree.defaults.dnd = {\n    /**\n     * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.\n     * @name $.jstree.defaults.dnd.copy\n     * @plugin dnd\n     */\n    copy: true,\n\n    /**\n     * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.\n     * @name $.jstree.defaults.dnd.open_timeout\n     * @plugin dnd\n     */\n    open_timeout: 500,\n\n    /**\n     * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging\n     * @name $.jstree.defaults.dnd.is_draggable\n     * @plugin dnd\n     */\n    is_draggable: true,\n\n    /**\n     * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`\n     * @name $.jstree.defaults.dnd.check_while_dragging\n     * @plugin dnd\n     */\n    check_while_dragging: true,\n\n    /**\n     * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`\n     * @name $.jstree.defaults.dnd.always_copy\n     * @plugin dnd\n     */\n    always_copy: false,\n\n    /**\n     * when dropping a node \"inside\", this setting indicates the position the node should go to - it can be an integer or a string: \"first\" (same as 0) or \"last\", default is `0`\n     * @name $.jstree.defaults.dnd.inside_pos\n     * @plugin dnd\n     */\n    inside_pos: 0,\n\n    /**\n     * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node\n     * @name $.jstree.defaults.dnd.drag_selection\n     * @plugin dnd\n     */\n    drag_selection: true,\n\n    /**\n     * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string \"selected\" which means only selected nodes can be dragged on touch devices.\n     * @name $.jstree.defaults.dnd.touch\n     * @plugin dnd\n     */\n    touch: true,\n\n    /**\n     * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.\n     * @name $.jstree.defaults.dnd.large_drop_target\n     * @plugin dnd\n     */\n    large_drop_target: false,\n\n    /**\n     * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to \"selected\".\n     * @name $.jstree.defaults.dnd.large_drag_target\n     * @plugin dnd\n     */\n    large_drag_target: false,\n\n    /**\n     * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.\n     * @reference http://caniuse.com/#feat=dragndrop\n     * @name $.jstree.defaults.dnd.use_html5\n     * @plugin dnd\n     */\n    use_html5: false\n  };\n  var drg, elm; // TODO: now check works by checking for each node individually, how about max_children, unique, etc?\n\n  $.jstree.plugins.dnd = function (options, parent) {\n    this.init = function (el, options) {\n      parent.init.call(this, el, options);\n      this.settings.dnd.use_html5 = this.settings.dnd.use_html5 && 'draggable' in document.createElement('span');\n    };\n\n    this.bind = function () {\n      parent.bind.call(this);\n      this.element.on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\n        if (this.settings.dnd.large_drag_target && $(e.target).closest('.jstree-node')[0] !== e.currentTarget) {\n          return true;\n        }\n\n        if (e.type === \"touchstart\" && (!this.settings.dnd.touch || this.settings.dnd.touch === 'selected' && !$(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked'))) {\n          return true;\n        }\n\n        var obj = this.get_node(e.target),\n            mlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1,\n            txt = mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget);\n\n        if (this.settings.core.force_text) {\n          txt = $.vakata.html.escape(txt);\n        }\n\n        if (obj && obj.id && obj.id !== $.jstree.root && (e.which === 1 || e.type === \"touchstart\" || e.type === \"dragstart\") && (this.settings.dnd.is_draggable === true || $.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, mlt > 1 ? this.get_top_selected(true) : [obj], e))) {\n          drg = {\n            'jstree': true,\n            'origin': this,\n            'obj': this.get_node(obj, true),\n            'nodes': mlt > 1 ? this.get_top_selected() : [obj.id]\n          };\n          elm = e.currentTarget;\n\n          if (this.settings.dnd.use_html5) {\n            $.vakata.dnd._trigger('start', e, {\n              'helper': $(),\n              'element': elm,\n              'data': drg\n            });\n          } else {\n            this.element.trigger('mousedown.jstree');\n            return $.vakata.dnd.start(e, drg, '<div id=\"jstree-dnd\" class=\"jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + (this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '') + '\"><i class=\"jstree-icon jstree-er\"></i>' + txt + '<ins class=\"jstree-copy\" style=\"display:none;\">+</ins></div>');\n          }\n        }\n      }, this));\n\n      if (this.settings.dnd.use_html5) {\n        this.element.on('dragover.jstree', function (e) {\n          e.preventDefault();\n\n          $.vakata.dnd._trigger('move', e, {\n            'helper': $(),\n            'element': elm,\n            'data': drg\n          });\n\n          return false;\n        }) //.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\n        //\t\te.preventDefault();\n        //\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\n        //\t\treturn false;\n        //\t}, this))\n        .on('drop.jstree', $.proxy(function (e) {\n          e.preventDefault();\n\n          $.vakata.dnd._trigger('stop', e, {\n            'helper': $(),\n            'element': elm,\n            'data': drg\n          });\n\n          return false;\n        }, this));\n      }\n    };\n\n    this.redraw_node = function (obj, deep, callback, force_render) {\n      obj = parent.redraw_node.apply(this, arguments);\n\n      if (obj && this.settings.dnd.use_html5) {\n        if (this.settings.dnd.large_drag_target) {\n          obj.setAttribute('draggable', true);\n        } else {\n          var i,\n              j,\n              tmp = null;\n\n          for (i = 0, j = obj.childNodes.length; i < j; i++) {\n            if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\n              tmp = obj.childNodes[i];\n              break;\n            }\n          }\n\n          if (tmp) {\n            tmp.setAttribute('draggable', true);\n          }\n        }\n      }\n\n      return obj;\n    };\n  };\n\n  $(function () {\n    // bind only once for all instances\n    var lastmv = false,\n        laster = false,\n        lastev = false,\n        opento = false,\n        marker = $('<div id=\"jstree-marker\">&#160;</div>').hide(); //.appendTo('body');\n\n    $(document).on('dnd_start.vakata.jstree', function (e, data) {\n      lastmv = false;\n      lastev = false;\n\n      if (!data || !data.data || !data.data.jstree) {\n        return;\n      }\n\n      marker.appendTo('body'); //.show();\n    }).on('dnd_move.vakata.jstree', function (e, data) {\n      if (opento) {\n        if (!data.event || data.event.type !== 'dragover' || data.event.target !== lastev.target) {\n          clearTimeout(opento);\n        }\n      }\n\n      if (!data || !data.data || !data.data.jstree) {\n        return;\n      } // if we are hovering the marker image do nothing (can happen on \"inside\" drags)\n\n\n      if (data.event.target.id && data.event.target.id === 'jstree-marker') {\n        return;\n      }\n\n      lastev = data.event;\n      var ins = $.jstree.reference(data.event.target),\n          ref = false,\n          off = false,\n          rel = false,\n          tmp,\n          l,\n          t,\n          h,\n          p,\n          i,\n          o,\n          ok,\n          t1,\n          t2,\n          op,\n          ps,\n          pr,\n          ip,\n          tm,\n          is_copy,\n          pn; // if we are over an instance\n\n      if (ins && ins._data && ins._data.dnd) {\n        marker.attr('class', 'jstree-' + ins.get_theme() + (ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : ''));\n        is_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey));\n        data.helper.children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + (ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '')).find('.jstree-copy').first()[is_copy ? 'show' : 'hide'](); // if are hovering the container itself add a new root node\n        //console.log(data.event);\n\n        if ((data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {\n          ok = true;\n\n          for (t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\n            ok = ok && ins.check(data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? \"copy_node\" : \"move_node\", data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1], $.jstree.root, 'last', {\n              'dnd': true,\n              'ref': ins.get_node($.jstree.root),\n              'pos': 'i',\n              'origin': data.data.origin,\n              'is_multi': data.data.origin && data.data.origin !== ins,\n              'is_foreign': !data.data.origin\n            });\n\n            if (!ok) {\n              break;\n            }\n          }\n\n          if (ok) {\n            lastmv = {\n              'ins': ins,\n              'par': $.jstree.root,\n              'pos': 'last'\n            };\n            marker.hide();\n            data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\n\n            if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\n              data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\n            }\n\n            return;\n          }\n        } else {\n          // if we are hovering a tree node\n          ref = ins.settings.dnd.large_drop_target ? $(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $(data.event.target).closest('.jstree-anchor');\n\n          if (ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {\n            off = ref.offset();\n            rel = (data.event.pageY !== undefined ? data.event.pageY : data.event.originalEvent.pageY) - off.top;\n            h = ref.outerHeight();\n\n            if (rel < h / 3) {\n              o = ['b', 'i', 'a'];\n            } else if (rel > h - h / 3) {\n              o = ['a', 'i', 'b'];\n            } else {\n              o = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];\n            }\n\n            $.each(o, function (j, v) {\n              switch (v) {\n                case 'b':\n                  l = off.left - 6;\n                  t = off.top;\n                  p = ins.get_parent(ref);\n                  i = ref.parent().index();\n                  break;\n\n                case 'i':\n                  ip = ins.settings.dnd.inside_pos;\n                  tm = ins.get_node(ref.parent());\n                  l = off.left - 2;\n                  t = off.top + h / 2 + 1;\n                  p = tm.id;\n                  i = ip === 'first' ? 0 : ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length);\n                  break;\n\n                case 'a':\n                  l = off.left - 6;\n                  t = off.top + h;\n                  p = ins.get_parent(ref);\n                  i = ref.parent().index() + 1;\n                  break;\n              }\n\n              ok = true;\n\n              for (t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\n                op = data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? \"copy_node\" : \"move_node\";\n                ps = i;\n\n                if (op === \"move_node\" && v === 'a' && data.data.origin && data.data.origin === ins && p === ins.get_parent(data.data.nodes[t1])) {\n                  pr = ins.get_node(p);\n\n                  if (ps > $.inArray(data.data.nodes[t1], pr.children)) {\n                    ps -= 1;\n                  }\n                }\n\n                ok = ok && (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false || ins.check(op, data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1], p, ps, {\n                  'dnd': true,\n                  'ref': ins.get_node(ref.parent()),\n                  'pos': v,\n                  'origin': data.data.origin,\n                  'is_multi': data.data.origin && data.data.origin !== ins,\n                  'is_foreign': !data.data.origin\n                }));\n\n                if (!ok) {\n                  if (ins && ins.last_error) {\n                    laster = ins.last_error();\n                  }\n\n                  break;\n                }\n              }\n\n              if (v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {\n                opento = setTimeout(function (x, z) {\n                  return function () {\n                    x.open_node(z);\n                  };\n                }(ins, ref), ins.settings.dnd.open_timeout);\n              }\n\n              if (ok) {\n                pn = ins.get_node(p, true);\n\n                if (!pn.hasClass('.jstree-dnd-parent')) {\n                  $('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\n                  pn.addClass('jstree-dnd-parent');\n                }\n\n                lastmv = {\n                  'ins': ins,\n                  'par': p,\n                  'pos': v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i\n                };\n                marker.css({\n                  'left': l + 'px',\n                  'top': t + 'px'\n                }).show();\n                data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\n\n                if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\n                  data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\n                }\n\n                laster = {};\n                o = true;\n                return false;\n              }\n            });\n\n            if (o === true) {\n              return;\n            }\n          }\n        }\n      }\n\n      $('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\n      lastmv = false;\n      data.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');\n\n      if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\n        data.event.originalEvent.dataTransfer.dropEffect = 'none';\n      }\n\n      marker.hide();\n    }).on('dnd_scroll.vakata.jstree', function (e, data) {\n      if (!data || !data.data || !data.data.jstree) {\n        return;\n      }\n\n      marker.hide();\n      lastmv = false;\n      lastev = false;\n      data.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');\n    }).on('dnd_stop.vakata.jstree', function (e, data) {\n      $('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\n\n      if (opento) {\n        clearTimeout(opento);\n      }\n\n      if (!data || !data.data || !data.data.jstree) {\n        return;\n      }\n\n      marker.hide().detach();\n      var i,\n          j,\n          nodes = [];\n\n      if (lastmv) {\n        for (i = 0, j = data.data.nodes.length; i < j; i++) {\n          nodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];\n        }\n\n        lastmv.ins[data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? 'copy_node' : 'move_node'](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);\n      } else {\n        i = $(data.event.target).closest('.jstree');\n\n        if (i.length && laster && laster.error && laster.error === 'check') {\n          i = i.jstree(true);\n\n          if (i) {\n            i.settings.core.error.call(this, laster);\n          }\n        }\n      }\n\n      lastev = false;\n      lastmv = false;\n    }).on('keyup.jstree keydown.jstree', function (e, data) {\n      data = $.vakata.dnd._get();\n\n      if (data && data.data && data.data.jstree) {\n        if (e.type === \"keyup\" && e.which === 27) {\n          if (opento) {\n            clearTimeout(opento);\n          }\n\n          lastmv = false;\n          laster = false;\n          lastev = false;\n          opento = false;\n          marker.hide().detach();\n\n          $.vakata.dnd._clean();\n        } else {\n          data.helper.find('.jstree-copy').first()[data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey)) ? 'show' : 'hide']();\n\n          if (lastev) {\n            lastev.metaKey = e.metaKey;\n            lastev.ctrlKey = e.ctrlKey;\n\n            $.vakata.dnd._trigger('move', lastev);\n          }\n        }\n      }\n    });\n  }); // helpers\n\n  (function ($) {\n    $.vakata.html = {\n      div: $('<div />'),\n      escape: function escape(str) {\n        return $.vakata.html.div.text(str).html();\n      },\n      strip: function strip(str) {\n        return $.vakata.html.div.empty().append($.parseHTML(str)).text();\n      }\n    }; // private variable\n\n    var vakata_dnd = {\n      element: false,\n      target: false,\n      is_down: false,\n      is_drag: false,\n      helper: false,\n      helper_w: 0,\n      data: false,\n      init_x: 0,\n      init_y: 0,\n      scroll_l: 0,\n      scroll_t: 0,\n      scroll_e: false,\n      scroll_i: false,\n      is_touch: false\n    };\n    $.vakata.dnd = {\n      settings: {\n        scroll_speed: 10,\n        scroll_proximity: 20,\n        helper_left: 5,\n        helper_top: 10,\n        threshold: 5,\n        threshold_touch: 50\n      },\n      _trigger: function _trigger(event_name, e, data) {\n        if (data === undefined) {\n          data = $.vakata.dnd._get();\n        }\n\n        data.event = e;\n        $(document).triggerHandler(\"dnd_\" + event_name + \".vakata\", data);\n      },\n      _get: function _get() {\n        return {\n          \"data\": vakata_dnd.data,\n          \"element\": vakata_dnd.element,\n          \"helper\": vakata_dnd.helper\n        };\n      },\n      _clean: function _clean() {\n        if (vakata_dnd.helper) {\n          vakata_dnd.helper.remove();\n        }\n\n        if (vakata_dnd.scroll_i) {\n          clearInterval(vakata_dnd.scroll_i);\n          vakata_dnd.scroll_i = false;\n        }\n\n        vakata_dnd = {\n          element: false,\n          target: false,\n          is_down: false,\n          is_drag: false,\n          helper: false,\n          helper_w: 0,\n          data: false,\n          init_x: 0,\n          init_y: 0,\n          scroll_l: 0,\n          scroll_t: 0,\n          scroll_e: false,\n          scroll_i: false,\n          is_touch: false\n        };\n        $(document).off(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\n        $(document).off(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\n      },\n      _scroll: function _scroll(init_only) {\n        if (!vakata_dnd.scroll_e || !vakata_dnd.scroll_l && !vakata_dnd.scroll_t) {\n          if (vakata_dnd.scroll_i) {\n            clearInterval(vakata_dnd.scroll_i);\n            vakata_dnd.scroll_i = false;\n          }\n\n          return false;\n        }\n\n        if (!vakata_dnd.scroll_i) {\n          vakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);\n          return false;\n        }\n\n        if (init_only === true) {\n          return false;\n        }\n\n        var i = vakata_dnd.scroll_e.scrollTop(),\n            j = vakata_dnd.scroll_e.scrollLeft();\n        vakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);\n        vakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);\n\n        if (i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {\n          /**\n           * triggered on the document when a drag causes an element to scroll\n           * @event\n           * @plugin dnd\n           * @name dnd_scroll.vakata\n           * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n           * @param {DOM} element the DOM element being dragged\n           * @param {jQuery} helper the helper shown next to the mouse\n           * @param {jQuery} event the element that is scrolling\n           */\n          $.vakata.dnd._trigger(\"scroll\", vakata_dnd.scroll_e);\n        }\n      },\n      start: function start(e, data, html) {\n        if (e.type === \"touchstart\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\n          e.pageX = e.originalEvent.changedTouches[0].pageX;\n          e.pageY = e.originalEvent.changedTouches[0].pageY;\n          e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\n        }\n\n        if (vakata_dnd.is_drag) {\n          $.vakata.dnd.stop({});\n        }\n\n        try {\n          e.currentTarget.unselectable = \"on\";\n\n          e.currentTarget.onselectstart = function () {\n            return false;\n          };\n\n          if (e.currentTarget.style) {\n            e.currentTarget.style.touchAction = \"none\";\n            e.currentTarget.style.msTouchAction = \"none\";\n            e.currentTarget.style.MozUserSelect = \"none\";\n          }\n        } catch (ignore) {}\n\n        vakata_dnd.init_x = e.pageX;\n        vakata_dnd.init_y = e.pageY;\n        vakata_dnd.data = data;\n        vakata_dnd.is_down = true;\n        vakata_dnd.element = e.currentTarget;\n        vakata_dnd.target = e.target;\n        vakata_dnd.is_touch = e.type === \"touchstart\";\n\n        if (html !== false) {\n          vakata_dnd.helper = $(\"<div id='vakata-dnd'></div>\").html(html).css({\n            \"display\": \"block\",\n            \"margin\": \"0\",\n            \"padding\": \"0\",\n            \"position\": \"absolute\",\n            \"top\": \"-2000px\",\n            \"lineHeight\": \"16px\",\n            \"zIndex\": \"10000\"\n          });\n        }\n\n        $(document).on(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\n        $(document).on(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\n        return false;\n      },\n      drag: function drag(e) {\n        if (e.type === \"touchmove\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\n          e.pageX = e.originalEvent.changedTouches[0].pageX;\n          e.pageY = e.originalEvent.changedTouches[0].pageY;\n          e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\n        }\n\n        if (!vakata_dnd.is_down) {\n          return;\n        }\n\n        if (!vakata_dnd.is_drag) {\n          if (Math.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) || Math.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)) {\n            if (vakata_dnd.helper) {\n              vakata_dnd.helper.appendTo(\"body\");\n              vakata_dnd.helper_w = vakata_dnd.helper.outerWidth();\n            }\n\n            vakata_dnd.is_drag = true;\n            $(vakata_dnd.target).one('click.vakata', false);\n            /**\n             * triggered on the document when a drag starts\n             * @event\n             * @plugin dnd\n             * @name dnd_start.vakata\n             * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n             * @param {DOM} element the DOM element being dragged\n             * @param {jQuery} helper the helper shown next to the mouse\n             * @param {Object} event the event that caused the start (probably mousemove)\n             */\n\n            $.vakata.dnd._trigger(\"start\", e);\n          } else {\n            return;\n          }\n        }\n\n        var d = false,\n            w = false,\n            dh = false,\n            wh = false,\n            dw = false,\n            ww = false,\n            dt = false,\n            dl = false,\n            ht = false,\n            hl = false;\n        vakata_dnd.scroll_t = 0;\n        vakata_dnd.scroll_l = 0;\n        vakata_dnd.scroll_e = false;\n        $($(e.target).parentsUntil(\"body\").addBack().get().reverse()).filter(function () {\n          return /^auto|scroll$/.test($(this).css(\"overflow\")) && (this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);\n        }).each(function () {\n          var t = $(this),\n              o = t.offset();\n\n          if (this.scrollHeight > this.offsetHeight) {\n            if (o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity) {\n              vakata_dnd.scroll_t = 1;\n            }\n\n            if (e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity) {\n              vakata_dnd.scroll_t = -1;\n            }\n          }\n\n          if (this.scrollWidth > this.offsetWidth) {\n            if (o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity) {\n              vakata_dnd.scroll_l = 1;\n            }\n\n            if (e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity) {\n              vakata_dnd.scroll_l = -1;\n            }\n          }\n\n          if (vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\n            vakata_dnd.scroll_e = $(this);\n            return false;\n          }\n        });\n\n        if (!vakata_dnd.scroll_e) {\n          d = $(document);\n          w = $(window);\n          dh = d.height();\n          wh = w.height();\n          dw = d.width();\n          ww = w.width();\n          dt = d.scrollTop();\n          dl = d.scrollLeft();\n\n          if (dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity) {\n            vakata_dnd.scroll_t = -1;\n          }\n\n          if (dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity) {\n            vakata_dnd.scroll_t = 1;\n          }\n\n          if (dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity) {\n            vakata_dnd.scroll_l = -1;\n          }\n\n          if (dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity) {\n            vakata_dnd.scroll_l = 1;\n          }\n\n          if (vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\n            vakata_dnd.scroll_e = d;\n          }\n        }\n\n        if (vakata_dnd.scroll_e) {\n          $.vakata.dnd._scroll(true);\n        }\n\n        if (vakata_dnd.helper) {\n          ht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);\n          hl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);\n\n          if (dh && ht + 25 > dh) {\n            ht = dh - 50;\n          }\n\n          if (dw && hl + vakata_dnd.helper_w > dw) {\n            hl = dw - (vakata_dnd.helper_w + 2);\n          }\n\n          vakata_dnd.helper.css({\n            left: hl + \"px\",\n            top: ht + \"px\"\n          });\n        }\n        /**\n         * triggered on the document when a drag is in progress\n         * @event\n         * @plugin dnd\n         * @name dnd_move.vakata\n         * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n         * @param {DOM} element the DOM element being dragged\n         * @param {jQuery} helper the helper shown next to the mouse\n         * @param {Object} event the event that caused this to trigger (most likely mousemove)\n         */\n\n\n        $.vakata.dnd._trigger(\"move\", e);\n\n        return false;\n      },\n      stop: function stop(e) {\n        if (e.type === \"touchend\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\n          e.pageX = e.originalEvent.changedTouches[0].pageX;\n          e.pageY = e.originalEvent.changedTouches[0].pageY;\n          e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\n        }\n\n        if (vakata_dnd.is_drag) {\n          /**\n           * triggered on the document when a drag stops (the dragged element is dropped)\n           * @event\n           * @plugin dnd\n           * @name dnd_stop.vakata\n           * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n           * @param {DOM} element the DOM element being dragged\n           * @param {jQuery} helper the helper shown next to the mouse\n           * @param {Object} event the event that caused the stop\n           */\n          if (e.target !== vakata_dnd.target) {\n            $(vakata_dnd.target).off('click.vakata');\n          }\n\n          $.vakata.dnd._trigger(\"stop\", e);\n        } else {\n          if (e.type === \"touchend\" && e.target === vakata_dnd.target) {\n            var to = setTimeout(function () {\n              $(e.target).click();\n            }, 100);\n            $(e.target).one('click', function () {\n              if (to) {\n                clearTimeout(to);\n              }\n            });\n          }\n        }\n\n        $.vakata.dnd._clean();\n\n        return false;\n      }\n    };\n  })($); // include the dnd plugin by default\n  // $.jstree.defaults.plugins.push(\"dnd\");\n\n  /**\n   * ### Massload plugin\n   *\n   * Adds massload functionality to jsTree, so that multiple nodes can be loaded in a single request (only useful with lazy loading).\n   */\n\n  /**\n   * massload configuration\n   *\n   * It is possible to set this to a standard jQuery-like AJAX config.\n   * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.\n   *\n   * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.\n   *\n   * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.\n   *\n   *\t{\n   *\t\t\"id1\" : [{ \"text\" : \"Child of ID1\", \"id\" : \"c1\" }, { \"text\" : \"Another child of ID1\", \"id\" : \"c2\" }],\n   *\t\t\"id2\" : [{ \"text\" : \"Child of ID2\", \"id\" : \"c3\" }]\n   *\t}\n   * \n   * @name $.jstree.defaults.massload\n   * @plugin massload\n   */\n\n\n  $.jstree.defaults.massload = null;\n\n  $.jstree.plugins.massload = function (options, parent) {\n    this.init = function (el, options) {\n      this._data.massload = {};\n      parent.init.call(this, el, options);\n    };\n\n    this._load_nodes = function (nodes, callback, is_callback, force_reload) {\n      var s = this.settings.massload,\n          nodesString = JSON.stringify(nodes),\n          toLoad = [],\n          m = this._model.data,\n          i,\n          j,\n          dom;\n\n      if (!is_callback) {\n        for (i = 0, j = nodes.length; i < j; i++) {\n          if (!m[nodes[i]] || !m[nodes[i]].state.loaded && !m[nodes[i]].state.failed || force_reload) {\n            toLoad.push(nodes[i]);\n            dom = this.get_node(nodes[i], true);\n\n            if (dom && dom.length) {\n              dom.addClass(\"jstree-loading\").attr('aria-busy', true);\n            }\n          }\n        }\n\n        this._data.massload = {};\n\n        if (toLoad.length) {\n          if ($.isFunction(s)) {\n            return s.call(this, toLoad, $.proxy(function (data) {\n              var i, j;\n\n              if (data) {\n                for (i in data) {\n                  if (data.hasOwnProperty(i)) {\n                    this._data.massload[i] = data[i];\n                  }\n                }\n              }\n\n              for (i = 0, j = nodes.length; i < j; i++) {\n                dom = this.get_node(nodes[i], true);\n\n                if (dom && dom.length) {\n                  dom.removeClass(\"jstree-loading\").attr('aria-busy', false);\n                }\n              }\n\n              parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n            }, this));\n          }\n\n          if (_typeof(s) === 'object' && s && s.url) {\n            s = $.extend(true, {}, s);\n\n            if ($.isFunction(s.url)) {\n              s.url = s.url.call(this, toLoad);\n            }\n\n            if ($.isFunction(s.data)) {\n              s.data = s.data.call(this, toLoad);\n            }\n\n            return $.ajax(s).done($.proxy(function (data, t, x) {\n              var i, j;\n\n              if (data) {\n                for (i in data) {\n                  if (data.hasOwnProperty(i)) {\n                    this._data.massload[i] = data[i];\n                  }\n                }\n              }\n\n              for (i = 0, j = nodes.length; i < j; i++) {\n                dom = this.get_node(nodes[i], true);\n\n                if (dom && dom.length) {\n                  dom.removeClass(\"jstree-loading\").attr('aria-busy', false);\n                }\n              }\n\n              parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n            }, this)).fail($.proxy(function (f) {\n              parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n            }, this));\n          }\n        }\n      }\n\n      return parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n    };\n\n    this._load_node = function (obj, callback) {\n      var data = this._data.massload[obj.id],\n          rslt = null,\n          dom;\n\n      if (data) {\n        rslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof data === 'string' ? $($.parseHTML(data)).filter(function () {\n          return this.nodeType !== 3;\n        }) : data, function (status) {\n          callback.call(this, status);\n        });\n        dom = this.get_node(obj.id, true);\n\n        if (dom && dom.length) {\n          dom.removeClass(\"jstree-loading\").attr('aria-busy', false);\n        }\n\n        delete this._data.massload[obj.id];\n        return rslt;\n      }\n\n      return parent._load_node.call(this, obj, callback);\n    };\n  };\n  /**\n   * ### Search plugin\n   *\n   * Adds search functionality to jsTree.\n   */\n\n  /**\n   * stores all defaults for the search plugin\n   * @name $.jstree.defaults.search\n   * @plugin search\n   */\n\n\n  $.jstree.defaults.search = {\n    /**\n     * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.\n     *\n     * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.\n     * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to\n     * @name $.jstree.defaults.search.ajax\n     * @plugin search\n     */\n    ajax: false,\n\n    /**\n     * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.\n     * @name $.jstree.defaults.search.fuzzy\n     * @plugin search\n     */\n    fuzzy: false,\n\n    /**\n     * Indicates if the search should be case sensitive. Default is `false`.\n     * @name $.jstree.defaults.search.case_sensitive\n     * @plugin search\n     */\n    case_sensitive: false,\n\n    /**\n     * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).\n     * This setting can be changed at runtime when calling the search method. Default is `false`.\n     * @name $.jstree.defaults.search.show_only_matches\n     * @plugin search\n     */\n    show_only_matches: false,\n\n    /**\n     * Indicates if the children of matched element are shown (when show_only_matches is true)\n     * This setting can be changed at runtime when calling the search method. Default is `false`.\n     * @name $.jstree.defaults.search.show_only_matches_children\n     * @plugin search\n     */\n    show_only_matches_children: false,\n\n    /**\n     * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.\n     * @name $.jstree.defaults.search.close_opened_onclear\n     * @plugin search\n     */\n    close_opened_onclear: true,\n\n    /**\n     * Indicates if only leaf nodes should be included in search results. Default is `false`.\n     * @name $.jstree.defaults.search.search_leaves_only\n     * @plugin search\n     */\n    search_leaves_only: false,\n\n    /**\n     * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).\n     * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.\n     * @name $.jstree.defaults.search.search_callback\n     * @plugin search\n     */\n    search_callback: false\n  };\n\n  $.jstree.plugins.search = function (options, parent) {\n    this.bind = function () {\n      parent.bind.call(this);\n      this._data.search.str = \"\";\n      this._data.search.dom = $();\n      this._data.search.res = [];\n      this._data.search.opn = [];\n      this._data.search.som = false;\n      this._data.search.smc = false;\n      this._data.search.hdn = [];\n      this.element.on(\"search.jstree\", $.proxy(function (e, data) {\n        if (this._data.search.som && data.res.length) {\n          var m = this._model.data,\n              i,\n              j,\n              p = [],\n              k,\n              l;\n\n          for (i = 0, j = data.res.length; i < j; i++) {\n            if (m[data.res[i]] && !m[data.res[i]].state.hidden) {\n              p.push(data.res[i]);\n              p = p.concat(m[data.res[i]].parents);\n\n              if (this._data.search.smc) {\n                for (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {\n                  if (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {\n                    p.push(m[data.res[i]].children_d[k]);\n                  }\n                }\n              }\n            }\n          }\n\n          p = $.vakata.array_remove_item($.vakata.array_unique(p), $.jstree.root);\n          this._data.search.hdn = this.hide_all(true);\n          this.show_node(p, true);\n          this.redraw(true);\n        }\n      }, this)).on(\"clear_search.jstree\", $.proxy(function (e, data) {\n        if (this._data.search.som && data.res.length) {\n          this.show_node(this._data.search.hdn, true);\n          this.redraw(true);\n        }\n      }, this));\n    };\n    /**\n     * used to search the tree nodes for a given string\n     * @name search(str [, skip_async])\n     * @param {String} str the search string\n     * @param {Boolean} skip_async if set to true server will not be queried even if configured\n     * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)\n     * @param {mixed} inside an optional node to whose children to limit the search\n     * @param {Boolean} append if set to true the results of this search are appended to the previous search\n     * @plugin search\n     * @trigger search.jstree\n     */\n\n\n    this.search = function (str, skip_async, show_only_matches, inside, append, show_only_matches_children) {\n      if (str === false || $.trim(str.toString()) === \"\") {\n        return this.clear_search();\n      }\n\n      inside = this.get_node(inside);\n      inside = inside && inside.id ? inside.id : null;\n      str = str.toString();\n      var s = this.settings.search,\n          a = s.ajax ? s.ajax : false,\n          m = this._model.data,\n          f = null,\n          r = [],\n          p = [],\n          i,\n          j;\n\n      if (this._data.search.res.length && !append) {\n        this.clear_search();\n      }\n\n      if (show_only_matches === undefined) {\n        show_only_matches = s.show_only_matches;\n      }\n\n      if (show_only_matches_children === undefined) {\n        show_only_matches_children = s.show_only_matches_children;\n      }\n\n      if (!skip_async && a !== false) {\n        if ($.isFunction(a)) {\n          return a.call(this, str, $.proxy(function (d) {\n            if (d && d.d) {\n              d = d.d;\n            }\n\n            this._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\n              this.search(str, true, show_only_matches, inside, append, show_only_matches_children);\n            });\n          }, this), inside);\n        } else {\n          a = $.extend({}, a);\n\n          if (!a.data) {\n            a.data = {};\n          }\n\n          a.data.str = str;\n\n          if (inside) {\n            a.data.inside = inside;\n          }\n\n          if (this._data.search.lastRequest) {\n            this._data.search.lastRequest.abort();\n          }\n\n          this._data.search.lastRequest = $.ajax(a).fail($.proxy(function () {\n            this._data.core.last_error = {\n              'error': 'ajax',\n              'plugin': 'search',\n              'id': 'search_01',\n              'reason': 'Could not load search parents',\n              'data': JSON.stringify(a)\n            };\n            this.settings.core.error.call(this, this._data.core.last_error);\n          }, this)).done($.proxy(function (d) {\n            if (d && d.d) {\n              d = d.d;\n            }\n\n            this._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\n              this.search(str, true, show_only_matches, inside, append, show_only_matches_children);\n            });\n          }, this));\n          return this._data.search.lastRequest;\n        }\n      }\n\n      if (!append) {\n        this._data.search.str = str;\n        this._data.search.dom = $();\n        this._data.search.res = [];\n        this._data.search.opn = [];\n        this._data.search.som = show_only_matches;\n        this._data.search.smc = show_only_matches_children;\n      }\n\n      f = new $.vakata.search(str, true, {\n        caseSensitive: s.case_sensitive,\n        fuzzy: s.fuzzy\n      });\n      $.each(m[inside ? inside : $.jstree.root].children_d, function (ii, i) {\n        var v = m[i];\n\n        if (v.text && !v.state.hidden && (!s.search_leaves_only || v.state.loaded && v.children.length === 0) && (s.search_callback && s.search_callback.call(this, str, v) || !s.search_callback && f.search(v.text).isMatch)) {\n          r.push(i);\n          p = p.concat(v.parents);\n        }\n      });\n\n      if (r.length) {\n        p = $.vakata.array_unique(p);\n\n        for (i = 0, j = p.length; i < j; i++) {\n          if (p[i] !== $.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {\n            this._data.search.opn.push(p[i]);\n          }\n        }\n\n        if (!append) {\n          this._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) {\n            return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex, '\\\\$&') : v.replace($.jstree.idregex, '\\\\$&');\n          }).join(', #')));\n          this._data.search.res = r;\n        } else {\n          this._data.search.dom = this._data.search.dom.add($(this.element[0].querySelectorAll('#' + $.map(r, function (v) {\n            return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex, '\\\\$&') : v.replace($.jstree.idregex, '\\\\$&');\n          }).join(', #'))));\n          this._data.search.res = $.vakata.array_unique(this._data.search.res.concat(r));\n        }\n\n        this._data.search.dom.children(\".jstree-anchor\").addClass('jstree-search');\n      }\n      /**\n       * triggered after search is complete\n       * @event\n       * @name search.jstree\n       * @param {jQuery} nodes a jQuery collection of matching nodes\n       * @param {String} str the search string\n       * @param {Array} res a collection of objects represeing the matching nodes\n       * @plugin search\n       */\n\n\n      this.trigger('search', {\n        nodes: this._data.search.dom,\n        str: str,\n        res: this._data.search.res,\n        show_only_matches: show_only_matches\n      });\n    };\n    /**\n     * used to clear the last search (removes classes and shows all nodes if filtering is on)\n     * @name clear_search()\n     * @plugin search\n     * @trigger clear_search.jstree\n     */\n\n\n    this.clear_search = function () {\n      if (this.settings.search.close_opened_onclear) {\n        this.close_node(this._data.search.opn, 0);\n      }\n      /**\n       * triggered after search is complete\n       * @event\n       * @name clear_search.jstree\n       * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)\n       * @param {String} str the search string (the last search string)\n       * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)\n       * @plugin search\n       */\n\n\n      this.trigger('clear_search', {\n        'nodes': this._data.search.dom,\n        str: this._data.search.str,\n        res: this._data.search.res\n      });\n\n      if (this._data.search.res.length) {\n        this._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(this._data.search.res, function (v) {\n          return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex, '\\\\$&') : v.replace($.jstree.idregex, '\\\\$&');\n        }).join(', #')));\n\n        this._data.search.dom.children(\".jstree-anchor\").removeClass(\"jstree-search\");\n      }\n\n      this._data.search.str = \"\";\n      this._data.search.res = [];\n      this._data.search.opn = [];\n      this._data.search.dom = $();\n    };\n\n    this.redraw_node = function (obj, deep, callback, force_render) {\n      obj = parent.redraw_node.apply(this, arguments);\n\n      if (obj) {\n        if ($.inArray(obj.id, this._data.search.res) !== -1) {\n          var i,\n              j,\n              tmp = null;\n\n          for (i = 0, j = obj.childNodes.length; i < j; i++) {\n            if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\n              tmp = obj.childNodes[i];\n              break;\n            }\n          }\n\n          if (tmp) {\n            tmp.className += ' jstree-search';\n          }\n        }\n      }\n\n      return obj;\n    };\n  }; // helpers\n\n\n  (function ($) {\n    // from http://kiro.me/projects/fuse.html\n    $.vakata.search = function (pattern, txt, options) {\n      options = options || {};\n      options = $.extend({}, $.vakata.search.defaults, options);\n\n      if (options.fuzzy !== false) {\n        options.fuzzy = true;\n      }\n\n      pattern = options.caseSensitive ? pattern : pattern.toLowerCase();\n      var MATCH_LOCATION = options.location,\n          MATCH_DISTANCE = options.distance,\n          MATCH_THRESHOLD = options.threshold,\n          patternLen = pattern.length,\n          matchmask,\n          pattern_alphabet,\n          match_bitapScore,\n          search;\n\n      if (patternLen > 32) {\n        options.fuzzy = false;\n      }\n\n      if (options.fuzzy) {\n        matchmask = 1 << patternLen - 1;\n\n        pattern_alphabet = function () {\n          var mask = {},\n              i = 0;\n\n          for (i = 0; i < patternLen; i++) {\n            mask[pattern.charAt(i)] = 0;\n          }\n\n          for (i = 0; i < patternLen; i++) {\n            mask[pattern.charAt(i)] |= 1 << patternLen - i - 1;\n          }\n\n          return mask;\n        }();\n\n        match_bitapScore = function match_bitapScore(e, x) {\n          var accuracy = e / patternLen,\n              proximity = Math.abs(MATCH_LOCATION - x);\n\n          if (!MATCH_DISTANCE) {\n            return proximity ? 1.0 : accuracy;\n          }\n\n          return accuracy + proximity / MATCH_DISTANCE;\n        };\n      }\n\n      search = function search(text) {\n        text = options.caseSensitive ? text : text.toLowerCase();\n\n        if (pattern === text || text.indexOf(pattern) !== -1) {\n          return {\n            isMatch: true,\n            score: 0\n          };\n        }\n\n        if (!options.fuzzy) {\n          return {\n            isMatch: false,\n            score: 1\n          };\n        }\n\n        var i,\n            j,\n            textLen = text.length,\n            scoreThreshold = MATCH_THRESHOLD,\n            bestLoc = text.indexOf(pattern, MATCH_LOCATION),\n            binMin,\n            binMid,\n            binMax = patternLen + textLen,\n            lastRd,\n            start,\n            finish,\n            rd,\n            charMatch,\n            score = 1,\n            locations = [];\n\n        if (bestLoc !== -1) {\n          scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\n          bestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\n\n          if (bestLoc !== -1) {\n            scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\n          }\n        }\n\n        bestLoc = -1;\n\n        for (i = 0; i < patternLen; i++) {\n          binMin = 0;\n          binMid = binMax;\n\n          while (binMin < binMid) {\n            if (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\n              binMin = binMid;\n            } else {\n              binMax = binMid;\n            }\n\n            binMid = Math.floor((binMax - binMin) / 2 + binMin);\n          }\n\n          binMax = binMid;\n          start = Math.max(1, MATCH_LOCATION - binMid + 1);\n          finish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\n          rd = new Array(finish + 2);\n          rd[finish + 1] = (1 << i) - 1;\n\n          for (j = finish; j >= start; j--) {\n            charMatch = pattern_alphabet[text.charAt(j - 1)];\n\n            if (i === 0) {\n              rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n            } else {\n              rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n            }\n\n            if (rd[j] & matchmask) {\n              score = match_bitapScore(i, j - 1);\n\n              if (score <= scoreThreshold) {\n                scoreThreshold = score;\n                bestLoc = j - 1;\n                locations.push(bestLoc);\n\n                if (bestLoc > MATCH_LOCATION) {\n                  start = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n\n          if (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\n            break;\n          }\n\n          lastRd = rd;\n        }\n\n        return {\n          isMatch: bestLoc >= 0,\n          score: score\n        };\n      };\n\n      return txt === true ? {\n        'search': search\n      } : search(txt);\n    };\n\n    $.vakata.search.defaults = {\n      location: 0,\n      distance: 100,\n      threshold: 0.6,\n      fuzzy: false,\n      caseSensitive: false\n    };\n  })($); // include the search plugin by default\n  // $.jstree.defaults.plugins.push(\"search\");\n\n  /**\n   * ### Sort plugin\n   *\n   * Automatically sorts all siblings in the tree according to a sorting function.\n   */\n\n  /**\n   * the settings function used to sort the nodes.\n   * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\n   * @name $.jstree.defaults.sort\n   * @plugin sort\n   */\n\n\n  $.jstree.defaults.sort = function (a, b) {\n    //return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\n    return this.get_text(a) > this.get_text(b) ? 1 : -1;\n  };\n\n  $.jstree.plugins.sort = function (options, parent) {\n    this.bind = function () {\n      parent.bind.call(this);\n      this.element.on(\"model.jstree\", $.proxy(function (e, data) {\n        this.sort(data.parent, true);\n      }, this)).on(\"rename_node.jstree create_node.jstree\", $.proxy(function (e, data) {\n        this.sort(data.parent || data.node.parent, false);\n        this.redraw_node(data.parent || data.node.parent, true);\n      }, this)).on(\"move_node.jstree copy_node.jstree\", $.proxy(function (e, data) {\n        this.sort(data.parent, false);\n        this.redraw_node(data.parent, true);\n      }, this));\n    };\n    /**\n     * used to sort a node's children\n     * @private\n     * @name sort(obj [, deep])\n     * @param  {mixed} obj the node\n     * @param {Boolean} deep if set to `true` nodes are sorted recursively.\n     * @plugin sort\n     * @trigger search.jstree\n     */\n\n\n    this.sort = function (obj, deep) {\n      var i, j;\n      obj = this.get_node(obj);\n\n      if (obj && obj.children && obj.children.length) {\n        obj.children.sort($.proxy(this.settings.sort, this));\n\n        if (deep) {\n          for (i = 0, j = obj.children_d.length; i < j; i++) {\n            this.sort(obj.children_d[i], false);\n          }\n        }\n      }\n    };\n  }; // include the sort plugin by default\n  // $.jstree.defaults.plugins.push(\"sort\");\n\n  /**\n   * ### State plugin\n   *\n   * Saves the state of the tree (selected nodes, opened nodes) on the user's computer using available options (localStorage, cookies, etc)\n   */\n\n\n  var to = false;\n  /**\n   * stores all defaults for the state plugin\n   * @name $.jstree.defaults.state\n   * @plugin state\n   */\n\n  $.jstree.defaults.state = {\n    /**\n     * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.\n     * @name $.jstree.defaults.state.key\n     * @plugin state\n     */\n    key: 'jstree',\n\n    /**\n     * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.\n     * @name $.jstree.defaults.state.events\n     * @plugin state\n     */\n    events: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',\n\n    /**\n     * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.\n     * @name $.jstree.defaults.state.ttl\n     * @plugin state\n     */\n    ttl: false,\n\n    /**\n     * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.\n     * @name $.jstree.defaults.state.filter\n     * @plugin state\n     */\n    filter: false\n  };\n\n  $.jstree.plugins.state = function (options, parent) {\n    this.bind = function () {\n      parent.bind.call(this);\n      var bind = $.proxy(function () {\n        this.element.on(this.settings.state.events, $.proxy(function () {\n          if (to) {\n            clearTimeout(to);\n          }\n\n          to = setTimeout($.proxy(function () {\n            this.save_state();\n          }, this), 100);\n        }, this));\n        /**\n         * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).\n         * @event\n         * @name state_ready.jstree\n         * @plugin state\n         */\n\n        this.trigger('state_ready');\n      }, this);\n      this.element.on(\"ready.jstree\", $.proxy(function (e, data) {\n        this.element.one(\"restore_state.jstree\", bind);\n\n        if (!this.restore_state()) {\n          bind();\n        }\n      }, this));\n    };\n    /**\n     * save the state\n     * @name save_state()\n     * @plugin state\n     */\n\n\n    this.save_state = function () {\n      var st = {\n        'state': this.get_state(),\n        'ttl': this.settings.state.ttl,\n        'sec': +new Date()\n      };\n      $.vakata.storage.set(this.settings.state.key, JSON.stringify(st));\n    };\n    /**\n     * restore the state from the user's computer\n     * @name restore_state()\n     * @plugin state\n     */\n\n\n    this.restore_state = function () {\n      var k = $.vakata.storage.get(this.settings.state.key);\n\n      if (!!k) {\n        try {\n          k = JSON.parse(k);\n        } catch (ex) {\n          return false;\n        }\n      }\n\n      if (!!k && k.ttl && k.sec && +new Date() - k.sec > k.ttl) {\n        return false;\n      }\n\n      if (!!k && k.state) {\n        k = k.state;\n      }\n\n      if (!!k && $.isFunction(this.settings.state.filter)) {\n        k = this.settings.state.filter.call(this, k);\n      }\n\n      if (!!k) {\n        this.element.one(\"set_state.jstree\", function (e, data) {\n          data.instance.trigger('restore_state', {\n            'state': $.extend(true, {}, k)\n          });\n        });\n        this.set_state(k);\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * clear the state on the user's computer\n     * @name clear_state()\n     * @plugin state\n     */\n\n\n    this.clear_state = function () {\n      return $.vakata.storage.del(this.settings.state.key);\n    };\n  };\n\n  (function ($, undefined) {\n    $.vakata.storage = {\n      // simply specifying the functions in FF throws an error\n      set: function set(key, val) {\n        return window.localStorage.setItem(key, val);\n      },\n      get: function get(key) {\n        return window.localStorage.getItem(key);\n      },\n      del: function del(key) {\n        return window.localStorage.removeItem(key);\n      }\n    };\n  })($); // include the state plugin by default\n  // $.jstree.defaults.plugins.push(\"state\");\n\n  /**\n   * ### Types plugin\n   *\n   * Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.\n   */\n\n  /**\n   * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).\n   *\n   * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.\n   * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.\n   * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.\n   * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.\n   * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)\n   * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)\n   *\n   * There are two predefined types:\n   *\n   * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.\n   * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.\n   *\n   * @name $.jstree.defaults.types\n   * @plugin types\n   */\n\n\n  $.jstree.defaults.types = {\n    'default': {}\n  };\n  $.jstree.defaults.types[$.jstree.root] = {};\n\n  $.jstree.plugins.types = function (options, parent) {\n    this.init = function (el, options) {\n      var i, j;\n\n      if (options && options.types && options.types['default']) {\n        for (i in options.types) {\n          if (i !== \"default\" && i !== $.jstree.root && options.types.hasOwnProperty(i)) {\n            for (j in options.types['default']) {\n              if (options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {\n                options.types[i][j] = options.types['default'][j];\n              }\n            }\n          }\n        }\n      }\n\n      parent.init.call(this, el, options);\n      this._model.data[$.jstree.root].type = $.jstree.root;\n    };\n\n    this.refresh = function (skip_loading, forget_state) {\n      parent.refresh.call(this, skip_loading, forget_state);\n      this._model.data[$.jstree.root].type = $.jstree.root;\n    };\n\n    this.bind = function () {\n      this.element.on('model.jstree', $.proxy(function (e, data) {\n        var m = this._model.data,\n            dpc = data.nodes,\n            t = this.settings.types,\n            i,\n            j,\n            c = 'default',\n            k;\n\n        for (i = 0, j = dpc.length; i < j; i++) {\n          c = 'default';\n\n          if (m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {\n            c = m[dpc[i]].original.type;\n          }\n\n          if (m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {\n            c = m[dpc[i]].data.jstree.type;\n          }\n\n          m[dpc[i]].type = c;\n\n          if (m[dpc[i]].icon === true && t[c].icon !== undefined) {\n            m[dpc[i]].icon = t[c].icon;\n          }\n\n          if (t[c].li_attr !== undefined && _typeof(t[c].li_attr) === 'object') {\n            for (k in t[c].li_attr) {\n              if (t[c].li_attr.hasOwnProperty(k)) {\n                if (k === 'id') {\n                  continue;\n                } else if (m[dpc[i]].li_attr[k] === undefined) {\n                  m[dpc[i]].li_attr[k] = t[c].li_attr[k];\n                } else if (k === 'class') {\n                  m[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];\n                }\n              }\n            }\n          }\n\n          if (t[c].a_attr !== undefined && _typeof(t[c].a_attr) === 'object') {\n            for (k in t[c].a_attr) {\n              if (t[c].a_attr.hasOwnProperty(k)) {\n                if (k === 'id') {\n                  continue;\n                } else if (m[dpc[i]].a_attr[k] === undefined) {\n                  m[dpc[i]].a_attr[k] = t[c].a_attr[k];\n                } else if (k === 'href' && m[dpc[i]].a_attr[k] === '#') {\n                  m[dpc[i]].a_attr['href'] = t[c].a_attr['href'];\n                } else if (k === 'class') {\n                  m[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];\n                }\n              }\n            }\n          }\n        }\n\n        m[$.jstree.root].type = $.jstree.root;\n      }, this));\n      parent.bind.call(this);\n    };\n\n    this.get_json = function (obj, options, flat) {\n      var i,\n          j,\n          m = this._model.data,\n          opt = options ? $.extend(true, {}, options, {\n        no_id: false\n      }) : {},\n          tmp = parent.get_json.call(this, obj, opt, flat);\n\n      if (tmp === false) {\n        return false;\n      }\n\n      if ($.isArray(tmp)) {\n        for (i = 0, j = tmp.length; i < j; i++) {\n          tmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : \"default\";\n\n          if (options && options.no_id) {\n            delete tmp[i].id;\n\n            if (tmp[i].li_attr && tmp[i].li_attr.id) {\n              delete tmp[i].li_attr.id;\n            }\n\n            if (tmp[i].a_attr && tmp[i].a_attr.id) {\n              delete tmp[i].a_attr.id;\n            }\n          }\n        }\n      } else {\n        tmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : \"default\";\n\n        if (options && options.no_id) {\n          tmp = this._delete_ids(tmp);\n        }\n      }\n\n      return tmp;\n    };\n\n    this._delete_ids = function (tmp) {\n      if ($.isArray(tmp)) {\n        for (var i = 0, j = tmp.length; i < j; i++) {\n          tmp[i] = this._delete_ids(tmp[i]);\n        }\n\n        return tmp;\n      }\n\n      delete tmp.id;\n\n      if (tmp.li_attr && tmp.li_attr.id) {\n        delete tmp.li_attr.id;\n      }\n\n      if (tmp.a_attr && tmp.a_attr.id) {\n        delete tmp.a_attr.id;\n      }\n\n      if (tmp.children && $.isArray(tmp.children)) {\n        tmp.children = this._delete_ids(tmp.children);\n      }\n\n      return tmp;\n    };\n\n    this.check = function (chk, obj, par, pos, more) {\n      if (parent.check.call(this, chk, obj, par, pos, more) === false) {\n        return false;\n      }\n\n      obj = obj && obj.id ? obj : this.get_node(obj);\n      par = par && par.id ? par : this.get_node(par);\n      var m = obj && obj.id ? more && more.origin ? more.origin : $.jstree.reference(obj.id) : null,\n          tmp,\n          d,\n          i,\n          j;\n      m = m && m._model && m._model.data ? m._model.data : null;\n\n      switch (chk) {\n        case \"create_node\":\n        case \"move_node\":\n        case \"copy_node\":\n          if (chk !== 'move_node' || $.inArray(obj.id, par.children) === -1) {\n            tmp = this.get_rules(par);\n\n            if (tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {\n              this._data.core.last_error = {\n                'error': 'check',\n                'plugin': 'types',\n                'id': 'types_01',\n                'reason': 'max_children prevents function: ' + chk,\n                'data': JSON.stringify({\n                  'chk': chk,\n                  'pos': pos,\n                  'obj': obj && obj.id ? obj.id : false,\n                  'par': par && par.id ? par.id : false\n                })\n              };\n              return false;\n            }\n\n            if (tmp.valid_children !== undefined && tmp.valid_children !== -1 && $.inArray(obj.type || 'default', tmp.valid_children) === -1) {\n              this._data.core.last_error = {\n                'error': 'check',\n                'plugin': 'types',\n                'id': 'types_02',\n                'reason': 'valid_children prevents function: ' + chk,\n                'data': JSON.stringify({\n                  'chk': chk,\n                  'pos': pos,\n                  'obj': obj && obj.id ? obj.id : false,\n                  'par': par && par.id ? par.id : false\n                })\n              };\n              return false;\n            }\n\n            if (m && obj.children_d && obj.parents) {\n              d = 0;\n\n              for (i = 0, j = obj.children_d.length; i < j; i++) {\n                d = Math.max(d, m[obj.children_d[i]].parents.length);\n              }\n\n              d = d - obj.parents.length + 1;\n            }\n\n            if (d <= 0 || d === undefined) {\n              d = 1;\n            }\n\n            do {\n              if (tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {\n                this._data.core.last_error = {\n                  'error': 'check',\n                  'plugin': 'types',\n                  'id': 'types_03',\n                  'reason': 'max_depth prevents function: ' + chk,\n                  'data': JSON.stringify({\n                    'chk': chk,\n                    'pos': pos,\n                    'obj': obj && obj.id ? obj.id : false,\n                    'par': par && par.id ? par.id : false\n                  })\n                };\n                return false;\n              }\n\n              par = this.get_node(par.parent);\n              tmp = this.get_rules(par);\n              d++;\n            } while (par);\n          }\n\n          break;\n      }\n\n      return true;\n    };\n    /**\n     * used to retrieve the type settings object for a node\n     * @name get_rules(obj)\n     * @param {mixed} obj the node to find the rules for\n     * @return {Object}\n     * @plugin types\n     */\n\n\n    this.get_rules = function (obj) {\n      obj = this.get_node(obj);\n\n      if (!obj) {\n        return false;\n      }\n\n      var tmp = this.get_type(obj, true);\n\n      if (tmp.max_depth === undefined) {\n        tmp.max_depth = -1;\n      }\n\n      if (tmp.max_children === undefined) {\n        tmp.max_children = -1;\n      }\n\n      if (tmp.valid_children === undefined) {\n        tmp.valid_children = -1;\n      }\n\n      return tmp;\n    };\n    /**\n     * used to retrieve the type string or settings object for a node\n     * @name get_type(obj [, rules])\n     * @param {mixed} obj the node to find the rules for\n     * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned\n     * @return {String|Object}\n     * @plugin types\n     */\n\n\n    this.get_type = function (obj, rules) {\n      obj = this.get_node(obj);\n      return !obj ? false : rules ? $.extend({\n        'type': obj.type\n      }, this.settings.types[obj.type]) : obj.type;\n    };\n    /**\n     * used to change a node's type\n     * @name set_type(obj, type)\n     * @param {mixed} obj the node to change\n     * @param {String} type the new type\n     * @plugin types\n     */\n\n\n    this.set_type = function (obj, type) {\n      var m = this._model.data,\n          t,\n          t1,\n          t2,\n          old_type,\n          old_icon,\n          k,\n          d,\n          a;\n\n      if ($.isArray(obj)) {\n        obj = obj.slice();\n\n        for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n          this.set_type(obj[t1], type);\n        }\n\n        return true;\n      }\n\n      t = this.settings.types;\n      obj = this.get_node(obj);\n\n      if (!t[type] || !obj) {\n        return false;\n      }\n\n      d = this.get_node(obj, true);\n\n      if (d && d.length) {\n        a = d.children('.jstree-anchor');\n      }\n\n      old_type = obj.type;\n      old_icon = this.get_icon(obj);\n      obj.type = type;\n\n      if (old_icon === true || !t[old_type] || t[old_type].icon !== undefined && old_icon === t[old_type].icon) {\n        this.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);\n      } // remove old type props\n\n\n      if (t[old_type] && t[old_type].li_attr !== undefined && _typeof(t[old_type].li_attr) === 'object') {\n        for (k in t[old_type].li_attr) {\n          if (t[old_type].li_attr.hasOwnProperty(k)) {\n            if (k === 'id') {\n              continue;\n            } else if (k === 'class') {\n              m[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');\n\n              if (d) {\n                d.removeClass(t[old_type].li_attr[k]);\n              }\n            } else if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {\n              m[obj.id].li_attr[k] = null;\n\n              if (d) {\n                d.removeAttr(k);\n              }\n            }\n          }\n        }\n      }\n\n      if (t[old_type] && t[old_type].a_attr !== undefined && _typeof(t[old_type].a_attr) === 'object') {\n        for (k in t[old_type].a_attr) {\n          if (t[old_type].a_attr.hasOwnProperty(k)) {\n            if (k === 'id') {\n              continue;\n            } else if (k === 'class') {\n              m[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');\n\n              if (a) {\n                a.removeClass(t[old_type].a_attr[k]);\n              }\n            } else if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {\n              if (k === 'href') {\n                m[obj.id].a_attr[k] = '#';\n\n                if (a) {\n                  a.attr('href', '#');\n                }\n              } else {\n                delete m[obj.id].a_attr[k];\n\n                if (a) {\n                  a.removeAttr(k);\n                }\n              }\n            }\n          }\n        }\n      } // add new props\n\n\n      if (t[type].li_attr !== undefined && _typeof(t[type].li_attr) === 'object') {\n        for (k in t[type].li_attr) {\n          if (t[type].li_attr.hasOwnProperty(k)) {\n            if (k === 'id') {\n              continue;\n            } else if (m[obj.id].li_attr[k] === undefined) {\n              m[obj.id].li_attr[k] = t[type].li_attr[k];\n\n              if (d) {\n                if (k === 'class') {\n                  d.addClass(t[type].li_attr[k]);\n                } else {\n                  d.attr(k, t[type].li_attr[k]);\n                }\n              }\n            } else if (k === 'class') {\n              m[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];\n\n              if (d) {\n                d.addClass(t[type].li_attr[k]);\n              }\n            }\n          }\n        }\n      }\n\n      if (t[type].a_attr !== undefined && _typeof(t[type].a_attr) === 'object') {\n        for (k in t[type].a_attr) {\n          if (t[type].a_attr.hasOwnProperty(k)) {\n            if (k === 'id') {\n              continue;\n            } else if (m[obj.id].a_attr[k] === undefined) {\n              m[obj.id].a_attr[k] = t[type].a_attr[k];\n\n              if (a) {\n                if (k === 'class') {\n                  a.addClass(t[type].a_attr[k]);\n                } else {\n                  a.attr(k, t[type].a_attr[k]);\n                }\n              }\n            } else if (k === 'href' && m[obj.id].a_attr[k] === '#') {\n              m[obj.id].a_attr['href'] = t[type].a_attr['href'];\n\n              if (a) {\n                a.attr('href', t[type].a_attr['href']);\n              }\n            } else if (k === 'class') {\n              m[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];\n\n              if (a) {\n                a.addClass(t[type].a_attr[k]);\n              }\n            }\n          }\n        }\n      }\n\n      return true;\n    };\n  }; // include the types plugin by default\n  // $.jstree.defaults.plugins.push(\"types\");\n\n  /**\n   * ### Unique plugin\n   *\n   * Enforces that no nodes with the same name can coexist as siblings.\n   */\n\n  /**\n   * stores all defaults for the unique plugin\n   * @name $.jstree.defaults.unique\n   * @plugin unique\n   */\n\n\n  $.jstree.defaults.unique = {\n    /**\n     * Indicates if the comparison should be case sensitive. Default is `false`.\n     * @name $.jstree.defaults.unique.case_sensitive\n     * @plugin unique\n     */\n    case_sensitive: false,\n\n    /**\n     * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.\n     * @name $.jstree.defaults.unique.duplicate\n     * @plugin unique\n     */\n    duplicate: function duplicate(name, counter) {\n      return name + ' (' + counter + ')';\n    }\n  };\n\n  $.jstree.plugins.unique = function (options, parent) {\n    this.check = function (chk, obj, par, pos, more) {\n      if (parent.check.call(this, chk, obj, par, pos, more) === false) {\n        return false;\n      }\n\n      obj = obj && obj.id ? obj : this.get_node(obj);\n      par = par && par.id ? par : this.get_node(par);\n\n      if (!par || !par.children) {\n        return true;\n      }\n\n      var n = chk === \"rename_node\" ? pos : obj.text,\n          c = [],\n          s = this.settings.unique.case_sensitive,\n          m = this._model.data,\n          i,\n          j;\n\n      for (i = 0, j = par.children.length; i < j; i++) {\n        c.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());\n      }\n\n      if (!s) {\n        n = n.toLowerCase();\n      }\n\n      switch (chk) {\n        case \"delete_node\":\n          return true;\n\n        case \"rename_node\":\n          i = $.inArray(n, c) === -1 || obj.text && obj.text[s ? 'toString' : 'toLowerCase']() === n;\n\n          if (!i) {\n            this._data.core.last_error = {\n              'error': 'check',\n              'plugin': 'unique',\n              'id': 'unique_01',\n              'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,\n              'data': JSON.stringify({\n                'chk': chk,\n                'pos': pos,\n                'obj': obj && obj.id ? obj.id : false,\n                'par': par && par.id ? par.id : false\n              })\n            };\n          }\n\n          return i;\n\n        case \"create_node\":\n          i = $.inArray(n, c) === -1;\n\n          if (!i) {\n            this._data.core.last_error = {\n              'error': 'check',\n              'plugin': 'unique',\n              'id': 'unique_04',\n              'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,\n              'data': JSON.stringify({\n                'chk': chk,\n                'pos': pos,\n                'obj': obj && obj.id ? obj.id : false,\n                'par': par && par.id ? par.id : false\n              })\n            };\n          }\n\n          return i;\n\n        case \"copy_node\":\n          i = $.inArray(n, c) === -1;\n\n          if (!i) {\n            this._data.core.last_error = {\n              'error': 'check',\n              'plugin': 'unique',\n              'id': 'unique_02',\n              'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,\n              'data': JSON.stringify({\n                'chk': chk,\n                'pos': pos,\n                'obj': obj && obj.id ? obj.id : false,\n                'par': par && par.id ? par.id : false\n              })\n            };\n          }\n\n          return i;\n\n        case \"move_node\":\n          i = obj.parent === par.id && (!more || !more.is_multi) || $.inArray(n, c) === -1;\n\n          if (!i) {\n            this._data.core.last_error = {\n              'error': 'check',\n              'plugin': 'unique',\n              'id': 'unique_03',\n              'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,\n              'data': JSON.stringify({\n                'chk': chk,\n                'pos': pos,\n                'obj': obj && obj.id ? obj.id : false,\n                'par': par && par.id ? par.id : false\n              })\n            };\n          }\n\n          return i;\n      }\n\n      return true;\n    };\n\n    this.create_node = function (par, node, pos, callback, is_loaded) {\n      if (!node || node.text === undefined) {\n        if (par === null) {\n          par = $.jstree.root;\n        }\n\n        par = this.get_node(par);\n\n        if (!par) {\n          return parent.create_node.call(this, par, node, pos, callback, is_loaded);\n        }\n\n        pos = pos === undefined ? \"last\" : pos;\n\n        if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n          return parent.create_node.call(this, par, node, pos, callback, is_loaded);\n        }\n\n        if (!node) {\n          node = {};\n        }\n\n        var tmp,\n            n,\n            dpc,\n            i,\n            j,\n            m = this._model.data,\n            s = this.settings.unique.case_sensitive,\n            cb = this.settings.unique.duplicate;\n        n = tmp = this.get_string('New node');\n        dpc = [];\n\n        for (i = 0, j = par.children.length; i < j; i++) {\n          dpc.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());\n        }\n\n        i = 1;\n\n        while ($.inArray(s ? n : n.toLowerCase(), dpc) !== -1) {\n          n = cb.call(this, tmp, ++i).toString();\n        }\n\n        node.text = n;\n      }\n\n      return parent.create_node.call(this, par, node, pos, callback, is_loaded);\n    };\n  }; // include the unique plugin by default\n  // $.jstree.defaults.plugins.push(\"unique\");\n\n  /**\n   * ### Wholerow plugin\n   *\n   * Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.\n   */\n\n\n  var div = document.createElement('DIV');\n  div.setAttribute('unselectable', 'on');\n  div.setAttribute('role', 'presentation');\n  div.className = 'jstree-wholerow';\n  div.innerHTML = '&#160;';\n\n  $.jstree.plugins.wholerow = function (options, parent) {\n    this.bind = function () {\n      parent.bind.call(this);\n      this.element.on('ready.jstree set_state.jstree', $.proxy(function () {\n        this.hide_dots();\n      }, this)).on(\"init.jstree loading.jstree ready.jstree\", $.proxy(function () {\n        //div.style.height = this._data.core.li_height + 'px';\n        this.get_container_ul().addClass('jstree-wholerow-ul');\n      }, this)).on(\"deselect_all.jstree\", $.proxy(function (e, data) {\n        this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\n      }, this)).on(\"changed.jstree\", $.proxy(function (e, data) {\n        this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\n        var tmp = false,\n            i,\n            j;\n\n        for (i = 0, j = data.selected.length; i < j; i++) {\n          tmp = this.get_node(data.selected[i], true);\n\n          if (tmp && tmp.length) {\n            tmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\n          }\n        }\n      }, this)).on(\"open_node.jstree\", $.proxy(function (e, data) {\n        this.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\n      }, this)).on(\"hover_node.jstree dehover_node.jstree\", $.proxy(function (e, data) {\n        if (e.type === \"hover_node\" && this.is_disabled(data.node)) {\n          return;\n        }\n\n        this.get_node(data.node, true).children('.jstree-wholerow')[e.type === \"hover_node\" ? \"addClass\" : \"removeClass\"]('jstree-wholerow-hovered');\n      }, this)).on(\"contextmenu.jstree\", \".jstree-wholerow\", $.proxy(function (e) {\n        if (this._data.contextmenu) {\n          e.preventDefault();\n          var tmp = $.Event('contextmenu', {\n            metaKey: e.metaKey,\n            ctrlKey: e.ctrlKey,\n            altKey: e.altKey,\n            shiftKey: e.shiftKey,\n            pageX: e.pageX,\n            pageY: e.pageY\n          });\n          $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp);\n        }\n      }, this))\n      /*!\n      .on(\"mousedown.jstree touchstart.jstree\", \".jstree-wholerow\", function (e) {\n      \t\tif(e.target === e.currentTarget) {\n      \t\t\tvar a = $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\");\n      \t\t\te.target = a[0];\n      \t\t\ta.trigger(e);\n      \t\t}\n      \t})\n      */\n      .on(\"click.jstree\", \".jstree-wholerow\", function (e) {\n        e.stopImmediatePropagation();\n        var tmp = $.Event('click', {\n          metaKey: e.metaKey,\n          ctrlKey: e.ctrlKey,\n          altKey: e.altKey,\n          shiftKey: e.shiftKey\n        });\n        $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\n      }).on(\"dblclick.jstree\", \".jstree-wholerow\", function (e) {\n        e.stopImmediatePropagation();\n        var tmp = $.Event('dblclick', {\n          metaKey: e.metaKey,\n          ctrlKey: e.ctrlKey,\n          altKey: e.altKey,\n          shiftKey: e.shiftKey\n        });\n        $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\n      }).on(\"click.jstree\", \".jstree-leaf > .jstree-ocl\", $.proxy(function (e) {\n        e.stopImmediatePropagation();\n        var tmp = $.Event('click', {\n          metaKey: e.metaKey,\n          ctrlKey: e.ctrlKey,\n          altKey: e.altKey,\n          shiftKey: e.shiftKey\n        });\n        $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\n      }, this)).on(\"mouseover.jstree\", \".jstree-wholerow, .jstree-icon\", $.proxy(function (e) {\n        e.stopImmediatePropagation();\n\n        if (!this.is_disabled(e.currentTarget)) {\n          this.hover_node(e.currentTarget);\n        }\n\n        return false;\n      }, this)).on(\"mouseleave.jstree\", \".jstree-node\", $.proxy(function (e) {\n        this.dehover_node(e.currentTarget);\n      }, this));\n    };\n\n    this.teardown = function () {\n      if (this.settings.wholerow) {\n        this.element.find(\".jstree-wholerow\").remove();\n      }\n\n      parent.teardown.call(this);\n    };\n\n    this.redraw_node = function (obj, deep, callback, force_render) {\n      obj = parent.redraw_node.apply(this, arguments);\n\n      if (obj) {\n        var tmp = div.cloneNode(true); //tmp.style.height = this._data.core.li_height + 'px';\n\n        if ($.inArray(obj.id, this._data.core.selected) !== -1) {\n          tmp.className += ' jstree-wholerow-clicked';\n        }\n\n        if (this._data.core.focused && this._data.core.focused === obj.id) {\n          tmp.className += ' jstree-wholerow-hovered';\n        }\n\n        obj.insertBefore(tmp, obj.childNodes[0]);\n      }\n\n      return obj;\n    };\n  }; // include the wholerow plugin by default\n  // $.jstree.defaults.plugins.push(\"wholerow\");\n\n\n  if (document.registerElement && Object && Object.create) {\n    var proto = Object.create(HTMLElement.prototype);\n\n    proto.createdCallback = function () {\n      var c = {\n        core: {},\n        plugins: []\n      },\n          i;\n\n      for (i in $.jstree.plugins) {\n        if ($.jstree.plugins.hasOwnProperty(i) && this.attributes[i]) {\n          c.plugins.push(i);\n\n          if (this.getAttribute(i) && JSON.parse(this.getAttribute(i))) {\n            c[i] = JSON.parse(this.getAttribute(i));\n          }\n        }\n      }\n\n      for (i in $.jstree.defaults.core) {\n        if ($.jstree.defaults.core.hasOwnProperty(i) && this.attributes[i]) {\n          c.core[i] = JSON.parse(this.getAttribute(i)) || this.getAttribute(i);\n        }\n      }\n\n      $(this).jstree(c);\n    }; // proto.attributeChangedCallback = function (name, previous, value) { };\n\n\n    try {\n      document.registerElement(\"vakata-jstree\", {\n        prototype: proto\n      });\n    } catch (ignore) {}\n  }\n});"

/***/ }),

/***/ "./node_modules/script-loader/addScript.js":
/*!*************************************************!*\
  !*** ./node_modules/script-loader/addScript.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	function log(error) {
		(typeof console !== "undefined")
		&& (console.error || console.log)("[Script Loader]", error);
	}

	// Check for IE =< 8
	function isIE() {
		return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
	}

	try {
		if (typeof execScript !== "undefined" && isIE()) {
			execScript(src);
		} else if (typeof eval !== "undefined") {
			eval.call(null, src);
		} else {
			log("EvalError: No eval function available");
		}
	} catch (error) {
		log(error);
	}
}


/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jstree-3.3.3.js":
/*!****************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jstree-3.3.3.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

<<<<<<< HEAD
__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jstree-3.3.3.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jstree-3.3.3.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--0-0!/home/osboxes/workspace/mlab.local.test/assets/js/jstree-3.3.3.js")
=======
__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jstree-3.3.3.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jstree-3.3.3.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--4-0!/home/osboxes/workspace/mlab.local.test/assets/js/jstree-3.3.3.js")
>>>>>>> develop

/***/ })

/******/ });
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> develop
