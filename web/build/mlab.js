/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/mlab.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/mlab.js":
/*!***************************!*\
  !*** ./assets/js/mlab.js ***!
  \***************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// require jQuery normally
var $ = __webpack_require__(/*! script-loader!./jquery-2.1.4.js */ "./node_modules/script-loader/index.js!./assets/js/jquery-2.1.4.js");

// if/when use NPM version, need to create global $ and jQuery variables
// global.$ = global.jQuery = $;

__webpack_require__(/*! script-loader!./jquery.ui-1.11.4.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.ui-1.11.4.js");
__webpack_require__(/*! script-loader!./jquery.form.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.form.js");
__webpack_require__(/*! script-loader!./jquery.uploadfile-4.0.11.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.uploadfile-4.0.11.js");
// require('script-loader!./jquery.qtip-3.0.3.js');
__webpack_require__(/*! script-loader!./jquery.qtip.nightly.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.qtip.nightly.js");
__webpack_require__(/*! script-loader!./bowser.js */ "./node_modules/script-loader/index.js!./assets/js/bowser.js");

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/bowser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/bowser.js ***!
  \*************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "/*!\n  * Bowser - a browser detector\n  * https://github.com/ded/bowser\n  * MIT License | (c) Dustin Diaz 2014\n  */\n\n!function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports['browser'] = definition();else if (typeof define == 'function' && define.amd) define(definition);else this[name] = definition();\n}('bowser', function () {\n  /**\n    * See useragents.js for examples of navigator.userAgent\n    */\n\n  var t = true;\n\n  function detect(ua) {\n\n    function getFirstMatch(regex) {\n      var match = ua.match(regex);\n      return match && match.length > 1 && match[1] || '';\n    }\n\n    function getSecondMatch(regex) {\n      var match = ua.match(regex);\n      return match && match.length > 1 && match[2] || '';\n    }\n\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),\n        likeAndroid = /like android/i.test(ua),\n        android = !likeAndroid && /android/i.test(ua),\n        edgeVersion = getFirstMatch(/edge\\/(\\d+(\\.\\d+)?)/i),\n        versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i),\n        tablet = /tablet/i.test(ua),\n        mobile = !tablet && /[^-]mobi/i.test(ua),\n        result;\n\n    if (/opera|opr/i.test(ua)) {\n      result = {\n        name: 'Opera',\n        opera: t,\n        version: versionIdentifier || getFirstMatch(/(?:opera|opr)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/windows phone/i.test(ua)) {\n      result = {\n        name: 'Windows Phone',\n        windowsphone: t\n      };\n      if (edgeVersion) {\n        result.msedge = t;\n        result.version = edgeVersion;\n      } else {\n        result.msie = t;\n        result.version = getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i);\n      }\n    } else if (/msie|trident/i.test(ua)) {\n      result = {\n        name: 'Internet Explorer',\n        msie: t,\n        version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/chrome.+? edge/i.test(ua)) {\n      result = {\n        name: 'Microsoft Edge',\n        msedge: t,\n        version: edgeVersion\n      };\n    } else if (/chrome|crios|crmo/i.test(ua)) {\n      result = {\n        name: 'Chrome',\n        chrome: t,\n        version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (iosdevice) {\n      result = {\n        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'\n        // WTF: version is not part of user agent in web apps\n      };if (versionIdentifier) {\n        result.version = versionIdentifier;\n      }\n    } else if (/sailfish/i.test(ua)) {\n      result = {\n        name: 'Sailfish',\n        sailfish: t,\n        version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/seamonkey\\//i.test(ua)) {\n      result = {\n        name: 'SeaMonkey',\n        seamonkey: t,\n        version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/firefox|iceweasel/i.test(ua)) {\n      result = {\n        name: 'Firefox',\n        firefox: t,\n        version: getFirstMatch(/(?:firefox|iceweasel)[ \\/](\\d+(\\.\\d+)?)/i)\n      };\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\n        result.firefoxos = t;\n      }\n    } else if (/silk/i.test(ua)) {\n      result = {\n        name: 'Amazon Silk',\n        silk: t,\n        version: getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (android) {\n      result = {\n        name: 'Android',\n        version: versionIdentifier\n      };\n    } else if (/phantom/i.test(ua)) {\n      result = {\n        name: 'PhantomJS',\n        phantom: t,\n        version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\n      result = {\n        name: 'BlackBerry',\n        blackberry: t,\n        version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/(web|hpw)os/i.test(ua)) {\n      result = {\n        name: 'WebOS',\n        webos: t,\n        version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\n      };\n      /touchpad\\//i.test(ua) && (result.touchpad = t);\n    } else if (/bada/i.test(ua)) {\n      result = {\n        name: 'Bada',\n        bada: t,\n        version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/tizen/i.test(ua)) {\n      result = {\n        name: 'Tizen',\n        tizen: t,\n        version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      };\n    } else if (/safari/i.test(ua)) {\n      result = {\n        name: 'Safari',\n        safari: t,\n        version: versionIdentifier\n      };\n    } else {\n      result = {\n        name: getFirstMatch(/^(.*)\\/(.*) /),\n        version: getSecondMatch(/^(.*)\\/(.*) /)\n      };\n    }\n\n    // set webkit or gecko flag for browsers based on these engines\n    if (!result.msedge && /(apple)?webkit/i.test(ua)) {\n      result.name = result.name || \"Webkit\";\n      result.webkit = t;\n      if (!result.version && versionIdentifier) {\n        result.version = versionIdentifier;\n      }\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\n      result.name = result.name || \"Gecko\";\n      result.gecko = t;\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i);\n    }\n\n    // set OS flags for platforms that have multiple browsers\n    if (!result.msedge && (android || result.silk)) {\n      result.android = t;\n    } else if (iosdevice) {\n      result[iosdevice] = t;\n      result.ios = t;\n    }\n\n    // OS version extraction\n    var osVersion = '';\n    if (result.windowsphone) {\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\n    } else if (iosdevice) {\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (android) {\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\n    } else if (result.webos) {\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.blackberry) {\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\n    } else if (result.bada) {\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.tizen) {\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\n    }\n    if (osVersion) {\n      result.osversion = osVersion;\n    }\n\n    // device type extraction\n    var osMajorVersion = osVersion.split('.')[0];\n    if (tablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion == 4 && !mobile) || result.silk) {\n      result.tablet = t;\n    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || result.blackberry || result.webos || result.bada) {\n      result.mobile = t;\n    }\n\n    // Graded Browser Support\n    // http://developer.yahoo.com/yui/articles/gbs\n    if (result.msedge || result.msie && result.version >= 10 || result.chrome && result.version >= 20 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6 || result.blackberry && result.version >= 10.1) {\n      result.a = t;\n    } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(\".\")[0] < 6) {\n      result.c = t;\n    } else result.x = t;\n\n    return result;\n  }\n\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent : '');\n\n  bowser.test = function (browserList) {\n    for (var i = 0; i < browserList.length; ++i) {\n      var browserItem = browserList[i];\n      if (typeof browserItem === 'string') {\n        if (browserItem in bowser) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /*\n   * Set our detect method to the main bowser object so we can\n   * reuse it to test other user agents.\n   * This is needed to implement future tests.\n   */\n  bowser._detect = detect;\n\n  return bowser;\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery-2.1.4.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery-2.1.4.js ***!
  \*******************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * jQuery JavaScript Library v2.1.4\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-04-28T16:01Z\n */\n\n(function (global, factory) {\n\n\tif ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ? factory(global, true) : function (w) {\n\t\t\tif (!w.document) {\n\t\t\t\tthrow new Error(\"jQuery requires a window with a document\");\n\t\t\t}\n\t\t\treturn factory(w);\n\t\t};\n\t} else {\n\t\tfactory(global);\n\t}\n\n\t// Pass this if window is not defined yet\n})(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n\n\t// Support: Firefox 18+\n\t// Can't be in strict mode, several libs including ASP.NET trace\n\t// the stack via arguments.caller.callee and Firefox dies if\n\t// you try to trace through \"use strict\" call chains. (#13335)\n\t//\n\n\tvar arr = [];\n\n\tvar _slice = arr.slice;\n\n\tvar concat = arr.concat;\n\n\tvar push = arr.push;\n\n\tvar indexOf = arr.indexOf;\n\n\tvar class2type = {};\n\n\tvar toString = class2type.toString;\n\n\tvar hasOwn = class2type.hasOwnProperty;\n\n\tvar support = {};\n\n\tvar\n\t// Use the correct document accordingly with window argument (sandbox)\n\tdocument = window.document,\n\t    version = \"2.1.4\",\n\n\n\t// Define a local copy of jQuery\n\tjQuery = function jQuery(selector, context) {\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init(selector, context);\n\t},\n\n\n\t// Support: Android<4.1\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\t    rdashAlpha = /-([\\da-z])/gi,\n\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function fcamelCase(all, letter) {\n\t\treturn letter.toUpperCase();\n\t};\n\n\tjQuery.fn = jQuery.prototype = {\n\t\t// The current version of jQuery being used\n\t\tjquery: version,\n\n\t\tconstructor: jQuery,\n\n\t\t// Start with an empty selector\n\t\tselector: \"\",\n\n\t\t// The default length of a jQuery object is 0\n\t\tlength: 0,\n\n\t\ttoArray: function toArray() {\n\t\t\treturn _slice.call(this);\n\t\t},\n\n\t\t// Get the Nth element in the matched element set OR\n\t\t// Get the whole matched element set as a clean array\n\t\tget: function get(num) {\n\t\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\tnum < 0 ? this[num + this.length] : this[num] :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\t_slice.call(this);\n\t\t},\n\n\t\t// Take an array of elements and push it onto the stack\n\t\t// (returning the new matched element set)\n\t\tpushStack: function pushStack(elems) {\n\n\t\t\t// Build a new jQuery matched element set\n\t\t\tvar ret = jQuery.merge(this.constructor(), elems);\n\n\t\t\t// Add the old object onto the stack (as a reference)\n\t\t\tret.prevObject = this;\n\t\t\tret.context = this.context;\n\n\t\t\t// Return the newly-formed element set\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Execute a callback for every element in the matched set.\n\t\t// (You can seed the arguments with an array of args, but this is\n\t\t// only used internally.)\n\t\teach: function each(callback, args) {\n\t\t\treturn jQuery.each(this, callback, args);\n\t\t},\n\n\t\tmap: function map(callback) {\n\t\t\treturn this.pushStack(jQuery.map(this, function (elem, i) {\n\t\t\t\treturn callback.call(elem, i, elem);\n\t\t\t}));\n\t\t},\n\n\t\tslice: function slice() {\n\t\t\treturn this.pushStack(_slice.apply(this, arguments));\n\t\t},\n\n\t\tfirst: function first() {\n\t\t\treturn this.eq(0);\n\t\t},\n\n\t\tlast: function last() {\n\t\t\treturn this.eq(-1);\n\t\t},\n\n\t\teq: function eq(i) {\n\t\t\tvar len = this.length,\n\t\t\t    j = +i + (i < 0 ? len : 0);\n\t\t\treturn this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n\t\t},\n\n\t\tend: function end() {\n\t\t\treturn this.prevObject || this.constructor(null);\n\t\t},\n\n\t\t// For internal use only.\n\t\t// Behaves like an Array's method, not like a jQuery method.\n\t\tpush: push,\n\t\tsort: arr.sort,\n\t\tsplice: arr.splice\n\t};\n\n\tjQuery.extend = jQuery.fn.extend = function () {\n\t\tvar options,\n\t\t    name,\n\t\t    src,\n\t\t    copy,\n\t\t    copyIsArray,\n\t\t    clone,\n\t\t    target = arguments[0] || {},\n\t\t    i = 1,\n\t\t    length = arguments.length,\n\t\t    deep = false;\n\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === \"boolean\") {\n\t\t\tdeep = target;\n\n\t\t\t// Skip the boolean and the target\n\t\t\ttarget = arguments[i] || {};\n\t\t\ti++;\n\t\t}\n\n\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\tif ((typeof target === \"undefined\" ? \"undefined\" : _typeof(target)) !== \"object\" && !jQuery.isFunction(target)) {\n\t\t\ttarget = {};\n\t\t}\n\n\t\t// Extend jQuery itself if only one argument is passed\n\t\tif (i === length) {\n\t\t\ttarget = this;\n\t\t\ti--;\n\t\t}\n\n\t\tfor (; i < length; i++) {\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif ((options = arguments[i]) != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target === copy) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (copy !== undefined) {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\tjQuery.extend({\n\t\t// Unique for each copy of jQuery on the page\n\t\texpando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n\n\t\t// Assume jQuery is ready without the ready module\n\t\tisReady: true,\n\n\t\terror: function error(msg) {\n\t\t\tthrow new Error(msg);\n\t\t},\n\n\t\tnoop: function noop() {},\n\n\t\tisFunction: function isFunction(obj) {\n\t\t\treturn jQuery.type(obj) === \"function\";\n\t\t},\n\n\t\tisArray: Array.isArray,\n\n\t\tisWindow: function isWindow(obj) {\n\t\t\treturn obj != null && obj === obj.window;\n\t\t},\n\n\t\tisNumeric: function isNumeric(obj) {\n\t\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\t\treturn !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;\n\t\t},\n\n\t\tisPlainObject: function isPlainObject(obj) {\n\t\t\t// Not plain objects:\n\t\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t\t// - DOM nodes\n\t\t\t// - window\n\t\t\tif (jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (obj.constructor && !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If the function hasn't returned already, we're confident that\n\t\t\t// |obj| is a plain object, created by {} or constructed with new Object\n\t\t\treturn true;\n\t\t},\n\n\t\tisEmptyObject: function isEmptyObject(obj) {\n\t\t\tvar name;\n\t\t\tfor (name in obj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\ttype: function type(obj) {\n\t\t\tif (obj == null) {\n\t\t\t\treturn obj + \"\";\n\t\t\t}\n\t\t\t// Support: Android<4.0, iOS<6 (functionish RegExp)\n\t\t\treturn (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t\t},\n\n\t\t// Evaluates a script in a global context\n\t\tglobalEval: function globalEval(code) {\n\t\t\tvar script,\n\t\t\t    indirect = eval;\n\n\t\t\tcode = jQuery.trim(code);\n\n\t\t\tif (code) {\n\t\t\t\t// If the code includes a valid, prologue position\n\t\t\t\t// strict mode pragma, execute code by injecting a\n\t\t\t\t// script tag into the document.\n\t\t\t\tif (code.indexOf(\"use strict\") === 1) {\n\t\t\t\t\tscript = document.createElement(\"script\");\n\t\t\t\t\tscript.text = code;\n\t\t\t\t\tdocument.head.appendChild(script).parentNode.removeChild(script);\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, avoid the DOM node creation, insertion\n\t\t\t\t\t// and removal by using an indirect global eval\n\t\t\t\t\tindirect(code);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Convert dashed to camelCase; used by the css and data modules\n\t\t// Support: IE9-11+\n\t\t// Microsoft forgot to hump their vendor prefix (#9572)\n\t\tcamelCase: function camelCase(string) {\n\t\t\treturn string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n\t\t},\n\n\t\tnodeName: function nodeName(elem, name) {\n\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t\t},\n\n\t\t// args is for internal usage only\n\t\teach: function each(obj, callback, args) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = obj.length,\n\t\t\t    isArray = isArraylike(obj);\n\n\t\t\tif (args) {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// A special, fast, case for the most common use of each\n\t\t\t} else {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t// Support: Android<4.1\n\t\ttrim: function trim(text) {\n\t\t\treturn text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n\t\t},\n\n\t\t// results is for internal usage only\n\t\tmakeArray: function makeArray(arr, results) {\n\t\t\tvar ret = results || [];\n\n\t\t\tif (arr != null) {\n\t\t\t\tif (isArraylike(Object(arr))) {\n\t\t\t\t\tjQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n\t\t\t\t} else {\n\t\t\t\t\tpush.call(ret, arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\tinArray: function inArray(elem, arr, i) {\n\t\t\treturn arr == null ? -1 : indexOf.call(arr, elem, i);\n\t\t},\n\n\t\tmerge: function merge(first, second) {\n\t\t\tvar len = +second.length,\n\t\t\t    j = 0,\n\t\t\t    i = first.length;\n\n\t\t\tfor (; j < len; j++) {\n\t\t\t\tfirst[i++] = second[j];\n\t\t\t}\n\n\t\t\tfirst.length = i;\n\n\t\t\treturn first;\n\t\t},\n\n\t\tgrep: function grep(elems, callback, invert) {\n\t\t\tvar callbackInverse,\n\t\t\t    matches = [],\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    callbackExpect = !invert;\n\n\t\t\t// Go through the array, only saving the items\n\t\t\t// that pass the validator function\n\t\t\tfor (; i < length; i++) {\n\t\t\t\tcallbackInverse = !callback(elems[i], i);\n\t\t\t\tif (callbackInverse !== callbackExpect) {\n\t\t\t\t\tmatches.push(elems[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t// arg is for internal usage only\n\t\tmap: function map(elems, callback, arg) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    isArray = isArraylike(elems),\n\t\t\t    ret = [];\n\n\t\t\t// Go through the array, translating each of the items to their new values\n\t\t\tif (isArray) {\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Go through every key on the object,\n\t\t\t} else {\n\t\t\t\tfor (i in elems) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Flatten any nested arrays\n\t\t\treturn concat.apply([], ret);\n\t\t},\n\n\t\t// A global GUID counter for objects\n\t\tguid: 1,\n\n\t\t// Bind a function to a context, optionally partially applying any\n\t\t// arguments.\n\t\tproxy: function proxy(fn, context) {\n\t\t\tvar tmp, args, proxy;\n\n\t\t\tif (typeof context === \"string\") {\n\t\t\t\ttmp = fn[context];\n\t\t\t\tcontext = fn;\n\t\t\t\tfn = tmp;\n\t\t\t}\n\n\t\t\t// Quick check to determine if target is callable, in the spec\n\t\t\t// this throws a TypeError, but we will just return undefined.\n\t\t\tif (!jQuery.isFunction(fn)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Simulated bind\n\t\t\targs = _slice.call(arguments, 2);\n\t\t\tproxy = function proxy() {\n\t\t\t\treturn fn.apply(context || this, args.concat(_slice.call(arguments)));\n\t\t\t};\n\n\t\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\t\treturn proxy;\n\t\t},\n\n\t\tnow: Date.now,\n\n\t\t// jQuery.support is not used in Core but other projects attach their\n\t\t// properties to it so it needs to exist.\n\t\tsupport: support\n\t});\n\n\t// Populate the class2type map\n\tjQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\n\t\tclass2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n\t});\n\n\tfunction isArraylike(obj) {\n\n\t\t// Support: iOS 8.2 (not reproducible in simulator)\n\t\t// `in` check used to prevent JIT error (gh-2145)\n\t\t// hasOwn isn't used here due to false negatives\n\t\t// regarding Nodelist length in IE\n\t\tvar length = \"length\" in obj && obj.length,\n\t\t    type = jQuery.type(obj);\n\n\t\tif (type === \"function\" || jQuery.isWindow(obj)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (obj.nodeType === 1 && length) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n\t}\n\tvar Sizzle =\n\t/*!\n  * Sizzle CSS Selector Engine v2.2.0-pre\n  * http://sizzlejs.com/\n  *\n  * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors\n  * Released under the MIT license\n  * http://jquery.org/license\n  *\n  * Date: 2014-12-16\n  */\n\tfunction (window) {\n\n\t\tvar i,\n\t\t    support,\n\t\t    Expr,\n\t\t    getText,\n\t\t    isXML,\n\t\t    tokenize,\n\t\t    compile,\n\t\t    select,\n\t\t    outermostContext,\n\t\t    sortInput,\n\t\t    hasDuplicate,\n\n\n\t\t// Local document vars\n\t\tsetDocument,\n\t\t    document,\n\t\t    docElem,\n\t\t    documentIsHTML,\n\t\t    rbuggyQSA,\n\t\t    rbuggyMatches,\n\t\t    matches,\n\t\t    contains,\n\n\n\t\t// Instance-specific data\n\t\texpando = \"sizzle\" + 1 * new Date(),\n\t\t    preferredDoc = window.document,\n\t\t    dirruns = 0,\n\t\t    done = 0,\n\t\t    classCache = createCache(),\n\t\t    tokenCache = createCache(),\n\t\t    compilerCache = createCache(),\n\t\t    sortOrder = function sortOrder(a, b) {\n\t\t\tif (a === b) {\n\t\t\t\thasDuplicate = true;\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\n\t\t// General-purpose constants\n\t\tMAX_NEGATIVE = 1 << 31,\n\n\n\t\t// Instance methods\n\t\thasOwn = {}.hasOwnProperty,\n\t\t    arr = [],\n\t\t    pop = arr.pop,\n\t\t    push_native = arr.push,\n\t\t    push = arr.push,\n\t\t    slice = arr.slice,\n\n\t\t// Use a stripped-down indexOf as it's faster than native\n\t\t// http://jsperf.com/thor-indexof-vs-for/5\n\t\tindexOf = function indexOf(list, elem) {\n\t\t\tvar i = 0,\n\t\t\t    len = list.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (list[i] === elem) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\t    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\n\t\t// Regular expressions\n\n\t\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n\t\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t\t// http://www.w3.org/TR/css3-syntax/#characters\n\t\tcharacterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\n\t\t// Loosely modeled on CSS identifier characters\n\t\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n\t\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\t\tidentifier = characterEncoding.replace(\"w\", \"w#\"),\n\n\n\t\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\t\tattributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n\t\t    pseudos = \":(\" + characterEncoding + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" + \")\\\\)|)\",\n\n\n\t\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\t\trwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n\t\t    rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n\t\t    rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n\t\t    rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n\t\t    rattributeQuotes = new RegExp(\"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\"),\n\t\t    rpseudo = new RegExp(pseudos),\n\t\t    ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n\t\t    matchExpr = {\n\t\t\t\"ID\": new RegExp(\"^#(\" + characterEncoding + \")\"),\n\t\t\t\"CLASS\": new RegExp(\"^\\\\.(\" + characterEncoding + \")\"),\n\t\t\t\"TAG\": new RegExp(\"^(\" + characterEncoding.replace(\"w\", \"w*\") + \")\"),\n\t\t\t\"ATTR\": new RegExp(\"^\" + attributes),\n\t\t\t\"PSEUDO\": new RegExp(\"^\" + pseudos),\n\t\t\t\"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n\t\t\t\"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n\t\t\t// For use in libraries implementing .is()\n\t\t\t// We use this for POS matching in `select`\n\t\t\t\"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n\t\t},\n\t\t    rinputs = /^(?:input|select|textarea|button)$/i,\n\t\t    rheader = /^h\\d$/i,\n\t\t    rnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\n\t\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\t\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\t\t    rsibling = /[+~]/,\n\t\t    rescape = /'|\\\\/g,\n\n\n\t\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\t\trunescape = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\n\t\t    funescape = function funescape(_, escaped, escapedWhitespace) {\n\t\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t\t// NaN means non-codepoint\n\t\t\t// Support: Firefox<24\n\t\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\t\treturn high !== high || escapedWhitespace ? escaped : high < 0 ?\n\t\t\t// BMP codepoint\n\t\t\tString.fromCharCode(high + 0x10000) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n\t\t},\n\n\n\t\t// Used for iframes\n\t\t// See setDocument()\n\t\t// Removing the function wrapper causes a \"Permission Denied\"\n\t\t// error in IE\n\t\tunloadHandler = function unloadHandler() {\n\t\t\tsetDocument();\n\t\t};\n\n\t\t// Optimize for push.apply( _, NodeList )\n\t\ttry {\n\t\t\tpush.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\n\t\t\t// Support: Android<4.0\n\t\t\t// Detect silently failing push.apply\n\t\t\tarr[preferredDoc.childNodes.length].nodeType;\n\t\t} catch (e) {\n\t\t\tpush = { apply: arr.length ?\n\n\t\t\t\t// Leverage slice if possible\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tpush_native.apply(target, slice.call(els));\n\t\t\t\t} :\n\n\t\t\t\t// Support: IE<9\n\t\t\t\t// Otherwise append directly\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tvar j = target.length,\n\t\t\t\t\t    i = 0;\n\t\t\t\t\t// Can't trust NodeList.length\n\t\t\t\t\twhile (target[j++] = els[i++]) {}\n\t\t\t\t\ttarget.length = j - 1;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction Sizzle(selector, context, results, seed) {\n\t\t\tvar match, elem, m, nodeType,\n\t\t\t// QSA vars\n\t\t\ti, groups, old, nid, newContext, newSelector;\n\n\t\t\tif ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\n\t\t\tcontext = context || document;\n\t\t\tresults = results || [];\n\t\t\tnodeType = context.nodeType;\n\n\t\t\tif (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n\n\t\t\t\treturn results;\n\t\t\t}\n\n\t\t\tif (!seed && documentIsHTML) {\n\n\t\t\t\t// Try to shortcut find operations when possible (e.g., not under DocumentFragment)\n\t\t\t\tif (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n\t\t\t\t\t// Speed-up: Sizzle(\"#ID\")\n\t\t\t\t\tif (m = match[1]) {\n\t\t\t\t\t\tif (nodeType === 9) {\n\t\t\t\t\t\t\telem = context.getElementById(m);\n\t\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t\t// nodes that are no longer in the document (jQuery #6963)\n\t\t\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items\n\t\t\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\t\t\tif (elem.id === m) {\n\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Context is not a document\n\t\t\t\t\t\t\tif (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Speed-up: Sizzle(\"TAG\")\n\t\t\t\t\t} else if (match[2]) {\n\t\t\t\t\t\tpush.apply(results, context.getElementsByTagName(selector));\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Speed-up: Sizzle(\".CLASS\")\n\t\t\t\t\t} else if ((m = match[3]) && support.getElementsByClassName) {\n\t\t\t\t\t\tpush.apply(results, context.getElementsByClassName(m));\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// QSA path\n\t\t\t\tif (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n\t\t\t\t\tnid = old = expando;\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = nodeType !== 1 && selector;\n\n\t\t\t\t\t// qSA works strangely on Element-rooted queries\n\t\t\t\t\t// We can work around this by specifying an extra ID on the root\n\t\t\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)\n\t\t\t\t\t// IE 8 doesn't work on object elements\n\t\t\t\t\tif (nodeType === 1 && context.nodeName.toLowerCase() !== \"object\") {\n\t\t\t\t\t\tgroups = tokenize(selector);\n\n\t\t\t\t\t\tif (old = context.getAttribute(\"id\")) {\n\t\t\t\t\t\t\tnid = old.replace(rescape, \"\\\\$&\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute(\"id\", nid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnid = \"[id='\" + nid + \"'] \";\n\n\t\t\t\t\t\ti = groups.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tgroups[i] = nid + toSelector(groups[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n\t\t\t\t\t\tnewSelector = groups.join(\",\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newSelector) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpush.apply(results, newContext.querySelectorAll(newSelector));\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t} catch (qsaError) {} finally {\n\t\t\t\t\t\t\tif (!old) {\n\t\t\t\t\t\t\t\tcontext.removeAttribute(\"id\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All others\n\t\t\treturn select(selector.replace(rtrim, \"$1\"), context, results, seed);\n\t\t}\n\n\t\t/**\n   * Create key-value caches of limited size\n   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n   *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n   *\tdeleting the oldest entry\n   */\n\t\tfunction createCache() {\n\t\t\tvar keys = [];\n\n\t\t\tfunction cache(key, value) {\n\t\t\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\t\t\tif (keys.push(key + \" \") > Expr.cacheLength) {\n\t\t\t\t\t// Only keep the most recent entries\n\t\t\t\t\tdelete cache[keys.shift()];\n\t\t\t\t}\n\t\t\t\treturn cache[key + \" \"] = value;\n\t\t\t}\n\t\t\treturn cache;\n\t\t}\n\n\t\t/**\n   * Mark a function for special use by Sizzle\n   * @param {Function} fn The function to mark\n   */\n\t\tfunction markFunction(fn) {\n\t\t\tfn[expando] = true;\n\t\t\treturn fn;\n\t\t}\n\n\t\t/**\n   * Support testing using an element\n   * @param {Function} fn Passed the created div and expects a boolean result\n   */\n\t\tfunction assert(fn) {\n\t\t\tvar div = document.createElement(\"div\");\n\n\t\t\ttry {\n\t\t\t\treturn !!fn(div);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t} finally {\n\t\t\t\t// Remove from its parent by default\n\t\t\t\tif (div.parentNode) {\n\t\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\t}\n\t\t\t\t// release memory in IE\n\t\t\t\tdiv = null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * Adds the same handler for all of the specified attrs\n   * @param {String} attrs Pipe-separated list of attributes\n   * @param {Function} handler The method that will be applied\n   */\n\t\tfunction addHandle(attrs, handler) {\n\t\t\tvar arr = attrs.split(\"|\"),\n\t\t\t    i = attrs.length;\n\n\t\t\twhile (i--) {\n\t\t\t\tExpr.attrHandle[arr[i]] = handler;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * Checks document order of two siblings\n   * @param {Element} a\n   * @param {Element} b\n   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n   */\n\t\tfunction siblingCheck(a, b) {\n\t\t\tvar cur = b && a,\n\t\t\t    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);\n\n\t\t\t// Use IE sourceIndex if available on both nodes\n\t\t\tif (diff) {\n\t\t\t\treturn diff;\n\t\t\t}\n\n\t\t\t// Check if b follows a\n\t\t\tif (cur) {\n\t\t\t\twhile (cur = cur.nextSibling) {\n\t\t\t\t\tif (cur === b) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a ? 1 : -1;\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for input types\n   * @param {String} type\n   */\n\t\tfunction createInputPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn name === \"input\" && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for buttons\n   * @param {String} type\n   */\n\t\tfunction createButtonPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for positionals\n   * @param {Function} fn\n   */\n\t\tfunction createPositionalPseudo(fn) {\n\t\t\treturn markFunction(function (argument) {\n\t\t\t\targument = +argument;\n\t\t\t\treturn markFunction(function (seed, matches) {\n\t\t\t\t\tvar j,\n\t\t\t\t\t    matchIndexes = fn([], seed.length, argument),\n\t\t\t\t\t    i = matchIndexes.length;\n\n\t\t\t\t\t// Match elements found at the specified indexes\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (seed[j = matchIndexes[i]]) {\n\t\t\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * Checks a node for validity as a Sizzle context\n   * @param {Element|Object=} context\n   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n   */\n\t\tfunction testContext(context) {\n\t\t\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n\t\t}\n\n\t\t// Expose support vars for convenience\n\t\tsupport = Sizzle.support = {};\n\n\t\t/**\n   * Detects XML nodes\n   * @param {Element|Object} elem An element or a document\n   * @returns {Boolean} True iff elem is a non-HTML XML node\n   */\n\t\tisXML = Sizzle.isXML = function (elem) {\n\t\t\t// documentElement is verified for cases where it doesn't yet exist\n\t\t\t// (such as loading iframes in IE - #4833)\n\t\t\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\t\t\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n\t\t};\n\n\t\t/**\n   * Sets document-related variables once based on the current document\n   * @param {Element|Object} [doc] An element or document object to use to set the document\n   * @returns {Object} Returns the current document\n   */\n\t\tsetDocument = Sizzle.setDocument = function (node) {\n\t\t\tvar hasCompare,\n\t\t\t    parent,\n\t\t\t    doc = node ? node.ownerDocument || node : preferredDoc;\n\n\t\t\t// If no document and documentElement is available, return\n\t\t\tif (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n\t\t\t\treturn document;\n\t\t\t}\n\n\t\t\t// Set our document\n\t\t\tdocument = doc;\n\t\t\tdocElem = doc.documentElement;\n\t\t\tparent = doc.defaultView;\n\n\t\t\t// Support: IE>8\n\t\t\t// If iframe document is assigned to \"document\" variable and if iframe has been reloaded,\n\t\t\t// IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936\n\t\t\t// IE6-8 do not support the defaultView property so parent will be undefined\n\t\t\tif (parent && parent !== parent.top) {\n\t\t\t\t// IE11 does not have attachEvent, so all must suffer\n\t\t\t\tif (parent.addEventListener) {\n\t\t\t\t\tparent.addEventListener(\"unload\", unloadHandler, false);\n\t\t\t\t} else if (parent.attachEvent) {\n\t\t\t\t\tparent.attachEvent(\"onunload\", unloadHandler);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Support tests\n   ---------------------------------------------------------------------- */\n\t\t\tdocumentIsHTML = !isXML(doc);\n\n\t\t\t/* Attributes\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Support: IE<8\n\t\t\t// Verify that getAttribute really returns attributes and not properties\n\t\t\t// (excepting IE8 booleans)\n\t\t\tsupport.attributes = assert(function (div) {\n\t\t\t\tdiv.className = \"i\";\n\t\t\t\treturn !div.getAttribute(\"className\");\n\t\t\t});\n\n\t\t\t/* getElement(s)By*\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Check if getElementsByTagName(\"*\") returns only elements\n\t\t\tsupport.getElementsByTagName = assert(function (div) {\n\t\t\t\tdiv.appendChild(doc.createComment(\"\"));\n\t\t\t\treturn !div.getElementsByTagName(\"*\").length;\n\t\t\t});\n\n\t\t\t// Support: IE<9\n\t\t\tsupport.getElementsByClassName = rnative.test(doc.getElementsByClassName);\n\n\t\t\t// Support: IE<10\n\t\t\t// Check if getElementById returns elements by name\n\t\t\t// The broken getElementById methods don't pick up programatically-set names,\n\t\t\t// so use a roundabout getElementsByName test\n\t\t\tsupport.getById = assert(function (div) {\n\t\t\t\tdocElem.appendChild(div).id = expando;\n\t\t\t\treturn !doc.getElementsByName || !doc.getElementsByName(expando).length;\n\t\t\t});\n\n\t\t\t// ID find and filter\n\t\t\tif (support.getById) {\n\t\t\t\tExpr.find[\"ID\"] = function (id, context) {\n\t\t\t\t\tif (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n\t\t\t\t\t\tvar m = context.getElementById(id);\n\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\treturn m && m.parentNode ? [m] : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Support: IE6/7\n\t\t\t\t// getElementById is not reliable as a find shortcut\n\t\t\t\tdelete Expr.find[\"ID\"];\n\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n\t\t\t\t\t\treturn node && node.value === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Tag\n\t\t\tExpr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n\t\t\t\tif (typeof context.getElementsByTagName !== \"undefined\") {\n\t\t\t\t\treturn context.getElementsByTagName(tag);\n\n\t\t\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t\t} else if (support.qsa) {\n\t\t\t\t\treturn context.querySelectorAll(tag);\n\t\t\t\t}\n\t\t\t} : function (tag, context) {\n\t\t\t\tvar elem,\n\t\t\t\t    tmp = [],\n\t\t\t\t    i = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName(tag);\n\n\t\t\t\t// Filter out possible comments\n\t\t\t\tif (tag === \"*\") {\n\t\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\ttmp.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tmp;\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\n\t\t\t// Class\n\t\t\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n\t\t\t\tif (documentIsHTML) {\n\t\t\t\t\treturn context.getElementsByClassName(className);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/* QSA/matchesSelector\n   ---------------------------------------------------------------------- */\n\n\t\t\t// QSA and matchesSelector support\n\n\t\t\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\t\t\trbuggyMatches = [];\n\n\t\t\t// qSa(:focus) reports false when true (Chrome 21)\n\t\t\t// We allow this because of a bug in IE8/9 that throws an error\n\t\t\t// whenever `document.activeElement` is accessed on an iframe\n\t\t\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t\t\t// See http://bugs.jquery.com/ticket/13378\n\t\t\trbuggyQSA = [];\n\n\t\t\tif (support.qsa = rnative.test(doc.querySelectorAll)) {\n\t\t\t\t// Build QSA regex\n\t\t\t\t// Regex strategy adopted from Diego Perini\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Select is set to empty string on purpose\n\t\t\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t\t\t// setting a boolean content attribute,\n\t\t\t\t\t// since its presence should be enough\n\t\t\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\t\t\tdocElem.appendChild(div).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\f]' msallowcapture=''>\" + \"<option selected=''></option></select>\";\n\n\t\t\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\t\t\tif (div.querySelectorAll(\"[msallowcapture^='']\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\t\t\tif (!div.querySelectorAll(\"[selected]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+\n\t\t\t\t\tif (!div.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(\":checked\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\t\t\tif (!div.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Support: Windows 8 Native Apps\n\t\t\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\t\t\tvar input = doc.createElement(\"input\");\n\t\t\t\t\tinput.setAttribute(\"type\", \"hidden\");\n\t\t\t\t\tdiv.appendChild(input).setAttribute(\"name\", \"D\");\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\t\t\tif (div.querySelectorAll(\"[name=d]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(\":enabled\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":enabled\", \":disabled\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\t\t\trbuggyQSA.push(\",.*:\");\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t\t\t// on a disconnected node (IE 9)\n\t\t\t\t\tsupport.disconnectedMatch = matches.call(div, \"div\");\n\n\t\t\t\t\t// This should fail with an exception\n\t\t\t\t\t// Gecko does not error, returns false instead\n\t\t\t\t\tmatches.call(div, \"[s!='']:x\");\n\t\t\t\t\trbuggyMatches.push(\"!=\", pseudos);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\trbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n\t\t\trbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n\n\t\t\t/* Contains\n   ---------------------------------------------------------------------- */\n\t\t\thasCompare = rnative.test(docElem.compareDocumentPosition);\n\n\t\t\t// Element contains another\n\t\t\t// Purposefully does not implement inclusive descendent\n\t\t\t// As in, an element does not contain itself\n\t\t\tcontains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n\t\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\t    bup = b && b.parentNode;\n\t\t\t\treturn a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t\t\t} : function (a, b) {\n\t\t\t\tif (b) {\n\t\t\t\t\twhile (b = b.parentNode) {\n\t\t\t\t\t\tif (b === a) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\t/* Sorting\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Document order sorting\n\t\t\tsortOrder = hasCompare ? function (a, b) {\n\n\t\t\t\t// Flag for duplicate removal\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\t\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\t\t\tif (compare) {\n\t\t\t\t\treturn compare;\n\t\t\t\t}\n\n\t\t\t\t// Calculate position if both inputs belong to the same document\n\t\t\t\tcompare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\n\n\t\t\t\t// Otherwise we know they are disconnected\n\t\t\t\t1;\n\n\t\t\t\t// Disconnected nodes\n\t\t\t\tif (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n\n\t\t\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t\t\tif (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Maintain original order\n\t\t\t\t\treturn sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\t\t\t\t}\n\n\t\t\t\treturn compare & 4 ? -1 : 1;\n\t\t\t} : function (a, b) {\n\t\t\t\t// Exit early if the nodes are identical\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tvar cur,\n\t\t\t\t    i = 0,\n\t\t\t\t    aup = a.parentNode,\n\t\t\t\t    bup = b.parentNode,\n\t\t\t\t    ap = [a],\n\t\t\t\t    bp = [b];\n\n\t\t\t\t// Parentless nodes are either documents or disconnected\n\t\t\t\tif (!aup || !bup) {\n\t\t\t\t\treturn a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\n\t\t\t\t\t// If the nodes are siblings, we can do a quick check\n\t\t\t\t} else if (aup === bup) {\n\t\t\t\t\treturn siblingCheck(a, b);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\t\t\tcur = a;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tap.unshift(cur);\n\t\t\t\t}\n\t\t\t\tcur = b;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tbp.unshift(cur);\n\t\t\t\t}\n\n\t\t\t\t// Walk down the tree looking for a discrepancy\n\t\t\t\twhile (ap[i] === bp[i]) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\treturn i ?\n\t\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\t\tsiblingCheck(ap[i], bp[i]) :\n\n\t\t\t\t// Otherwise nodes in our document sort first\n\t\t\t\tap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n\t\t\t};\n\n\t\t\treturn doc;\n\t\t};\n\n\t\tSizzle.matches = function (expr, elements) {\n\t\t\treturn Sizzle(expr, null, null, elements);\n\t\t};\n\n\t\tSizzle.matchesSelector = function (elem, expr) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\t// Make sure that attribute selectors are quoted\n\t\t\texpr = expr.replace(rattributeQuotes, \"='$1']\");\n\n\t\t\tif (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n\n\t\t\t\ttry {\n\t\t\t\t\tvar ret = matches.call(elem, expr);\n\n\t\t\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\t\t\tif (ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn Sizzle(expr, document, null, [elem]).length > 0;\n\t\t};\n\n\t\tSizzle.contains = function (context, elem) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((context.ownerDocument || context) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\t\t\treturn contains(context, elem);\n\t\t};\n\n\t\tSizzle.attr = function (elem, name) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\tvar fn = Expr.attrHandle[name.toLowerCase()],\n\n\t\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\t\tval = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n\n\t\t\treturn val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t};\n\n\t\tSizzle.error = function (msg) {\n\t\t\tthrow new Error(\"Syntax error, unrecognized expression: \" + msg);\n\t\t};\n\n\t\t/**\n   * Document sorting and removing duplicates\n   * @param {ArrayLike} results\n   */\n\t\tSizzle.uniqueSort = function (results) {\n\t\t\tvar elem,\n\t\t\t    duplicates = [],\n\t\t\t    j = 0,\n\t\t\t    i = 0;\n\n\t\t\t// Unless we *know* we can detect duplicates, assume their presence\n\t\t\thasDuplicate = !support.detectDuplicates;\n\t\t\tsortInput = !support.sortStable && results.slice(0);\n\t\t\tresults.sort(sortOrder);\n\n\t\t\tif (hasDuplicate) {\n\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\tif (elem === results[i]) {\n\t\t\t\t\t\tj = duplicates.push(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (j--) {\n\t\t\t\t\tresults.splice(duplicates[j], 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clear input after sorting to release objects\n\t\t\t// See https://github.com/jquery/sizzle/pull/225\n\t\t\tsortInput = null;\n\n\t\t\treturn results;\n\t\t};\n\n\t\t/**\n   * Utility function for retrieving the text value of an array of DOM nodes\n   * @param {Array|Element} elem\n   */\n\t\tgetText = Sizzle.getText = function (elem) {\n\t\t\tvar node,\n\t\t\t    ret = \"\",\n\t\t\t    i = 0,\n\t\t\t    nodeType = elem.nodeType;\n\n\t\t\tif (!nodeType) {\n\t\t\t\t// If no nodeType, this is expected to be an array\n\t\t\t\twhile (node = elem[i++]) {\n\t\t\t\t\t// Do not traverse comment nodes\n\t\t\t\t\tret += getText(node);\n\t\t\t\t}\n\t\t\t} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n\t\t\t\t// Use textContent for elements\n\t\t\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\t\t\tif (typeof elem.textContent === \"string\") {\n\t\t\t\t\treturn elem.textContent;\n\t\t\t\t} else {\n\t\t\t\t\t// Traverse its children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tret += getText(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (nodeType === 3 || nodeType === 4) {\n\t\t\t\treturn elem.nodeValue;\n\t\t\t}\n\t\t\t// Do not include comment or processing instruction nodes\n\n\t\t\treturn ret;\n\t\t};\n\n\t\tExpr = Sizzle.selectors = {\n\n\t\t\t// Can be adjusted by the user\n\t\t\tcacheLength: 50,\n\n\t\t\tcreatePseudo: markFunction,\n\n\t\t\tmatch: matchExpr,\n\n\t\t\tattrHandle: {},\n\n\t\t\tfind: {},\n\n\t\t\trelative: {\n\t\t\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\t\t\" \": { dir: \"parentNode\" },\n\t\t\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\t\t\"~\": { dir: \"previousSibling\" }\n\t\t\t},\n\n\t\t\tpreFilter: {\n\t\t\t\t\"ATTR\": function ATTR(match) {\n\t\t\t\t\tmatch[1] = match[1].replace(runescape, funescape);\n\n\t\t\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\t\t\tmatch[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n\t\t\t\t\tif (match[2] === \"~=\") {\n\t\t\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match.slice(0, 4);\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function CHILD(match) {\n\t\t\t\t\t/* matches from matchExpr[\"CHILD\"]\n     \t1 type (only|nth|...)\n     \t2 what (child|of-type)\n     \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n     \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n     \t5 sign of xn-component\n     \t6 x of xn-component\n     \t7 sign of y-component\n     \t8 y of y-component\n     */\n\t\t\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\t\t\tif (match[1].slice(0, 3) === \"nth\") {\n\t\t\t\t\t\t// nth-* requires argument\n\t\t\t\t\t\tif (!match[3]) {\n\t\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\t\t\tmatch[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n\t\t\t\t\t\tmatch[5] = +(match[7] + match[8] || match[3] === \"odd\");\n\n\t\t\t\t\t\t// other types prohibit arguments\n\t\t\t\t\t} else if (match[3]) {\n\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function PSEUDO(match) {\n\t\t\t\t\tvar excess,\n\t\t\t\t\t    unquoted = !match[6] && match[2];\n\n\t\t\t\t\tif (matchExpr[\"CHILD\"].test(match[0])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accept quoted arguments as-is\n\t\t\t\t\tif (match[3]) {\n\t\t\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t\t\t} else if (unquoted && rpseudo.test(unquoted) && (\n\t\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t\texcess = tokenize(unquoted, true)) && (\n\t\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t\texcess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n\n\t\t\t\t\t\t// excess is a negative index\n\t\t\t\t\t\tmatch[0] = match[0].slice(0, excess);\n\t\t\t\t\t\tmatch[2] = unquoted.slice(0, excess);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\t\t\treturn match.slice(0, 3);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfilter: {\n\n\t\t\t\t\"TAG\": function TAG(nodeNameSelector) {\n\t\t\t\t\tvar nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn nodeNameSelector === \"*\" ? function () {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} : function (elem) {\n\t\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CLASS\": function CLASS(className) {\n\t\t\t\t\tvar pattern = classCache[className + \" \"];\n\n\t\t\t\t\treturn pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n\t\t\t\t\t\treturn pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t\"ATTR\": function ATTR(name, operator, check) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar result = Sizzle.attr(elem, name);\n\n\t\t\t\t\t\tif (result == null) {\n\t\t\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!operator) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult += \"\";\n\n\t\t\t\t\t\treturn operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function CHILD(type, what, argument, first, last) {\n\t\t\t\t\tvar simple = type.slice(0, 3) !== \"nth\",\n\t\t\t\t\t    forward = type.slice(-4) !== \"last\",\n\t\t\t\t\t    ofType = what === \"of-type\";\n\n\t\t\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\t\tfunction (elem) {\n\t\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t\t} : function (elem, context, xml) {\n\t\t\t\t\t\tvar cache,\n\t\t\t\t\t\t    outerCache,\n\t\t\t\t\t\t    node,\n\t\t\t\t\t\t    diff,\n\t\t\t\t\t\t    nodeIndex,\n\t\t\t\t\t\t    start,\n\t\t\t\t\t\t    dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\t    parent = elem.parentNode,\n\t\t\t\t\t\t    name = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\t    useCache = !xml && !ofType;\n\n\t\t\t\t\t\tif (parent) {\n\n\t\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\t\twhile (dir) {\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\twhile (node = node[dir]) {\n\t\t\t\t\t\t\t\t\t\tif (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstart = [forward ? parent.firstChild : parent.lastChild];\n\n\t\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\t\tif (forward && useCache) {\n\t\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\t\touterCache = parent[expando] || (parent[expando] = {});\n\t\t\t\t\t\t\t\tcache = outerCache[type] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];\n\t\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[nodeIndex];\n\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\tdiff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\t\tif (node.nodeType === 1 && ++diff && node === elem) {\n\t\t\t\t\t\t\t\t\t\touterCache[type] = [dirruns, nodeIndex, diff];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\t} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {\n\t\t\t\t\t\t\t\tdiff = cache[1];\n\n\t\t\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\tif ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t\t\t(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (node === elem) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\t\treturn diff === first || diff % first === 0 && diff / first >= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function PSEUDO(pseudo, argument) {\n\t\t\t\t\t// pseudo-class names are case-insensitive\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\t\t\tvar args,\n\t\t\t\t\t    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\n\n\t\t\t\t\t// The user may use createPseudo to indicate that\n\t\t\t\t\t// arguments are needed to create the filter function\n\t\t\t\t\t// just as Sizzle does\n\t\t\t\t\tif (fn[expando]) {\n\t\t\t\t\t\treturn fn(argument);\n\t\t\t\t\t}\n\n\t\t\t\t\t// But maintain support for old signatures\n\t\t\t\t\tif (fn.length > 1) {\n\t\t\t\t\t\targs = [pseudo, pseudo, \"\", argument];\n\t\t\t\t\t\treturn Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n\t\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\t    matched = fn(seed, argument),\n\t\t\t\t\t\t\t    i = matched.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tidx = indexOf(seed, matched[i]);\n\t\t\t\t\t\t\t\tseed[idx] = !(matches[idx] = matched[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}) : function (elem) {\n\t\t\t\t\t\t\treturn fn(elem, 0, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fn;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpseudos: {\n\t\t\t\t// Potentially complex pseudos\n\t\t\t\t\"not\": markFunction(function (selector) {\n\t\t\t\t\t// Trim the selector passed to compile\n\t\t\t\t\t// to avoid treating leading and trailing\n\t\t\t\t\t// spaces as combinators\n\t\t\t\t\tvar input = [],\n\t\t\t\t\t    results = [],\n\t\t\t\t\t    matcher = compile(selector.replace(rtrim, \"$1\"));\n\n\t\t\t\t\treturn matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n\t\t\t\t\t\tvar elem,\n\t\t\t\t\t\t    unmatched = matcher(seed, null, xml, []),\n\t\t\t\t\t\t    i = seed.length;\n\n\t\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}) : function (elem, context, xml) {\n\t\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\t\tmatcher(input, null, xml, results);\n\t\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\t\tinput[0] = null;\n\t\t\t\t\t\treturn !results.pop();\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"has\": markFunction(function (selector) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn Sizzle(selector, elem).length > 0;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"contains\": markFunction(function (text) {\n\t\t\t\t\ttext = text.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// \"Whether an element is represented by a :lang() selector\n\t\t\t\t// is based solely on the element's language value\n\t\t\t\t// being equal to the identifier C,\n\t\t\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t\t\t// The identifier C does not have to be a valid language name.\"\n\t\t\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\t\t\"lang\": markFunction(function (lang) {\n\t\t\t\t\t// lang value must be a valid identifier\n\t\t\t\t\tif (!ridentifier.test(lang || \"\")) {\n\t\t\t\t\t\tSizzle.error(\"unsupported lang: \" + lang);\n\t\t\t\t\t}\n\t\t\t\t\tlang = lang.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar elemLang;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n\n\t\t\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while ((elem = elem.parentNode) && elem.nodeType === 1);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// Miscellaneous\n\t\t\t\t\"target\": function target(elem) {\n\t\t\t\t\tvar hash = window.location && window.location.hash;\n\t\t\t\t\treturn hash && hash.slice(1) === elem.id;\n\t\t\t\t},\n\n\t\t\t\t\"root\": function root(elem) {\n\t\t\t\t\treturn elem === docElem;\n\t\t\t\t},\n\n\t\t\t\t\"focus\": function focus(elem) {\n\t\t\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t\t\t},\n\n\t\t\t\t// Boolean properties\n\t\t\t\t\"enabled\": function enabled(elem) {\n\t\t\t\t\treturn elem.disabled === false;\n\t\t\t\t},\n\n\t\t\t\t\"disabled\": function disabled(elem) {\n\t\t\t\t\treturn elem.disabled === true;\n\t\t\t\t},\n\n\t\t\t\t\"checked\": function checked(elem) {\n\t\t\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n\t\t\t\t},\n\n\t\t\t\t\"selected\": function selected(elem) {\n\t\t\t\t\t// Accessing this property makes selected-by-default\n\t\t\t\t\t// options in Safari work properly\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem.selected === true;\n\t\t\t\t},\n\n\t\t\t\t// Contents\n\t\t\t\t\"empty\": function empty(elem) {\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tif (elem.nodeType < 6) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t\"parent\": function parent(elem) {\n\t\t\t\t\treturn !Expr.pseudos[\"empty\"](elem);\n\t\t\t\t},\n\n\t\t\t\t// Element/input types\n\t\t\t\t\"header\": function header(elem) {\n\t\t\t\t\treturn rheader.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"input\": function input(elem) {\n\t\t\t\t\treturn rinputs.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"button\": function button(elem) {\n\t\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t\t\t},\n\n\t\t\t\t\"text\": function text(elem) {\n\t\t\t\t\tvar attr;\n\t\t\t\t\treturn elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && (\n\n\t\t\t\t\t// Support: IE<8\n\t\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t\t(attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n\t\t\t\t},\n\n\t\t\t\t// Position-in-collection\n\t\t\t\t\"first\": createPositionalPseudo(function () {\n\t\t\t\t\treturn [0];\n\t\t\t\t}),\n\n\t\t\t\t\"last\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\treturn [length - 1];\n\t\t\t\t}),\n\n\t\t\t\t\"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\treturn [argument < 0 ? argument + length : argument];\n\t\t\t\t}),\n\n\t\t\t\t\"even\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"odd\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 1;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; --i >= 0;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; ++i < length;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\n\t\tExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n\t\t// Add button/input type pseudos\n\t\tfor (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\n\t\t\tExpr.pseudos[i] = createInputPseudo(i);\n\t\t}\n\t\tfor (i in { submit: true, reset: true }) {\n\t\t\tExpr.pseudos[i] = createButtonPseudo(i);\n\t\t}\n\n\t\t// Easy API for creating new setFilters\n\t\tfunction setFilters() {}\n\t\tsetFilters.prototype = Expr.filters = Expr.pseudos;\n\t\tExpr.setFilters = new setFilters();\n\n\t\ttokenize = Sizzle.tokenize = function (selector, parseOnly) {\n\t\t\tvar matched,\n\t\t\t    match,\n\t\t\t    tokens,\n\t\t\t    type,\n\t\t\t    soFar,\n\t\t\t    groups,\n\t\t\t    preFilters,\n\t\t\t    cached = tokenCache[selector + \" \"];\n\n\t\t\tif (cached) {\n\t\t\t\treturn parseOnly ? 0 : cached.slice(0);\n\t\t\t}\n\n\t\t\tsoFar = selector;\n\t\t\tgroups = [];\n\t\t\tpreFilters = Expr.preFilter;\n\n\t\t\twhile (soFar) {\n\n\t\t\t\t// Comma and first run\n\t\t\t\tif (!matched || (match = rcomma.exec(soFar))) {\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\t\t\tsoFar = soFar.slice(match[0].length) || soFar;\n\t\t\t\t\t}\n\t\t\t\t\tgroups.push(tokens = []);\n\t\t\t\t}\n\n\t\t\t\tmatched = false;\n\n\t\t\t\t// Combinators\n\t\t\t\tif (match = rcombinators.exec(soFar)) {\n\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t// Cast descendant combinators to space\n\t\t\t\t\t\ttype: match[0].replace(rtrim, \" \")\n\t\t\t\t\t});\n\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t}\n\n\t\t\t\t// Filters\n\t\t\t\tfor (type in Expr.filter) {\n\t\t\t\t\tif ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n\t\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tmatches: match\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!matched) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the length of the invalid excess\n\t\t\t// if we're just parsing\n\t\t\t// Otherwise, throw an error or return tokens\n\t\t\treturn parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache(selector, groups).slice(0);\n\t\t};\n\n\t\tfunction toSelector(tokens) {\n\t\t\tvar i = 0,\n\t\t\t    len = tokens.length,\n\t\t\t    selector = \"\";\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tselector += tokens[i].value;\n\t\t\t}\n\t\t\treturn selector;\n\t\t}\n\n\t\tfunction addCombinator(matcher, combinator, base) {\n\t\t\tvar dir = combinator.dir,\n\t\t\t    checkNonElements = base && dir === \"parentNode\",\n\t\t\t    doneName = done++;\n\n\t\t\treturn combinator.first ?\n\t\t\t// Check against closest ancestor/preceding element\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\treturn matcher(elem, context, xml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} :\n\n\t\t\t// Check against all ancestor/preceding elements\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\tvar oldCache,\n\t\t\t\t    outerCache,\n\t\t\t\t    newCache = [dirruns, doneName];\n\n\t\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n\t\t\t\tif (xml) {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\touterCache = elem[expando] || (elem[expando] = {});\n\t\t\t\t\t\t\tif ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n\n\t\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\treturn newCache[2] = oldCache[2];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\touterCache[dir] = newCache;\n\n\t\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\t\tif (newCache[2] = matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction elementMatcher(matchers) {\n\t\t\treturn matchers.length > 1 ? function (elem, context, xml) {\n\t\t\t\tvar i = matchers.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (!matchers[i](elem, context, xml)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} : matchers[0];\n\t\t}\n\n\t\tfunction multipleContexts(selector, contexts, results) {\n\t\t\tvar i = 0,\n\t\t\t    len = contexts.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tSizzle(selector, contexts[i], results);\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\n\t\tfunction condense(unmatched, map, filter, context, xml) {\n\t\t\tvar elem,\n\t\t\t    newUnmatched = [],\n\t\t\t    i = 0,\n\t\t\t    len = unmatched.length,\n\t\t\t    mapped = map != null;\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\tif (!filter || filter(elem, context, xml)) {\n\t\t\t\t\t\tnewUnmatched.push(elem);\n\t\t\t\t\t\tif (mapped) {\n\t\t\t\t\t\t\tmap.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newUnmatched;\n\t\t}\n\n\t\tfunction setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n\t\t\tif (postFilter && !postFilter[expando]) {\n\t\t\t\tpostFilter = setMatcher(postFilter);\n\t\t\t}\n\t\t\tif (postFinder && !postFinder[expando]) {\n\t\t\t\tpostFinder = setMatcher(postFinder, postSelector);\n\t\t\t}\n\t\t\treturn markFunction(function (seed, results, context, xml) {\n\t\t\t\tvar temp,\n\t\t\t\t    i,\n\t\t\t\t    elem,\n\t\t\t\t    preMap = [],\n\t\t\t\t    postMap = [],\n\t\t\t\t    preexisting = results.length,\n\n\n\t\t\t\t// Get initial elements from seed or context\n\t\t\t\telems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n\n\n\t\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\t\tmatcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n\t\t\t\t    matcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || (seed ? preFilter : preexisting || postFilter) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults : matcherIn;\n\n\t\t\t\t// Find primary matches\n\t\t\t\tif (matcher) {\n\t\t\t\t\tmatcher(matcherIn, matcherOut, context, xml);\n\t\t\t\t}\n\n\t\t\t\t// Apply postFilter\n\t\t\t\tif (postFilter) {\n\t\t\t\t\ttemp = condense(matcherOut, postMap);\n\t\t\t\t\tpostFilter(temp, [], context, xml);\n\n\t\t\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\t\t\ti = temp.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (elem = temp[i]) {\n\t\t\t\t\t\t\tmatcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (seed) {\n\t\t\t\t\tif (postFinder || preFilter) {\n\t\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (elem = matcherOut[i]) {\n\t\t\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\t\t\ttemp.push(matcherIn[i] = elem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpostFinder(null, matcherOut = [], temp, xml);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n\n\t\t\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add elements to results, through postFinder if defined\n\t\t\t\t} else {\n\t\t\t\t\tmatcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\tpostFinder(null, results, matcherOut, xml);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpush.apply(results, matcherOut);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction matcherFromTokens(tokens) {\n\t\t\tvar checkContext,\n\t\t\t    matcher,\n\t\t\t    j,\n\t\t\t    len = tokens.length,\n\t\t\t    leadingRelative = Expr.relative[tokens[0].type],\n\t\t\t    implicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\t\t    i = leadingRelative ? 1 : 0,\n\n\n\t\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\t\tmatchContext = addCombinator(function (elem) {\n\t\t\t\treturn elem === checkContext;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchAnyContext = addCombinator(function (elem) {\n\t\t\t\treturn indexOf(checkContext, elem) > -1;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchers = [function (elem, context, xml) {\n\t\t\t\tvar ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\t\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\t\tcheckContext = null;\n\t\t\t\treturn ret;\n\t\t\t}];\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (matcher = Expr.relative[tokens[i].type]) {\n\t\t\t\t\tmatchers = [addCombinator(elementMatcher(matchers), matcher)];\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n\t\t\t\t\t// Return special upon seeing a positional matcher\n\t\t\t\t\tif (matcher[expando]) {\n\t\t\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\t\t\tj = ++i;\n\t\t\t\t\t\tfor (; j < len; j++) {\n\t\t\t\t\t\t\tif (Expr.relative[tokens[j].type]) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === \" \" ? \"*\" : \"\" })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n\t\t\t\t\t}\n\t\t\t\t\tmatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn elementMatcher(matchers);\n\t\t}\n\n\t\tfunction matcherFromGroupMatchers(elementMatchers, setMatchers) {\n\t\t\tvar bySet = setMatchers.length > 0,\n\t\t\t    byElement = elementMatchers.length > 0,\n\t\t\t    superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n\t\t\t\tvar elem,\n\t\t\t\t    j,\n\t\t\t\t    matcher,\n\t\t\t\t    matchedCount = 0,\n\t\t\t\t    i = \"0\",\n\t\t\t\t    unmatched = seed && [],\n\t\t\t\t    setMatched = [],\n\t\t\t\t    contextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n\t\t\t\t    len = elems.length;\n\n\t\t\t\tif (outermost) {\n\t\t\t\t\toutermostContext = context !== document && context;\n\t\t\t\t}\n\n\t\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n\t\t\t\t// Support: IE<9, Safari\n\t\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\t\tfor (; i !== len && (elem = elems[i]) != null; i++) {\n\t\t\t\t\tif (byElement && elem) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (matcher = elementMatchers[j++]) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (outermost) {\n\t\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\t\tif (bySet) {\n\t\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\t\tif (elem = !matcher && elem) {\n\t\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t\tunmatched.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply set filters to unmatched elements\n\t\t\t\tmatchedCount += i;\n\t\t\t\tif (bySet && i !== matchedCount) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (matcher = setMatchers[j++]) {\n\t\t\t\t\t\tmatcher(unmatched, setMatched, context, xml);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\t\tif (matchedCount > 0) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (!(unmatched[i] || setMatched[i])) {\n\t\t\t\t\t\t\t\t\tsetMatched[i] = pop.call(results);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\t\tsetMatched = condense(setMatched);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add matches to results\n\t\t\t\t\tpush.apply(results, setMatched);\n\n\t\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\t\tif (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n\n\t\t\t\t\t\tSizzle.uniqueSort(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override manipulation of globals by nested matchers\n\t\t\t\tif (outermost) {\n\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\toutermostContext = contextBackup;\n\t\t\t\t}\n\n\t\t\t\treturn unmatched;\n\t\t\t};\n\n\t\t\treturn bySet ? markFunction(superMatcher) : superMatcher;\n\t\t}\n\n\t\tcompile = Sizzle.compile = function (selector, match /* Internal Use Only */) {\n\t\t\tvar i,\n\t\t\t    setMatchers = [],\n\t\t\t    elementMatchers = [],\n\t\t\t    cached = compilerCache[selector + \" \"];\n\n\t\t\tif (!cached) {\n\t\t\t\t// Generate a function of recursive functions that can be used to check each element\n\t\t\t\tif (!match) {\n\t\t\t\t\tmatch = tokenize(selector);\n\t\t\t\t}\n\t\t\t\ti = match.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcached = matcherFromTokens(match[i]);\n\t\t\t\t\tif (cached[expando]) {\n\t\t\t\t\t\tsetMatchers.push(cached);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementMatchers.push(cached);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache the compiled function\n\t\t\t\tcached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\n\t\t\t\t// Save selector and tokenization\n\t\t\t\tcached.selector = selector;\n\t\t\t}\n\t\t\treturn cached;\n\t\t};\n\n\t\t/**\n   * A low-level selection function that works with Sizzle's compiled\n   *  selector functions\n   * @param {String|Function} selector A selector or a pre-compiled\n   *  selector function built with Sizzle.compile\n   * @param {Element} context\n   * @param {Array} [results]\n   * @param {Array} [seed] A set of elements to match against\n   */\n\t\tselect = Sizzle.select = function (selector, context, results, seed) {\n\t\t\tvar i,\n\t\t\t    tokens,\n\t\t\t    token,\n\t\t\t    type,\n\t\t\t    find,\n\t\t\t    compiled = typeof selector === \"function\" && selector,\n\t\t\t    match = !seed && tokenize(selector = compiled.selector || selector);\n\n\t\t\tresults = results || [];\n\n\t\t\t// Try to minimize operations if there is no seed and only one group\n\t\t\tif (match.length === 1) {\n\n\t\t\t\t// Take a shortcut and set the context if the root selector is an ID\n\t\t\t\ttokens = match[0] = match[0].slice(0);\n\t\t\t\tif (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n\n\t\t\t\t\tcontext = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\t\t\t\t\tif (!context) {\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t\t\t} else if (compiled) {\n\t\t\t\t\t\tcontext = context.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = selector.slice(tokens.shift().value.length);\n\t\t\t\t}\n\n\t\t\t\t// Fetch a seed set for right-to-left matching\n\t\t\t\ti = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\ttoken = tokens[i];\n\n\t\t\t\t\t// Abort if we hit a combinator\n\t\t\t\t\tif (Expr.relative[type = token.type]) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (find = Expr.find[type]) {\n\t\t\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\t\t\tif (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n\n\t\t\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\t\t\ttokens.splice(i, 1);\n\t\t\t\t\t\t\tselector = seed.length && toSelector(tokens);\n\t\t\t\t\t\t\tif (!selector) {\n\t\t\t\t\t\t\t\tpush.apply(results, seed);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compile and execute a filtering function if one is not provided\n\t\t\t// Provide `match` to avoid retokenization if we modified the selector above\n\t\t\t(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);\n\t\t\treturn results;\n\t\t};\n\n\t\t// One-time assignments\n\n\t\t// Sort stability\n\t\tsupport.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando;\n\n\t\t// Support: Chrome 14-35+\n\t\t// Always assume duplicates if they aren't passed to the comparison function\n\t\tsupport.detectDuplicates = !!hasDuplicate;\n\n\t\t// Initialize against the default document\n\t\tsetDocument();\n\n\t\t// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n\t\t// Detached nodes confoundingly follow *each other*\n\t\tsupport.sortDetached = assert(function (div1) {\n\t\t\t// Should return 1, but returns 4 (following)\n\t\t\treturn div1.compareDocumentPosition(document.createElement(\"div\")) & 1;\n\t\t});\n\n\t\t// Support: IE<8\n\t\t// Prevent attribute/property \"interpolation\"\n\t\t// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\t\tif (!assert(function (div) {\n\t\t\tdiv.innerHTML = \"<a href='#'></a>\";\n\t\t\treturn div.firstChild.getAttribute(\"href\") === \"#\";\n\t\t})) {\n\t\t\taddHandle(\"type|href|height|width\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use defaultValue in place of getAttribute(\"value\")\n\t\tif (!support.attributes || !assert(function (div) {\n\t\t\tdiv.innerHTML = \"<input/>\";\n\t\t\tdiv.firstChild.setAttribute(\"value\", \"\");\n\t\t\treturn div.firstChild.getAttribute(\"value\") === \"\";\n\t\t})) {\n\t\t\taddHandle(\"value\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n\t\t\t\t\treturn elem.defaultValue;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use getAttributeNode to fetch booleans when getAttribute lies\n\t\tif (!assert(function (div) {\n\t\t\treturn div.getAttribute(\"disabled\") == null;\n\t\t})) {\n\t\t\taddHandle(booleans, function (elem, name, isXML) {\n\t\t\t\tvar val;\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn Sizzle;\n\t}(window);\n\n\tjQuery.find = Sizzle;\n\tjQuery.expr = Sizzle.selectors;\n\tjQuery.expr[\":\"] = jQuery.expr.pseudos;\n\tjQuery.unique = Sizzle.uniqueSort;\n\tjQuery.text = Sizzle.getText;\n\tjQuery.isXMLDoc = Sizzle.isXML;\n\tjQuery.contains = Sizzle.contains;\n\n\tvar rneedsContext = jQuery.expr.match.needsContext;\n\n\tvar rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/;\n\n\tvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n\t// Implement the identical functionality for filter and not\n\tfunction winnow(elements, qualifier, not) {\n\t\tif (jQuery.isFunction(qualifier)) {\n\t\t\treturn jQuery.grep(elements, function (elem, i) {\n\t\t\t\t/* jshint -W018 */\n\t\t\t\treturn !!qualifier.call(elem, i, elem) !== not;\n\t\t\t});\n\t\t}\n\n\t\tif (qualifier.nodeType) {\n\t\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem === qualifier !== not;\n\t\t\t});\n\t\t}\n\n\t\tif (typeof qualifier === \"string\") {\n\t\t\tif (risSimple.test(qualifier)) {\n\t\t\t\treturn jQuery.filter(qualifier, elements, not);\n\t\t\t}\n\n\t\t\tqualifier = jQuery.filter(qualifier, elements);\n\t\t}\n\n\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\treturn indexOf.call(qualifier, elem) >= 0 !== not;\n\t\t});\n\t}\n\n\tjQuery.filter = function (expr, elems, not) {\n\t\tvar elem = elems[0];\n\n\t\tif (not) {\n\t\t\texpr = \":not(\" + expr + \")\";\n\t\t}\n\n\t\treturn elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n\t\t\treturn elem.nodeType === 1;\n\t\t}));\n\t};\n\n\tjQuery.fn.extend({\n\t\tfind: function find(selector) {\n\t\t\tvar i,\n\t\t\t    len = this.length,\n\t\t\t    ret = [],\n\t\t\t    self = this;\n\n\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\treturn this.pushStack(jQuery(selector).filter(function () {\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tif (jQuery.contains(self[i], this)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tjQuery.find(selector, self[i], ret);\n\t\t\t}\n\n\t\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\t\tret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);\n\t\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\t\treturn ret;\n\t\t},\n\t\tfilter: function filter(selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], false));\n\t\t},\n\t\tnot: function not(selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], true));\n\t\t},\n\t\tis: function is(selector) {\n\t\t\treturn !!winnow(this,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n\t\t}\n\t});\n\n\t// Initialize a jQuery object\n\n\n\t// A central reference to the root jQuery(document)\n\tvar rootjQuery,\n\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\t    init = jQuery.fn.init = function (selector, context) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif (!selector) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Handle HTML strings\n\t\tif (typeof selector === \"string\") {\n\t\t\tif (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [null, selector, null];\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec(selector);\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif (match && (match[1] || !context)) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif (match[1]) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n\t\t\t\t\t\tfor (match in context) {\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif (jQuery.isFunction(this[match])) {\n\t\t\t\t\t\t\t\tthis[match](context[match]);\n\n\t\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr(match, context[match]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById(match[2]);\n\n\t\t\t\t\t// Support: Blackberry 4.6\n\t\t\t\t\t// gEBID returns nodes no longer in the document (#6963)\n\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if (!context || context.jquery) {\n\t\t\t\treturn (context || rootjQuery).find(selector);\n\n\t\t\t\t// HANDLE: $(expr, context)\n\t\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor(context).find(selector);\n\t\t\t}\n\n\t\t\t// HANDLE: $(DOMElement)\n\t\t} else if (selector.nodeType) {\n\t\t\tthis.context = this[0] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t\t// HANDLE: $(function)\n\t\t\t// Shortcut for document ready\n\t\t} else if (jQuery.isFunction(selector)) {\n\t\t\treturn typeof rootjQuery.ready !== \"undefined\" ? rootjQuery.ready(selector) :\n\t\t\t// Execute immediately if ready is not present\n\t\t\tselector(jQuery);\n\t\t}\n\n\t\tif (selector.selector !== undefined) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray(selector, this);\n\t};\n\n\t// Give the init function the jQuery prototype for later instantiation\n\tinit.prototype = jQuery.fn;\n\n\t// Initialize central reference\n\trootjQuery = jQuery(document);\n\n\tvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\n\tjQuery.extend({\n\t\tdir: function dir(elem, _dir, until) {\n\t\t\tvar matched = [],\n\t\t\t    truncate = until !== undefined;\n\n\t\t\twhile ((elem = elem[_dir]) && elem.nodeType !== 9) {\n\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\tif (truncate && jQuery(elem).is(until)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmatched.push(elem);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn matched;\n\t\t},\n\n\t\tsibling: function sibling(n, elem) {\n\t\t\tvar matched = [];\n\n\t\t\tfor (; n; n = n.nextSibling) {\n\t\t\t\tif (n.nodeType === 1 && n !== elem) {\n\t\t\t\t\tmatched.push(n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matched;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\thas: function has(target) {\n\t\t\tvar targets = jQuery(target, this),\n\t\t\t    l = targets.length;\n\n\t\t\treturn this.filter(function () {\n\t\t\t\tvar i = 0;\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tif (jQuery.contains(this, targets[i])) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tclosest: function closest(selectors, context) {\n\t\t\tvar cur,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    matched = [],\n\t\t\t    pos = rneedsContext.test(selectors) || typeof selectors !== \"string\" ? jQuery(selectors, context || this.context) : 0;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tfor (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n\n\t\t\t\t\t\tmatched.push(cur);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);\n\t\t},\n\n\t\t// Determine the position of an element within the set\n\t\tindex: function index(elem) {\n\n\t\t\t// No argument, return index in parent\n\t\t\tif (!elem) {\n\t\t\t\treturn this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n\t\t\t}\n\n\t\t\t// Index in selector\n\t\t\tif (typeof elem === \"string\") {\n\t\t\t\treturn indexOf.call(jQuery(elem), this[0]);\n\t\t\t}\n\n\t\t\t// Locate the position of the desired element\n\t\t\treturn indexOf.call(this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[0] : elem);\n\t\t},\n\n\t\tadd: function add(selector, context) {\n\t\t\treturn this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));\n\t\t},\n\n\t\taddBack: function addBack(selector) {\n\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t}\n\t});\n\n\tfunction sibling(cur, dir) {\n\t\twhile ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\t\treturn cur;\n\t}\n\n\tjQuery.each({\n\t\tparent: function parent(elem) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t\t},\n\t\tparents: function parents(elem) {\n\t\t\treturn jQuery.dir(elem, \"parentNode\");\n\t\t},\n\t\tparentsUntil: function parentsUntil(elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"parentNode\", until);\n\t\t},\n\t\tnext: function next(elem) {\n\t\t\treturn sibling(elem, \"nextSibling\");\n\t\t},\n\t\tprev: function prev(elem) {\n\t\t\treturn sibling(elem, \"previousSibling\");\n\t\t},\n\t\tnextAll: function nextAll(elem) {\n\t\t\treturn jQuery.dir(elem, \"nextSibling\");\n\t\t},\n\t\tprevAll: function prevAll(elem) {\n\t\t\treturn jQuery.dir(elem, \"previousSibling\");\n\t\t},\n\t\tnextUntil: function nextUntil(elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"nextSibling\", until);\n\t\t},\n\t\tprevUntil: function prevUntil(elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"previousSibling\", until);\n\t\t},\n\t\tsiblings: function siblings(elem) {\n\t\t\treturn jQuery.sibling((elem.parentNode || {}).firstChild, elem);\n\t\t},\n\t\tchildren: function children(elem) {\n\t\t\treturn jQuery.sibling(elem.firstChild);\n\t\t},\n\t\tcontents: function contents(elem) {\n\t\t\treturn elem.contentDocument || jQuery.merge([], elem.childNodes);\n\t\t}\n\t}, function (name, fn) {\n\t\tjQuery.fn[name] = function (until, selector) {\n\t\t\tvar matched = jQuery.map(this, fn, until);\n\n\t\t\tif (name.slice(-5) !== \"Until\") {\n\t\t\t\tselector = until;\n\t\t\t}\n\n\t\t\tif (selector && typeof selector === \"string\") {\n\t\t\t\tmatched = jQuery.filter(selector, matched);\n\t\t\t}\n\n\t\t\tif (this.length > 1) {\n\t\t\t\t// Remove duplicates\n\t\t\t\tif (!guaranteedUnique[name]) {\n\t\t\t\t\tjQuery.unique(matched);\n\t\t\t\t}\n\n\t\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\t\tif (rparentsprev.test(name)) {\n\t\t\t\t\tmatched.reverse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(matched);\n\t\t};\n\t});\n\tvar rnotwhite = /\\S+/g;\n\n\t// String to Object options format cache\n\tvar optionsCache = {};\n\n\t// Convert String-formatted options into Object-formatted ones and store in cache\n\tfunction createOptions(options) {\n\t\tvar object = optionsCache[options] = {};\n\t\tjQuery.each(options.match(rnotwhite) || [], function (_, flag) {\n\t\t\tobject[flag] = true;\n\t\t});\n\t\treturn object;\n\t}\n\n\t/*\n  * Create a callback list using the following parameters:\n  *\n  *\toptions: an optional list of space-separated options that will change how\n  *\t\t\tthe callback list behaves or a more traditional option object\n  *\n  * By default a callback list will act like an event callback list and can be\n  * \"fired\" multiple times.\n  *\n  * Possible options:\n  *\n  *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n  *\n  *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n  *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n  *\t\t\t\t\tvalues (like a Deferred)\n  *\n  *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n  *\n  *\tstopOnFalse:\tinterrupt callings when a callback returns false\n  *\n  */\n\tjQuery.Callbacks = function (options) {\n\n\t\t// Convert options from String-formatted to Object-formatted if needed\n\t\t// (we check in cache first)\n\t\toptions = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);\n\n\t\tvar // Last fire value (for non-forgettable lists)\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\t_fired,\n\n\t\t// Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// First callback to fire (used internally by add and fireWith)\n\t\tfiringStart,\n\n\t\t// End of the loop when firing\n\t\tfiringLength,\n\n\t\t// Index of currently firing callback (modified by remove if needed)\n\t\tfiringIndex,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Stack of fire calls for repeatable lists\n\t\tstack = !options.once && [],\n\n\t\t// Fire callbacks\n\t\tfire = function fire(data) {\n\t\t\tmemory = options.memory && data;\n\t\t\t_fired = true;\n\t\t\tfiringIndex = firingStart || 0;\n\t\t\tfiringStart = 0;\n\t\t\tfiringLength = list.length;\n\t\t\tfiring = true;\n\t\t\tfor (; list && firingIndex < firingLength; firingIndex++) {\n\t\t\t\tif (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n\t\t\t\t\tmemory = false; // To prevent further calls using add\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiring = false;\n\t\t\tif (list) {\n\t\t\t\tif (stack) {\n\t\t\t\t\tif (stack.length) {\n\t\t\t\t\t\tfire(stack.shift());\n\t\t\t\t\t}\n\t\t\t\t} else if (memory) {\n\t\t\t\t\tlist = [];\n\t\t\t\t} else {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function add() {\n\t\t\t\tif (list) {\n\t\t\t\t\t// First, we save the current length\n\t\t\t\t\tvar start = list.length;\n\t\t\t\t\t(function add(args) {\n\t\t\t\t\t\tjQuery.each(args, function (_, arg) {\n\t\t\t\t\t\t\tvar type = jQuery.type(arg);\n\t\t\t\t\t\t\tif (type === \"function\") {\n\t\t\t\t\t\t\t\tif (!options.unique || !self.has(arg)) {\n\t\t\t\t\t\t\t\t\tlist.push(arg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (arg && arg.length && type !== \"string\") {\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd(arg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(arguments);\n\t\t\t\t\t// Do we need to add the callbacks to the\n\t\t\t\t\t// current firing batch?\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tfiringLength = list.length;\n\t\t\t\t\t\t// With memory, if we're not firing then\n\t\t\t\t\t\t// we should call right away\n\t\t\t\t\t} else if (memory) {\n\t\t\t\t\t\tfiringStart = start;\n\t\t\t\t\t\tfire(memory);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function remove() {\n\t\t\t\tif (list) {\n\t\t\t\t\tjQuery.each(arguments, function (_, arg) {\n\t\t\t\t\t\tvar index;\n\t\t\t\t\t\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\n\t\t\t\t\t\t\tlist.splice(index, 1);\n\t\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\t\tif (firing) {\n\t\t\t\t\t\t\t\tif (index <= firingLength) {\n\t\t\t\t\t\t\t\t\tfiringLength--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (index <= firingIndex) {\n\t\t\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function has(fn) {\n\t\t\t\treturn fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\n\t\t\t},\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function empty() {\n\t\t\t\tlist = [];\n\t\t\t\tfiringLength = 0;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Have the list do nothing anymore\n\t\t\tdisable: function disable() {\n\t\t\t\tlist = stack = memory = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it disabled?\n\t\t\tdisabled: function disabled() {\n\t\t\t\treturn !list;\n\t\t\t},\n\t\t\t// Lock the list in its current state\n\t\t\tlock: function lock() {\n\t\t\t\tstack = undefined;\n\t\t\t\tif (!memory) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it locked?\n\t\t\tlocked: function locked() {\n\t\t\t\treturn !stack;\n\t\t\t},\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function fireWith(context, args) {\n\t\t\t\tif (list && (!_fired || stack)) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [context, args.slice ? args.slice() : args];\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tstack.push(args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfire(args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function fire() {\n\t\t\t\tself.fireWith(this, arguments);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function fired() {\n\t\t\t\treturn !!_fired;\n\t\t\t}\n\t\t};\n\n\t\treturn self;\n\t};\n\n\tjQuery.extend({\n\n\t\tDeferred: function Deferred(func) {\n\t\t\tvar tuples = [\n\t\t\t// action, add listener, listener list, final state\n\t\t\t[\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\")]],\n\t\t\t    _state = \"pending\",\n\t\t\t    _promise = {\n\t\t\t\tstate: function state() {\n\t\t\t\t\treturn _state;\n\t\t\t\t},\n\t\t\t\talways: function always() {\n\t\t\t\t\tdeferred.done(arguments).fail(arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function then() /* fnDone, fnFail, fnProgress */{\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\t\t\t\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction(fns[i]) && fns[i];\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[tuple[1]](function () {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply(this, arguments);\n\t\t\t\t\t\t\t\tif (returned && jQuery.isFunction(returned.promise)) {\n\t\t\t\t\t\t\t\t\treturned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[tuple[0] + \"With\"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function promise(obj) {\n\t\t\t\t\treturn obj != null ? jQuery.extend(obj, _promise) : _promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\t    deferred = {};\n\n\t\t\t// Keep pipe for back-compat\n\t\t\t_promise.pipe = _promise.then;\n\n\t\t\t// Add list-specific methods\n\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\tvar list = tuple[2],\n\t\t\t\t    stateString = tuple[3];\n\n\t\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\t\t_promise[tuple[1]] = list.add;\n\n\t\t\t\t// Handle state\n\t\t\t\tif (stateString) {\n\t\t\t\t\tlist.add(function () {\n\t\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\t\t_state = stateString;\n\n\t\t\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t\t}, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n\t\t\t\t}\n\n\t\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\t\tdeferred[tuple[0]] = function () {\n\t\t\t\t\tdeferred[tuple[0] + \"With\"](this === deferred ? _promise : this, arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\t\t\t\tdeferred[tuple[0] + \"With\"] = list.fireWith;\n\t\t\t});\n\n\t\t\t// Make the deferred a promise\n\t\t\t_promise.promise(deferred);\n\n\t\t\t// Call given func if any\n\t\t\tif (func) {\n\t\t\t\tfunc.call(deferred, deferred);\n\t\t\t}\n\n\t\t\t// All done!\n\t\t\treturn deferred;\n\t\t},\n\n\t\t// Deferred helper\n\t\twhen: function when(subordinate /* , ..., subordinateN */) {\n\t\t\tvar i = 0,\n\t\t\t    resolveValues = _slice.call(arguments),\n\t\t\t    length = resolveValues.length,\n\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\n\n\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function updateFunc(i, contexts, values) {\n\t\t\t\treturn function (value) {\n\t\t\t\t\tcontexts[i] = this;\n\t\t\t\t\tvalues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n\t\t\t\t\tif (values === progressValues) {\n\t\t\t\t\t\tdeferred.notifyWith(contexts, values);\n\t\t\t\t\t} else if (! --remaining) {\n\t\t\t\t\t\tdeferred.resolveWith(contexts, values);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\t    progressValues,\n\t\t\t    progressContexts,\n\t\t\t    resolveContexts;\n\n\t\t\t// Add listeners to Deferred subordinates; treat others as resolved\n\t\t\tif (length > 1) {\n\t\t\t\tprogressValues = new Array(length);\n\t\t\t\tprogressContexts = new Array(length);\n\t\t\t\tresolveContexts = new Array(length);\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tif (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\n\t\t\t\t\t\tresolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t--remaining;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we're not waiting on anything, resolve the master\n\t\t\tif (!remaining) {\n\t\t\t\tdeferred.resolveWith(resolveContexts, resolveValues);\n\t\t\t}\n\n\t\t\treturn deferred.promise();\n\t\t}\n\t});\n\n\t// The deferred used on DOM ready\n\tvar readyList;\n\n\tjQuery.fn.ready = function (fn) {\n\t\t// Add the callback\n\t\tjQuery.ready.promise().done(fn);\n\n\t\treturn this;\n\t};\n\n\tjQuery.extend({\n\t\t// Is the DOM ready to be used? Set to true once it occurs.\n\t\tisReady: false,\n\n\t\t// A counter to track how many items to wait for before\n\t\t// the ready event fires. See #6781\n\t\treadyWait: 1,\n\n\t\t// Hold (or release) the ready event\n\t\tholdReady: function holdReady(hold) {\n\t\t\tif (hold) {\n\t\t\t\tjQuery.readyWait++;\n\t\t\t} else {\n\t\t\t\tjQuery.ready(true);\n\t\t\t}\n\t\t},\n\n\t\t// Handle when the DOM is ready\n\t\tready: function ready(wait) {\n\n\t\t\t// Abort if there are pending holds or we're already ready\n\t\t\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\n\t\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\t\tif (wait !== true && --jQuery.readyWait > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there are functions bound, to execute\n\t\t\treadyList.resolveWith(document, [jQuery]);\n\n\t\t\t// Trigger any bound ready events\n\t\t\tif (jQuery.fn.triggerHandler) {\n\t\t\t\tjQuery(document).triggerHandler(\"ready\");\n\t\t\t\tjQuery(document).off(\"ready\");\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n  * The ready event handler and self cleanup method\n  */\n\tfunction completed() {\n\t\tdocument.removeEventListener(\"DOMContentLoaded\", completed, false);\n\t\twindow.removeEventListener(\"load\", completed, false);\n\t\tjQuery.ready();\n\t}\n\n\tjQuery.ready.promise = function (obj) {\n\t\tif (!readyList) {\n\n\t\t\treadyList = jQuery.Deferred();\n\n\t\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t\t// We once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t\t\tif (document.readyState === \"complete\") {\n\t\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\t\tsetTimeout(jQuery.ready);\n\t\t\t} else {\n\n\t\t\t\t// Use the handy event callback\n\t\t\t\tdocument.addEventListener(\"DOMContentLoaded\", completed, false);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twindow.addEventListener(\"load\", completed, false);\n\t\t\t}\n\t\t}\n\t\treturn readyList.promise(obj);\n\t};\n\n\t// Kick off the DOM ready check even if the user does not\n\tjQuery.ready.promise();\n\n\t// Multifunctional method to get and set values of a collection\n\t// The value/s can optionally be executed if it's a function\n\tvar access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n\t\tvar i = 0,\n\t\t    len = elems.length,\n\t\t    bulk = key == null;\n\n\t\t// Sets many values\n\t\tif (jQuery.type(key) === \"object\") {\n\t\t\tchainable = true;\n\t\t\tfor (i in key) {\n\t\t\t\tjQuery.access(elems, fn, i, key[i], true, emptyGet, raw);\n\t\t\t}\n\n\t\t\t// Sets one value\n\t\t} else if (value !== undefined) {\n\t\t\tchainable = true;\n\n\t\t\tif (!jQuery.isFunction(value)) {\n\t\t\t\traw = true;\n\t\t\t}\n\n\t\t\tif (bulk) {\n\t\t\t\t// Bulk operations run against the entire set\n\t\t\t\tif (raw) {\n\t\t\t\t\tfn.call(elems, value);\n\t\t\t\t\tfn = null;\n\n\t\t\t\t\t// ...except when executing function values\n\t\t\t\t} else {\n\t\t\t\t\tbulk = fn;\n\t\t\t\t\tfn = function fn(elem, key, value) {\n\t\t\t\t\t\treturn bulk.call(jQuery(elem), value);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fn) {\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn chainable ? elems :\n\n\t\t// Gets\n\t\tbulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;\n\t};\n\n\t/**\n  * Determines whether an object can have data\n  */\n\tjQuery.acceptData = function (owner) {\n\t\t// Accepts only:\n\t\t//  - Node\n\t\t//    - Node.ELEMENT_NODE\n\t\t//    - Node.DOCUMENT_NODE\n\t\t//  - Object\n\t\t//    - Any\n\t\t/* jshint -W018 */\n\t\treturn owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n\t};\n\n\tfunction Data() {\n\t\t// Support: Android<4,\n\t\t// Old WebKit does not have Object.preventExtensions/freeze method,\n\t\t// return new empty object instead with no [[set]] accessor\n\t\tObject.defineProperty(this.cache = {}, 0, {\n\t\t\tget: function get() {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t});\n\n\t\tthis.expando = jQuery.expando + Data.uid++;\n\t}\n\n\tData.uid = 1;\n\tData.accepts = jQuery.acceptData;\n\n\tData.prototype = {\n\t\tkey: function key(owner) {\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return the key for a frozen object.\n\t\t\tif (!Data.accepts(owner)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tvar descriptor = {},\n\n\t\t\t// Check if the owner object already has a cache key\n\t\t\tunlock = owner[this.expando];\n\n\t\t\t// If not, create one\n\t\t\tif (!unlock) {\n\t\t\t\tunlock = Data.uid++;\n\n\t\t\t\t// Secure it in a non-enumerable, non-writable property\n\t\t\t\ttry {\n\t\t\t\t\tdescriptor[this.expando] = { value: unlock };\n\t\t\t\t\tObject.defineProperties(owner, descriptor);\n\n\t\t\t\t\t// Support: Android<4\n\t\t\t\t\t// Fallback to a less secure definition\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdescriptor[this.expando] = unlock;\n\t\t\t\t\tjQuery.extend(owner, descriptor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Ensure the cache object\n\t\t\tif (!this.cache[unlock]) {\n\t\t\t\tthis.cache[unlock] = {};\n\t\t\t}\n\n\t\t\treturn unlock;\n\t\t},\n\t\tset: function set(owner, data, value) {\n\t\t\tvar prop,\n\n\t\t\t// There may be an unlock assigned to this node,\n\t\t\t// if there is no entry for this \"owner\", create one inline\n\t\t\t// and set the unlock as though an owner entry had always existed\n\t\t\tunlock = this.key(owner),\n\t\t\t    cache = this.cache[unlock];\n\n\t\t\t// Handle: [ owner, key, value ] args\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\tcache[data] = value;\n\n\t\t\t\t// Handle: [ owner, { properties } ] args\n\t\t\t} else {\n\t\t\t\t// Fresh assignments by object are shallow copied\n\t\t\t\tif (jQuery.isEmptyObject(cache)) {\n\t\t\t\t\tjQuery.extend(this.cache[unlock], data);\n\t\t\t\t\t// Otherwise, copy the properties one-by-one to the cache object\n\t\t\t\t} else {\n\t\t\t\t\tfor (prop in data) {\n\t\t\t\t\t\tcache[prop] = data[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cache;\n\t\t},\n\t\tget: function get(owner, key) {\n\t\t\t// Either a valid cache is found, or will be created.\n\t\t\t// New caches will be created and the unlock returned,\n\t\t\t// allowing direct access to the newly created\n\t\t\t// empty data object. A valid owner object must be provided.\n\t\t\tvar cache = this.cache[this.key(owner)];\n\n\t\t\treturn key === undefined ? cache : cache[key];\n\t\t},\n\t\taccess: function access(owner, key, value) {\n\t\t\tvar stored;\n\t\t\t// In cases where either:\n\t\t\t//\n\t\t\t//   1. No key was specified\n\t\t\t//   2. A string key was specified, but no value provided\n\t\t\t//\n\t\t\t// Take the \"read\" path and allow the get method to determine\n\t\t\t// which value to return, respectively either:\n\t\t\t//\n\t\t\t//   1. The entire cache object\n\t\t\t//   2. The data stored at the key\n\t\t\t//\n\t\t\tif (key === undefined || key && typeof key === \"string\" && value === undefined) {\n\n\t\t\t\tstored = this.get(owner, key);\n\n\t\t\t\treturn stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));\n\t\t\t}\n\n\t\t\t// [*]When the key is not a string, or both a key and value\n\t\t\t// are specified, set or extend (existing objects) with either:\n\t\t\t//\n\t\t\t//   1. An object of properties\n\t\t\t//   2. A key and value\n\t\t\t//\n\t\t\tthis.set(owner, key, value);\n\n\t\t\t// Since the \"set\" path can have two possible entry points\n\t\t\t// return the expected data based on which path was taken[*]\n\t\t\treturn value !== undefined ? value : key;\n\t\t},\n\t\tremove: function remove(owner, key) {\n\t\t\tvar i,\n\t\t\t    name,\n\t\t\t    camel,\n\t\t\t    unlock = this.key(owner),\n\t\t\t    cache = this.cache[unlock];\n\n\t\t\tif (key === undefined) {\n\t\t\t\tthis.cache[unlock] = {};\n\t\t\t} else {\n\t\t\t\t// Support array or space separated string of keys\n\t\t\t\tif (jQuery.isArray(key)) {\n\t\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\t\tname = key.concat(key.map(jQuery.camelCase));\n\t\t\t\t} else {\n\t\t\t\t\tcamel = jQuery.camelCase(key);\n\t\t\t\t\t// Try the string as a key before any manipulation\n\t\t\t\t\tif (key in cache) {\n\t\t\t\t\t\tname = [key, camel];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\t\tname = camel;\n\t\t\t\t\t\tname = name in cache ? [name] : name.match(rnotwhite) || [];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ti = name.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tdelete cache[name[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thasData: function hasData(owner) {\n\t\t\treturn !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});\n\t\t},\n\t\tdiscard: function discard(owner) {\n\t\t\tif (owner[this.expando]) {\n\t\t\t\tdelete this.cache[owner[this.expando]];\n\t\t\t}\n\t\t}\n\t};\n\tvar data_priv = new Data();\n\n\tvar data_user = new Data();\n\n\t//\tImplementation Summary\n\t//\n\t//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n\t//\t2. Improve the module's maintainability by reducing the storage\n\t//\t\tpaths to a single mechanism.\n\t//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n\t//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n\t//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n\t//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n\tvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\t    rmultiDash = /([A-Z])/g;\n\n\tfunction dataAttr(elem, key, data) {\n\t\tvar name;\n\n\t\t// If nothing was found internally, try to fetch any\n\t\t// data from the HTML5 data-* attribute\n\t\tif (data === undefined && elem.nodeType === 1) {\n\t\t\tname = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\n\t\t\tdata = elem.getAttribute(name);\n\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\ttry {\n\t\t\t\t\tdata = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null :\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\t\tdata_user.set(elem, key, data);\n\t\t\t} else {\n\t\t\t\tdata = undefined;\n\t\t\t}\n\t\t}\n\t\treturn data;\n\t}\n\n\tjQuery.extend({\n\t\thasData: function hasData(elem) {\n\t\t\treturn data_user.hasData(elem) || data_priv.hasData(elem);\n\t\t},\n\n\t\tdata: function data(elem, name, _data) {\n\t\t\treturn data_user.access(elem, name, _data);\n\t\t},\n\n\t\tremoveData: function removeData(elem, name) {\n\t\t\tdata_user.remove(elem, name);\n\t\t},\n\n\t\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t\t// with direct calls to data_priv methods, these can be deprecated.\n\t\t_data: function _data(elem, name, data) {\n\t\t\treturn data_priv.access(elem, name, data);\n\t\t},\n\n\t\t_removeData: function _removeData(elem, name) {\n\t\t\tdata_priv.remove(elem, name);\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdata: function data(key, value) {\n\t\t\tvar i,\n\t\t\t    name,\n\t\t\t    data,\n\t\t\t    elem = this[0],\n\t\t\t    attrs = elem && elem.attributes;\n\n\t\t\t// Gets all values\n\t\t\tif (key === undefined) {\n\t\t\t\tif (this.length) {\n\t\t\t\t\tdata = data_user.get(elem);\n\n\t\t\t\t\tif (elem.nodeType === 1 && !data_priv.get(elem, \"hasDataAttrs\")) {\n\t\t\t\t\t\ti = attrs.length;\n\t\t\t\t\t\twhile (i--) {\n\n\t\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\t\tif (attrs[i]) {\n\t\t\t\t\t\t\t\tname = attrs[i].name;\n\t\t\t\t\t\t\t\tif (name.indexOf(\"data-\") === 0) {\n\t\t\t\t\t\t\t\t\tname = jQuery.camelCase(name.slice(5));\n\t\t\t\t\t\t\t\t\tdataAttr(elem, name, data[name]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata_priv.set(elem, \"hasDataAttrs\", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Sets multiple values\n\t\t\tif ((typeof key === \"undefined\" ? \"undefined\" : _typeof(key)) === \"object\") {\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\tdata_user.set(this, key);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn access(this, function (value) {\n\t\t\t\tvar data,\n\t\t\t\t    camelKey = jQuery.camelCase(key);\n\n\t\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\t\tif (elem && value === undefined) {\n\t\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t\t// with the key as-is\n\t\t\t\t\tdata = data_user.get(elem, key);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t\t// with the key camelized\n\t\t\t\t\tdata = data_user.get(elem, camelKey);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\t\tdata = dataAttr(elem, camelKey, undefined);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\n\t\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Set the data...\n\t\t\t\tthis.each(function () {\n\t\t\t\t\t// First, attempt to store a copy or reference of any\n\t\t\t\t\t// data that might've been store with a camelCased key.\n\t\t\t\t\tvar data = data_user.get(this, camelKey);\n\n\t\t\t\t\t// For HTML5 data-* attribute interop, we have to\n\t\t\t\t\t// store property names with dashes in a camelCase form.\n\t\t\t\t\t// This might not apply to all properties...*\n\t\t\t\t\tdata_user.set(this, camelKey, value);\n\n\t\t\t\t\t// *... In the case of properties that might _actually_\n\t\t\t\t\t// have dashes, we need to also store a copy of that\n\t\t\t\t\t// unchanged property.\n\t\t\t\t\tif (key.indexOf(\"-\") !== -1 && data !== undefined) {\n\t\t\t\t\t\tdata_user.set(this, key, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length > 1, null, true);\n\t\t},\n\n\t\tremoveData: function removeData(key) {\n\t\t\treturn this.each(function () {\n\t\t\t\tdata_user.remove(this, key);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tqueue: function queue(elem, type, data) {\n\t\t\tvar queue;\n\n\t\t\tif (elem) {\n\t\t\t\ttype = (type || \"fx\") + \"queue\";\n\t\t\t\tqueue = data_priv.get(elem, type);\n\n\t\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\t\tif (data) {\n\t\t\t\t\tif (!queue || jQuery.isArray(data)) {\n\t\t\t\t\t\tqueue = data_priv.access(elem, type, jQuery.makeArray(data));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqueue.push(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn queue || [];\n\t\t\t}\n\t\t},\n\n\t\tdequeue: function dequeue(elem, type) {\n\t\t\ttype = type || \"fx\";\n\n\t\t\tvar queue = jQuery.queue(elem, type),\n\t\t\t    startLength = queue.length,\n\t\t\t    fn = queue.shift(),\n\t\t\t    hooks = jQuery._queueHooks(elem, type),\n\t\t\t    next = function next() {\n\t\t\t\tjQuery.dequeue(elem, type);\n\t\t\t};\n\n\t\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\t\tif (fn === \"inprogress\") {\n\t\t\t\tfn = queue.shift();\n\t\t\t\tstartLength--;\n\t\t\t}\n\n\t\t\tif (fn) {\n\n\t\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t\t// automatically dequeued\n\t\t\t\tif (type === \"fx\") {\n\t\t\t\t\tqueue.unshift(\"inprogress\");\n\t\t\t\t}\n\n\t\t\t\t// Clear up the last queue stop function\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tfn.call(elem, next, hooks);\n\t\t\t}\n\n\t\t\tif (!startLength && hooks) {\n\t\t\t\thooks.empty.fire();\n\t\t\t}\n\t\t},\n\n\t\t// Not public - generate a queueHooks object, or return the current one\n\t\t_queueHooks: function _queueHooks(elem, type) {\n\t\t\tvar key = type + \"queueHooks\";\n\t\t\treturn data_priv.get(elem, key) || data_priv.access(elem, key, {\n\t\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function () {\n\t\t\t\t\tdata_priv.remove(elem, [type + \"queue\", key]);\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tqueue: function queue(type, data) {\n\t\t\tvar setter = 2;\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tdata = type;\n\t\t\t\ttype = \"fx\";\n\t\t\t\tsetter--;\n\t\t\t}\n\n\t\t\tif (arguments.length < setter) {\n\t\t\t\treturn jQuery.queue(this[0], type);\n\t\t\t}\n\n\t\t\treturn data === undefined ? this : this.each(function () {\n\t\t\t\tvar queue = jQuery.queue(this, type, data);\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks(this, type);\n\n\t\t\t\tif (type === \"fx\" && queue[0] !== \"inprogress\") {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdequeue: function dequeue(type) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t});\n\t\t},\n\t\tclearQueue: function clearQueue(type) {\n\t\t\treturn this.queue(type || \"fx\", []);\n\t\t},\n\t\t// Get a promise resolved when queues of a certain type\n\t\t// are emptied (fx is the type by default)\n\t\tpromise: function promise(type, obj) {\n\t\t\tvar tmp,\n\t\t\t    count = 1,\n\t\t\t    defer = jQuery.Deferred(),\n\t\t\t    elements = this,\n\t\t\t    i = this.length,\n\t\t\t    resolve = function resolve() {\n\t\t\t\tif (! --count) {\n\t\t\t\t\tdefer.resolveWith(elements, [elements]);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tobj = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\ttype = type || \"fx\";\n\n\t\t\twhile (i--) {\n\t\t\t\ttmp = data_priv.get(elements[i], type + \"queueHooks\");\n\t\t\t\tif (tmp && tmp.empty) {\n\t\t\t\t\tcount++;\n\t\t\t\t\ttmp.empty.add(resolve);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t\treturn defer.promise(obj);\n\t\t}\n\t});\n\tvar pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n\n\tvar cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n\n\tvar isHidden = function isHidden(elem, el) {\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css(elem, \"display\") === \"none\" || !jQuery.contains(elem.ownerDocument, elem);\n\t};\n\n\tvar rcheckableType = /^(?:checkbox|radio)$/i;\n\n\t(function () {\n\t\tvar fragment = document.createDocumentFragment(),\n\t\t    div = fragment.appendChild(document.createElement(\"div\")),\n\t\t    input = document.createElement(\"input\");\n\n\t\t// Support: Safari<=5.1\n\t\t// Check state lost if the name is set (#11217)\n\t\t// Support: Windows Web Apps (WWA)\n\t\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\t\tinput.setAttribute(\"type\", \"radio\");\n\t\tinput.setAttribute(\"checked\", \"checked\");\n\t\tinput.setAttribute(\"name\", \"t\");\n\n\t\tdiv.appendChild(input);\n\n\t\t// Support: Safari<=5.1, Android<4.2\n\t\t// Older WebKit doesn't clone checked state correctly in fragments\n\t\tsupport.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\n\n\t\t// Support: IE<=11+\n\t\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\t\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\t\tsupport.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n\t})();\n\tvar strundefined = typeof undefined === \"undefined\" ? \"undefined\" : _typeof(undefined);\n\n\tsupport.focusinBubbles = \"onfocusin\" in window;\n\n\tvar rkeyEvent = /^key/,\n\t    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\n\t    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\t    rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n\tfunction returnTrue() {\n\t\treturn true;\n\t}\n\n\tfunction returnFalse() {\n\t\treturn false;\n\t}\n\n\tfunction safeActiveElement() {\n\t\ttry {\n\t\t\treturn document.activeElement;\n\t\t} catch (err) {}\n\t}\n\n\t/*\n  * Helper functions for managing events -- not part of the public interface.\n  * Props to Dean Edwards' addEvent library for many of the ideas.\n  */\n\tjQuery.event = {\n\n\t\tglobal: {},\n\n\t\tadd: function add(elem, types, handler, data, selector) {\n\n\t\t\tvar handleObjIn,\n\t\t\t    eventHandle,\n\t\t\t    tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObj,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = data_priv.get(elem);\n\n\t\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\t\tif (!elemData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\t\tif (handler.handler) {\n\t\t\t\thandleObjIn = handler;\n\t\t\t\thandler = handleObjIn.handler;\n\t\t\t\tselector = handleObjIn.selector;\n\t\t\t}\n\n\t\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\t\tif (!handler.guid) {\n\t\t\t\thandler.guid = jQuery.guid++;\n\t\t\t}\n\n\t\t\t// Init the element's event structure and main handler, if this is the first\n\t\t\tif (!(events = elemData.events)) {\n\t\t\t\tevents = elemData.events = {};\n\t\t\t}\n\t\t\tif (!(eventHandle = elemData.handle)) {\n\t\t\t\teventHandle = elemData.handle = function (e) {\n\t\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\t\treturn (typeof jQuery === \"undefined\" ? \"undefined\" : _typeof(jQuery)) !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Handle multiple events separated by a space\n\t\t\ttypes = (types || \"\").match(rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\t\tif (!type) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\n\t\t\t\t// Update special based on newly reset type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// handleObj is passed to all event handlers\n\t\t\t\thandleObj = jQuery.extend({\n\t\t\t\t\ttype: type,\n\t\t\t\t\torigType: origType,\n\t\t\t\t\tdata: data,\n\t\t\t\t\thandler: handler,\n\t\t\t\t\tguid: handler.guid,\n\t\t\t\t\tselector: selector,\n\t\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test(selector),\n\t\t\t\t\tnamespace: namespaces.join(\".\")\n\t\t\t\t}, handleObjIn);\n\n\t\t\t\t// Init the event handler queue if we're the first\n\t\t\t\tif (!(handlers = events[type])) {\n\t\t\t\t\thandlers = events[type] = [];\n\t\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\t\tif (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n\t\t\t\t\t\tif (elem.addEventListener) {\n\t\t\t\t\t\t\telem.addEventListener(type, eventHandle, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (special.add) {\n\t\t\t\t\tspecial.add.call(elem, handleObj);\n\n\t\t\t\t\tif (!handleObj.handler.guid) {\n\t\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add to the element's handler list, delegates in front\n\t\t\t\tif (selector) {\n\t\t\t\t\thandlers.splice(handlers.delegateCount++, 0, handleObj);\n\t\t\t\t} else {\n\t\t\t\t\thandlers.push(handleObj);\n\t\t\t\t}\n\n\t\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\t\tjQuery.event.global[type] = true;\n\t\t\t}\n\t\t},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function remove(elem, types, handler, selector, mappedTypes) {\n\n\t\t\tvar j,\n\t\t\t    origCount,\n\t\t\t    tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObj,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = data_priv.hasData(elem) && data_priv.get(elem);\n\n\t\t\tif (!elemData || !(events = elemData.events)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Once for each type.namespace in types; type may be omitted\n\t\t\ttypes = (types || \"\").match(rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\t\tif (!type) {\n\t\t\t\t\tfor (type in events) {\n\t\t\t\t\t\tjQuery.event.remove(elem, type + types[t], handler, selector, true);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\t\t\t\thandlers = events[type] || [];\n\t\t\t\ttmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\");\n\n\t\t\t\t// Remove matching events\n\t\t\t\torigCount = j = handlers.length;\n\t\t\t\twhile (j--) {\n\t\t\t\t\thandleObj = handlers[j];\n\n\t\t\t\t\tif ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n\t\t\t\t\t\thandlers.splice(j, 1);\n\n\t\t\t\t\t\tif (handleObj.selector) {\n\t\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (special.remove) {\n\t\t\t\t\t\t\tspecial.remove.call(elem, handleObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\t\tif (origCount && !handlers.length) {\n\t\t\t\t\tif (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n\t\t\t\t\t\tjQuery.removeEvent(elem, type, elemData.handle);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete events[type];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove the expando if it's no longer used\n\t\t\tif (jQuery.isEmptyObject(events)) {\n\t\t\t\tdelete elemData.handle;\n\t\t\t\tdata_priv.remove(elem, \"events\");\n\t\t\t}\n\t\t},\n\n\t\ttrigger: function trigger(event, data, elem, onlyHandlers) {\n\n\t\t\tvar i,\n\t\t\t    cur,\n\t\t\t    tmp,\n\t\t\t    bubbleType,\n\t\t\t    ontype,\n\t\t\t    handle,\n\t\t\t    special,\n\t\t\t    eventPath = [elem || document],\n\t\t\t    type = hasOwn.call(event, \"type\") ? event.type : event,\n\t\t\t    namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n\n\t\t\tcur = tmp = elem = elem || document;\n\n\t\t\t// Don't do events on text and comment nodes\n\t\t\tif (elem.nodeType === 3 || elem.nodeType === 8) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\t\tif (rfocusMorph.test(type + jQuery.event.triggered)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (type.indexOf(\".\") >= 0) {\n\t\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\t\tnamespaces = type.split(\".\");\n\t\t\t\ttype = namespaces.shift();\n\t\t\t\tnamespaces.sort();\n\t\t\t}\n\t\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n\t\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\t\tevent = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === \"undefined\" ? \"undefined\" : _typeof(event)) === \"object\" && event);\n\n\t\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\t\tevent.namespace = namespaces.join(\".\");\n\t\t\tevent.namespace_re = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n\n\t\t\t// Clean up the event in case it is being reused\n\t\t\tevent.result = undefined;\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = elem;\n\t\t\t}\n\n\t\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\t\tdata = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n\t\t\t// Allow special events to draw outside the lines\n\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\tif (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\t\tif (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n\n\t\t\t\tbubbleType = special.delegateType || type;\n\t\t\t\tif (!rfocusMorph.test(bubbleType + type)) {\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t\tfor (; cur; cur = cur.parentNode) {\n\t\t\t\t\teventPath.push(cur);\n\t\t\t\t\ttmp = cur;\n\t\t\t\t}\n\n\t\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\t\tif (tmp === (elem.ownerDocument || document)) {\n\t\t\t\t\teventPath.push(tmp.defaultView || tmp.parentWindow || window);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fire handlers on the event path\n\t\t\ti = 0;\n\t\t\twhile ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n\n\t\t\t\tevent.type = i > 1 ? bubbleType : special.bindType || type;\n\n\t\t\t\t// jQuery handler\n\t\t\t\thandle = (data_priv.get(cur, \"events\") || {})[event.type] && data_priv.get(cur, \"handle\");\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.apply(cur, data);\n\t\t\t\t}\n\n\t\t\t\t// Native handler\n\t\t\t\thandle = ontype && cur[ontype];\n\t\t\t\tif (handle && handle.apply && jQuery.acceptData(cur)) {\n\t\t\t\t\tevent.result = handle.apply(cur, data);\n\t\t\t\t\tif (event.result === false) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.type = type;\n\n\t\t\t// If nobody prevented the default action, do it now\n\t\t\tif (!onlyHandlers && !event.isDefaultPrevented()) {\n\n\t\t\t\tif ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {\n\n\t\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\t\tif (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\t\ttmp = elem[ontype];\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\t\telem[type]();\n\t\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\tdispatch: function dispatch(event) {\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix(event);\n\n\t\t\tvar i,\n\t\t\t    j,\n\t\t\t    ret,\n\t\t\t    matched,\n\t\t\t    handleObj,\n\t\t\t    handlerQueue = [],\n\t\t\t    args = _slice.call(arguments),\n\t\t\t    handlers = (data_priv.get(this, \"events\") || {})[event.type] || [],\n\t\t\t    special = jQuery.event.special[event.type] || {};\n\n\t\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\t\targs[0] = event;\n\t\t\tevent.delegateTarget = this;\n\n\t\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\t\tif (special.preDispatch && special.preDispatch.call(this, event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine handlers\n\t\t\thandlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n\t\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\t\ti = 0;\n\t\t\twhile ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n\t\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\t\tj = 0;\n\t\t\t\twhile ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n\n\t\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\t\tif (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\n\n\t\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\t\tret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n\t\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\t\tif ((event.result = ret) === false) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the postDispatch hook for the mapped type\n\t\t\tif (special.postDispatch) {\n\t\t\t\tspecial.postDispatch.call(this, event);\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\thandlers: function handlers(event, _handlers) {\n\t\t\tvar i,\n\t\t\t    matches,\n\t\t\t    sel,\n\t\t\t    handleObj,\n\t\t\t    handlerQueue = [],\n\t\t\t    delegateCount = _handlers.delegateCount,\n\t\t\t    cur = event.target;\n\n\t\t\t// Find delegate handlers\n\t\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t\t// Avoid non-left-click bubbling in Firefox (#3861)\n\t\t\tif (delegateCount && cur.nodeType && (!event.button || event.type !== \"click\")) {\n\n\t\t\t\tfor (; cur !== this; cur = cur.parentNode || this) {\n\n\t\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\t\tif (cur.disabled !== true || event.type !== \"click\") {\n\t\t\t\t\t\tmatches = [];\n\t\t\t\t\t\tfor (i = 0; i < delegateCount; i++) {\n\t\t\t\t\t\t\thandleObj = _handlers[i];\n\n\t\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\t\tif (matches[sel] === undefined) {\n\t\t\t\t\t\t\t\tmatches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (matches[sel]) {\n\t\t\t\t\t\t\t\tmatches.push(handleObj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matches.length) {\n\t\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the remaining (directly-bound) handlers\n\t\t\tif (delegateCount < _handlers.length) {\n\t\t\t\thandlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });\n\t\t\t}\n\n\t\t\treturn handlerQueue;\n\t\t},\n\n\t\t// Includes some event props shared by KeyEvent and MouseEvent\n\t\tprops: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n\n\t\tfixHooks: {},\n\n\t\tkeyHooks: {\n\t\t\tprops: \"char charCode key keyCode\".split(\" \"),\n\t\t\tfilter: function filter(event, original) {\n\n\t\t\t\t// Add which for key events\n\t\t\t\tif (event.which == null) {\n\t\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tmouseHooks: {\n\t\t\tprops: \"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n\t\t\tfilter: function filter(event, original) {\n\t\t\t\tvar eventDoc,\n\t\t\t\t    doc,\n\t\t\t\t    body,\n\t\t\t\t    button = original.button;\n\n\t\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\t\tif (event.pageX == null && original.clientX != null) {\n\t\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\t\tevent.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n\t\t\t\t\tevent.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n\t\t\t\t}\n\n\t\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t\t// Note: button is not normalized, so don't use it\n\t\t\t\tif (!event.which && button !== undefined) {\n\t\t\t\t\tevent.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tfix: function fix(event) {\n\t\t\tif (event[jQuery.expando]) {\n\t\t\t\treturn event;\n\t\t\t}\n\n\t\t\t// Create a writable copy of the event object and normalize some properties\n\t\t\tvar i,\n\t\t\t    prop,\n\t\t\t    copy,\n\t\t\t    type = event.type,\n\t\t\t    originalEvent = event,\n\t\t\t    fixHook = this.fixHooks[type];\n\n\t\t\tif (!fixHook) {\n\t\t\t\tthis.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};\n\t\t\t}\n\t\t\tcopy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n\n\t\t\tevent = new jQuery.Event(originalEvent);\n\n\t\t\ti = copy.length;\n\t\t\twhile (i--) {\n\t\t\t\tprop = copy[i];\n\t\t\t\tevent[prop] = originalEvent[prop];\n\t\t\t}\n\n\t\t\t// Support: Cordova 2.5 (WebKit) (#13255)\n\t\t\t// All events should have a target; Cordova deviceready doesn't\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = document;\n\t\t\t}\n\n\t\t\t// Support: Safari 6.0+, Chrome<28\n\t\t\t// Target should not be a text node (#504, #13143)\n\t\t\tif (event.target.nodeType === 3) {\n\t\t\t\tevent.target = event.target.parentNode;\n\t\t\t}\n\n\t\t\treturn fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n\t\t},\n\n\t\tspecial: {\n\t\t\tload: {\n\t\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\t\tnoBubble: true\n\t\t\t},\n\t\t\tfocus: {\n\t\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this !== safeActiveElement() && this.focus) {\n\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusin\"\n\t\t\t},\n\t\t\tblur: {\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this === safeActiveElement() && this.blur) {\n\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusout\"\n\t\t\t},\n\t\t\tclick: {\n\t\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this.type === \"checkbox\" && this.click && jQuery.nodeName(this, \"input\")) {\n\t\t\t\t\t\tthis.click();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t\t_default: function _default(event) {\n\t\t\t\t\treturn jQuery.nodeName(event.target, \"a\");\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tbeforeunload: {\n\t\t\t\tpostDispatch: function postDispatch(event) {\n\n\t\t\t\t\t// Support: Firefox 20+\n\t\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\t\tif (event.result !== undefined && event.originalEvent) {\n\t\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsimulate: function simulate(type, elem, event, bubble) {\n\t\t\t// Piggyback on a donor event to simulate a different one.\n\t\t\t// Fake originalEvent to avoid donor's stopPropagation, but if the\n\t\t\t// simulated event prevents default then we do the same on the donor.\n\t\t\tvar e = jQuery.extend(new jQuery.Event(), event, {\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true,\n\t\t\t\toriginalEvent: {}\n\t\t\t});\n\t\t\tif (bubble) {\n\t\t\t\tjQuery.event.trigger(e, null, elem);\n\t\t\t} else {\n\t\t\t\tjQuery.event.dispatch.call(elem, e);\n\t\t\t}\n\t\t\tif (e.isDefaultPrevented()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.removeEvent = function (elem, type, handle) {\n\t\tif (elem.removeEventListener) {\n\t\t\telem.removeEventListener(type, handle, false);\n\t\t}\n\t};\n\n\tjQuery.Event = function (src, props) {\n\t\t// Allow instantiation without the 'new' keyword\n\t\tif (!(this instanceof jQuery.Event)) {\n\t\t\treturn new jQuery.Event(src, props);\n\t\t}\n\n\t\t// Event object\n\t\tif (src && src.type) {\n\t\t\tthis.originalEvent = src;\n\t\t\tthis.type = src.type;\n\n\t\t\t// Events bubbling up the document may have been marked as prevented\n\t\t\t// by a handler lower down the tree; reflect the correct value.\n\t\t\tthis.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\n\t\t\t// Support: Android<4.0\n\t\t\tsrc.returnValue === false ? returnTrue : returnFalse;\n\n\t\t\t// Event type\n\t\t} else {\n\t\t\tthis.type = src;\n\t\t}\n\n\t\t// Put explicitly provided properties onto the event object\n\t\tif (props) {\n\t\t\tjQuery.extend(this, props);\n\t\t}\n\n\t\t// Create a timestamp if incoming event doesn't have one\n\t\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t\t// Mark it as fixed\n\t\tthis[jQuery.expando] = true;\n\t};\n\n\t// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n\t// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\tjQuery.Event.prototype = {\n\t\tisDefaultPrevented: returnFalse,\n\t\tisPropagationStopped: returnFalse,\n\t\tisImmediatePropagationStopped: returnFalse,\n\n\t\tpreventDefault: function preventDefault() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\t\tif (e && e.preventDefault) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t},\n\t\tstopPropagation: function stopPropagation() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isPropagationStopped = returnTrue;\n\n\t\t\tif (e && e.stopPropagation) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t},\n\t\tstopImmediatePropagation: function stopImmediatePropagation() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\t\tif (e && e.stopImmediatePropagation) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t}\n\n\t\t\tthis.stopPropagation();\n\t\t}\n\t};\n\n\t// Create mouseenter/leave events using mouseover/out and event-time checks\n\t// Support: Chrome 15+\n\tjQuery.each({\n\t\tmouseenter: \"mouseover\",\n\t\tmouseleave: \"mouseout\",\n\t\tpointerenter: \"pointerover\",\n\t\tpointerleave: \"pointerout\"\n\t}, function (orig, fix) {\n\t\tjQuery.event.special[orig] = {\n\t\t\tdelegateType: fix,\n\t\t\tbindType: fix,\n\n\t\t\thandle: function handle(event) {\n\t\t\t\tvar ret,\n\t\t\t\t    target = this,\n\t\t\t\t    related = event.relatedTarget,\n\t\t\t\t    handleObj = event.handleObj;\n\n\t\t\t\t// For mousenter/leave call the handler if related is outside the target.\n\t\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\t\tif (!related || related !== target && !jQuery.contains(target, related)) {\n\t\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\t\tret = handleObj.handler.apply(this, arguments);\n\t\t\t\t\tevent.type = fix;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t});\n\n\t// Support: Firefox, Chrome, Safari\n\t// Create \"bubbling\" focus and blur events\n\tif (!support.focusinBubbles) {\n\t\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function (orig, fix) {\n\n\t\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\t\tvar handler = function handler(event) {\n\t\t\t\tjQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\n\t\t\t};\n\n\t\t\tjQuery.event.special[fix] = {\n\t\t\t\tsetup: function setup() {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = data_priv.access(doc, fix);\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.addEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t\tdata_priv.access(doc, fix, (attaches || 0) + 1);\n\t\t\t\t},\n\t\t\t\tteardown: function teardown() {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = data_priv.access(doc, fix) - 1;\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.removeEventListener(orig, handler, true);\n\t\t\t\t\t\tdata_priv.remove(doc, fix);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata_priv.access(doc, fix, attaches);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tjQuery.fn.extend({\n\n\t\ton: function on(types, selector, data, fn, /*INTERNAL*/one) {\n\t\t\tvar origFn, type;\n\n\t\t\t// Types can be a map of types/handlers\n\t\t\tif ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\n\t\t\t\t// ( types-Object, selector, data )\n\t\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\t\t// ( types-Object, data )\n\t\t\t\t\tdata = data || selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.on(type, selector, data, types[type], one);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (data == null && fn == null) {\n\t\t\t\t// ( types, fn )\n\t\t\t\tfn = selector;\n\t\t\t\tdata = selector = undefined;\n\t\t\t} else if (fn == null) {\n\t\t\t\tif (typeof selector === \"string\") {\n\t\t\t\t\t// ( types, selector, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = undefined;\n\t\t\t\t} else {\n\t\t\t\t\t// ( types, data, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t} else if (!fn) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (one === 1) {\n\t\t\t\torigFn = fn;\n\t\t\t\tfn = function fn(event) {\n\t\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\t\tjQuery().off(event);\n\t\t\t\t\treturn origFn.apply(this, arguments);\n\t\t\t\t};\n\t\t\t\t// Use same guid so caller can remove using origFn\n\t\t\t\tfn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.add(this, types, fn, data, selector);\n\t\t\t});\n\t\t},\n\t\tone: function one(types, selector, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn, 1);\n\t\t},\n\t\toff: function off(types, selector, fn) {\n\t\t\tvar handleObj, type;\n\t\t\tif (types && types.preventDefault && types.handleObj) {\n\t\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\t\thandleObj = types.handleObj;\n\t\t\t\tjQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\n\t\t\t\t// ( types-object [, selector] )\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.off(type, selector, types[type]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (selector === false || typeof selector === \"function\") {\n\t\t\t\t// ( types [, fn] )\n\t\t\t\tfn = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.remove(this, types, fn, selector);\n\t\t\t});\n\t\t},\n\n\t\ttrigger: function trigger(type, data) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.trigger(type, data, this);\n\t\t\t});\n\t\t},\n\t\ttriggerHandler: function triggerHandler(type, data) {\n\t\t\tvar elem = this[0];\n\t\t\tif (elem) {\n\t\t\t\treturn jQuery.event.trigger(type, data, elem, true);\n\t\t\t}\n\t\t}\n\t});\n\n\tvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n\t    rtagName = /<([\\w:]+)/,\n\t    rhtml = /<|&#?\\w+;/,\n\t    rnoInnerhtml = /<(?:script|style|link)/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\t    rscriptType = /^$|\\/(?:java|ecma)script/i,\n\t    rscriptTypeMasked = /^true\\/(.*)/,\n\t    rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\n\n\t// We have to close these tags to support XHTML (#13200)\n\twrapMap = {\n\n\t\t// Support: IE9\n\t\toption: [1, \"<select multiple='multiple'>\", \"</select>\"],\n\n\t\tthead: [1, \"<table>\", \"</table>\"],\n\t\tcol: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n\t\ttr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n\t\ttd: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n\n\t\t_default: [0, \"\", \"\"]\n\t};\n\n\t// Support: IE9\n\twrapMap.optgroup = wrapMap.option;\n\n\twrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n\twrapMap.th = wrapMap.td;\n\n\t// Support: 1.x compatibility\n\t// Manipulating tables requires a tbody\n\tfunction manipulationTarget(elem, content) {\n\t\treturn jQuery.nodeName(elem, \"table\") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\") ? elem.getElementsByTagName(\"tbody\")[0] || elem.appendChild(elem.ownerDocument.createElement(\"tbody\")) : elem;\n\t}\n\n\t// Replace/restore the type attribute of script elements for safe DOM manipulation\n\tfunction disableScript(elem) {\n\t\telem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n\t\treturn elem;\n\t}\n\tfunction restoreScript(elem) {\n\t\tvar match = rscriptTypeMasked.exec(elem.type);\n\n\t\tif (match) {\n\t\t\telem.type = match[1];\n\t\t} else {\n\t\t\telem.removeAttribute(\"type\");\n\t\t}\n\n\t\treturn elem;\n\t}\n\n\t// Mark scripts as having already been evaluated\n\tfunction setGlobalEval(elems, refElements) {\n\t\tvar i = 0,\n\t\t    l = elems.length;\n\n\t\tfor (; i < l; i++) {\n\t\t\tdata_priv.set(elems[i], \"globalEval\", !refElements || data_priv.get(refElements[i], \"globalEval\"));\n\t\t}\n\t}\n\n\tfunction cloneCopyEvent(src, dest) {\n\t\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\t\tif (dest.nodeType !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 1. Copy private data: events, handlers, etc.\n\t\tif (data_priv.hasData(src)) {\n\t\t\tpdataOld = data_priv.access(src);\n\t\t\tpdataCur = data_priv.set(dest, pdataOld);\n\t\t\tevents = pdataOld.events;\n\n\t\t\tif (events) {\n\t\t\t\tdelete pdataCur.handle;\n\t\t\t\tpdataCur.events = {};\n\n\t\t\t\tfor (type in events) {\n\t\t\t\t\tfor (i = 0, l = events[type].length; i < l; i++) {\n\t\t\t\t\t\tjQuery.event.add(dest, type, events[type][i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 2. Copy user data\n\t\tif (data_user.hasData(src)) {\n\t\t\tudataOld = data_user.access(src);\n\t\t\tudataCur = jQuery.extend({}, udataOld);\n\n\t\t\tdata_user.set(dest, udataCur);\n\t\t}\n\t}\n\n\tfunction getAll(context, tag) {\n\t\tvar ret = context.getElementsByTagName ? context.getElementsByTagName(tag || \"*\") : context.querySelectorAll ? context.querySelectorAll(tag || \"*\") : [];\n\n\t\treturn tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;\n\t}\n\n\t// Fix IE bugs, see support tests\n\tfunction fixInput(src, dest) {\n\t\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\t\tif (nodeName === \"input\" && rcheckableType.test(src.type)) {\n\t\t\tdest.checked = src.checked;\n\n\t\t\t// Fails to return the selected option to the default selected state when cloning options\n\t\t} else if (nodeName === \"input\" || nodeName === \"textarea\") {\n\t\t\tdest.defaultValue = src.defaultValue;\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tclone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n\t\t\tvar i,\n\t\t\t    l,\n\t\t\t    srcElements,\n\t\t\t    destElements,\n\t\t\t    clone = elem.cloneNode(true),\n\t\t\t    inPage = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t// Fix IE cloning issues\n\t\t\tif (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\t\tdestElements = getAll(clone);\n\t\t\t\tsrcElements = getAll(elem);\n\n\t\t\t\tfor (i = 0, l = srcElements.length; i < l; i++) {\n\t\t\t\t\tfixInput(srcElements[i], destElements[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Copy the events from the original to the clone\n\t\t\tif (dataAndEvents) {\n\t\t\t\tif (deepDataAndEvents) {\n\t\t\t\t\tsrcElements = srcElements || getAll(elem);\n\t\t\t\t\tdestElements = destElements || getAll(clone);\n\n\t\t\t\t\tfor (i = 0, l = srcElements.length; i < l; i++) {\n\t\t\t\t\t\tcloneCopyEvent(srcElements[i], destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcloneCopyEvent(elem, clone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Preserve script evaluation history\n\t\t\tdestElements = getAll(clone, \"script\");\n\t\t\tif (destElements.length > 0) {\n\t\t\t\tsetGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n\t\t\t}\n\n\t\t\t// Return the cloned set\n\t\t\treturn clone;\n\t\t},\n\n\t\tbuildFragment: function buildFragment(elems, context, scripts, selection) {\n\t\t\tvar elem,\n\t\t\t    tmp,\n\t\t\t    tag,\n\t\t\t    wrap,\n\t\t\t    contains,\n\t\t\t    j,\n\t\t\t    fragment = context.createDocumentFragment(),\n\t\t\t    nodes = [],\n\t\t\t    i = 0,\n\t\t\t    l = elems.length;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\telem = elems[i];\n\n\t\t\t\tif (elem || elem === 0) {\n\n\t\t\t\t\t// Add nodes directly\n\t\t\t\t\tif (jQuery.type(elem) === \"object\") {\n\t\t\t\t\t\t// Support: QtWebKit, PhantomJS\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n\t\t\t\t\t\t// Convert non-html into a text node\n\t\t\t\t\t} else if (!rhtml.test(elem)) {\n\t\t\t\t\t\tnodes.push(context.createTextNode(elem));\n\n\t\t\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp = tmp || fragment.appendChild(context.createElement(\"div\"));\n\n\t\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\t\ttag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n\t\t\t\t\t\twrap = wrapMap[tag] || wrapMap._default;\n\t\t\t\t\t\ttmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, \"<$1></$2>\") + wrap[2];\n\n\t\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\t\tj = wrap[0];\n\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Support: QtWebKit, PhantomJS\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge(nodes, tmp.childNodes);\n\n\t\t\t\t\t\t// Remember the top-level container\n\t\t\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\t\t\ttmp.textContent = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove wrapper from fragment\n\t\t\tfragment.textContent = \"\";\n\n\t\t\ti = 0;\n\t\t\twhile (elem = nodes[i++]) {\n\n\t\t\t\t// #4087 - If origin and destination elements are the same, and this is\n\t\t\t\t// that element, do not do anything\n\t\t\t\tif (selection && jQuery.inArray(elem, selection) !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcontains = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t\t// Append to fragment\n\t\t\t\ttmp = getAll(fragment.appendChild(elem), \"script\");\n\n\t\t\t\t// Preserve script evaluation history\n\t\t\t\tif (contains) {\n\t\t\t\t\tsetGlobalEval(tmp);\n\t\t\t\t}\n\n\t\t\t\t// Capture executables\n\t\t\t\tif (scripts) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (elem = tmp[j++]) {\n\t\t\t\t\t\tif (rscriptType.test(elem.type || \"\")) {\n\t\t\t\t\t\t\tscripts.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn fragment;\n\t\t},\n\n\t\tcleanData: function cleanData(elems) {\n\t\t\tvar data,\n\t\t\t    elem,\n\t\t\t    type,\n\t\t\t    key,\n\t\t\t    special = jQuery.event.special,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = elems[i]) !== undefined; i++) {\n\t\t\t\tif (jQuery.acceptData(elem)) {\n\t\t\t\t\tkey = elem[data_priv.expando];\n\n\t\t\t\t\tif (key && (data = data_priv.cache[key])) {\n\t\t\t\t\t\tif (data.events) {\n\t\t\t\t\t\t\tfor (type in data.events) {\n\t\t\t\t\t\t\t\tif (special[type]) {\n\t\t\t\t\t\t\t\t\tjQuery.event.remove(elem, type);\n\n\t\t\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.removeEvent(elem, type, data.handle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (data_priv.cache[key]) {\n\t\t\t\t\t\t\t// Discard any remaining `private` data\n\t\t\t\t\t\t\tdelete data_priv.cache[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Discard any remaining `user` data\n\t\t\t\tdelete data_user.cache[elem[data_user.expando]];\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\ttext: function text(value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\treturn value === undefined ? jQuery.text(this) : this.empty().each(function () {\n\t\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\tappend: function append() {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.appendChild(elem);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tprepend: function prepend() {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.insertBefore(elem, target.firstChild);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tbefore: function before() {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tafter: function after() {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this.nextSibling);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tremove: function remove(selector, keepData /* Internal Use Only */) {\n\t\t\tvar elem,\n\t\t\t    elems = selector ? jQuery.filter(selector, this) : this,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = elems[i]) != null; i++) {\n\t\t\t\tif (!keepData && elem.nodeType === 1) {\n\t\t\t\t\tjQuery.cleanData(getAll(elem));\n\t\t\t\t}\n\n\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\tif (keepData && jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\t\t\tsetGlobalEval(getAll(elem, \"script\"));\n\t\t\t\t\t}\n\t\t\t\t\telem.parentNode.removeChild(elem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tempty: function empty() {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\tif (elem.nodeType === 1) {\n\n\t\t\t\t\t// Prevent memory leaks\n\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\n\t\t\t\t\t// Remove any remaining nodes\n\t\t\t\t\telem.textContent = \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tclone: function clone(dataAndEvents, deepDataAndEvents) {\n\t\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\t\treturn this.map(function () {\n\t\t\t\treturn jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n\t\t\t});\n\t\t},\n\n\t\thtml: function html(value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\tvar elem = this[0] || {},\n\t\t\t\t    i = 0,\n\t\t\t\t    l = this.length;\n\n\t\t\t\tif (value === undefined && elem.nodeType === 1) {\n\t\t\t\t\treturn elem.innerHTML;\n\t\t\t\t}\n\n\t\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\t\tif (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n\n\t\t\t\t\tvalue = value.replace(rxhtmlTag, \"<$1></$2>\");\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\t\telem = this[i] || {};\n\n\t\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telem = 0;\n\n\t\t\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (elem) {\n\t\t\t\t\tthis.empty().append(value);\n\t\t\t\t}\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\treplaceWith: function replaceWith() {\n\t\t\tvar arg = arguments[0];\n\n\t\t\t// Make the changes, replacing each context element with the new content\n\t\t\tthis.domManip(arguments, function (elem) {\n\t\t\t\targ = this.parentNode;\n\n\t\t\t\tjQuery.cleanData(getAll(this));\n\n\t\t\t\tif (arg) {\n\t\t\t\t\targ.replaceChild(elem, this);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Force removal if there was no new content (e.g., from empty arguments)\n\t\t\treturn arg && (arg.length || arg.nodeType) ? this : this.remove();\n\t\t},\n\n\t\tdetach: function detach(selector) {\n\t\t\treturn this.remove(selector, true);\n\t\t},\n\n\t\tdomManip: function domManip(args, callback) {\n\n\t\t\t// Flatten any nested arrays\n\t\t\targs = concat.apply([], args);\n\n\t\t\tvar fragment,\n\t\t\t    first,\n\t\t\t    scripts,\n\t\t\t    hasScripts,\n\t\t\t    node,\n\t\t\t    doc,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    set = this,\n\t\t\t    iNoClone = l - 1,\n\t\t\t    value = args[0],\n\t\t\t    isFunction = jQuery.isFunction(value);\n\n\t\t\t// We can't cloneNode fragments that contain checked, in WebKit\n\t\t\tif (isFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n\t\t\t\treturn this.each(function (index) {\n\t\t\t\t\tvar self = set.eq(index);\n\t\t\t\t\tif (isFunction) {\n\t\t\t\t\t\targs[0] = value.call(this, index, self.html());\n\t\t\t\t\t}\n\t\t\t\t\tself.domManip(args, callback);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (l) {\n\t\t\t\tfragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);\n\t\t\t\tfirst = fragment.firstChild;\n\n\t\t\t\tif (fragment.childNodes.length === 1) {\n\t\t\t\t\tfragment = first;\n\t\t\t\t}\n\n\t\t\t\tif (first) {\n\t\t\t\t\tscripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n\t\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up\n\t\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\t\tif (i !== iNoClone) {\n\t\t\t\t\t\t\tnode = jQuery.clone(node, true, true);\n\n\t\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\t\t\t// Support: QtWebKit\n\t\t\t\t\t\t\t\t// jQuery.merge because push.apply(_, arraylike) throws\n\t\t\t\t\t\t\t\tjQuery.merge(scripts, getAll(node, \"script\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcallback.call(this[i], node, i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\tdoc = scripts[scripts.length - 1].ownerDocument;\n\n\t\t\t\t\t\t// Reenable scripts\n\t\t\t\t\t\tjQuery.map(scripts, restoreScript);\n\n\t\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\t\tfor (i = 0; i < hasScripts; i++) {\n\t\t\t\t\t\t\tnode = scripts[i];\n\t\t\t\t\t\t\tif (rscriptType.test(node.type || \"\") && !data_priv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n\n\t\t\t\t\t\t\t\tif (node.src) {\n\t\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\t\t\tif (jQuery._evalUrl) {\n\t\t\t\t\t\t\t\t\t\tjQuery._evalUrl(node.src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.globalEval(node.textContent.replace(rcleanScript, \"\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tjQuery.each({\n\t\tappendTo: \"append\",\n\t\tprependTo: \"prepend\",\n\t\tinsertBefore: \"before\",\n\t\tinsertAfter: \"after\",\n\t\treplaceAll: \"replaceWith\"\n\t}, function (name, original) {\n\t\tjQuery.fn[name] = function (selector) {\n\t\t\tvar elems,\n\t\t\t    ret = [],\n\t\t\t    insert = jQuery(selector),\n\t\t\t    last = insert.length - 1,\n\t\t\t    i = 0;\n\n\t\t\tfor (; i <= last; i++) {\n\t\t\t\telems = i === last ? this : this.clone(true);\n\t\t\t\tjQuery(insert[i])[original](elems);\n\n\t\t\t\t// Support: QtWebKit\n\t\t\t\t// .get() because push.apply(_, arraylike) throws\n\t\t\t\tpush.apply(ret, elems.get());\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\n\tvar iframe,\n\t    elemdisplay = {};\n\n\t/**\n  * Retrieve the actual display of a element\n  * @param {String} name nodeName of the element\n  * @param {Object} doc Document object\n  */\n\t// Called only from within defaultDisplay\n\tfunction actualDisplay(name, doc) {\n\t\tvar style,\n\t\t    elem = jQuery(doc.createElement(name)).appendTo(doc.body),\n\n\n\t\t// getDefaultComputedStyle might be reliably used only on attached element\n\t\tdisplay = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?\n\n\t\t// Use of this method is a temporary fix (more like optimization) until something better comes along,\n\t\t// since it was removed from specification and supported only in FF\n\t\tstyle.display : jQuery.css(elem[0], \"display\");\n\n\t\t// We don't have any data stored on the element,\n\t\t// so use \"detach\" method as fast way to get rid of the element\n\t\telem.detach();\n\n\t\treturn display;\n\t}\n\n\t/**\n  * Try to determine the default display value of an element\n  * @param {String} nodeName\n  */\n\tfunction defaultDisplay(nodeName) {\n\t\tvar doc = document,\n\t\t    display = elemdisplay[nodeName];\n\n\t\tif (!display) {\n\t\t\tdisplay = actualDisplay(nodeName, doc);\n\n\t\t\t// If the simple way fails, read from inside an iframe\n\t\t\tif (display === \"none\" || !display) {\n\n\t\t\t\t// Use the already-created iframe if possible\n\t\t\t\tiframe = (iframe || jQuery(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(doc.documentElement);\n\n\t\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\t\tdoc = iframe[0].contentDocument;\n\n\t\t\t\t// Support: IE\n\t\t\t\tdoc.write();\n\t\t\t\tdoc.close();\n\n\t\t\t\tdisplay = actualDisplay(nodeName, doc);\n\t\t\t\tiframe.detach();\n\t\t\t}\n\n\t\t\t// Store the correct default display\n\t\t\telemdisplay[nodeName] = display;\n\t\t}\n\n\t\treturn display;\n\t}\n\tvar rmargin = /^margin/;\n\n\tvar rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n\tvar getStyles = function getStyles(elem) {\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tif (elem.ownerDocument.defaultView.opener) {\n\t\t\treturn elem.ownerDocument.defaultView.getComputedStyle(elem, null);\n\t\t}\n\n\t\treturn window.getComputedStyle(elem, null);\n\t};\n\n\tfunction curCSS(elem, name, computed) {\n\t\tvar width,\n\t\t    minWidth,\n\t\t    maxWidth,\n\t\t    ret,\n\t\t    style = elem.style;\n\n\t\tcomputed = computed || getStyles(elem);\n\n\t\t// Support: IE9\n\t\t// getPropertyValue is only needed for .css('filter') (#12537)\n\t\tif (computed) {\n\t\t\tret = computed.getPropertyValue(name) || computed[name];\n\t\t}\n\n\t\tif (computed) {\n\n\t\t\tif (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\tret = jQuery.style(elem, name);\n\t\t\t}\n\n\t\t\t// Support: iOS < 6\n\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t\t// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n\t\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\t\t\tif (rnumnonpx.test(ret) && rmargin.test(name)) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\twidth = style.width;\n\t\t\t\tminWidth = style.minWidth;\n\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\tret = computed.width;\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.width = width;\n\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t}\n\t\t}\n\n\t\treturn ret !== undefined ?\n\t\t// Support: IE\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" : ret;\n\t}\n\n\tfunction addGetHookIf(conditionFn, hookFn) {\n\t\t// Define the hook, we'll check on the first run if it's really needed.\n\t\treturn {\n\t\t\tget: function get() {\n\t\t\t\tif (conditionFn()) {\n\t\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t\t// to missing dependency), remove it.\n\t\t\t\t\tdelete this.get;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\t\treturn (this.get = hookFn).apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}\n\n\t(function () {\n\t\tvar pixelPositionVal,\n\t\t    boxSizingReliableVal,\n\t\t    docElem = document.documentElement,\n\t\t    container = document.createElement(\"div\"),\n\t\t    div = document.createElement(\"div\");\n\n\t\tif (!div.style) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Support: IE9-11+\n\t\t// Style of cloned element affects source element cloned (#8908)\n\t\tdiv.style.backgroundClip = \"content-box\";\n\t\tdiv.cloneNode(true).style.backgroundClip = \"\";\n\t\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\t\tcontainer.style.cssText = \"border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;\" + \"position:absolute\";\n\t\tcontainer.appendChild(div);\n\n\t\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t\t// so they're executed at the same time to save the second computation.\n\t\tfunction computePixelPositionAndBoxSizingReliable() {\n\t\t\tdiv.style.cssText =\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;\" + \"box-sizing:border-box;display:block;margin-top:1%;top:1%;\" + \"border:1px;padding:1px;width:4px;position:absolute\";\n\t\t\tdiv.innerHTML = \"\";\n\t\t\tdocElem.appendChild(container);\n\n\t\t\tvar divStyle = window.getComputedStyle(div, null);\n\t\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\t\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t\tdocElem.removeChild(container);\n\t\t}\n\n\t\t// Support: node.js jsdom\n\t\t// Don't assume that getComputedStyle is a property of the global object\n\t\tif (window.getComputedStyle) {\n\t\t\tjQuery.extend(support, {\n\t\t\t\tpixelPosition: function pixelPosition() {\n\n\t\t\t\t\t// This test is executed only once but we still do memoizing\n\t\t\t\t\t// since we can use the boxSizingReliable pre-computing.\n\t\t\t\t\t// No need to check if the test was already performed, though.\n\t\t\t\t\tcomputePixelPositionAndBoxSizingReliable();\n\t\t\t\t\treturn pixelPositionVal;\n\t\t\t\t},\n\t\t\t\tboxSizingReliable: function boxSizingReliable() {\n\t\t\t\t\tif (boxSizingReliableVal == null) {\n\t\t\t\t\t\tcomputePixelPositionAndBoxSizingReliable();\n\t\t\t\t\t}\n\t\t\t\t\treturn boxSizingReliableVal;\n\t\t\t\t},\n\t\t\t\treliableMarginRight: function reliableMarginRight() {\n\n\t\t\t\t\t// Support: Android 2.3\n\t\t\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t\t\t// This support function is only executed once so no memoizing is needed.\n\t\t\t\t\tvar ret,\n\t\t\t\t\t    marginDiv = div.appendChild(document.createElement(\"div\"));\n\n\t\t\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\t\t\tmarginDiv.style.cssText = div.style.cssText =\n\t\t\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" + \"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\n\t\t\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\n\t\t\t\t\tdiv.style.width = \"1px\";\n\t\t\t\t\tdocElem.appendChild(container);\n\n\t\t\t\t\tret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);\n\n\t\t\t\t\tdocElem.removeChild(container);\n\t\t\t\t\tdiv.removeChild(marginDiv);\n\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t})();\n\n\t// A method for quickly swapping in/out CSS properties to get correct calculations.\n\tjQuery.swap = function (elem, options, callback, args) {\n\t\tvar ret,\n\t\t    name,\n\t\t    old = {};\n\n\t\t// Remember the old values, and insert the new ones\n\t\tfor (name in options) {\n\t\t\told[name] = elem.style[name];\n\t\t\telem.style[name] = options[name];\n\t\t}\n\n\t\tret = callback.apply(elem, args || []);\n\n\t\t// Revert the old values\n\t\tfor (name in options) {\n\t\t\telem.style[name] = old[name];\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\tvar\n\t// Swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\t    rnumsplit = new RegExp(\"^(\" + pnum + \")(.*)$\", \"i\"),\n\t    rrelNum = new RegExp(\"^([+-])=(\" + pnum + \")\", \"i\"),\n\t    cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\t    cssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\t    cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\n\t// Return a css property mapped to a potentially vendor prefixed property\n\tfunction vendorPropName(style, name) {\n\n\t\t// Shortcut for names that are not vendor prefixed\n\t\tif (name in style) {\n\t\t\treturn name;\n\t\t}\n\n\t\t// Check for vendor prefixed names\n\t\tvar capName = name[0].toUpperCase() + name.slice(1),\n\t\t    origName = name,\n\t\t    i = cssPrefixes.length;\n\n\t\twhile (i--) {\n\t\t\tname = cssPrefixes[i] + capName;\n\t\t\tif (name in style) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\treturn origName;\n\t}\n\n\tfunction setPositiveNumber(elem, value, subtract) {\n\t\tvar matches = rnumsplit.exec(value);\n\t\treturn matches ?\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max(0, matches[1] - (subtract || 0)) + (matches[2] || \"px\") : value;\n\t}\n\n\tfunction augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n\t\tvar i = extra === (isBorderBox ? \"border\" : \"content\") ?\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\t\t    val = 0;\n\n\t\tfor (; i < 4; i += 2) {\n\t\t\t// Both box models exclude margin, so add it if we want it\n\t\t\tif (extra === \"margin\") {\n\t\t\t\tval += jQuery.css(elem, extra + cssExpand[i], true, styles);\n\t\t\t}\n\n\t\t\tif (isBorderBox) {\n\t\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\t\tif (extra === \"content\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\t\t\t\t}\n\n\t\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\t\tif (extra !== \"margin\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// At this point, extra isn't content, so add padding\n\t\t\t\tval += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\n\t\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\t\tif (extra !== \"padding\") {\n\t\t\t\t\tval += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tfunction getWidthOrHeight(elem, name, extra) {\n\n\t\t// Start with offset property, which is equivalent to the border-box value\n\t\tvar valueIsBorderBox = true,\n\t\t    val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\t    styles = getStyles(elem),\n\t\t    isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\";\n\n\t\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\t\tif (val <= 0 || val == null) {\n\t\t\t// Fall back to computed then uncomputed css if necessary\n\t\t\tval = curCSS(elem, name, styles);\n\t\t\tif (val < 0 || val == null) {\n\t\t\t\tval = elem.style[name];\n\t\t\t}\n\n\t\t\t// Computed unit is not pixels. Stop here and return.\n\t\t\tif (rnumnonpx.test(val)) {\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\t// Check for style in case a browser which returns unreliable values\n\t\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\t\tvalueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);\n\n\t\t\t// Normalize \"\", auto, and prepare for extra\n\t\t\tval = parseFloat(val) || 0;\n\t\t}\n\n\t\t// Use the active box-sizing model to add/subtract irrelevant styles\n\t\treturn val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n\t}\n\n\tfunction showHide(elements, show) {\n\t\tvar display,\n\t\t    elem,\n\t\t    hidden,\n\t\t    values = [],\n\t\t    index = 0,\n\t\t    length = elements.length;\n\n\t\tfor (; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvalues[index] = data_priv.get(elem, \"olddisplay\");\n\t\t\tdisplay = elem.style.display;\n\t\t\tif (show) {\n\t\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t\t// being hidden by cascaded rules or not\n\t\t\t\tif (!values[index] && display === \"none\") {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\n\t\t\t\t// Set elements which have been overridden with display: none\n\t\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t\t// for such an element\n\t\t\t\tif (elem.style.display === \"\" && isHidden(elem)) {\n\t\t\t\t\tvalues[index] = data_priv.access(elem, \"olddisplay\", defaultDisplay(elem.nodeName));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thidden = isHidden(elem);\n\n\t\t\t\tif (display !== \"none\" || !hidden) {\n\t\t\t\t\tdata_priv.set(elem, \"olddisplay\", hidden ? display : jQuery.css(elem, \"display\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the display of most of the elements in a second loop\n\t\t// to avoid the constant reflow\n\t\tfor (index = 0; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!show || elem.style.display === \"none\" || elem.style.display === \"\") {\n\t\t\t\telem.style.display = show ? values[index] || \"\" : \"none\";\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\tjQuery.extend({\n\n\t\t// Add in style property hooks for overriding the default\n\t\t// behavior of getting and setting a style property\n\t\tcssHooks: {\n\t\t\topacity: {\n\t\t\t\tget: function get(elem, computed) {\n\t\t\t\t\tif (computed) {\n\n\t\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\t\tvar ret = curCSS(elem, \"opacity\");\n\t\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Don't automatically add \"px\" to these possibly-unitless properties\n\t\tcssNumber: {\n\t\t\t\"columnCount\": true,\n\t\t\t\"fillOpacity\": true,\n\t\t\t\"flexGrow\": true,\n\t\t\t\"flexShrink\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"opacity\": true,\n\t\t\t\"order\": true,\n\t\t\t\"orphans\": true,\n\t\t\t\"widows\": true,\n\t\t\t\"zIndex\": true,\n\t\t\t\"zoom\": true\n\t\t},\n\n\t\t// Add in properties whose names you wish to fix before\n\t\t// setting or getting the value\n\t\tcssProps: {\n\t\t\t\"float\": \"cssFloat\"\n\t\t},\n\n\t\t// Get and set the style property on a DOM Node\n\t\tstyle: function style(elem, name, value, extra) {\n\n\t\t\t// Don't set styles on text and comment nodes\n\t\t\tif (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tvar ret,\n\t\t\t    type,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name),\n\t\t\t    style = elem.style;\n\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));\n\n\t\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// Check if we're setting a value\n\t\t\tif (value !== undefined) {\n\t\t\t\ttype = typeof value === \"undefined\" ? \"undefined\" : _typeof(value);\n\n\t\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\t\tif (type === \"string\" && (ret = rrelNum.exec(value))) {\n\t\t\t\t\tvalue = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));\n\t\t\t\t\t// Fixes bug #9237\n\t\t\t\t\ttype = \"number\";\n\t\t\t\t}\n\n\t\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\t\tif (value == null || value !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If a number, add 'px' to the (except for certain CSS properties)\n\t\t\t\tif (type === \"number\" && !jQuery.cssNumber[origName]) {\n\t\t\t\t\tvalue += \"px\";\n\t\t\t\t}\n\n\t\t\t\t// Support: IE9-11+\n\t\t\t\t// background-* props affect original clone's values\n\t\t\t\tif (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n\t\t\t\t\tstyle[name] = \"inherit\";\n\t\t\t\t}\n\n\t\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n\t\t\t\t\tstyle[name] = value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise just get the value from the style object\n\t\t\t\treturn style[name];\n\t\t\t}\n\t\t},\n\n\t\tcss: function css(elem, name, extra, styles) {\n\t\t\tvar val,\n\t\t\t    num,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name);\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));\n\n\t\t\t// Try prefixed name followed by the unprefixed name\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// If a hook was provided get the computed value from there\n\t\t\tif (hooks && \"get\" in hooks) {\n\t\t\t\tval = hooks.get(elem, true, extra);\n\t\t\t}\n\n\t\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\t\tif (val === undefined) {\n\t\t\t\tval = curCSS(elem, name, styles);\n\t\t\t}\n\n\t\t\t// Convert \"normal\" to computed value\n\t\t\tif (val === \"normal\" && name in cssNormalTransform) {\n\t\t\t\tval = cssNormalTransform[name];\n\t\t\t}\n\n\t\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\t\tif (extra === \"\" || extra) {\n\t\t\t\tnum = parseFloat(val);\n\t\t\t\treturn extra === true || jQuery.isNumeric(num) ? num || 0 : val;\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t});\n\n\tjQuery.each([\"height\", \"width\"], function (i, name) {\n\t\tjQuery.cssHooks[name] = {\n\t\t\tget: function get(elem, computed, extra) {\n\t\t\t\tif (computed) {\n\n\t\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\t\treturn rdisplayswap.test(jQuery.css(elem, \"display\")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {\n\t\t\t\t\t\treturn getWidthOrHeight(elem, name, extra);\n\t\t\t\t\t}) : getWidthOrHeight(elem, name, extra);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset: function set(elem, value, extra) {\n\t\t\t\tvar styles = extra && getStyles(elem);\n\t\t\t\treturn setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles) : 0);\n\t\t\t}\n\t\t};\n\t});\n\n\t// Support: Android 2.3\n\tjQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {\n\t\tif (computed) {\n\t\t\treturn jQuery.swap(elem, { \"display\": \"inline-block\" }, curCSS, [elem, \"marginRight\"]);\n\t\t}\n\t});\n\n\t// These hooks are used by animate to expand properties\n\tjQuery.each({\n\t\tmargin: \"\",\n\t\tpadding: \"\",\n\t\tborder: \"Width\"\n\t}, function (prefix, suffix) {\n\t\tjQuery.cssHooks[prefix + suffix] = {\n\t\t\texpand: function expand(value) {\n\t\t\t\tvar i = 0,\n\t\t\t\t    expanded = {},\n\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n\t\t\t\tfor (; i < 4; i++) {\n\t\t\t\t\texpanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n\t\t\t\t}\n\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t};\n\n\t\tif (!rmargin.test(prefix)) {\n\t\t\tjQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tcss: function css(name, value) {\n\t\t\treturn access(this, function (elem, name, value) {\n\t\t\t\tvar styles,\n\t\t\t\t    len,\n\t\t\t\t    map = {},\n\t\t\t\t    i = 0;\n\n\t\t\t\tif (jQuery.isArray(name)) {\n\t\t\t\t\tstyles = getStyles(elem);\n\t\t\t\t\tlen = name.length;\n\n\t\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t\tmap[name[i]] = jQuery.css(elem, name[i], false, styles);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn map;\n\t\t\t\t}\n\n\t\t\t\treturn value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n\t\t\t}, name, value, arguments.length > 1);\n\t\t},\n\t\tshow: function show() {\n\t\t\treturn showHide(this, true);\n\t\t},\n\t\thide: function hide() {\n\t\t\treturn showHide(this);\n\t\t},\n\t\ttoggle: function toggle(state) {\n\t\t\tif (typeof state === \"boolean\") {\n\t\t\t\treturn state ? this.show() : this.hide();\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (isHidden(this)) {\n\t\t\t\t\tjQuery(this).show();\n\t\t\t\t} else {\n\t\t\t\t\tjQuery(this).hide();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction Tween(elem, options, prop, end, easing) {\n\t\treturn new Tween.prototype.init(elem, options, prop, end, easing);\n\t}\n\tjQuery.Tween = Tween;\n\n\tTween.prototype = {\n\t\tconstructor: Tween,\n\t\tinit: function init(elem, options, prop, end, easing, unit) {\n\t\t\tthis.elem = elem;\n\t\t\tthis.prop = prop;\n\t\t\tthis.easing = easing || \"swing\";\n\t\t\tthis.options = options;\n\t\t\tthis.start = this.now = this.cur();\n\t\t\tthis.end = end;\n\t\t\tthis.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n\t\t},\n\t\tcur: function cur() {\n\t\t\tvar hooks = Tween.propHooks[this.prop];\n\n\t\t\treturn hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n\t\t},\n\t\trun: function run(percent) {\n\t\t\tvar eased,\n\t\t\t    hooks = Tween.propHooks[this.prop];\n\n\t\t\tif (this.options.duration) {\n\t\t\t\tthis.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n\t\t\t} else {\n\t\t\t\tthis.pos = eased = percent;\n\t\t\t}\n\t\t\tthis.now = (this.end - this.start) * eased + this.start;\n\n\t\t\tif (this.options.step) {\n\t\t\t\tthis.options.step.call(this.elem, this.now, this);\n\t\t\t}\n\n\t\t\tif (hooks && hooks.set) {\n\t\t\t\thooks.set(this);\n\t\t\t} else {\n\t\t\t\tTween.propHooks._default.set(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tTween.prototype.init.prototype = Tween.prototype;\n\n\tTween.propHooks = {\n\t\t_default: {\n\t\t\tget: function get(tween) {\n\t\t\t\tvar result;\n\n\t\t\t\tif (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\n\t\t\t\t\treturn tween.elem[tween.prop];\n\t\t\t\t}\n\n\t\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\t\tresult = jQuery.css(tween.elem, tween.prop, \"\");\n\t\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t\t},\n\t\t\tset: function set(tween) {\n\t\t\t\t// Use step hook for back compat.\n\t\t\t\t// Use cssHook if its there.\n\t\t\t\t// Use .style if available and use plain properties where available.\n\t\t\t\tif (jQuery.fx.step[tween.prop]) {\n\t\t\t\t\tjQuery.fx.step[tween.prop](tween);\n\t\t\t\t} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n\t\t\t\t\tjQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n\t\t\t\t} else {\n\t\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Support: IE9\n\t// Panic based approach to setting things on disconnected nodes\n\tTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\t\tset: function set(tween) {\n\t\t\tif (tween.elem.nodeType && tween.elem.parentNode) {\n\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.easing = {\n\t\tlinear: function linear(p) {\n\t\t\treturn p;\n\t\t},\n\t\tswing: function swing(p) {\n\t\t\treturn 0.5 - Math.cos(p * Math.PI) / 2;\n\t\t}\n\t};\n\n\tjQuery.fx = Tween.prototype.init;\n\n\t// Back Compat <1.8 extension point\n\tjQuery.fx.step = {};\n\n\tvar fxNow,\n\t    timerId,\n\t    rfxtypes = /^(?:toggle|show|hide)$/,\n\t    rfxnum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\"),\n\t    rrun = /queueHooks$/,\n\t    animationPrefilters = [defaultPrefilter],\n\t    tweeners = {\n\t\t\"*\": [function (prop, value) {\n\t\t\tvar tween = this.createTween(prop, value),\n\t\t\t    target = tween.cur(),\n\t\t\t    parts = rfxnum.exec(value),\n\t\t\t    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n\n\n\t\t\t// Starting value computation is required for potential unit mismatches\n\t\t\tstart = (jQuery.cssNumber[prop] || unit !== \"px\" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),\n\t\t\t    scale = 1,\n\t\t\t    maxIterations = 20;\n\n\t\t\tif (start && start[3] !== unit) {\n\t\t\t\t// Trust units reported by jQuery.css\n\t\t\t\tunit = unit || start[3];\n\n\t\t\t\t// Make sure we update the tween properties later on\n\t\t\t\tparts = parts || [];\n\n\t\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\t\tstart = +target || 1;\n\n\t\t\t\tdo {\n\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t\t// Adjust and apply\n\t\t\t\t\tstart = start / scale;\n\t\t\t\t\tjQuery.style(tween.elem, prop, start + unit);\n\n\t\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur(),\n\t\t\t\t\t// break the loop if scale is unchanged or perfect, or if we've just had enough\n\t\t\t\t} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\n\t\t\t}\n\n\t\t\t// Update tween properties\n\t\t\tif (parts) {\n\t\t\t\tstart = tween.start = +start || +target || 0;\n\t\t\t\ttween.unit = unit;\n\t\t\t\t// If a +=/-= token was provided, we're doing a relative animation\n\t\t\t\ttween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];\n\t\t\t}\n\n\t\t\treturn tween;\n\t\t}]\n\t};\n\n\t// Animations created synchronously will run synchronously\n\tfunction createFxNow() {\n\t\tsetTimeout(function () {\n\t\t\tfxNow = undefined;\n\t\t});\n\t\treturn fxNow = jQuery.now();\n\t}\n\n\t// Generate parameters to create a standard animation\n\tfunction genFx(type, includeWidth) {\n\t\tvar which,\n\t\t    i = 0,\n\t\t    attrs = { height: type };\n\n\t\t// If we include width, step value is 1 to do all cssExpand values,\n\t\t// otherwise step value is 2 to skip over Left and Right\n\t\tincludeWidth = includeWidth ? 1 : 0;\n\t\tfor (; i < 4; i += 2 - includeWidth) {\n\t\t\twhich = cssExpand[i];\n\t\t\tattrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n\t\t}\n\n\t\tif (includeWidth) {\n\t\t\tattrs.opacity = attrs.width = type;\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\tfunction createTween(value, prop, animation) {\n\t\tvar tween,\n\t\t    collection = (tweeners[prop] || []).concat(tweeners[\"*\"]),\n\t\t    index = 0,\n\t\t    length = collection.length;\n\t\tfor (; index < length; index++) {\n\t\t\tif (tween = collection[index].call(animation, prop, value)) {\n\n\t\t\t\t// We're done with this property\n\t\t\t\treturn tween;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction defaultPrefilter(elem, props, opts) {\n\t\t/* jshint validthis: true */\n\t\tvar prop,\n\t\t    value,\n\t\t    toggle,\n\t\t    tween,\n\t\t    hooks,\n\t\t    oldfire,\n\t\t    display,\n\t\t    checkDisplay,\n\t\t    anim = this,\n\t\t    orig = {},\n\t\t    style = elem.style,\n\t\t    hidden = elem.nodeType && isHidden(elem),\n\t\t    dataShow = data_priv.get(elem, \"fxshow\");\n\n\t\t// Handle queue: false promises\n\t\tif (!opts.queue) {\n\t\t\thooks = jQuery._queueHooks(elem, \"fx\");\n\t\t\tif (hooks.unqueued == null) {\n\t\t\t\thooks.unqueued = 0;\n\t\t\t\toldfire = hooks.empty.fire;\n\t\t\t\thooks.empty.fire = function () {\n\t\t\t\t\tif (!hooks.unqueued) {\n\t\t\t\t\t\toldfire();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\thooks.unqueued++;\n\n\t\t\tanim.always(function () {\n\t\t\t\t// Ensure the complete handler is called before this completes\n\t\t\t\tanim.always(function () {\n\t\t\t\t\thooks.unqueued--;\n\t\t\t\t\tif (!jQuery.queue(elem, \"fx\").length) {\n\t\t\t\t\t\thooks.empty.fire();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Height/width overflow pass\n\t\tif (elem.nodeType === 1 && (\"height\" in props || \"width\" in props)) {\n\t\t\t// Make sure that nothing sneaks out\n\t\t\t// Record all 3 overflow attributes because IE9-10 do not\n\t\t\t// change the overflow attribute when overflowX and\n\t\t\t// overflowY are set to the same value\n\t\t\topts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n\t\t\t// Set display property to inline-block for height/width\n\t\t\t// animations on inline elements that are having width/height animated\n\t\t\tdisplay = jQuery.css(elem, \"display\");\n\n\t\t\t// Test default display if display is currently \"none\"\n\t\t\tcheckDisplay = display === \"none\" ? data_priv.get(elem, \"olddisplay\") || defaultDisplay(elem.nodeName) : display;\n\n\t\t\tif (checkDisplay === \"inline\" && jQuery.css(elem, \"float\") === \"none\") {\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\n\t\tif (opts.overflow) {\n\t\t\tstyle.overflow = \"hidden\";\n\t\t\tanim.always(function () {\n\t\t\t\tstyle.overflow = opts.overflow[0];\n\t\t\t\tstyle.overflowX = opts.overflow[1];\n\t\t\t\tstyle.overflowY = opts.overflow[2];\n\t\t\t});\n\t\t}\n\n\t\t// show/hide pass\n\t\tfor (prop in props) {\n\t\t\tvalue = props[prop];\n\t\t\tif (rfxtypes.exec(value)) {\n\t\t\t\tdelete props[prop];\n\t\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\t\tif (value === (hidden ? \"hide\" : \"show\")) {\n\n\t\t\t\t\t// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\t\tif (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\torig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n\n\t\t\t\t// Any non-fx value stops us from restoring the original display value\n\t\t\t} else {\n\t\t\t\tdisplay = undefined;\n\t\t\t}\n\t\t}\n\n\t\tif (!jQuery.isEmptyObject(orig)) {\n\t\t\tif (dataShow) {\n\t\t\t\tif (\"hidden\" in dataShow) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = data_priv.access(elem, \"fxshow\", {});\n\t\t\t}\n\n\t\t\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\t\tif (toggle) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\t\t\tif (hidden) {\n\t\t\t\tjQuery(elem).show();\n\t\t\t} else {\n\t\t\t\tanim.done(function () {\n\t\t\t\t\tjQuery(elem).hide();\n\t\t\t\t});\n\t\t\t}\n\t\t\tanim.done(function () {\n\t\t\t\tvar prop;\n\n\t\t\t\tdata_priv.remove(elem, \"fxshow\");\n\t\t\t\tfor (prop in orig) {\n\t\t\t\t\tjQuery.style(elem, prop, orig[prop]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfor (prop in orig) {\n\t\t\t\ttween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n\t\t\t\tif (!(prop in dataShow)) {\n\t\t\t\t\tdataShow[prop] = tween.start;\n\t\t\t\t\tif (hidden) {\n\t\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t\t} else if ((display === \"none\" ? defaultDisplay(elem.nodeName) : display) === \"inline\") {\n\t\t\tstyle.display = display;\n\t\t}\n\t}\n\n\tfunction propFilter(props, specialEasing) {\n\t\tvar index, name, easing, value, hooks;\n\n\t\t// camelCase, specialEasing and expand cssHook pass\n\t\tfor (index in props) {\n\t\t\tname = jQuery.camelCase(index);\n\t\t\teasing = specialEasing[name];\n\t\t\tvalue = props[index];\n\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\teasing = value[1];\n\t\t\t\tvalue = props[index] = value[0];\n\t\t\t}\n\n\t\t\tif (index !== name) {\n\t\t\t\tprops[name] = value;\n\t\t\t\tdelete props[index];\n\t\t\t}\n\n\t\t\thooks = jQuery.cssHooks[name];\n\t\t\tif (hooks && \"expand\" in hooks) {\n\t\t\t\tvalue = hooks.expand(value);\n\t\t\t\tdelete props[name];\n\n\t\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\t\tfor (index in value) {\n\t\t\t\t\tif (!(index in props)) {\n\t\t\t\t\t\tprops[index] = value[index];\n\t\t\t\t\t\tspecialEasing[index] = easing;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tspecialEasing[name] = easing;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction Animation(elem, properties, options) {\n\t\tvar result,\n\t\t    stopped,\n\t\t    index = 0,\n\t\t    length = animationPrefilters.length,\n\t\t    deferred = jQuery.Deferred().always(function () {\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\t    tick = function tick() {\n\t\t\tif (stopped) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n\n\t\t\t// Support: Android 2.3\n\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t    percent = 1 - temp,\n\t\t\t    index = 0,\n\t\t\t    length = animation.tweens.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tanimation.tweens[index].run(percent);\n\t\t\t}\n\n\t\t\tdeferred.notifyWith(elem, [animation, percent, remaining]);\n\n\t\t\tif (percent < 1 && length) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith(elem, [animation]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t    animation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend({}, properties),\n\t\t\topts: jQuery.extend(true, { specialEasing: {} }, options),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function createTween(prop, end) {\n\t\t\t\tvar tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n\t\t\t\tanimation.tweens.push(tween);\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function stop(gotoEnd) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t// otherwise we skip this part\n\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif (stopped) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor (; index < length; index++) {\n\t\t\t\t\tanimation.tweens[index].run(1);\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif (gotoEnd) {\n\t\t\t\t\tdeferred.resolveWith(elem, [animation, gotoEnd]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(elem, [animation, gotoEnd]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\t    props = animation.props;\n\n\t\tpropFilter(props, animation.opts.specialEasing);\n\n\t\tfor (; index < length; index++) {\n\t\t\tresult = animationPrefilters[index].call(animation, elem, props, animation.opts);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tjQuery.map(props, createTween, animation);\n\n\t\tif (jQuery.isFunction(animation.opts.start)) {\n\t\t\tanimation.opts.start.call(elem, animation);\n\t\t}\n\n\t\tjQuery.fx.timer(jQuery.extend(tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t}));\n\n\t\t// attach callbacks from options\n\t\treturn animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n\t}\n\n\tjQuery.Animation = jQuery.extend(Animation, {\n\n\t\ttweener: function tweener(props, callback) {\n\t\t\tif (jQuery.isFunction(props)) {\n\t\t\t\tcallback = props;\n\t\t\t\tprops = [\"*\"];\n\t\t\t} else {\n\t\t\t\tprops = props.split(\" \");\n\t\t\t}\n\n\t\t\tvar prop,\n\t\t\t    index = 0,\n\t\t\t    length = props.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tprop = props[index];\n\t\t\t\ttweeners[prop] = tweeners[prop] || [];\n\t\t\t\ttweeners[prop].unshift(callback);\n\t\t\t}\n\t\t},\n\n\t\tprefilter: function prefilter(callback, prepend) {\n\t\t\tif (prepend) {\n\t\t\t\tanimationPrefilters.unshift(callback);\n\t\t\t} else {\n\t\t\t\tanimationPrefilters.push(callback);\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.speed = function (speed, easing, fn) {\n\t\tvar opt = speed && (typeof speed === \"undefined\" ? \"undefined\" : _typeof(speed)) === \"object\" ? jQuery.extend({}, speed) : {\n\t\t\tcomplete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n\t\t\tduration: speed,\n\t\t\teasing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n\t\t};\n\n\t\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;\n\n\t\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\t\tif (opt.queue == null || opt.queue === true) {\n\t\t\topt.queue = \"fx\";\n\t\t}\n\n\t\t// Queueing\n\t\topt.old = opt.complete;\n\n\t\topt.complete = function () {\n\t\t\tif (jQuery.isFunction(opt.old)) {\n\t\t\t\topt.old.call(this);\n\t\t\t}\n\n\t\t\tif (opt.queue) {\n\t\t\t\tjQuery.dequeue(this, opt.queue);\n\t\t\t}\n\t\t};\n\n\t\treturn opt;\n\t};\n\n\tjQuery.fn.extend({\n\t\tfadeTo: function fadeTo(speed, to, easing, callback) {\n\n\t\t\t// Show any hidden elements after setting opacity to 0\n\t\t\treturn this.filter(isHidden).css(\"opacity\", 0).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback);\n\t\t},\n\t\tanimate: function animate(prop, speed, easing, callback) {\n\t\t\tvar empty = jQuery.isEmptyObject(prop),\n\t\t\t    optall = jQuery.speed(speed, easing, callback),\n\t\t\t    doAnimation = function doAnimation() {\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation(this, jQuery.extend({}, prop), optall);\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif (empty || data_priv.get(this, \"finish\")) {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\t\treturn empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n\t\t},\n\t\tstop: function stop(type, clearQueue, gotoEnd) {\n\t\t\tvar stopQueue = function stopQueue(hooks) {\n\t\t\t\tvar stop = hooks.stop;\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tstop(gotoEnd);\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tgotoEnd = clearQueue;\n\t\t\t\tclearQueue = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\tif (clearQueue && type !== false) {\n\t\t\t\tthis.queue(type || \"fx\", []);\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar dequeue = true,\n\t\t\t\t    index = type != null && type + \"queueHooks\",\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    data = data_priv.get(this);\n\n\t\t\t\tif (index) {\n\t\t\t\t\tif (data[index] && data[index].stop) {\n\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (index in data) {\n\t\t\t\t\t\tif (data[index] && data[index].stop && rrun.test(index)) {\n\t\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n\t\t\t\t\t\ttimers[index].anim.stop(gotoEnd);\n\t\t\t\t\t\tdequeue = false;\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\t\tif (dequeue || !gotoEnd) {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfinish: function finish(type) {\n\t\t\tif (type !== false) {\n\t\t\t\ttype = type || \"fx\";\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tvar index,\n\t\t\t\t    data = data_priv.get(this),\n\t\t\t\t    queue = data[type + \"queue\"],\n\t\t\t\t    hooks = data[type + \"queueHooks\"],\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    length = queue ? queue.length : 0;\n\n\t\t\t\t// Enable finishing flag on private data\n\t\t\t\tdata.finish = true;\n\n\t\t\t\t// Empty the queue first\n\t\t\t\tjQuery.queue(this, type, []);\n\n\t\t\t\tif (hooks && hooks.stop) {\n\t\t\t\t\thooks.stop.call(this, true);\n\t\t\t\t}\n\n\t\t\t\t// Look for any active animations, and finish them\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && timers[index].queue === type) {\n\t\t\t\t\t\ttimers[index].anim.stop(true);\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Look for any animations in the old queue and finish them\n\t\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\t\tif (queue[index] && queue[index].finish) {\n\t\t\t\t\t\tqueue[index].finish.call(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Turn off finishing flag\n\t\t\t\tdelete data.finish;\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n\t\tvar cssFn = jQuery.fn[name];\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n\t\t};\n\t});\n\n\t// Generate shortcuts for custom animations\n\tjQuery.each({\n\t\tslideDown: genFx(\"show\"),\n\t\tslideUp: genFx(\"hide\"),\n\t\tslideToggle: genFx(\"toggle\"),\n\t\tfadeIn: { opacity: \"show\" },\n\t\tfadeOut: { opacity: \"hide\" },\n\t\tfadeToggle: { opacity: \"toggle\" }\n\t}, function (name, props) {\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn this.animate(props, speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.timers = [];\n\tjQuery.fx.tick = function () {\n\t\tvar timer,\n\t\t    i = 0,\n\t\t    timers = jQuery.timers;\n\n\t\tfxNow = jQuery.now();\n\n\t\tfor (; i < timers.length; i++) {\n\t\t\ttimer = timers[i];\n\t\t\t// Checks the timer has not already been removed\n\t\t\tif (!timer() && timers[i] === timer) {\n\t\t\t\ttimers.splice(i--, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (!timers.length) {\n\t\t\tjQuery.fx.stop();\n\t\t}\n\t\tfxNow = undefined;\n\t};\n\n\tjQuery.fx.timer = function (timer) {\n\t\tjQuery.timers.push(timer);\n\t\tif (timer()) {\n\t\t\tjQuery.fx.start();\n\t\t} else {\n\t\t\tjQuery.timers.pop();\n\t\t}\n\t};\n\n\tjQuery.fx.interval = 13;\n\n\tjQuery.fx.start = function () {\n\t\tif (!timerId) {\n\t\t\ttimerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);\n\t\t}\n\t};\n\n\tjQuery.fx.stop = function () {\n\t\tclearInterval(timerId);\n\t\ttimerId = null;\n\t};\n\n\tjQuery.fx.speeds = {\n\t\tslow: 600,\n\t\tfast: 200,\n\t\t// Default speed\n\t\t_default: 400\n\t};\n\n\t// Based off of the plugin by Clint Helfers, with permission.\n\t// http://blindsignals.com/index.php/2009/07/jquery-delay/\n\tjQuery.fn.delay = function (time, type) {\n\t\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n\t\ttype = type || \"fx\";\n\n\t\treturn this.queue(type, function (next, hooks) {\n\t\t\tvar timeout = setTimeout(next, time);\n\t\t\thooks.stop = function () {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t};\n\t\t});\n\t};\n\n\t(function () {\n\t\tvar input = document.createElement(\"input\"),\n\t\t    select = document.createElement(\"select\"),\n\t\t    opt = select.appendChild(document.createElement(\"option\"));\n\n\t\tinput.type = \"checkbox\";\n\n\t\t// Support: iOS<=5.1, Android<=4.2+\n\t\t// Default value for a checkbox should be \"on\"\n\t\tsupport.checkOn = input.value !== \"\";\n\n\t\t// Support: IE<=11+\n\t\t// Must access selectedIndex to make default options select\n\t\tsupport.optSelected = opt.selected;\n\n\t\t// Support: Android<=2.3\n\t\t// Options inside disabled selects are incorrectly marked as disabled\n\t\tselect.disabled = true;\n\t\tsupport.optDisabled = !opt.disabled;\n\n\t\t// Support: IE<=11+\n\t\t// An input loses its value after becoming a radio\n\t\tinput = document.createElement(\"input\");\n\t\tinput.value = \"t\";\n\t\tinput.type = \"radio\";\n\t\tsupport.radioValue = input.value === \"t\";\n\t})();\n\n\tvar nodeHook,\n\t    boolHook,\n\t    attrHandle = jQuery.expr.attrHandle;\n\n\tjQuery.fn.extend({\n\t\tattr: function attr(name, value) {\n\t\t\treturn access(this, jQuery.attr, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveAttr: function removeAttr(name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeAttr(this, name);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tattr: function attr(elem, name, value) {\n\t\t\tvar hooks,\n\t\t\t    ret,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// don't get/set attributes on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fallback to prop when attributes are not supported\n\t\t\tif (_typeof(elem.getAttribute) === strundefined) {\n\t\t\t\treturn jQuery.prop(elem, name, value);\n\t\t\t}\n\n\t\t\t// All attributes are lowercase\n\t\t\t// Grab necessary hook if one is defined\n\t\t\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\thooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t\t} else if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\telem.setAttribute(name, value + \"\");\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t} else {\n\t\t\t\tret = jQuery.find.attr(elem, name);\n\n\t\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\t\treturn ret == null ? undefined : ret;\n\t\t\t}\n\t\t},\n\n\t\tremoveAttr: function removeAttr(elem, value) {\n\t\t\tvar name,\n\t\t\t    propName,\n\t\t\t    i = 0,\n\t\t\t    attrNames = value && value.match(rnotwhite);\n\n\t\t\tif (attrNames && elem.nodeType === 1) {\n\t\t\t\twhile (name = attrNames[i++]) {\n\t\t\t\t\tpropName = jQuery.propFix[name] || name;\n\n\t\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\t\tif (jQuery.expr.match.bool.test(name)) {\n\t\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\t\telem[propName] = false;\n\t\t\t\t\t}\n\n\t\t\t\t\telem.removeAttribute(name);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattrHooks: {\n\t\t\ttype: {\n\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\tif (!support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\")) {\n\t\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\t\telem.setAttribute(\"type\", value);\n\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hooks for boolean attributes\n\tboolHook = {\n\t\tset: function set(elem, value, name) {\n\t\t\tif (value === false) {\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t} else {\n\t\t\t\telem.setAttribute(name, name);\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n\tjQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (i, name) {\n\t\tvar getter = attrHandle[name] || jQuery.find.attr;\n\n\t\tattrHandle[name] = function (elem, name, isXML) {\n\t\t\tvar ret, handle;\n\t\t\tif (!isXML) {\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\t\thandle = attrHandle[name];\n\t\t\t\tattrHandle[name] = ret;\n\t\t\t\tret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;\n\t\t\t\tattrHandle[name] = handle;\n\t\t\t}\n\t\t\treturn ret;\n\t\t};\n\t});\n\n\tvar rfocusable = /^(?:input|select|textarea|button)$/i;\n\n\tjQuery.fn.extend({\n\t\tprop: function prop(name, value) {\n\t\t\treturn access(this, jQuery.prop, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveProp: function removeProp(name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tdelete this[jQuery.propFix[name] || name];\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tpropFix: {\n\t\t\t\"for\": \"htmlFor\",\n\t\t\t\"class\": \"className\"\n\t\t},\n\n\t\tprop: function prop(elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    notxml,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n\t\t\tif (notxml) {\n\t\t\t\t// Fix name and attach hooks\n\t\t\t\tname = jQuery.propFix[name] || name;\n\t\t\t\thooks = jQuery.propHooks[name];\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;\n\t\t\t} else {\n\t\t\t\treturn hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];\n\t\t\t}\n\t\t},\n\n\t\tpropHooks: {\n\t\t\ttabIndex: {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\treturn elem.hasAttribute(\"tabindex\") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tif (!support.optSelected) {\n\t\tjQuery.propHooks.selected = {\n\t\t\tget: function get(elem) {\n\t\t\t\tvar parent = elem.parentNode;\n\t\t\t\tif (parent && parent.parentNode) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t}\n\n\tjQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n\t\tjQuery.propFix[this.toLowerCase()] = this;\n\t});\n\n\tvar rclass = /[\\t\\r\\n\\f]/g;\n\n\tjQuery.fn.extend({\n\t\taddClass: function addClass(value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    proceed = typeof value === \"string\" && value,\n\t\t\t    i = 0,\n\t\t\t    len = this.length;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).addClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (proceed) {\n\t\t\t\t// The disjunction here is for better compressibility (see removeClass)\n\t\t\t\tclasses = (value || \"\").match(rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \" \");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\tif (cur.indexOf(\" \" + clazz + \" \") < 0) {\n\t\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = jQuery.trim(cur);\n\t\t\t\t\t\tif (elem.className !== finalValue) {\n\t\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremoveClass: function removeClass(value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    proceed = arguments.length === 0 || typeof value === \"string\" && value,\n\t\t\t    i = 0,\n\t\t\t    len = this.length;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).removeClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (proceed) {\n\t\t\t\tclasses = (value || \"\").match(rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \"\");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\t\twhile (cur.indexOf(\" \" + clazz + \" \") >= 0) {\n\t\t\t\t\t\t\t\tcur = cur.replace(\" \" + clazz + \" \", \" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = value ? jQuery.trim(cur) : \"\";\n\t\t\t\t\t\tif (elem.className !== finalValue) {\n\t\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\ttoggleClass: function toggleClass(value, stateVal) {\n\t\t\tvar type = typeof value === \"undefined\" ? \"undefined\" : _typeof(value);\n\n\t\t\tif (typeof stateVal === \"boolean\" && type === \"string\") {\n\t\t\t\treturn stateVal ? this.addClass(value) : this.removeClass(value);\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (type === \"string\") {\n\t\t\t\t\t// Toggle individual class names\n\t\t\t\t\tvar className,\n\t\t\t\t\t    i = 0,\n\t\t\t\t\t    self = jQuery(this),\n\t\t\t\t\t    classNames = value.match(rnotwhite) || [];\n\n\t\t\t\t\twhile (className = classNames[i++]) {\n\t\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\t\tif (self.hasClass(className)) {\n\t\t\t\t\t\t\tself.removeClass(className);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.addClass(className);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Toggle whole class name\n\t\t\t\t} else if (type === strundefined || type === \"boolean\") {\n\t\t\t\t\tif (this.className) {\n\t\t\t\t\t\t// store className if set\n\t\t\t\t\t\tdata_priv.set(this, \"__className__\", this.className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\t\tthis.className = this.className || value === false ? \"\" : data_priv.get(this, \"__className__\") || \"\";\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\thasClass: function hasClass(selector) {\n\t\t\tvar className = \" \" + selector + \" \",\n\t\t\t    i = 0,\n\t\t\t    l = this.length;\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tif (this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf(className) >= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t});\n\n\tvar rreturn = /\\r/g;\n\n\tjQuery.fn.extend({\n\t\tval: function val(value) {\n\t\t\tvar hooks,\n\t\t\t    ret,\n\t\t\t    isFunction,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (elem) {\n\t\t\t\t\thooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n\t\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\n\t\t\t\t\tret = elem.value;\n\n\t\t\t\t\treturn typeof ret === \"string\" ?\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tret.replace(rreturn, \"\") :\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisFunction = jQuery.isFunction(value);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tvar val;\n\n\t\t\t\tif (this.nodeType !== 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isFunction) {\n\t\t\t\t\tval = value.call(this, i, jQuery(this).val());\n\t\t\t\t} else {\n\t\t\t\t\tval = value;\n\t\t\t\t}\n\n\t\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\t\tif (val == null) {\n\t\t\t\t\tval = \"\";\n\t\t\t\t} else if (typeof val === \"number\") {\n\t\t\t\t\tval += \"\";\n\t\t\t\t} else if (jQuery.isArray(val)) {\n\t\t\t\t\tval = jQuery.map(val, function (value) {\n\t\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\thooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n\t\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n\t\t\t\t\tthis.value = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tvalHooks: {\n\t\t\toption: {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\tvar val = jQuery.find.attr(elem, \"value\");\n\t\t\t\t\treturn val != null ? val :\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\tjQuery.trim(jQuery.text(elem));\n\t\t\t\t}\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\tvar value,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    index = elem.selectedIndex,\n\t\t\t\t\t    one = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\t    values = one ? null : [],\n\t\t\t\t\t    max = one ? index + 1 : options.length,\n\t\t\t\t\t    i = index < 0 ? max : one ? index : 0;\n\n\t\t\t\t\t// Loop through all the selected options\n\t\t\t\t\tfor (; i < max; i++) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t// IE6-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\t\tif ((option.selected || i === index) && (\n\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\tsupport.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, \"optgroup\"))) {\n\n\t\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\t\tvalue = jQuery(option).val();\n\n\t\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\t\tif (one) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn values;\n\t\t\t\t},\n\n\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\tvar optionSet,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    values = jQuery.makeArray(value),\n\t\t\t\t\t    i = options.length;\n\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\toption = options[i];\n\t\t\t\t\t\tif (option.selected = jQuery.inArray(option.value, values) >= 0) {\n\t\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\t\tif (!optionSet) {\n\t\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t\treturn values;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Radios and checkboxes getter/setter\n\tjQuery.each([\"radio\", \"checkbox\"], function () {\n\t\tjQuery.valHooks[this] = {\n\t\t\tset: function set(elem, value) {\n\t\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\t\treturn elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (!support.checkOn) {\n\t\t\tjQuery.valHooks[this].get = function (elem) {\n\t\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n\t\t\t};\n\t\t}\n\t});\n\n\t// Return jQuery for attributes-only inclusion\n\n\n\tjQuery.each((\"blur focus focusin focusout load resize scroll unload click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function (i, name) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[name] = function (data, fn) {\n\t\t\treturn arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\t\thover: function hover(fnOver, fnOut) {\n\t\t\treturn this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n\t\t},\n\n\t\tbind: function bind(types, data, fn) {\n\t\t\treturn this.on(types, null, data, fn);\n\t\t},\n\t\tunbind: function unbind(types, fn) {\n\t\t\treturn this.off(types, null, fn);\n\t\t},\n\n\t\tdelegate: function delegate(selector, types, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn);\n\t\t},\n\t\tundelegate: function undelegate(selector, types, fn) {\n\t\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\t\treturn arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n\t\t}\n\t});\n\n\tvar nonce = jQuery.now();\n\n\tvar rquery = /\\?/;\n\n\t// Support: Android 2.3\n\t// Workaround failure to string-cast null input\n\tjQuery.parseJSON = function (data) {\n\t\treturn JSON.parse(data + \"\");\n\t};\n\n\t// Cross-browser xml parsing\n\tjQuery.parseXML = function (data) {\n\t\tvar xml, tmp;\n\t\tif (!data || typeof data !== \"string\") {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Support: IE9\n\t\ttry {\n\t\t\ttmp = new DOMParser();\n\t\t\txml = tmp.parseFromString(data, \"text/xml\");\n\t\t} catch (e) {\n\t\t\txml = undefined;\n\t\t}\n\n\t\tif (!xml || xml.getElementsByTagName(\"parsererror\").length) {\n\t\t\tjQuery.error(\"Invalid XML: \" + data);\n\t\t}\n\t\treturn xml;\n\t};\n\n\tvar rhash = /#.*$/,\n\t    rts = /([?&])_=[^&]*/,\n\t    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\t    rnoContent = /^(?:GET|HEAD)$/,\n\t    rprotocol = /^\\/\\//,\n\t    rurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n\n\t/* Prefilters\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n  * 2) These are called:\n  *    - BEFORE asking for a transport\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\n  * 3) key is the dataType\n  * 4) the catchall symbol \"*\" can be used\n  * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n  */\n\tprefilters = {},\n\n\n\t/* Transports bindings\n  * 1) key is the dataType\n  * 2) the catchall symbol \"*\" can be used\n  * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n  */\n\ttransports = {},\n\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat(\"*\"),\n\n\n\t// Document location\n\tajaxLocation = window.location.href,\n\n\n\t// Segment location into parts\n\tajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];\n\n\t// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\tfunction addToPrefiltersOrTransports(structure) {\n\n\t\t// dataTypeExpression is optional and defaults to \"*\"\n\t\treturn function (dataTypeExpression, func) {\n\n\t\t\tif (typeof dataTypeExpression !== \"string\") {\n\t\t\t\tfunc = dataTypeExpression;\n\t\t\t\tdataTypeExpression = \"*\";\n\t\t\t}\n\n\t\t\tvar dataType,\n\t\t\t    i = 0,\n\t\t\t    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\n\n\t\t\tif (jQuery.isFunction(func)) {\n\t\t\t\t// For each dataType in the dataTypeExpression\n\t\t\t\twhile (dataType = dataTypes[i++]) {\n\t\t\t\t\t// Prepend if requested\n\t\t\t\t\tif (dataType[0] === \"+\") {\n\t\t\t\t\t\tdataType = dataType.slice(1) || \"*\";\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).unshift(func);\n\n\t\t\t\t\t\t// Otherwise append\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).push(func);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// Base inspection function for prefilters and transports\n\tfunction inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n\n\t\tvar inspected = {},\n\t\t    seekingTransport = structure === transports;\n\n\t\tfunction inspect(dataType) {\n\t\t\tvar selected;\n\t\t\tinspected[dataType] = true;\n\t\t\tjQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n\t\t\t\tvar dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\t\t\t\tif (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n\t\t\t\t\toptions.dataTypes.unshift(dataTypeOrTransport);\n\t\t\t\t\tinspect(dataTypeOrTransport);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (seekingTransport) {\n\t\t\t\t\treturn !(selected = dataTypeOrTransport);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn selected;\n\t\t}\n\n\t\treturn inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n\t}\n\n\t// A special extend for ajax options\n\t// that takes \"flat\" options (not to be deep extended)\n\t// Fixes #9887\n\tfunction ajaxExtend(target, src) {\n\t\tvar key,\n\t\t    deep,\n\t\t    flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\t\tfor (key in src) {\n\t\t\tif (src[key] !== undefined) {\n\t\t\t\t(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n\t\t\t}\n\t\t}\n\t\tif (deep) {\n\t\t\tjQuery.extend(true, target, deep);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/* Handles responses to an ajax request:\n  * - finds the right dataType (mediates between content-type and expected dataType)\n  * - returns the corresponding response\n  */\n\tfunction ajaxHandleResponses(s, jqXHR, responses) {\n\n\t\tvar ct,\n\t\t    type,\n\t\t    finalDataType,\n\t\t    firstDataType,\n\t\t    contents = s.contents,\n\t\t    dataTypes = s.dataTypes;\n\n\t\t// Remove auto dataType and get content-type in the process\n\t\twhile (dataTypes[0] === \"*\") {\n\t\t\tdataTypes.shift();\n\t\t\tif (ct === undefined) {\n\t\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t\t}\n\t\t}\n\n\t\t// Check if we're dealing with a known content-type\n\t\tif (ct) {\n\t\t\tfor (type in contents) {\n\t\t\t\tif (contents[type] && contents[type].test(ct)) {\n\t\t\t\t\tdataTypes.unshift(type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a response for the expected dataType\n\t\tif (dataTypes[0] in responses) {\n\t\t\tfinalDataType = dataTypes[0];\n\t\t} else {\n\t\t\t// Try convertible dataTypes\n\t\t\tfor (type in responses) {\n\t\t\t\tif (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n\t\t\t\t\tfinalDataType = type;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!firstDataType) {\n\t\t\t\t\tfirstDataType = type;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Or just use first one\n\t\t\tfinalDataType = finalDataType || firstDataType;\n\t\t}\n\n\t\t// If we found a dataType\n\t\t// We add the dataType to the list if needed\n\t\t// and return the corresponding response\n\t\tif (finalDataType) {\n\t\t\tif (finalDataType !== dataTypes[0]) {\n\t\t\t\tdataTypes.unshift(finalDataType);\n\t\t\t}\n\t\t\treturn responses[finalDataType];\n\t\t}\n\t}\n\n\t/* Chain conversions given the request and the original response\n  * Also sets the responseXXX fields on the jqXHR instance\n  */\n\tfunction ajaxConvert(s, response, jqXHR, isSuccess) {\n\t\tvar conv2,\n\t\t    current,\n\t\t    conv,\n\t\t    tmp,\n\t\t    prev,\n\t\t    converters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t\t// Create converters map with lowercased keys\n\t\tif (dataTypes[1]) {\n\t\t\tfor (conv in s.converters) {\n\t\t\t\tconverters[conv.toLowerCase()] = s.converters[conv];\n\t\t\t}\n\t\t}\n\n\t\tcurrent = dataTypes.shift();\n\n\t\t// Convert to each sequential dataType\n\t\twhile (current) {\n\n\t\t\tif (s.responseFields[current]) {\n\t\t\t\tjqXHR[s.responseFields[current]] = response;\n\t\t\t}\n\n\t\t\t// Apply the dataFilter if provided\n\t\t\tif (!prev && isSuccess && s.dataFilter) {\n\t\t\t\tresponse = s.dataFilter(response, s.dataType);\n\t\t\t}\n\n\t\t\tprev = current;\n\t\t\tcurrent = dataTypes.shift();\n\n\t\t\tif (current) {\n\n\t\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\t\tif (current === \"*\") {\n\n\t\t\t\t\tcurrent = prev;\n\n\t\t\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t\t} else if (prev !== \"*\" && prev !== current) {\n\n\t\t\t\t\t// Seek a direct converter\n\t\t\t\t\tconv = converters[prev + \" \" + current] || converters[\"* \" + current];\n\n\t\t\t\t\t// If none found, seek a pair\n\t\t\t\t\tif (!conv) {\n\t\t\t\t\t\tfor (conv2 in converters) {\n\n\t\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\t\ttmp = conv2.split(\" \");\n\t\t\t\t\t\t\tif (tmp[1] === current) {\n\n\t\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\t\tconv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\t\t\t\t\t\t\t\tif (conv) {\n\t\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\t\tif (conv === true) {\n\t\t\t\t\t\t\t\t\t\tconv = converters[conv2];\n\n\t\t\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t\t} else if (converters[conv2] !== true) {\n\t\t\t\t\t\t\t\t\t\tcurrent = tmp[0];\n\t\t\t\t\t\t\t\t\t\tdataTypes.unshift(tmp[1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\t\tif (conv !== true) {\n\n\t\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\t\tif (conv && s[\"throws\"]) {\n\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { state: \"success\", data: response };\n\t}\n\n\tjQuery.extend({\n\n\t\t// Counter for holding the number of active queries\n\t\tactive: 0,\n\n\t\t// Last-Modified header cache for next request\n\t\tlastModified: {},\n\t\tetag: {},\n\n\t\tajaxSettings: {\n\t\t\turl: ajaxLocation,\n\t\t\ttype: \"GET\",\n\t\t\tisLocal: rlocalProtocol.test(ajaxLocParts[1]),\n\t\t\tglobal: true,\n\t\t\tprocessData: true,\n\t\t\tasync: true,\n\t\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t\t/*\n   timeout: 0,\n   data: null,\n   dataType: null,\n   username: null,\n   password: null,\n   cache: null,\n   throws: false,\n   traditional: false,\n   headers: {},\n   */\n\n\t\t\taccepts: {\n\t\t\t\t\"*\": allTypes,\n\t\t\t\ttext: \"text/plain\",\n\t\t\t\thtml: \"text/html\",\n\t\t\t\txml: \"application/xml, text/xml\",\n\t\t\t\tjson: \"application/json, text/javascript\"\n\t\t\t},\n\n\t\t\tcontents: {\n\t\t\t\txml: /xml/,\n\t\t\t\thtml: /html/,\n\t\t\t\tjson: /json/\n\t\t\t},\n\n\t\t\tresponseFields: {\n\t\t\t\txml: \"responseXML\",\n\t\t\t\ttext: \"responseText\",\n\t\t\t\tjson: \"responseJSON\"\n\t\t\t},\n\n\t\t\t// Data converters\n\t\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\t\tconverters: {\n\n\t\t\t\t// Convert anything to text\n\t\t\t\t\"* text\": String,\n\n\t\t\t\t// Text to html (true = no transformation)\n\t\t\t\t\"text html\": true,\n\n\t\t\t\t// Evaluate text as a json expression\n\t\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t\t// Parse text as xml\n\t\t\t\t\"text xml\": jQuery.parseXML\n\t\t\t},\n\n\t\t\t// For options that shouldn't be deep extended:\n\t\t\t// you can add your own custom options here if\n\t\t\t// and when you create one that shouldn't be\n\t\t\t// deep extended (see ajaxExtend)\n\t\t\tflatOptions: {\n\t\t\t\turl: true,\n\t\t\t\tcontext: true\n\t\t\t}\n\t\t},\n\n\t\t// Creates a full fledged settings object into target\n\t\t// with both ajaxSettings and settings fields.\n\t\t// If target is omitted, writes into ajaxSettings.\n\t\tajaxSetup: function ajaxSetup(target, settings) {\n\t\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend(jQuery.ajaxSettings, target);\n\t\t},\n\n\t\tajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n\t\tajaxTransport: addToPrefiltersOrTransports(transports),\n\n\t\t// Main method\n\t\tajax: function ajax(url, options) {\n\n\t\t\t// If url is an object, simulate pre-1.5 signature\n\t\t\tif ((typeof url === \"undefined\" ? \"undefined\" : _typeof(url)) === \"object\") {\n\t\t\t\toptions = url;\n\t\t\t\turl = undefined;\n\t\t\t}\n\n\t\t\t// Force options to be an object\n\t\t\toptions = options || {};\n\n\t\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\t    responseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Cross-domain detection vars\n\t\t\tparts,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup({}, options),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\t    completeDeferred = jQuery.Callbacks(\"once memory\"),\n\n\t\t\t// Status-dependent callbacks\n\t\t\t_statusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\t    requestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function getResponseHeader(key) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif (state === 2) {\n\t\t\t\t\t\tif (!responseHeaders) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile (match = rheaders.exec(responseHeadersString)) {\n\t\t\t\t\t\t\t\tresponseHeaders[match[1].toLowerCase()] = match[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[key.toLowerCase()];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function getAllResponseHeaders() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function setRequestHeader(name, value) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\tname = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n\t\t\t\t\t\trequestHeaders[name] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function overrideMimeType(type) {\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function statusCode(map) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif (map) {\n\t\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\t\tfor (code in map) {\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\t_statusCode[code] = [_statusCode[code], map[code]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always(map[jqXHR.status]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function abort(statusText) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif (transport) {\n\t\t\t\t\t\ttransport.abort(finalText);\n\t\t\t\t\t}\n\t\t\t\t\tdone(0, finalText);\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Attach deferreds\n\t\t\tdeferred.promise(jqXHR).complete = completeDeferred.add;\n\t\t\tjqXHR.success = jqXHR.done;\n\t\t\tjqXHR.error = jqXHR.fail;\n\n\t\t\t// Remove hash character (#7531: and string promotion)\n\t\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t\t// We also use the url parameter if available\n\t\t\ts.url = ((url || s.url || ajaxLocation) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\");\n\n\t\t\t// Alias method option to type as per ticket #12004\n\t\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t\t// Extract dataTypes list\n\t\t\ts.dataTypes = jQuery.trim(s.dataType || \"*\").toLowerCase().match(rnotwhite) || [\"\"];\n\n\t\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\n\t\t\tif (s.crossDomain == null) {\n\t\t\t\tparts = rurl.exec(s.url.toLowerCase());\n\t\t\t\ts.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === \"http:\" ? \"80\" : \"443\")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? \"80\" : \"443\"))));\n\t\t\t}\n\n\t\t\t// Convert data if not already a string\n\t\t\tif (s.data && s.processData && typeof s.data !== \"string\") {\n\t\t\t\ts.data = jQuery.param(s.data, s.traditional);\n\t\t\t}\n\n\t\t\t// Apply prefilters\n\t\t\tinspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n\t\t\t// If request was aborted inside a prefilter, stop there\n\t\t\tif (state === 2) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// We can fire global events as of now if asked to\n\t\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t\t// Watch for a new set of requests\n\t\t\tif (fireGlobals && jQuery.active++ === 0) {\n\t\t\t\tjQuery.event.trigger(\"ajaxStart\");\n\t\t\t}\n\n\t\t\t// Uppercase the type\n\t\t\ts.type = s.type.toUpperCase();\n\n\t\t\t// Determine if request has content\n\t\t\ts.hasContent = !rnoContent.test(s.type);\n\n\t\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t\t// and/or If-None-Match header later on\n\t\t\tcacheURL = s.url;\n\n\t\t\t// More options handling for requests with no content\n\t\t\tif (!s.hasContent) {\n\n\t\t\t\t// If data is available, append data to url\n\t\t\t\tif (s.data) {\n\t\t\t\t\tcacheURL = s.url += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\n\t\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\t\tdelete s.data;\n\t\t\t\t}\n\n\t\t\t\t// Add anti-cache in url if needed\n\t\t\t\tif (s.cache === false) {\n\t\t\t\t\ts.url = rts.test(cacheURL) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace(rts, \"$1_=\" + nonce++) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\tif (s.ifModified) {\n\t\t\t\tif (jQuery.lastModified[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n\t\t\t\t}\n\t\t\t\tif (jQuery.etag[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the correct header, if data is being sent\n\t\t\tif (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n\t\t\t\tjqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n\t\t\t}\n\n\t\t\t// Set the Accepts header for the server, depending on the dataType\n\t\t\tjqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\n\n\t\t\t// Check for headers option\n\t\t\tfor (i in s.headers) {\n\t\t\t\tjqXHR.setRequestHeader(i, s.headers[i]);\n\t\t\t}\n\n\t\t\t// Allow custom headers/mimetypes and early abort\n\t\t\tif (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n\t\t\t\t// Abort if not done already and return\n\t\t\t\treturn jqXHR.abort();\n\t\t\t}\n\n\t\t\t// Aborting is no longer a cancellation\n\t\t\tstrAbort = \"abort\";\n\n\t\t\t// Install callbacks on deferreds\n\t\t\tfor (i in { success: 1, error: 1, complete: 1 }) {\n\t\t\t\tjqXHR[i](s[i]);\n\t\t\t}\n\n\t\t\t// Get transport\n\t\t\ttransport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n\t\t\t// If no transport, we auto-abort\n\t\t\tif (!transport) {\n\t\t\t\tdone(-1, \"No Transport\");\n\t\t\t} else {\n\t\t\t\tjqXHR.readyState = 1;\n\n\t\t\t\t// Send global event\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n\t\t\t\t}\n\t\t\t\t// Timeout\n\t\t\t\tif (s.async && s.timeout > 0) {\n\t\t\t\t\ttimeoutTimer = setTimeout(function () {\n\t\t\t\t\t\tjqXHR.abort(\"timeout\");\n\t\t\t\t\t}, s.timeout);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tstate = 1;\n\t\t\t\t\ttransport.send(requestHeaders, done);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Propagate exception as error if not done\n\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\tdone(-1, e);\n\t\t\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Callback for when everything is done\n\t\t\tfunction done(status, nativeStatusText, responses, headers) {\n\t\t\t\tvar isSuccess,\n\t\t\t\t    success,\n\t\t\t\t    error,\n\t\t\t\t    response,\n\t\t\t\t    modified,\n\t\t\t\t    statusText = nativeStatusText;\n\n\t\t\t\t// Called once\n\t\t\t\tif (state === 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// State is \"done\" now\n\t\t\t\tstate = 2;\n\n\t\t\t\t// Clear timeout if it exists\n\t\t\t\tif (timeoutTimer) {\n\t\t\t\t\tclearTimeout(timeoutTimer);\n\t\t\t\t}\n\n\t\t\t\t// Dereference transport for early garbage collection\n\t\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\t\ttransport = undefined;\n\n\t\t\t\t// Cache response headers\n\t\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t\t// Set readyState\n\t\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t\t// Determine if successful\n\t\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t\t// Get response data\n\t\t\t\tif (responses) {\n\t\t\t\t\tresponse = ajaxHandleResponses(s, jqXHR, responses);\n\t\t\t\t}\n\n\t\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\t\tresponse = ajaxConvert(s, response, jqXHR, isSuccess);\n\n\t\t\t\t// If successful, handle type chaining\n\t\t\t\tif (isSuccess) {\n\n\t\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\t\tif (s.ifModified) {\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.lastModified[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.etag[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if no content\n\t\t\t\t\tif (status === 204 || s.type === \"HEAD\") {\n\t\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t\t\t// if not modified\n\t\t\t\t\t} else if (status === 304) {\n\t\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t\t\t// If we have data, let's convert it\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\t\terror = response.error;\n\t\t\t\t\t\tisSuccess = !error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\t\terror = statusText;\n\t\t\t\t\tif (status || !statusText) {\n\t\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\t\tif (status < 0) {\n\t\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set data for the fake xhr object\n\t\t\t\tjqXHR.status = status;\n\t\t\t\tjqXHR.statusText = (nativeStatusText || statusText) + \"\";\n\n\t\t\t\t// Success/Error\n\t\t\t\tif (isSuccess) {\n\t\t\t\t\tdeferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n\t\t\t\t}\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tjqXHR.statusCode(_statusCode);\n\t\t\t\t_statusCode = undefined;\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n\t\t\t\t}\n\n\t\t\t\t// Complete\n\t\t\t\tcompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n\t\t\t\t\t// Handle the global AJAX counter\n\t\t\t\t\tif (! --jQuery.active) {\n\t\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jqXHR;\n\t\t},\n\n\t\tgetJSON: function getJSON(url, data, callback) {\n\t\t\treturn jQuery.get(url, data, callback, \"json\");\n\t\t},\n\n\t\tgetScript: function getScript(url, callback) {\n\t\t\treturn jQuery.get(url, undefined, callback, \"script\");\n\t\t}\n\t});\n\n\tjQuery.each([\"get\", \"post\"], function (i, method) {\n\t\tjQuery[method] = function (url, data, callback, type) {\n\t\t\t// Shift arguments if data argument was omitted\n\t\t\tif (jQuery.isFunction(data)) {\n\t\t\t\ttype = type || callback;\n\t\t\t\tcallback = data;\n\t\t\t\tdata = undefined;\n\t\t\t}\n\n\t\t\treturn jQuery.ajax({\n\t\t\t\turl: url,\n\t\t\t\ttype: method,\n\t\t\t\tdataType: type,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: callback\n\t\t\t});\n\t\t};\n\t});\n\n\tjQuery._evalUrl = function (url) {\n\t\treturn jQuery.ajax({\n\t\t\turl: url,\n\t\t\ttype: \"GET\",\n\t\t\tdataType: \"script\",\n\t\t\tasync: false,\n\t\t\tglobal: false,\n\t\t\t\"throws\": true\n\t\t});\n\t};\n\n\tjQuery.fn.extend({\n\t\twrapAll: function wrapAll(html) {\n\t\t\tvar wrap;\n\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapAll(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this[0]) {\n\n\t\t\t\t// The elements to wrap the target around\n\t\t\t\twrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n\t\t\t\tif (this[0].parentNode) {\n\t\t\t\t\twrap.insertBefore(this[0]);\n\t\t\t\t}\n\n\t\t\t\twrap.map(function () {\n\t\t\t\t\tvar elem = this;\n\n\t\t\t\t\twhile (elem.firstElementChild) {\n\t\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem;\n\t\t\t\t}).append(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\twrapInner: function wrapInner(html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapInner(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar self = jQuery(this),\n\t\t\t\t    contents = self.contents();\n\n\t\t\t\tif (contents.length) {\n\t\t\t\t\tcontents.wrapAll(html);\n\t\t\t\t} else {\n\t\t\t\t\tself.append(html);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\twrap: function wrap(html) {\n\t\t\tvar isFunction = jQuery.isFunction(html);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tjQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n\t\t\t});\n\t\t},\n\n\t\tunwrap: function unwrap() {\n\t\t\treturn this.parent().each(function () {\n\t\t\t\tif (!jQuery.nodeName(this, \"body\")) {\n\t\t\t\t\tjQuery(this).replaceWith(this.childNodes);\n\t\t\t\t}\n\t\t\t}).end();\n\t\t}\n\t});\n\n\tjQuery.expr.filters.hidden = function (elem) {\n\t\t// Support: Opera <= 12.12\n\t\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0;\n\t};\n\tjQuery.expr.filters.visible = function (elem) {\n\t\treturn !jQuery.expr.filters.hidden(elem);\n\t};\n\n\tvar r20 = /%20/g,\n\t    rbracket = /\\[\\]$/,\n\t    rCRLF = /\\r?\\n/g,\n\t    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\t    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n\tfunction buildParams(prefix, obj, traditional, add) {\n\t\tvar name;\n\n\t\tif (jQuery.isArray(obj)) {\n\t\t\t// Serialize array item.\n\t\t\tjQuery.each(obj, function (i, v) {\n\t\t\t\tif (traditional || rbracket.test(prefix)) {\n\t\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\t\tadd(prefix, v);\n\t\t\t\t} else {\n\t\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\t\tbuildParams(prefix + \"[\" + ((typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) === \"object\" ? i : \"\") + \"]\", v, traditional, add);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!traditional && jQuery.type(obj) === \"object\") {\n\t\t\t// Serialize object item.\n\t\t\tfor (name in obj) {\n\t\t\t\tbuildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n\t\t\t}\n\t\t} else {\n\t\t\t// Serialize scalar item.\n\t\t\tadd(prefix, obj);\n\t\t}\n\t}\n\n\t// Serialize an array of form elements or a set of\n\t// key/values into a query string\n\tjQuery.param = function (a, traditional) {\n\t\tvar prefix,\n\t\t    s = [],\n\t\t    add = function add(key, value) {\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction(value) ? value() : value == null ? \"\" : value;\n\t\t\ts[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n\t\t};\n\n\t\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\t\tif (traditional === undefined) {\n\t\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t\t}\n\n\t\t// If an array was passed in, assume that it is an array of form elements.\n\t\tif (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n\t\t\t// Serialize the form elements\n\t\t\tjQuery.each(a, function () {\n\t\t\t\tadd(this.name, this.value);\n\t\t\t});\n\t\t} else {\n\t\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t\t// did it), otherwise encode params recursively.\n\t\t\tfor (prefix in a) {\n\t\t\t\tbuildParams(prefix, a[prefix], traditional, add);\n\t\t\t}\n\t\t}\n\n\t\t// Return the resulting serialization\n\t\treturn s.join(\"&\").replace(r20, \"+\");\n\t};\n\n\tjQuery.fn.extend({\n\t\tserialize: function serialize() {\n\t\t\treturn jQuery.param(this.serializeArray());\n\t\t},\n\t\tserializeArray: function serializeArray() {\n\t\t\treturn this.map(function () {\n\t\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\t\tvar elements = jQuery.prop(this, \"elements\");\n\t\t\t\treturn elements ? jQuery.makeArray(elements) : this;\n\t\t\t}).filter(function () {\n\t\t\t\tvar type = this.type;\n\n\t\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\t\treturn this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n\t\t\t}).map(function (i, elem) {\n\t\t\t\tvar val = jQuery(this).val();\n\n\t\t\t\treturn val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t\t}) : { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t}).get();\n\t\t}\n\t});\n\n\tjQuery.ajaxSettings.xhr = function () {\n\t\ttry {\n\t\t\treturn new XMLHttpRequest();\n\t\t} catch (e) {}\n\t};\n\n\tvar xhrId = 0,\n\t    xhrCallbacks = {},\n\t    xhrSuccessStatus = {\n\t\t// file protocol always yields status code 0, assume 200\n\t\t0: 200,\n\t\t// Support: IE9\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\t    xhrSupported = jQuery.ajaxSettings.xhr();\n\n\t// Support: IE9\n\t// Open requests must be manually aborted on unload (#5280)\n\t// See https://support.microsoft.com/kb/2856746 for more info\n\tif (window.attachEvent) {\n\t\twindow.attachEvent(\"onunload\", function () {\n\t\t\tfor (var key in xhrCallbacks) {\n\t\t\t\txhrCallbacks[key]();\n\t\t\t}\n\t\t});\n\t}\n\n\tsupport.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n\tsupport.ajax = xhrSupported = !!xhrSupported;\n\n\tjQuery.ajaxTransport(function (options) {\n\t\tvar _callback;\n\n\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\tif (support.cors || xhrSupported && !options.crossDomain) {\n\t\t\treturn {\n\t\t\t\tsend: function send(headers, complete) {\n\t\t\t\t\tvar i,\n\t\t\t\t\t    xhr = options.xhr(),\n\t\t\t\t\t    id = ++xhrId;\n\n\t\t\t\t\txhr.open(options.type, options.url, options.async, options.username, options.password);\n\n\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\tif (options.xhrFields) {\n\t\t\t\t\t\tfor (i in options.xhrFields) {\n\t\t\t\t\t\t\txhr[i] = options.xhrFields[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\tif (options.mimeType && xhr.overrideMimeType) {\n\t\t\t\t\t\txhr.overrideMimeType(options.mimeType);\n\t\t\t\t\t}\n\n\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\t\tif (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set headers\n\t\t\t\t\tfor (i in headers) {\n\t\t\t\t\t\txhr.setRequestHeader(i, headers[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Callback\n\t\t\t\t\t_callback = function callback(type) {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t\t\tdelete xhrCallbacks[id];\n\t\t\t\t\t\t\t\t_callback = xhr.onload = xhr.onerror = null;\n\n\t\t\t\t\t\t\t\tif (type === \"abort\") {\n\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t} else if (type === \"error\") {\n\t\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\t// file: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\txhr.status, xhr.statusText);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,\n\t\t\t\t\t\t\t\t\t// Support: IE9\n\t\t\t\t\t\t\t\t\t// Accessing binary-data responseText throws an exception\n\t\t\t\t\t\t\t\t\t// (#11426)\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText === \"string\" ? {\n\t\t\t\t\t\t\t\t\t\ttext: xhr.responseText\n\t\t\t\t\t\t\t\t\t} : undefined, xhr.getAllResponseHeaders());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t// Listen to events\n\t\t\t\t\txhr.onload = _callback();\n\t\t\t\t\txhr.onerror = _callback(\"error\");\n\n\t\t\t\t\t// Create the abort callback\n\t\t\t\t\t_callback = xhrCallbacks[id] = _callback(\"abort\");\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\t\txhr.send(options.hasContent && options.data || null);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tabort: function abort() {\n\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t_callback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\t// Install script dataType\n\tjQuery.ajaxSetup({\n\t\taccepts: {\n\t\t\tscript: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n\t\t},\n\t\tcontents: {\n\t\t\tscript: /(?:java|ecma)script/\n\t\t},\n\t\tconverters: {\n\t\t\t\"text script\": function textScript(text) {\n\t\t\t\tjQuery.globalEval(text);\n\t\t\t\treturn text;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Handle cache's special case and crossDomain\n\tjQuery.ajaxPrefilter(\"script\", function (s) {\n\t\tif (s.cache === undefined) {\n\t\t\ts.cache = false;\n\t\t}\n\t\tif (s.crossDomain) {\n\t\t\ts.type = \"GET\";\n\t\t}\n\t});\n\n\t// Bind script tag hack transport\n\tjQuery.ajaxTransport(\"script\", function (s) {\n\t\t// This transport only deals with cross domain requests\n\t\tif (s.crossDomain) {\n\t\t\tvar script, _callback2;\n\t\t\treturn {\n\t\t\t\tsend: function send(_, complete) {\n\t\t\t\t\tscript = jQuery(\"<script>\").prop({\n\t\t\t\t\t\tasync: true,\n\t\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\t\tsrc: s.url\n\t\t\t\t\t}).on(\"load error\", _callback2 = function callback(evt) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\t_callback2 = null;\n\t\t\t\t\t\tif (evt) {\n\t\t\t\t\t\t\tcomplete(evt.type === \"error\" ? 404 : 200, evt.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdocument.head.appendChild(script[0]);\n\t\t\t\t},\n\t\t\t\tabort: function abort() {\n\t\t\t\t\tif (_callback2) {\n\t\t\t\t\t\t_callback2();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n\t// Default jsonp settings\n\tjQuery.ajaxSetup({\n\t\tjsonp: \"callback\",\n\t\tjsonpCallback: function jsonpCallback() {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t});\n\n\t// Detect, normalize options and install callbacks for jsonp requests\n\tjQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\");\n\n\t\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\t\tif (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n\t\t\t// Insert callback into url or form data\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n\t\t\t}\n\n\t\t\t// Use data converter to retrieve json after script execution\n\t\t\ts.converters[\"script json\"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + \" was not called\");\n\t\t\t\t}\n\t\t\t\treturn responseContainer[0];\n\t\t\t};\n\n\t\t\t// force json dataType\n\t\t\ts.dataTypes[0] = \"json\";\n\n\t\t\t// Install callback\n\t\t\toverwritten = window[callbackName];\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t};\n\n\t\t\t// Clean-up function (fires after converters)\n\t\t\tjqXHR.always(function () {\n\t\t\t\t// Restore preexisting value\n\t\t\t\twindow[callbackName] = overwritten;\n\n\t\t\t\t// Save back as free\n\t\t\t\tif (s[callbackName]) {\n\t\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t\t// save the callback name for future use\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t}\n\n\t\t\t\t// Call if it was a function and we have a response\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t});\n\n\t\t\t// Delegate to script\n\t\t\treturn \"script\";\n\t\t}\n\t});\n\n\t// data: string of html\n\t// context (optional): If specified, the fragment will be created in this context, defaults to document\n\t// keepScripts (optional): If true, will include scripts passed in the html string\n\tjQuery.parseHTML = function (data, context, keepScripts) {\n\t\tif (!data || typeof data !== \"string\") {\n\t\t\treturn null;\n\t\t}\n\t\tif (typeof context === \"boolean\") {\n\t\t\tkeepScripts = context;\n\t\t\tcontext = false;\n\t\t}\n\t\tcontext = context || document;\n\n\t\tvar parsed = rsingleTag.exec(data),\n\t\t    scripts = !keepScripts && [];\n\n\t\t// Single tag\n\t\tif (parsed) {\n\t\t\treturn [context.createElement(parsed[1])];\n\t\t}\n\n\t\tparsed = jQuery.buildFragment([data], context, scripts);\n\n\t\tif (scripts && scripts.length) {\n\t\t\tjQuery(scripts).remove();\n\t\t}\n\n\t\treturn jQuery.merge([], parsed.childNodes);\n\t};\n\n\t// Keep a copy of the old load method\n\tvar _load = jQuery.fn.load;\n\n\t/**\n  * Load a url into a page\n  */\n\tjQuery.fn.load = function (url, params, callback) {\n\t\tif (typeof url !== \"string\" && _load) {\n\t\t\treturn _load.apply(this, arguments);\n\t\t}\n\n\t\tvar selector,\n\t\t    type,\n\t\t    response,\n\t\t    self = this,\n\t\t    off = url.indexOf(\" \");\n\n\t\tif (off >= 0) {\n\t\t\tselector = jQuery.trim(url.slice(off));\n\t\t\turl = url.slice(0, off);\n\t\t}\n\n\t\t// If it's a function\n\t\tif (jQuery.isFunction(params)) {\n\n\t\t\t// We assume that it's the callback\n\t\t\tcallback = params;\n\t\t\tparams = undefined;\n\n\t\t\t// Otherwise, build a param string\n\t\t} else if (params && (typeof params === \"undefined\" ? \"undefined\" : _typeof(params)) === \"object\") {\n\t\t\ttype = \"POST\";\n\t\t}\n\n\t\t// If we have elements to modify, make the request\n\t\tif (self.length > 0) {\n\t\t\tjQuery.ajax({\n\t\t\t\turl: url,\n\n\t\t\t\t// if \"type\" variable is undefined, then \"GET\" method will be used\n\t\t\t\ttype: type,\n\t\t\t\tdataType: \"html\",\n\t\t\t\tdata: params\n\t\t\t}).done(function (responseText) {\n\n\t\t\t\t// Save response for use in complete callback\n\t\t\t\tresponse = arguments;\n\n\t\t\t\tself.html(selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText);\n\t\t\t}).complete(callback && function (jqXHR, status) {\n\t\t\t\tself.each(callback, response || [jqXHR.responseText, status, jqXHR]);\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t// Attach a bunch of functions for handling common AJAX events\n\tjQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n\t\tjQuery.fn[type] = function (fn) {\n\t\t\treturn this.on(type, fn);\n\t\t};\n\t});\n\n\tjQuery.expr.filters.animated = function (elem) {\n\t\treturn jQuery.grep(jQuery.timers, function (fn) {\n\t\t\treturn elem === fn.elem;\n\t\t}).length;\n\t};\n\n\tvar docElem = window.document.documentElement;\n\n\t/**\n  * Gets a window from an element\n  */\n\tfunction getWindow(elem) {\n\t\treturn jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;\n\t}\n\n\tjQuery.offset = {\n\t\tsetOffset: function setOffset(elem, options, i) {\n\t\t\tvar curPosition,\n\t\t\t    curLeft,\n\t\t\t    curCSSTop,\n\t\t\t    curTop,\n\t\t\t    curOffset,\n\t\t\t    curCSSLeft,\n\t\t\t    calculatePosition,\n\t\t\t    position = jQuery.css(elem, \"position\"),\n\t\t\t    curElem = jQuery(elem),\n\t\t\t    props = {};\n\n\t\t\t// Set position first, in-case top/left are set even on static elem\n\t\t\tif (position === \"static\") {\n\t\t\t\telem.style.position = \"relative\";\n\t\t\t}\n\n\t\t\tcurOffset = curElem.offset();\n\t\t\tcurCSSTop = jQuery.css(elem, \"top\");\n\t\t\tcurCSSLeft = jQuery.css(elem, \"left\");\n\t\t\tcalculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1;\n\n\t\t\t// Need to be able to calculate position if either\n\t\t\t// top or left is auto and position is either absolute or fixed\n\t\t\tif (calculatePosition) {\n\t\t\t\tcurPosition = curElem.position();\n\t\t\t\tcurTop = curPosition.top;\n\t\t\t\tcurLeft = curPosition.left;\n\t\t\t} else {\n\t\t\t\tcurTop = parseFloat(curCSSTop) || 0;\n\t\t\t\tcurLeft = parseFloat(curCSSLeft) || 0;\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(options)) {\n\t\t\t\toptions = options.call(elem, i, curOffset);\n\t\t\t}\n\n\t\t\tif (options.top != null) {\n\t\t\t\tprops.top = options.top - curOffset.top + curTop;\n\t\t\t}\n\t\t\tif (options.left != null) {\n\t\t\t\tprops.left = options.left - curOffset.left + curLeft;\n\t\t\t}\n\n\t\t\tif (\"using\" in options) {\n\t\t\t\toptions.using.call(elem, props);\n\t\t\t} else {\n\t\t\t\tcurElem.css(props);\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.fn.extend({\n\t\toffset: function offset(options) {\n\t\t\tif (arguments.length) {\n\t\t\t\treturn options === undefined ? this : this.each(function (i) {\n\t\t\t\t\tjQuery.offset.setOffset(this, options, i);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar docElem,\n\t\t\t    win,\n\t\t\t    elem = this[0],\n\t\t\t    box = { top: 0, left: 0 },\n\t\t\t    doc = elem && elem.ownerDocument;\n\n\t\t\tif (!doc) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\t// Make sure it's not a disconnected DOM node\n\t\t\tif (!jQuery.contains(docElem, elem)) {\n\t\t\t\treturn box;\n\t\t\t}\n\n\t\t\t// Support: BlackBerry 5, iOS 3 (original iPhone)\n\t\t\t// If we don't have gBCR, just use 0,0 rather than error\n\t\t\tif (_typeof(elem.getBoundingClientRect) !== strundefined) {\n\t\t\t\tbox = elem.getBoundingClientRect();\n\t\t\t}\n\t\t\twin = getWindow(doc);\n\t\t\treturn {\n\t\t\t\ttop: box.top + win.pageYOffset - docElem.clientTop,\n\t\t\t\tleft: box.left + win.pageXOffset - docElem.clientLeft\n\t\t\t};\n\t\t},\n\n\t\tposition: function position() {\n\t\t\tif (!this[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar offsetParent,\n\t\t\t    offset,\n\t\t\t    elem = this[0],\n\t\t\t    parentOffset = { top: 0, left: 0 };\n\n\t\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent\n\t\t\tif (jQuery.css(elem, \"position\") === \"fixed\") {\n\t\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\t\toffset = elem.getBoundingClientRect();\n\t\t\t} else {\n\t\t\t\t// Get *real* offsetParent\n\t\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t\t// Get correct offsets\n\t\t\t\toffset = this.offset();\n\t\t\t\tif (!jQuery.nodeName(offsetParent[0], \"html\")) {\n\t\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t\t}\n\n\t\t\t\t// Add offsetParent borders\n\t\t\t\tparentOffset.top += jQuery.css(offsetParent[0], \"borderTopWidth\", true);\n\t\t\t\tparentOffset.left += jQuery.css(offsetParent[0], \"borderLeftWidth\", true);\n\t\t\t}\n\n\t\t\t// Subtract parent offsets and element margins\n\t\t\treturn {\n\t\t\t\ttop: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n\t\t\t\tleft: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n\t\t\t};\n\t\t},\n\n\t\toffsetParent: function offsetParent() {\n\t\t\treturn this.map(function () {\n\t\t\t\tvar offsetParent = this.offsetParent || docElem;\n\n\t\t\t\twhile (offsetParent && !jQuery.nodeName(offsetParent, \"html\") && jQuery.css(offsetParent, \"position\") === \"static\") {\n\t\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t\t}\n\n\t\t\t\treturn offsetParent || docElem;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Create scrollLeft and scrollTop methods\n\tjQuery.each({ scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function (method, prop) {\n\t\tvar top = \"pageYOffset\" === prop;\n\n\t\tjQuery.fn[method] = function (val) {\n\t\t\treturn access(this, function (elem, method, val) {\n\t\t\t\tvar win = getWindow(elem);\n\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\treturn win ? win[prop] : elem[method];\n\t\t\t\t}\n\n\t\t\t\tif (win) {\n\t\t\t\t\twin.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);\n\t\t\t\t} else {\n\t\t\t\t\telem[method] = val;\n\t\t\t\t}\n\t\t\t}, method, val, arguments.length, null);\n\t\t};\n\t});\n\n\t// Support: Safari<7+, Chrome<37+\n\t// Add the top/left cssHooks using jQuery.fn.position\n\t// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n\t// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n\t// getComputedStyle returns percent when specified for top/left/bottom/right;\n\t// rather than make the css module depend on the offset module, just check for it here\n\tjQuery.each([\"top\", \"left\"], function (i, prop) {\n\t\tjQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n\t\t\tif (computed) {\n\t\t\t\tcomputed = curCSS(elem, prop);\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n\t\t\t}\n\t\t});\n\t});\n\n\t// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\tjQuery.each({ Height: \"height\", Width: \"width\" }, function (name, type) {\n\t\tjQuery.each({ padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function (defaultExtra, funcName) {\n\t\t\t// Margin is only for outerHeight, outerWidth\n\t\t\tjQuery.fn[funcName] = function (margin, value) {\n\t\t\t\tvar chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n\t\t\t\t    extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n\n\t\t\t\treturn access(this, function (elem, type, value) {\n\t\t\t\t\tvar doc;\n\n\t\t\t\t\tif (jQuery.isWindow(elem)) {\n\t\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\t\treturn elem.document.documentElement[\"client\" + name];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get document width or height\n\t\t\t\t\tif (elem.nodeType === 9) {\n\t\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t\t// whichever is greatest\n\t\t\t\t\t\treturn Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value === undefined ?\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css(elem, type, extra) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style(elem, type, value, extra);\n\t\t\t\t}, type, chainable ? margin : undefined, chainable, null);\n\t\t\t};\n\t\t});\n\t});\n\n\t// The number of elements contained in the matched element set\n\tjQuery.fn.size = function () {\n\t\treturn this.length;\n\t};\n\n\tjQuery.fn.andSelf = jQuery.fn.addBack;\n\n\t// Register as a named AMD module, since jQuery can be concatenated with other\n\t// files that may use define, but not via a proper concatenation script that\n\t// understands anonymous AMD modules. A named AMD is safest and most robust\n\t// way to register. Lowercase jquery is used because AMD module names are\n\t// derived from file names, and jQuery is normally delivered in a lowercase\n\t// file name. Do this after creating the global so that if an AMD module wants\n\t// to call noConflict to hide this version of jQuery, it will work.\n\n\t// Note that for maximum portability, libraries that are not jQuery should\n\t// declare themselves as anonymous modules, and avoid setting a global if an\n\t// AMD loader is present. jQuery is a special case. For more information, see\n\t// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(\"jquery\", [], function () {\n\t\t\treturn jQuery;\n\t\t});\n\t}\n\n\tvar\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\n\tjQuery.noConflict = function (deep) {\n\t\tif (window.$ === jQuery) {\n\t\t\twindow.$ = _$;\n\t\t}\n\n\t\tif (deep && window.jQuery === jQuery) {\n\t\t\twindow.jQuery = _jQuery;\n\t\t}\n\n\t\treturn jQuery;\n\t};\n\n\t// Expose jQuery and $ identifiers, even in AMD\n\t// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n\t// and CommonJS for browser emulators (#13566)\n\tif ((typeof noGlobal === \"undefined\" ? \"undefined\" : _typeof(noGlobal)) === strundefined) {\n\t\twindow.jQuery = window.$ = jQuery;\n\t}\n\n\treturn jQuery;\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.form.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.form.js ***!
  \******************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * jQuery Form Plugin\n * version: 3.51.0-2014.06.20\n * Requires jQuery v1.5 or later\n * Copyright (c) 2014 M. Alsup\n * Examples and documentation at: http://malsup.com/jquery/form/\n * Project repository: https://github.com/malsup/form\n * Dual licensed under the MIT and GPL licenses.\n * https://github.com/malsup/form#copyright-and-license\n */\n/*global ActiveXObject */\n\n// AMD support\n(function (factory) {\n    \"use strict\";\n\n    if (typeof define === 'function' && define.amd) {\n        // using AMD; register as anon module\n        define(['jquery'], factory);\n    } else {\n        // no AMD; invoke directly\n        factory(typeof jQuery != 'undefined' ? jQuery : window.Zepto);\n    }\n})(function ($) {\n    \"use strict\";\n\n    /*\n        Usage Note:\n        -----------\n        Do not use both ajaxSubmit and ajaxForm on the same form.  These\n        functions are mutually exclusive.  Use ajaxSubmit if you want\n        to bind your own submit handler to the form.  For example,\n    \n        $(document).ready(function() {\n            $('#myForm').on('submit', function(e) {\n                e.preventDefault(); // <-- important\n                $(this).ajaxSubmit({\n                    target: '#output'\n                });\n            });\n        });\n    \n        Use ajaxForm when you want the plugin to manage all the event binding\n        for you.  For example,\n    \n        $(document).ready(function() {\n            $('#myForm').ajaxForm({\n                target: '#output'\n            });\n        });\n    \n        You can also use ajaxForm with delegation (requires jQuery v1.7+), so the\n        form does not have to exist when you invoke ajaxForm:\n    \n        $('#myForm').ajaxForm({\n            delegation: true,\n            target: '#output'\n        });\n    \n        When using ajaxForm, the ajaxSubmit function will be invoked for you\n        at the appropriate time.\n    */\n\n    /**\n     * Feature detection\n     */\n\n    var feature = {};\n    feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined;\n    feature.formdata = window.FormData !== undefined;\n\n    var hasProp = !!$.fn.prop;\n\n    // attr2 uses prop when it can but checks the return type for\n    // an expected string.  this accounts for the case where a form \n    // contains inputs with names like \"action\" or \"method\"; in those\n    // cases \"prop\" returns the element\n    $.fn.attr2 = function () {\n        if (!hasProp) {\n            return this.attr.apply(this, arguments);\n        }\n        var val = this.prop.apply(this, arguments);\n        if (val && val.jquery || typeof val === 'string') {\n            return val;\n        }\n        return this.attr.apply(this, arguments);\n    };\n\n    /**\n     * ajaxSubmit() provides a mechanism for immediately submitting\n     * an HTML form using AJAX.\n     */\n    $.fn.ajaxSubmit = function (options) {\n        /*jshint scripturl:true */\n\n        // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)\n        if (!this.length) {\n            log('ajaxSubmit: skipping submit process - no element selected');\n            return this;\n        }\n\n        var method,\n            action,\n            url,\n            $form = this;\n\n        if (typeof options == 'function') {\n            options = { success: options };\n        } else if (options === undefined) {\n            options = {};\n        }\n\n        method = options.type || this.attr2('method');\n        action = options.url || this.attr2('action');\n\n        url = typeof action === 'string' ? $.trim(action) : '';\n        url = url || window.location.href || '';\n        if (url) {\n            // clean url (don't include hash vaue)\n            url = (url.match(/^([^#]+)/) || [])[1];\n        }\n\n        options = $.extend(true, {\n            url: url,\n            success: $.ajaxSettings.success,\n            type: method || $.ajaxSettings.type,\n            iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'\n        }, options);\n\n        // hook for manipulating the form data before it is extracted;\n        // convenient for use with rich editors like tinyMCE or FCKEditor\n        var veto = {};\n        this.trigger('form-pre-serialize', [this, options, veto]);\n        if (veto.veto) {\n            log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');\n            return this;\n        }\n\n        // provide opportunity to alter form data before it is serialized\n        if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {\n            log('ajaxSubmit: submit aborted via beforeSerialize callback');\n            return this;\n        }\n\n        var traditional = options.traditional;\n        if (traditional === undefined) {\n            traditional = $.ajaxSettings.traditional;\n        }\n\n        var elements = [];\n        var qx,\n            a = this.formToArray(options.semantic, elements);\n        if (options.data) {\n            options.extraData = options.data;\n            qx = $.param(options.data, traditional);\n        }\n\n        // give pre-submit callback an opportunity to abort the submit\n        if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {\n            log('ajaxSubmit: submit aborted via beforeSubmit callback');\n            return this;\n        }\n\n        // fire vetoable 'validate' event\n        this.trigger('form-submit-validate', [a, this, options, veto]);\n        if (veto.veto) {\n            log('ajaxSubmit: submit vetoed via form-submit-validate trigger');\n            return this;\n        }\n\n        var q = $.param(a, traditional);\n        if (qx) {\n            q = q ? q + '&' + qx : qx;\n        }\n        if (options.type.toUpperCase() == 'GET') {\n            options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;\n            options.data = null; // data is null for 'get'\n        } else {\n            options.data = q; // data is the query string for 'post'\n        }\n\n        var callbacks = [];\n        if (options.resetForm) {\n            callbacks.push(function () {\n                $form.resetForm();\n            });\n        }\n        if (options.clearForm) {\n            callbacks.push(function () {\n                $form.clearForm(options.includeHidden);\n            });\n        }\n\n        // perform a load on the target only if dataType is not provided\n        if (!options.dataType && options.target) {\n            var oldSuccess = options.success || function () {};\n            callbacks.push(function (data) {\n                var fn = options.replaceTarget ? 'replaceWith' : 'html';\n                $(options.target)[fn](data).each(oldSuccess, arguments);\n            });\n        } else if (options.success) {\n            callbacks.push(options.success);\n        }\n\n        options.success = function (data, status, xhr) {\n            // jQuery 1.4+ passes xhr as 3rd arg\n            var context = options.context || this; // jQuery 1.4+ supports scope context\n            for (var i = 0, max = callbacks.length; i < max; i++) {\n                callbacks[i].apply(context, [data, status, xhr || $form, $form]);\n            }\n        };\n\n        if (options.error) {\n            var oldError = options.error;\n            options.error = function (xhr, status, error) {\n                var context = options.context || this;\n                oldError.apply(context, [xhr, status, error, $form]);\n            };\n        }\n\n        if (options.complete) {\n            var oldComplete = options.complete;\n            options.complete = function (xhr, status) {\n                var context = options.context || this;\n                oldComplete.apply(context, [xhr, status, $form]);\n            };\n        }\n\n        // are there files to upload?\n\n        // [value] (issue #113), also see comment:\n        // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219\n        var fileInputs = $('input[type=file]:enabled', this).filter(function () {\n            return $(this).val() !== '';\n        });\n\n        var hasFileInputs = fileInputs.length > 0;\n        var mp = 'multipart/form-data';\n        var multipart = $form.attr('enctype') == mp || $form.attr('encoding') == mp;\n\n        var fileAPI = feature.fileapi && feature.formdata;\n        log(\"fileAPI :\" + fileAPI);\n        var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;\n\n        var jqxhr;\n\n        // options.iframe allows user to force iframe mode\n        // 06-NOV-09: now defaulting to iframe mode if file input is detected\n        if (options.iframe !== false && (options.iframe || shouldUseFrame)) {\n            // hack to fix Safari hang (thanks to Tim Molendijk for this)\n            // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d\n            if (options.closeKeepAlive) {\n                $.get(options.closeKeepAlive, function () {\n                    jqxhr = fileUploadIframe(a);\n                });\n            } else {\n                jqxhr = fileUploadIframe(a);\n            }\n        } else if ((hasFileInputs || multipart) && fileAPI) {\n            jqxhr = fileUploadXhr(a);\n        } else {\n            jqxhr = $.ajax(options);\n        }\n\n        $form.removeData('jqxhr').data('jqxhr', jqxhr);\n\n        // clear element array\n        for (var k = 0; k < elements.length; k++) {\n            elements[k] = null;\n        }\n\n        // fire 'notify' event\n        this.trigger('form-submit-notify', [this, options]);\n        return this;\n\n        // utility fn for deep serialization\n        function deepSerialize(extraData) {\n            var serialized = $.param(extraData, options.traditional).split('&');\n            var len = serialized.length;\n            var result = [];\n            var i, part;\n            for (i = 0; i < len; i++) {\n                // #252; undo param space replacement\n                serialized[i] = serialized[i].replace(/\\+/g, ' ');\n                part = serialized[i].split('=');\n                // #278; use array instead of object storage, favoring array serializations\n                result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\n            }\n            return result;\n        }\n\n        // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)\n        function fileUploadXhr(a) {\n            var formdata = new FormData();\n\n            for (var i = 0; i < a.length; i++) {\n                formdata.append(a[i].name, a[i].value);\n            }\n\n            if (options.extraData) {\n                var serializedData = deepSerialize(options.extraData);\n                for (i = 0; i < serializedData.length; i++) {\n                    if (serializedData[i]) {\n                        formdata.append(serializedData[i][0], serializedData[i][1]);\n                    }\n                }\n            }\n\n            options.data = null;\n\n            var s = $.extend(true, {}, $.ajaxSettings, options, {\n                contentType: false,\n                processData: false,\n                cache: false,\n                type: method || 'POST'\n            });\n\n            if (options.uploadProgress) {\n                // workaround because jqXHR does not expose upload property\n                s.xhr = function () {\n                    var xhr = $.ajaxSettings.xhr();\n                    if (xhr.upload) {\n                        xhr.upload.addEventListener('progress', function (event) {\n                            var percent = 0;\n                            var position = event.loaded || event.position; /*event.position is deprecated*/\n                            var total = event.total;\n                            if (event.lengthComputable) {\n                                percent = Math.ceil(position / total * 100);\n                            }\n                            options.uploadProgress(event, position, total, percent);\n                        }, false);\n                    }\n                    return xhr;\n                };\n            }\n\n            s.data = null;\n            var beforeSend = s.beforeSend;\n            s.beforeSend = function (xhr, o) {\n                //Send FormData() provided by user\n                if (options.formData) {\n                    o.data = options.formData;\n                } else {\n                    o.data = formdata;\n                }\n                if (beforeSend) {\n                    beforeSend.call(this, xhr, o);\n                }\n            };\n            return $.ajax(s);\n        }\n\n        // private function for handling file uploads (hat tip to YAHOO!)\n        function fileUploadIframe(a) {\n            var form = $form[0],\n                el,\n                i,\n                s,\n                g,\n                id,\n                $io,\n                io,\n                xhr,\n                sub,\n                n,\n                timedOut,\n                timeoutHandle;\n            var deferred = $.Deferred();\n\n            // #341\n            deferred.abort = function (status) {\n                xhr.abort(status);\n            };\n\n            if (a) {\n                // ensure that every serialized input is still enabled\n                for (i = 0; i < elements.length; i++) {\n                    el = $(elements[i]);\n                    if (hasProp) {\n                        el.prop('disabled', false);\n                    } else {\n                        el.removeAttr('disabled');\n                    }\n                }\n            }\n\n            s = $.extend(true, {}, $.ajaxSettings, options);\n            s.context = s.context || s;\n            id = 'jqFormIO' + new Date().getTime();\n            if (s.iframeTarget) {\n                $io = $(s.iframeTarget);\n                n = $io.attr2('name');\n                if (!n) {\n                    $io.attr2('name', id);\n                } else {\n                    id = n;\n                }\n            } else {\n                $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />');\n                $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });\n            }\n            io = $io[0];\n\n            xhr = { // mock object\n                aborted: 0,\n                responseText: null,\n                responseXML: null,\n                status: 0,\n                statusText: 'n/a',\n                getAllResponseHeaders: function getAllResponseHeaders() {},\n                getResponseHeader: function getResponseHeader() {},\n                setRequestHeader: function setRequestHeader() {},\n                abort: function abort(status) {\n                    var e = status === 'timeout' ? 'timeout' : 'aborted';\n                    log('aborting upload... ' + e);\n                    this.aborted = 1;\n\n                    try {\n                        // #214, #257\n                        if (io.contentWindow.document.execCommand) {\n                            io.contentWindow.document.execCommand('Stop');\n                        }\n                    } catch (ignore) {}\n\n                    $io.attr('src', s.iframeSrc); // abort op in progress\n                    xhr.error = e;\n                    if (s.error) {\n                        s.error.call(s.context, xhr, e, status);\n                    }\n                    if (g) {\n                        $.event.trigger(\"ajaxError\", [xhr, s, e]);\n                    }\n                    if (s.complete) {\n                        s.complete.call(s.context, xhr, e);\n                    }\n                }\n            };\n\n            g = s.global;\n            // trigger ajax global events so that activity/block indicators work like normal\n            if (g && 0 === $.active++) {\n                $.event.trigger(\"ajaxStart\");\n            }\n            if (g) {\n                $.event.trigger(\"ajaxSend\", [xhr, s]);\n            }\n\n            if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {\n                if (s.global) {\n                    $.active--;\n                }\n                deferred.reject();\n                return deferred;\n            }\n            if (xhr.aborted) {\n                deferred.reject();\n                return deferred;\n            }\n\n            // add submitting element to data if we know it\n            sub = form.clk;\n            if (sub) {\n                n = sub.name;\n                if (n && !sub.disabled) {\n                    s.extraData = s.extraData || {};\n                    s.extraData[n] = sub.value;\n                    if (sub.type == \"image\") {\n                        s.extraData[n + '.x'] = form.clk_x;\n                        s.extraData[n + '.y'] = form.clk_y;\n                    }\n                }\n            }\n\n            var CLIENT_TIMEOUT_ABORT = 1;\n            var SERVER_ABORT = 2;\n\n            function getDoc(frame) {\n                /* it looks like contentWindow or contentDocument do not\n                 * carry the protocol property in ie8, when running under ssl\n                 * frame.document is the only valid response document, since\n                 * the protocol is know but not on the other two objects. strange?\n                 * \"Same origin policy\" http://en.wikipedia.org/wiki/Same_origin_policy\n                 */\n\n                var doc = null;\n\n                // IE8 cascading access check\n                try {\n                    if (frame.contentWindow) {\n                        doc = frame.contentWindow.document;\n                    }\n                } catch (err) {\n                    // IE8 access denied under ssl & missing protocol\n                    log('cannot get iframe.contentWindow document: ' + err);\n                }\n\n                if (doc) {\n                    // successful getting content\n                    return doc;\n                }\n\n                try {\n                    // simply checking may throw in ie8 under ssl or mismatched protocol\n                    doc = frame.contentDocument ? frame.contentDocument : frame.document;\n                } catch (err) {\n                    // last attempt\n                    log('cannot get iframe.contentDocument: ' + err);\n                    doc = frame.document;\n                }\n                return doc;\n            }\n\n            // Rails CSRF hack (thanks to Yvan Barthelemy)\n            var csrf_token = $('meta[name=csrf-token]').attr('content');\n            var csrf_param = $('meta[name=csrf-param]').attr('content');\n            if (csrf_param && csrf_token) {\n                s.extraData = s.extraData || {};\n                s.extraData[csrf_param] = csrf_token;\n            }\n\n            // take a breath so that pending repaints get some cpu time before the upload starts\n            function doSubmit() {\n                // make sure form attrs are set\n                var t = $form.attr2('target'),\n                    a = $form.attr2('action'),\n                    mp = 'multipart/form-data',\n                    et = $form.attr('enctype') || $form.attr('encoding') || mp;\n\n                // update form attrs in IE friendly way\n                form.setAttribute('target', id);\n                if (!method || /post/i.test(method)) {\n                    form.setAttribute('method', 'POST');\n                }\n                if (a != s.url) {\n                    form.setAttribute('action', s.url);\n                }\n\n                // ie borks in some cases when setting encoding\n                if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {\n                    $form.attr({\n                        encoding: 'multipart/form-data',\n                        enctype: 'multipart/form-data'\n                    });\n                }\n\n                // support timout\n                if (s.timeout) {\n                    timeoutHandle = setTimeout(function () {\n                        timedOut = true;cb(CLIENT_TIMEOUT_ABORT);\n                    }, s.timeout);\n                }\n\n                // look for server aborts\n                function checkState() {\n                    try {\n                        var state = getDoc(io).readyState;\n                        log('state = ' + state);\n                        if (state && state.toLowerCase() == 'uninitialized') {\n                            setTimeout(checkState, 50);\n                        }\n                    } catch (e) {\n                        log('Server abort: ', e, ' (', e.name, ')');\n                        cb(SERVER_ABORT);\n                        if (timeoutHandle) {\n                            clearTimeout(timeoutHandle);\n                        }\n                        timeoutHandle = undefined;\n                    }\n                }\n\n                // add \"extra\" data to form if provided in options\n                var extraInputs = [];\n                try {\n                    if (s.extraData) {\n                        for (var n in s.extraData) {\n                            if (s.extraData.hasOwnProperty(n)) {\n                                // if using the $.param format that allows for multiple values with the same name\n                                if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {\n                                    extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]);\n                                } else {\n                                    extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]);\n                                }\n                            }\n                        }\n                    }\n\n                    if (!s.iframeTarget) {\n                        // add iframe to doc and submit the form\n                        $io.appendTo('body');\n                    }\n                    if (io.attachEvent) {\n                        io.attachEvent('onload', cb);\n                    } else {\n                        io.addEventListener('load', cb, false);\n                    }\n                    setTimeout(checkState, 15);\n\n                    try {\n                        form.submit();\n                    } catch (err) {\n                        // just in case form has element with name/id of 'submit'\n                        var submitFn = document.createElement('form').submit;\n                        submitFn.apply(form);\n                    }\n                } finally {\n                    // reset attrs and remove \"extra\" input elements\n                    form.setAttribute('action', a);\n                    form.setAttribute('enctype', et); // #380\n                    if (t) {\n                        form.setAttribute('target', t);\n                    } else {\n                        $form.removeAttr('target');\n                    }\n                    $(extraInputs).remove();\n                }\n            }\n\n            if (s.forceSync) {\n                doSubmit();\n            } else {\n                setTimeout(doSubmit, 10); // this lets dom updates render\n            }\n\n            var data,\n                doc,\n                domCheckCount = 50,\n                callbackProcessed;\n\n            function cb(e) {\n                if (xhr.aborted || callbackProcessed) {\n                    return;\n                }\n\n                doc = getDoc(io);\n                if (!doc) {\n                    log('cannot access response document');\n                    e = SERVER_ABORT;\n                }\n                if (e === CLIENT_TIMEOUT_ABORT && xhr) {\n                    xhr.abort('timeout');\n                    deferred.reject(xhr, 'timeout');\n                    return;\n                } else if (e == SERVER_ABORT && xhr) {\n                    xhr.abort('server abort');\n                    deferred.reject(xhr, 'error', 'server abort');\n                    return;\n                }\n\n                if (!doc || doc.location.href == s.iframeSrc) {\n                    // response not received yet\n                    if (!timedOut) {\n                        return;\n                    }\n                }\n                if (io.detachEvent) {\n                    io.detachEvent('onload', cb);\n                } else {\n                    io.removeEventListener('load', cb, false);\n                }\n\n                var status = 'success',\n                    errMsg;\n                try {\n                    if (timedOut) {\n                        throw 'timeout';\n                    }\n\n                    var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);\n                    log('isXml=' + isXml);\n                    if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {\n                        if (--domCheckCount) {\n                            // in some browsers (Opera) the iframe DOM is not always traversable when\n                            // the onload callback fires, so we loop a bit to accommodate\n                            log('requeing onLoad callback, DOM not available');\n                            setTimeout(cb, 250);\n                            return;\n                        }\n                        // let this fall through because server response could be an empty document\n                        //log('Could not access iframe DOM after mutiple tries.');\n                        //throw 'DOMException: not available';\n                    }\n\n                    //log('response detected');\n                    var docRoot = doc.body ? doc.body : doc.documentElement;\n                    xhr.responseText = docRoot ? docRoot.innerHTML : null;\n                    xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;\n                    if (isXml) {\n                        s.dataType = 'xml';\n                    }\n                    xhr.getResponseHeader = function (header) {\n                        var headers = { 'content-type': s.dataType };\n                        return headers[header.toLowerCase()];\n                    };\n                    // support for XHR 'status' & 'statusText' emulation :\n                    if (docRoot) {\n                        xhr.status = Number(docRoot.getAttribute('status')) || xhr.status;\n                        xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;\n                    }\n\n                    var dt = (s.dataType || '').toLowerCase();\n                    var scr = /(json|script|text)/.test(dt);\n                    if (scr || s.textarea) {\n                        // see if user embedded response in textarea\n                        var ta = doc.getElementsByTagName('textarea')[0];\n                        if (ta) {\n                            xhr.responseText = ta.value;\n                            // support for XHR 'status' & 'statusText' emulation :\n                            xhr.status = Number(ta.getAttribute('status')) || xhr.status;\n                            xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;\n                        } else if (scr) {\n                            // account for browsers injecting pre around json response\n                            var pre = doc.getElementsByTagName('pre')[0];\n                            var b = doc.getElementsByTagName('body')[0];\n                            if (pre) {\n                                xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;\n                            } else if (b) {\n                                xhr.responseText = b.textContent ? b.textContent : b.innerText;\n                            }\n                        }\n                    } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {\n                        xhr.responseXML = toXml(xhr.responseText);\n                    }\n\n                    try {\n                        data = httpData(xhr, dt, s);\n                    } catch (err) {\n                        status = 'parsererror';\n                        xhr.error = errMsg = err || status;\n                    }\n                } catch (err) {\n                    log('error caught: ', err);\n                    status = 'error';\n                    xhr.error = errMsg = err || status;\n                }\n\n                if (xhr.aborted) {\n                    log('upload aborted');\n                    status = null;\n                }\n\n                if (xhr.status) {\n                    // we've set xhr.status\n                    status = xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 ? 'success' : 'error';\n                }\n\n                // ordering of these callbacks/triggers is odd, but that's how $.ajax does it\n                if (status === 'success') {\n                    if (s.success) {\n                        s.success.call(s.context, data, 'success', xhr);\n                    }\n                    deferred.resolve(xhr.responseText, 'success', xhr);\n                    if (g) {\n                        $.event.trigger(\"ajaxSuccess\", [xhr, s]);\n                    }\n                } else if (status) {\n                    if (errMsg === undefined) {\n                        errMsg = xhr.statusText;\n                    }\n                    if (s.error) {\n                        s.error.call(s.context, xhr, status, errMsg);\n                    }\n                    deferred.reject(xhr, 'error', errMsg);\n                    if (g) {\n                        $.event.trigger(\"ajaxError\", [xhr, s, errMsg]);\n                    }\n                }\n\n                if (g) {\n                    $.event.trigger(\"ajaxComplete\", [xhr, s]);\n                }\n\n                if (g && ! --$.active) {\n                    $.event.trigger(\"ajaxStop\");\n                }\n\n                if (s.complete) {\n                    s.complete.call(s.context, xhr, status);\n                }\n\n                callbackProcessed = true;\n                if (s.timeout) {\n                    clearTimeout(timeoutHandle);\n                }\n\n                // clean up\n                setTimeout(function () {\n                    if (!s.iframeTarget) {\n                        $io.remove();\n                    } else {\n                        //adding else to clean up existing iframe response.\n                        $io.attr('src', s.iframeSrc);\n                    }\n                    xhr.responseXML = null;\n                }, 100);\n            }\n\n            var toXml = $.parseXML || function (s, doc) {\n                // use parseXML if available (jQuery 1.5+)\n                if (window.ActiveXObject) {\n                    doc = new ActiveXObject('Microsoft.XMLDOM');\n                    doc.async = 'false';\n                    doc.loadXML(s);\n                } else {\n                    doc = new DOMParser().parseFromString(s, 'text/xml');\n                }\n                return doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror' ? doc : null;\n            };\n            var parseJSON = $.parseJSON || function (s) {\n                /*jslint evil:true */\n                return window['eval']('(' + s + ')');\n            };\n\n            var httpData = function httpData(xhr, type, s) {\n                // mostly lifted from jq1.4.4\n\n                var ct = xhr.getResponseHeader('content-type') || '',\n                    xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,\n                    data = xml ? xhr.responseXML : xhr.responseText;\n\n                if (xml && data.documentElement.nodeName === 'parsererror') {\n                    if ($.error) {\n                        $.error('parsererror');\n                    }\n                }\n                if (s && s.dataFilter) {\n                    data = s.dataFilter(data, type);\n                }\n                if (typeof data === 'string') {\n                    if (type === 'json' || !type && ct.indexOf('json') >= 0) {\n                        data = parseJSON(data);\n                    } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) {\n                        $.globalEval(data);\n                    }\n                }\n                return data;\n            };\n\n            return deferred;\n        }\n    };\n\n    /**\n     * ajaxForm() provides a mechanism for fully automating form submission.\n     *\n     * The advantages of using this method instead of ajaxSubmit() are:\n     *\n     * 1: This method will include coordinates for <input type=\"image\" /> elements (if the element\n     *    is used to submit the form).\n     * 2. This method will include the submit element's name/value data (for the element that was\n     *    used to submit the form).\n     * 3. This method binds the submit() method to the form for you.\n     *\n     * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely\n     * passes the options argument along after properly binding events for submit elements and\n     * the form itself.\n     */\n    $.fn.ajaxForm = function (options) {\n        options = options || {};\n        options.delegation = options.delegation && $.isFunction($.fn.on);\n\n        // in jQuery 1.3+ we can fix mistakes with the ready state\n        if (!options.delegation && this.length === 0) {\n            var o = { s: this.selector, c: this.context };\n            if (!$.isReady && o.s) {\n                log('DOM not ready, queuing ajaxForm');\n                $(function () {\n                    $(o.s, o.c).ajaxForm(options);\n                });\n                return this;\n            }\n            // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()\n            log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));\n            return this;\n        }\n\n        if (options.delegation) {\n            $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement);\n            return this;\n        }\n\n        return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement);\n    };\n\n    // private event handlers\n    function doAjaxSubmit(e) {\n        /*jshint validthis:true */\n        var options = e.data;\n        if (!e.isDefaultPrevented()) {\n            // if event has been canceled, don't proceed\n            e.preventDefault();\n            $(e.target).ajaxSubmit(options); // #365\n        }\n    }\n\n    function captureSubmittingElement(e) {\n        /*jshint validthis:true */\n        var target = e.target;\n        var $el = $(target);\n        if (!$el.is(\"[type=submit],[type=image]\")) {\n            // is this a child element of the submit el?  (ex: a span within a button)\n            var t = $el.closest('[type=submit]');\n            if (t.length === 0) {\n                return;\n            }\n            target = t[0];\n        }\n        var form = this;\n        form.clk = target;\n        if (target.type == 'image') {\n            if (e.offsetX !== undefined) {\n                form.clk_x = e.offsetX;\n                form.clk_y = e.offsetY;\n            } else if (typeof $.fn.offset == 'function') {\n                var offset = $el.offset();\n                form.clk_x = e.pageX - offset.left;\n                form.clk_y = e.pageY - offset.top;\n            } else {\n                form.clk_x = e.pageX - target.offsetLeft;\n                form.clk_y = e.pageY - target.offsetTop;\n            }\n        }\n        // clear form vars\n        setTimeout(function () {\n            form.clk = form.clk_x = form.clk_y = null;\n        }, 100);\n    }\n\n    // ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm\n    $.fn.ajaxFormUnbind = function () {\n        return this.unbind('submit.form-plugin click.form-plugin');\n    };\n\n    /**\n     * formToArray() gathers form element data into an array of objects that can\n     * be passed to any of the following ajax functions: $.get, $.post, or load.\n     * Each object in the array has both a 'name' and 'value' property.  An example of\n     * an array for a simple login form might be:\n     *\n     * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]\n     *\n     * It is this array that is passed to pre-submit callback functions provided to the\n     * ajaxSubmit() and ajaxForm() methods.\n     */\n    $.fn.formToArray = function (semantic, elements) {\n        var a = [];\n        if (this.length === 0) {\n            return a;\n        }\n\n        var form = this[0];\n        var formId = this.attr('id');\n        var els = semantic ? form.getElementsByTagName('*') : form.elements;\n        var els2;\n\n        if (els && !/MSIE [678]/.test(navigator.userAgent)) {\n            // #390\n            els = $(els).get(); // convert to standard array\n        }\n\n        // #386; account for inputs outside the form which use the 'form' attribute\n        if (formId) {\n            els2 = $(':input[form=\"' + formId + '\"]').get(); // hat tip @thet\n            if (els2.length) {\n                els = (els || []).concat(els2);\n            }\n        }\n\n        if (!els || !els.length) {\n            return a;\n        }\n\n        var i, j, n, v, el, max, jmax;\n        for (i = 0, max = els.length; i < max; i++) {\n            el = els[i];\n            n = el.name;\n            if (!n || el.disabled) {\n                continue;\n            }\n\n            if (semantic && form.clk && el.type == \"image\") {\n                // handle image inputs on the fly when semantic == true\n                if (form.clk == el) {\n                    a.push({ name: n, value: $(el).val(), type: el.type });\n                    a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y });\n                }\n                continue;\n            }\n\n            v = $.fieldValue(el, true);\n            if (v && v.constructor == Array) {\n                if (elements) {\n                    elements.push(el);\n                }\n                for (j = 0, jmax = v.length; j < jmax; j++) {\n                    a.push({ name: n, value: v[j] });\n                }\n            } else if (feature.fileapi && el.type == 'file') {\n                if (elements) {\n                    elements.push(el);\n                }\n                var files = el.files;\n                if (files.length) {\n                    for (j = 0; j < files.length; j++) {\n                        a.push({ name: n, value: files[j], type: el.type });\n                    }\n                } else {\n                    // #180\n                    a.push({ name: n, value: '', type: el.type });\n                }\n            } else if (v !== null && typeof v != 'undefined') {\n                if (elements) {\n                    elements.push(el);\n                }\n                a.push({ name: n, value: v, type: el.type, required: el.required });\n            }\n        }\n\n        if (!semantic && form.clk) {\n            // input type=='image' are not found in elements array! handle it here\n            var $input = $(form.clk),\n                input = $input[0];\n            n = input.name;\n            if (n && !input.disabled && input.type == 'image') {\n                a.push({ name: n, value: $input.val() });\n                a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y });\n            }\n        }\n        return a;\n    };\n\n    /**\n     * Serializes form data into a 'submittable' string. This method will return a string\n     * in the format: name1=value1&amp;name2=value2\n     */\n    $.fn.formSerialize = function (semantic) {\n        //hand off to jQuery.param for proper encoding\n        return $.param(this.formToArray(semantic));\n    };\n\n    /**\n     * Serializes all field elements in the jQuery object into a query string.\n     * This method will return a string in the format: name1=value1&amp;name2=value2\n     */\n    $.fn.fieldSerialize = function (successful) {\n        var a = [];\n        this.each(function () {\n            var n = this.name;\n            if (!n) {\n                return;\n            }\n            var v = $.fieldValue(this, successful);\n            if (v && v.constructor == Array) {\n                for (var i = 0, max = v.length; i < max; i++) {\n                    a.push({ name: n, value: v[i] });\n                }\n            } else if (v !== null && typeof v != 'undefined') {\n                a.push({ name: this.name, value: v });\n            }\n        });\n        //hand off to jQuery.param for proper encoding\n        return $.param(a);\n    };\n\n    /**\n     * Returns the value(s) of the element in the matched set.  For example, consider the following form:\n     *\n     *  <form><fieldset>\n     *      <input name=\"A\" type=\"text\" />\n     *      <input name=\"A\" type=\"text\" />\n     *      <input name=\"B\" type=\"checkbox\" value=\"B1\" />\n     *      <input name=\"B\" type=\"checkbox\" value=\"B2\"/>\n     *      <input name=\"C\" type=\"radio\" value=\"C1\" />\n     *      <input name=\"C\" type=\"radio\" value=\"C2\" />\n     *  </fieldset></form>\n     *\n     *  var v = $('input[type=text]').fieldValue();\n     *  // if no values are entered into the text inputs\n     *  v == ['','']\n     *  // if values entered into the text inputs are 'foo' and 'bar'\n     *  v == ['foo','bar']\n     *\n     *  var v = $('input[type=checkbox]').fieldValue();\n     *  // if neither checkbox is checked\n     *  v === undefined\n     *  // if both checkboxes are checked\n     *  v == ['B1', 'B2']\n     *\n     *  var v = $('input[type=radio]').fieldValue();\n     *  // if neither radio is checked\n     *  v === undefined\n     *  // if first radio is checked\n     *  v == ['C1']\n     *\n     * The successful argument controls whether or not the field element must be 'successful'\n     * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).\n     * The default value of the successful argument is true.  If this value is false the value(s)\n     * for each element is returned.\n     *\n     * Note: This method *always* returns an array.  If no valid value can be determined the\n     *    array will be empty, otherwise it will contain one or more values.\n     */\n    $.fn.fieldValue = function (successful) {\n        for (var val = [], i = 0, max = this.length; i < max; i++) {\n            var el = this[i];\n            var v = $.fieldValue(el, successful);\n            if (v === null || typeof v == 'undefined' || v.constructor == Array && !v.length) {\n                continue;\n            }\n            if (v.constructor == Array) {\n                $.merge(val, v);\n            } else {\n                val.push(v);\n            }\n        }\n        return val;\n    };\n\n    /**\n     * Returns the value of the field element.\n     */\n    $.fieldValue = function (el, successful) {\n        var n = el.name,\n            t = el.type,\n            tag = el.tagName.toLowerCase();\n        if (successful === undefined) {\n            successful = true;\n        }\n\n        if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) {\n            return null;\n        }\n\n        if (tag == 'select') {\n            var index = el.selectedIndex;\n            if (index < 0) {\n                return null;\n            }\n            var a = [],\n                ops = el.options;\n            var one = t == 'select-one';\n            var max = one ? index + 1 : ops.length;\n            for (var i = one ? index : 0; i < max; i++) {\n                var op = ops[i];\n                if (op.selected) {\n                    var v = op.value;\n                    if (!v) {\n                        // extra pain for IE...\n                        v = op.attributes && op.attributes.value && !op.attributes.value.specified ? op.text : op.value;\n                    }\n                    if (one) {\n                        return v;\n                    }\n                    a.push(v);\n                }\n            }\n            return a;\n        }\n        return $(el).val();\n    };\n\n    /**\n     * Clears the form data.  Takes the following actions on the form's input fields:\n     *  - input text fields will have their 'value' property set to the empty string\n     *  - select elements will have their 'selectedIndex' property set to -1\n     *  - checkbox and radio inputs will have their 'checked' property set to false\n     *  - inputs of type submit, button, reset, and hidden will *not* be effected\n     *  - button elements will *not* be effected\n     */\n    $.fn.clearForm = function (includeHidden) {\n        return this.each(function () {\n            $('input,select,textarea', this).clearFields(includeHidden);\n        });\n    };\n\n    /**\n     * Clears the selected form elements.\n     */\n    $.fn.clearFields = $.fn.clearInputs = function (includeHidden) {\n        var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list\n        return this.each(function () {\n            var t = this.type,\n                tag = this.tagName.toLowerCase();\n            if (re.test(t) || tag == 'textarea') {\n                this.value = '';\n            } else if (t == 'checkbox' || t == 'radio') {\n                this.checked = false;\n            } else if (tag == 'select') {\n                this.selectedIndex = -1;\n            } else if (t == \"file\") {\n                if (/MSIE/.test(navigator.userAgent)) {\n                    $(this).replaceWith($(this).clone(true));\n                } else {\n                    $(this).val('');\n                }\n            } else if (includeHidden) {\n                // includeHidden can be the value true, or it can be a selector string\n                // indicating a special test; for example:\n                //  $('#myForm').clearForm('.special:hidden')\n                // the above would clean hidden inputs that have the class of 'special'\n                if (includeHidden === true && /hidden/.test(t) || typeof includeHidden == 'string' && $(this).is(includeHidden)) {\n                    this.value = '';\n                }\n            }\n        });\n    };\n\n    /**\n     * Resets the form data.  Causes all form elements to be reset to their original value.\n     */\n    $.fn.resetForm = function () {\n        return this.each(function () {\n            // guard against an input with the name of 'reset'\n            // note that IE reports the reset function as an 'object'\n            if (typeof this.reset == 'function' || _typeof(this.reset) == 'object' && !this.reset.nodeType) {\n                this.reset();\n            }\n        });\n    };\n\n    /**\n     * Enables or disables any matching elements.\n     */\n    $.fn.enable = function (b) {\n        if (b === undefined) {\n            b = true;\n        }\n        return this.each(function () {\n            this.disabled = !b;\n        });\n    };\n\n    /**\n     * Checks/unchecks any matching checkboxes or radio buttons and\n     * selects/deselects and matching option elements.\n     */\n    $.fn.selected = function (select) {\n        if (select === undefined) {\n            select = true;\n        }\n        return this.each(function () {\n            var t = this.type;\n            if (t == 'checkbox' || t == 'radio') {\n                this.checked = select;\n            } else if (this.tagName.toLowerCase() == 'option') {\n                var $sel = $(this).parent('select');\n                if (select && $sel[0] && $sel[0].type == 'select-one') {\n                    // deselect all other options\n                    $sel.find('option').selected(false);\n                }\n                this.selected = select;\n            }\n        });\n    };\n\n    // expose debug var\n    $.fn.ajaxSubmit.debug = false;\n\n    // helper fn for console logging\n    function log() {\n        if (!$.fn.ajaxSubmit.debug) {\n            return;\n        }\n        var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, '');\n        if (window.console && window.console.log) {\n            window.console.log(msg);\n        } else if (window.opera && window.opera.postError) {\n            window.opera.postError(msg);\n        }\n    }\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.qtip.nightly.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.qtip.nightly.js ***!
  \**************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n * qTip2 - Pretty powerful tooltips - v2.2.1-29-\n * http://qtip2.com\n *\n * Copyright (c) 2015 \n * Released under the MIT licenses\n * http://jquery.org/license\n *\n * Date: Tue Dec 8 2015 05:50 EST-0500\n * Plugins: tips modal viewport svg imagemap ie6\n * Styles: core basic css3\n */\n/*global window: false, jQuery: false, console: false, define: false */\n\n/* Cache window, document, undefined */\n(function (window, document, undefined) {\n\n\t// Uses AMD or browser globals to create a jQuery plugin.\n\t(function (factory) {\n\t\t\"use strict\";\n\n\t\tif (typeof define === 'function' && define.amd) {\n\t\t\tdefine(['jquery'], factory);\n\t\t} else if (jQuery && !jQuery.fn.qtip) {\n\t\t\tfactory(jQuery);\n\t\t}\n\t})(function ($) {\n\t\t\"use strict\"; // Enable ECMAScript \"strict\" operation for this function. See more: http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\n\n\t\t; // Munge the primitives - Paul Irish tip\n\t\tvar TRUE = true,\n\t\t    FALSE = false,\n\t\t    NULL = null,\n\n\n\t\t// Common variables\n\t\tX = 'x',\n\t\t    Y = 'y',\n\t\t    WIDTH = 'width',\n\t\t    HEIGHT = 'height',\n\n\n\t\t// Positioning sides\n\t\tTOP = 'top',\n\t\t    LEFT = 'left',\n\t\t    BOTTOM = 'bottom',\n\t\t    RIGHT = 'right',\n\t\t    CENTER = 'center',\n\n\n\t\t// Position adjustment types\n\t\tFLIP = 'flip',\n\t\t    FLIPINVERT = 'flipinvert',\n\t\t    SHIFT = 'shift',\n\n\n\t\t// Shortcut vars\n\t\tQTIP,\n\t\t    PROTOTYPE,\n\t\t    CORNER,\n\t\t    CHECKS,\n\t\t    PLUGINS = {},\n\t\t    NAMESPACE = 'qtip',\n\t\t    ATTR_HAS = 'data-hasqtip',\n\t\t    ATTR_ID = 'data-qtip-id',\n\t\t    WIDGET = ['ui-widget', 'ui-tooltip'],\n\t\t    SELECTOR = '.' + NAMESPACE,\n\t\t    INACTIVE_EVENTS = 'click dblclick mousedown mouseup mousemove mouseleave mouseenter'.split(' '),\n\t\t    CLASS_FIXED = NAMESPACE + '-fixed',\n\t\t    CLASS_DEFAULT = NAMESPACE + '-default',\n\t\t    CLASS_FOCUS = NAMESPACE + '-focus',\n\t\t    CLASS_HOVER = NAMESPACE + '-hover',\n\t\t    CLASS_DISABLED = NAMESPACE + '-disabled',\n\t\t    replaceSuffix = '_replacedByqTip',\n\t\t    oldtitle = 'oldtitle',\n\t\t    trackingBound,\n\n\n\t\t// Browser detection\n\t\tBROWSER = {\n\t\t\t/*\n    * IE version detection\n    *\n    * Adapted from: http://ajaxian.com/archives/attack-of-the-ie-conditional-comment\n    * Credit to James Padolsey for the original implemntation!\n    */\n\t\t\tie: function () {\n\t\t\t\tfor (var v = 4, i = document.createElement(\"div\"); (i.innerHTML = \"<!--[if gt IE \" + v + \"]><i></i><![endif]-->\") && i.getElementsByTagName(\"i\")[0]; v += 1) {}\n\t\t\t\treturn v > 4 ? v : NaN;\n\t\t\t}(),\n\n\t\t\t/*\n    * iOS version detection\n    */\n\t\t\tiOS: parseFloat(('' + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1]).replace('undefined', '3_2').replace('_', '.').replace('_', '')) || FALSE\n\t\t};\n\t\t;function QTip(target, options, id, attr) {\n\t\t\t// Elements and ID\n\t\t\tthis.id = id;\n\t\t\tthis.target = target;\n\t\t\tthis.tooltip = NULL;\n\t\t\tthis.elements = { target: target };\n\n\t\t\t// Internal constructs\n\t\t\tthis._id = NAMESPACE + '-' + id;\n\t\t\tthis.timers = { img: {} };\n\t\t\tthis.options = options;\n\t\t\tthis.plugins = {};\n\n\t\t\t// Cache object\n\t\t\tthis.cache = {\n\t\t\t\tevent: {},\n\t\t\t\ttarget: $(),\n\t\t\t\tdisabled: FALSE,\n\t\t\t\tattr: attr,\n\t\t\t\tonTooltip: FALSE,\n\t\t\t\tlastClass: ''\n\t\t\t};\n\n\t\t\t// Set the initial flags\n\t\t\tthis.rendered = this.destroyed = this.disabled = this.waiting = this.hiddenDuringWait = this.positioning = this.triggering = FALSE;\n\t\t}\n\t\tPROTOTYPE = QTip.prototype;\n\n\t\tPROTOTYPE._when = function (deferreds) {\n\t\t\treturn $.when.apply($, deferreds);\n\t\t};\n\n\t\tPROTOTYPE.render = function (show) {\n\t\t\tif (this.rendered || this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t} // If tooltip has already been rendered, exit\n\n\t\t\tvar self = this,\n\t\t\t    options = this.options,\n\t\t\t    cache = this.cache,\n\t\t\t    elements = this.elements,\n\t\t\t    text = options.content.text,\n\t\t\t    title = options.content.title,\n\t\t\t    button = options.content.button,\n\t\t\t    posOptions = options.position,\n\t\t\t    namespace = '.' + this._id + ' ',\n\t\t\t    deferreds = [],\n\t\t\t    tooltip;\n\n\t\t\t// Add ARIA attributes to target\n\t\t\t$.attr(this.target[0], 'aria-describedby', this._id);\n\n\t\t\t// Create public position object that tracks current position corners\n\t\t\tcache.posClass = this._createPosClass((this.position = { my: posOptions.my, at: posOptions.at }).my);\n\n\t\t\t// Create tooltip element\n\t\t\tthis.tooltip = elements.tooltip = tooltip = $('<div/>', {\n\t\t\t\t'id': this._id,\n\t\t\t\t'class': [NAMESPACE, CLASS_DEFAULT, options.style.classes, cache.posClass].join(' '),\n\t\t\t\t'width': options.style.width || '',\n\t\t\t\t'height': options.style.height || '',\n\t\t\t\t'tracking': posOptions.target === 'mouse' && posOptions.adjust.mouse,\n\n\t\t\t\t/* ARIA specific attributes */\n\t\t\t\t'role': 'alert',\n\t\t\t\t'aria-live': 'polite',\n\t\t\t\t'aria-atomic': FALSE,\n\t\t\t\t'aria-describedby': this._id + '-content',\n\t\t\t\t'aria-hidden': TRUE\n\t\t\t}).toggleClass(CLASS_DISABLED, this.disabled).attr(ATTR_ID, this.id).data(NAMESPACE, this).appendTo(posOptions.container).append(\n\t\t\t// Create content element\n\t\t\telements.content = $('<div />', {\n\t\t\t\t'class': NAMESPACE + '-content',\n\t\t\t\t'id': this._id + '-content',\n\t\t\t\t'aria-atomic': TRUE\n\t\t\t}));\n\n\t\t\t// Set rendered flag and prevent redundant reposition calls for now\n\t\t\tthis.rendered = -1;\n\t\t\tthis.positioning = TRUE;\n\n\t\t\t// Create title...\n\t\t\tif (title) {\n\t\t\t\tthis._createTitle();\n\n\t\t\t\t// Update title only if its not a callback (called in toggle if so)\n\t\t\t\tif (!$.isFunction(title)) {\n\t\t\t\t\tdeferreds.push(this._updateTitle(title, FALSE));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create button\n\t\t\tif (button) {\n\t\t\t\tthis._createButton();\n\t\t\t}\n\n\t\t\t// Set proper rendered flag and update content if not a callback function (called in toggle)\n\t\t\tif (!$.isFunction(text)) {\n\t\t\t\tdeferreds.push(this._updateContent(text, FALSE));\n\t\t\t}\n\t\t\tthis.rendered = TRUE;\n\n\t\t\t// Setup widget classes\n\t\t\tthis._setWidget();\n\n\t\t\t// Initialize 'render' plugins\n\t\t\t$.each(PLUGINS, function (name) {\n\t\t\t\tvar instance;\n\t\t\t\tif (this.initialize === 'render' && (instance = this(self))) {\n\t\t\t\t\tself.plugins[name] = instance;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Unassign initial events and assign proper events\n\t\t\tthis._unassignEvents();\n\t\t\tthis._assignEvents();\n\n\t\t\t// When deferreds have completed\n\t\t\tthis._when(deferreds).then(function () {\n\t\t\t\t// tooltiprender event\n\t\t\t\tself._trigger('render');\n\n\t\t\t\t// Reset flags\n\t\t\t\tself.positioning = FALSE;\n\n\t\t\t\t// Show tooltip if not hidden during wait period\n\t\t\t\tif (!self.hiddenDuringWait && (options.show.ready || show)) {\n\t\t\t\t\tself.toggle(TRUE, cache.event, FALSE);\n\t\t\t\t}\n\t\t\t\tself.hiddenDuringWait = FALSE;\n\t\t\t});\n\n\t\t\t// Expose API\n\t\t\tQTIP.api[this.id] = this;\n\n\t\t\treturn this;\n\t\t};\n\n\t\tPROTOTYPE.destroy = function (immediate) {\n\t\t\t// Set flag the signify destroy is taking place to plugins\n\t\t\t// and ensure it only gets destroyed once!\n\t\t\tif (this.destroyed) {\n\t\t\t\treturn this.target;\n\t\t\t}\n\n\t\t\tfunction process() {\n\t\t\t\tif (this.destroyed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.destroyed = TRUE;\n\n\t\t\t\tvar target = this.target,\n\t\t\t\t    title = target.attr(oldtitle),\n\t\t\t\t    timer;\n\n\t\t\t\t// Destroy tooltip if rendered\n\t\t\t\tif (this.rendered) {\n\t\t\t\t\tthis.tooltip.stop(1, 0).find('*').remove().end().remove();\n\t\t\t\t}\n\n\t\t\t\t// Destroy all plugins\n\t\t\t\t$.each(this.plugins, function (name) {\n\t\t\t\t\tthis.destroy && this.destroy();\n\t\t\t\t});\n\n\t\t\t\t// Clear timers\n\t\t\t\tfor (timer in this.timers) {\n\t\t\t\t\tclearTimeout(this.timers[timer]);\n\t\t\t\t}\n\n\t\t\t\t// Remove api object and ARIA attributes\n\t\t\t\ttarget.removeData(NAMESPACE).removeAttr(ATTR_ID).removeAttr(ATTR_HAS).removeAttr('aria-describedby');\n\n\t\t\t\t// Reset old title attribute if removed\n\t\t\t\tif (this.options.suppress && title) {\n\t\t\t\t\ttarget.attr('title', title).removeAttr(oldtitle);\n\t\t\t\t}\n\n\t\t\t\t// Remove qTip events associated with this API\n\t\t\t\tthis._unassignEvents();\n\n\t\t\t\t// Remove ID from used id objects, and delete object references\n\t\t\t\t// for better garbage collection and leak protection\n\t\t\t\tthis.options = this.elements = this.cache = this.timers = this.plugins = this.mouse = NULL;\n\n\t\t\t\t// Delete epoxsed API object\n\t\t\t\tdelete QTIP.api[this.id];\n\t\t\t}\n\n\t\t\t// If an immediate destroy is needed\n\t\t\tif ((immediate !== TRUE || this.triggering === 'hide') && this.rendered) {\n\t\t\t\tthis.tooltip.one('tooltiphidden', $.proxy(process, this));\n\t\t\t\t!this.triggering && this.hide();\n\t\t\t}\n\n\t\t\t// If we're not in the process of hiding... process\n\t\t\telse {\n\t\t\t\t\tprocess.call(this);\n\t\t\t\t}\n\n\t\t\treturn this.target;\n\t\t};\n\t\t;function invalidOpt(a) {\n\t\t\treturn a === NULL || $.type(a) !== 'object';\n\t\t}\n\n\t\tfunction invalidContent(c) {\n\t\t\treturn !($.isFunction(c) || c && c.attr || c.length || $.type(c) === 'object' && (c.jquery || c.then));\n\t\t}\n\n\t\t// Option object sanitizer\n\t\tfunction sanitizeOptions(opts) {\n\t\t\tvar content, text, ajax, once;\n\n\t\t\tif (invalidOpt(opts)) {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\tif (invalidOpt(opts.metadata)) {\n\t\t\t\topts.metadata = { type: opts.metadata };\n\t\t\t}\n\n\t\t\tif ('content' in opts) {\n\t\t\t\tcontent = opts.content;\n\n\t\t\t\tif (invalidOpt(content) || content.jquery || content.done) {\n\t\t\t\t\tcontent = opts.content = {\n\t\t\t\t\t\ttext: text = invalidContent(content) ? FALSE : content\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\ttext = content.text;\n\t\t\t\t}\n\n\t\t\t\t// DEPRECATED - Old content.ajax plugin functionality\n\t\t\t\t// Converts it into the proper Deferred syntax\n\t\t\t\tif ('ajax' in content) {\n\t\t\t\t\tajax = content.ajax;\n\t\t\t\t\tonce = ajax && ajax.once !== FALSE;\n\t\t\t\t\tdelete content.ajax;\n\n\t\t\t\t\tcontent.text = function (event, api) {\n\t\t\t\t\t\tvar loading = text || $(this).attr(api.options.content.attr) || 'Loading...',\n\t\t\t\t\t\t    deferred = $.ajax($.extend({}, ajax, { context: api })).then(ajax.success, NULL, ajax.error).then(function (content) {\n\t\t\t\t\t\t\tif (content && once) {\n\t\t\t\t\t\t\t\tapi.set('content.text', content);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn content;\n\t\t\t\t\t\t}, function (xhr, status, error) {\n\t\t\t\t\t\t\tif (api.destroyed || xhr.status === 0) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tapi.set('content.text', status + ': ' + error);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn !once ? (api.set('content.text', loading), deferred) : loading;\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif ('title' in content) {\n\t\t\t\t\tif ($.isPlainObject(content.title)) {\n\t\t\t\t\t\tcontent.button = content.title.button;\n\t\t\t\t\t\tcontent.title = content.title.text;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (invalidContent(content.title || FALSE)) {\n\t\t\t\t\t\tcontent.title = FALSE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ('position' in opts && invalidOpt(opts.position)) {\n\t\t\t\topts.position = { my: opts.position, at: opts.position };\n\t\t\t}\n\n\t\t\tif ('show' in opts && invalidOpt(opts.show)) {\n\t\t\t\topts.show = opts.show.jquery ? { target: opts.show } : opts.show === TRUE ? { ready: TRUE } : { event: opts.show };\n\t\t\t}\n\n\t\t\tif ('hide' in opts && invalidOpt(opts.hide)) {\n\t\t\t\topts.hide = opts.hide.jquery ? { target: opts.hide } : { event: opts.hide };\n\t\t\t}\n\n\t\t\tif ('style' in opts && invalidOpt(opts.style)) {\n\t\t\t\topts.style = { classes: opts.style };\n\t\t\t}\n\n\t\t\t// Sanitize plugin options\n\t\t\t$.each(PLUGINS, function () {\n\t\t\t\tthis.sanitize && this.sanitize(opts);\n\t\t\t});\n\n\t\t\treturn opts;\n\t\t}\n\n\t\t// Setup builtin .set() option checks\n\t\tCHECKS = PROTOTYPE.checks = {\n\t\t\tbuiltin: {\n\t\t\t\t// Core checks\n\t\t\t\t'^id$': function id$(obj, o, v, prev) {\n\t\t\t\t\tvar id = v === TRUE ? QTIP.nextid : v,\n\t\t\t\t\t    new_id = NAMESPACE + '-' + id;\n\n\t\t\t\t\tif (id !== FALSE && id.length > 0 && !$('#' + new_id).length) {\n\t\t\t\t\t\tthis._id = new_id;\n\n\t\t\t\t\t\tif (this.rendered) {\n\t\t\t\t\t\t\tthis.tooltip[0].id = this._id;\n\t\t\t\t\t\t\tthis.elements.content[0].id = this._id + '-content';\n\t\t\t\t\t\t\tthis.elements.title[0].id = this._id + '-title';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj[o] = prev;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'^prerender': function prerender(obj, o, v) {\n\t\t\t\t\tv && !this.rendered && this.render(this.options.show.ready);\n\t\t\t\t},\n\n\t\t\t\t// Content checks\n\t\t\t\t'^content.text$': function contentText$(obj, o, v) {\n\t\t\t\t\tthis._updateContent(v);\n\t\t\t\t},\n\t\t\t\t'^content.attr$': function contentAttr$(obj, o, v, prev) {\n\t\t\t\t\tif (this.options.content.text === this.target.attr(prev)) {\n\t\t\t\t\t\tthis._updateContent(this.target.attr(v));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'^content.title$': function contentTitle$(obj, o, v) {\n\t\t\t\t\t// Remove title if content is null\n\t\t\t\t\tif (!v) {\n\t\t\t\t\t\treturn this._removeTitle();\n\t\t\t\t\t}\n\n\t\t\t\t\t// If title isn't already created, create it now and update\n\t\t\t\t\tv && !this.elements.title && this._createTitle();\n\t\t\t\t\tthis._updateTitle(v);\n\t\t\t\t},\n\t\t\t\t'^content.button$': function contentButton$(obj, o, v) {\n\t\t\t\t\tthis._updateButton(v);\n\t\t\t\t},\n\t\t\t\t'^content.title.(text|button)$': function contentTitleTextButton$(obj, o, v) {\n\t\t\t\t\tthis.set('content.' + o, v); // Backwards title.text/button compat\n\t\t\t\t},\n\n\t\t\t\t// Position checks\n\t\t\t\t'^position.(my|at)$': function positionMyAt$(obj, o, v) {\n\t\t\t\t\tif ('string' === typeof v) {\n\t\t\t\t\t\tthis.position[o] = obj[o] = new CORNER(v, o === 'at');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'^position.container$': function positionContainer$(obj, o, v) {\n\t\t\t\t\tthis.rendered && this.tooltip.appendTo(v);\n\t\t\t\t},\n\n\t\t\t\t// Show checks\n\t\t\t\t'^show.ready$': function showReady$(obj, o, v) {\n\t\t\t\t\tv && (!this.rendered && this.render(TRUE) || this.toggle(TRUE));\n\t\t\t\t},\n\n\t\t\t\t// Style checks\n\t\t\t\t'^style.classes$': function styleClasses$(obj, o, v, p) {\n\t\t\t\t\tthis.rendered && this.tooltip.removeClass(p).addClass(v);\n\t\t\t\t},\n\t\t\t\t'^style.(width|height)': function styleWidthHeight(obj, o, v) {\n\t\t\t\t\tthis.rendered && this.tooltip.css(o, v);\n\t\t\t\t},\n\t\t\t\t'^style.widget|content.title': function styleWidgetContentTitle() {\n\t\t\t\t\tthis.rendered && this._setWidget();\n\t\t\t\t},\n\t\t\t\t'^style.def': function styleDef(obj, o, v) {\n\t\t\t\t\tthis.rendered && this.tooltip.toggleClass(CLASS_DEFAULT, !!v);\n\t\t\t\t},\n\n\t\t\t\t// Events check\n\t\t\t\t'^events.(render|show|move|hide|focus|blur)$': function eventsRenderShowMoveHideFocusBlur$(obj, o, v) {\n\t\t\t\t\tthis.rendered && this.tooltip[($.isFunction(v) ? '' : 'un') + 'bind']('tooltip' + o, v);\n\t\t\t\t},\n\n\t\t\t\t// Properties which require event reassignment\n\t\t\t\t'^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)': function showHidePositionEventTargetFixedInactiveLeaveDistanceViewportAdjust() {\n\t\t\t\t\tif (!this.rendered) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set tracking flag\n\t\t\t\t\tvar posOptions = this.options.position;\n\t\t\t\t\tthis.tooltip.attr('tracking', posOptions.target === 'mouse' && posOptions.adjust.mouse);\n\n\t\t\t\t\t// Reassign events\n\t\t\t\t\tthis._unassignEvents();\n\t\t\t\t\tthis._assignEvents();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Dot notation converter\n\t\tfunction convertNotation(options, notation) {\n\t\t\tvar i = 0,\n\t\t\t    obj,\n\t\t\t    option = options,\n\n\n\t\t\t// Split notation into array\n\t\t\tlevels = notation.split('.');\n\n\t\t\t// Loop through\n\t\t\twhile (option = option[levels[i++]]) {\n\t\t\t\tif (i < levels.length) {\n\t\t\t\t\tobj = option;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [obj || options, levels.pop()];\n\t\t}\n\n\t\tPROTOTYPE.get = function (notation) {\n\t\t\tif (this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar o = convertNotation(this.options, notation.toLowerCase()),\n\t\t\t    result = o[0][o[1]];\n\n\t\t\treturn result.precedance ? result.string() : result;\n\t\t};\n\n\t\tfunction setCallback(notation, args) {\n\t\t\tvar category, rule, match;\n\n\t\t\tfor (category in this.checks) {\n\t\t\t\tfor (rule in this.checks[category]) {\n\t\t\t\t\tif (match = new RegExp(rule, 'i').exec(notation)) {\n\t\t\t\t\t\targs.push(match);\n\n\t\t\t\t\t\tif (category === 'builtin' || this.plugins[category]) {\n\t\t\t\t\t\t\tthis.checks[category][rule].apply(this.plugins[category] || this, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rmove = /^position\\.(my|at|adjust|target|container|viewport)|style|content|show\\.ready/i,\n\t\t    rrender = /^prerender|show\\.ready/i;\n\n\t\tPROTOTYPE.set = function (option, value) {\n\t\t\tif (this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar rendered = this.rendered,\n\t\t\t    reposition = FALSE,\n\t\t\t    options = this.options,\n\t\t\t    checks = this.checks,\n\t\t\t    name;\n\n\t\t\t// Convert singular option/value pair into object form\n\t\t\tif ('string' === typeof option) {\n\t\t\t\tname = option;option = {};option[name] = value;\n\t\t\t} else {\n\t\t\t\toption = $.extend({}, option);\n\t\t\t}\n\n\t\t\t// Set all of the defined options to their new values\n\t\t\t$.each(option, function (notation, value) {\n\t\t\t\tif (rendered && rrender.test(notation)) {\n\t\t\t\t\tdelete option[notation];return;\n\t\t\t\t}\n\n\t\t\t\t// Set new obj value\n\t\t\t\tvar obj = convertNotation(options, notation.toLowerCase()),\n\t\t\t\t    previous;\n\t\t\t\tprevious = obj[0][obj[1]];\n\t\t\t\tobj[0][obj[1]] = value && value.nodeType ? $(value) : value;\n\n\t\t\t\t// Also check if we need to reposition\n\t\t\t\treposition = rmove.test(notation) || reposition;\n\n\t\t\t\t// Set the new params for the callback\n\t\t\t\toption[notation] = [obj[0], obj[1], value, previous];\n\t\t\t});\n\n\t\t\t// Re-sanitize options\n\t\t\tsanitizeOptions(options);\n\n\t\t\t/*\n    * Execute any valid callbacks for the set options\n    * Also set positioning flag so we don't get loads of redundant repositioning calls.\n    */\n\t\t\tthis.positioning = TRUE;\n\t\t\t$.each(option, $.proxy(setCallback, this));\n\t\t\tthis.positioning = FALSE;\n\n\t\t\t// Update position if needed\n\t\t\tif (this.rendered && this.tooltip[0].offsetWidth > 0 && reposition) {\n\t\t\t\tthis.reposition(options.position.target === 'mouse' ? NULL : this.cache.event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\t\t;PROTOTYPE._update = function (content, element, reposition) {\n\t\t\tvar self = this,\n\t\t\t    cache = this.cache;\n\n\t\t\t// Make sure tooltip is rendered and content is defined. If not return\n\t\t\tif (!this.rendered || !content) {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// Use function to parse content\n\t\t\tif ($.isFunction(content)) {\n\t\t\t\tcontent = content.call(this.elements.target, cache.event, this) || '';\n\t\t\t}\n\n\t\t\t// Handle deferred content\n\t\t\tif ($.isFunction(content.then)) {\n\t\t\t\tcache.waiting = TRUE;\n\t\t\t\treturn content.then(function (c) {\n\t\t\t\t\tcache.waiting = FALSE;\n\t\t\t\t\treturn self._update(c, element);\n\t\t\t\t}, NULL, function (e) {\n\t\t\t\t\treturn self._update(e, element);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If content is null... return false\n\t\t\tif (content === FALSE || !content && content !== '') {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// Append new content if its a DOM array and show it if hidden\n\t\t\tif (content.jquery && content.length > 0) {\n\t\t\t\telement.empty().append(content.css({ display: 'block', visibility: 'visible' }));\n\t\t\t}\n\n\t\t\t// Content is a regular string, insert the new content\n\t\t\telse {\n\t\t\t\t\telement.html(content);\n\t\t\t\t}\n\n\t\t\t// Wait for content to be loaded, and reposition\n\t\t\treturn this._waitForContent(element).then(function (images) {\n\t\t\t\tif (self.rendered && self.tooltip[0].offsetWidth > 0) {\n\t\t\t\t\tself.reposition(cache.event, !images.length);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tPROTOTYPE._waitForContent = function (element) {\n\t\t\tvar cache = this.cache;\n\n\t\t\t// Set flag\n\t\t\tcache.waiting = TRUE;\n\n\t\t\t// If imagesLoaded is included, ensure images have loaded and return promise\n\t\t\treturn ($.fn.imagesLoaded ? element.imagesLoaded() : $.Deferred().resolve([])).done(function () {\n\t\t\t\tcache.waiting = FALSE;\n\t\t\t}).promise();\n\t\t};\n\n\t\tPROTOTYPE._updateContent = function (content, reposition) {\n\t\t\tthis._update(content, this.elements.content, reposition);\n\t\t};\n\n\t\tPROTOTYPE._updateTitle = function (content, reposition) {\n\t\t\tif (this._update(content, this.elements.title, reposition) === FALSE) {\n\t\t\t\tthis._removeTitle(FALSE);\n\t\t\t}\n\t\t};\n\n\t\tPROTOTYPE._createTitle = function () {\n\t\t\tvar elements = this.elements,\n\t\t\t    id = this._id + '-title';\n\n\t\t\t// Destroy previous title element, if present\n\t\t\tif (elements.titlebar) {\n\t\t\t\tthis._removeTitle();\n\t\t\t}\n\n\t\t\t// Create title bar and title elements\n\t\t\telements.titlebar = $('<div />', {\n\t\t\t\t'class': NAMESPACE + '-titlebar ' + (this.options.style.widget ? createWidgetClass('header') : '')\n\t\t\t}).append(elements.title = $('<div />', {\n\t\t\t\t'id': id,\n\t\t\t\t'class': NAMESPACE + '-title',\n\t\t\t\t'aria-atomic': TRUE\n\t\t\t})).insertBefore(elements.content)\n\n\t\t\t// Button-specific events\n\t\t\t.delegate('.qtip-close', 'mousedown keydown mouseup keyup mouseout', function (event) {\n\t\t\t\t$(this).toggleClass('ui-state-active ui-state-focus', event.type.substr(-4) === 'down');\n\t\t\t}).delegate('.qtip-close', 'mouseover mouseout', function (event) {\n\t\t\t\t$(this).toggleClass('ui-state-hover', event.type === 'mouseover');\n\t\t\t});\n\n\t\t\t// Create button if enabled\n\t\t\tif (this.options.content.button) {\n\t\t\t\tthis._createButton();\n\t\t\t}\n\t\t};\n\n\t\tPROTOTYPE._removeTitle = function (reposition) {\n\t\t\tvar elements = this.elements;\n\n\t\t\tif (elements.title) {\n\t\t\t\telements.titlebar.remove();\n\t\t\t\telements.titlebar = elements.title = elements.button = NULL;\n\n\t\t\t\t// Reposition if enabled\n\t\t\t\tif (reposition !== FALSE) {\n\t\t\t\t\tthis.reposition();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t;PROTOTYPE._createPosClass = function (my) {\n\t\t\treturn NAMESPACE + '-pos-' + (my || this.options.position.my).abbrev();\n\t\t};\n\n\t\tPROTOTYPE.reposition = function (event, effect) {\n\t\t\tif (!this.rendered || this.positioning || this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Set positioning flag\n\t\t\tthis.positioning = TRUE;\n\n\t\t\tvar cache = this.cache,\n\t\t\t    tooltip = this.tooltip,\n\t\t\t    posOptions = this.options.position,\n\t\t\t    target = posOptions.target,\n\t\t\t    my = posOptions.my,\n\t\t\t    at = posOptions.at,\n\t\t\t    viewport = posOptions.viewport,\n\t\t\t    container = posOptions.container,\n\t\t\t    adjust = posOptions.adjust,\n\t\t\t    method = adjust.method.split(' '),\n\t\t\t    tooltipWidth = tooltip.outerWidth(FALSE),\n\t\t\t    tooltipHeight = tooltip.outerHeight(FALSE),\n\t\t\t    targetWidth = 0,\n\t\t\t    targetHeight = 0,\n\t\t\t    type = tooltip.css('position'),\n\t\t\t    position = { left: 0, top: 0 },\n\t\t\t    visible = tooltip[0].offsetWidth > 0,\n\t\t\t    isScroll = event && event.type === 'scroll',\n\t\t\t    win = $(window),\n\t\t\t    doc = container[0].ownerDocument,\n\t\t\t    mouse = this.mouse,\n\t\t\t    pluginCalculations,\n\t\t\t    offset,\n\t\t\t    adjusted,\n\t\t\t    newClass;\n\n\t\t\t// Check if absolute position was passed\n\t\t\tif ($.isArray(target) && target.length === 2) {\n\t\t\t\t// Force left top and set position\n\t\t\t\tat = { x: LEFT, y: TOP };\n\t\t\t\tposition = { left: target[0], top: target[1] };\n\t\t\t}\n\n\t\t\t// Check if mouse was the target\n\t\t\telse if (target === 'mouse') {\n\t\t\t\t\t// Force left top to allow flipping\n\t\t\t\t\tat = { x: LEFT, y: TOP };\n\n\t\t\t\t\t// Use the mouse origin that caused the show event, if distance hiding is enabled\n\t\t\t\t\tif ((!adjust.mouse || this.options.hide.distance) && cache.origin && cache.origin.pageX) {\n\t\t\t\t\t\tevent = cache.origin;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Use cached event for resize/scroll events\n\t\t\t\t\telse if (!event || event && (event.type === 'resize' || event.type === 'scroll')) {\n\t\t\t\t\t\t\tevent = cache.event;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise, use the cached mouse coordinates if available\n\t\t\t\t\t\telse if (mouse && mouse.pageX) {\n\t\t\t\t\t\t\t\tevent = mouse;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t// Calculate body and container offset and take them into account below\n\t\t\t\t\tif (type !== 'static') {\n\t\t\t\t\t\tposition = container.offset();\n\t\t\t\t\t}\n\t\t\t\t\tif (doc.body.offsetWidth !== (window.innerWidth || doc.documentElement.clientWidth)) {\n\t\t\t\t\t\toffset = $(document.body).offset();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Use event coordinates for position\n\t\t\t\t\tposition = {\n\t\t\t\t\t\tleft: event.pageX - position.left + (offset && offset.left || 0),\n\t\t\t\t\t\ttop: event.pageY - position.top + (offset && offset.top || 0)\n\t\t\t\t\t};\n\n\t\t\t\t\t// Scroll events are a pain, some browsers\n\t\t\t\t\tif (adjust.mouse && isScroll && mouse) {\n\t\t\t\t\t\tposition.left -= (mouse.scrollX || 0) - win.scrollLeft();\n\t\t\t\t\t\tposition.top -= (mouse.scrollY || 0) - win.scrollTop();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Target wasn't mouse or absolute...\n\t\t\t\telse {\n\t\t\t\t\t\t// Check if event targetting is being used\n\t\t\t\t\t\tif (target === 'event') {\n\t\t\t\t\t\t\tif (event && event.target && event.type !== 'scroll' && event.type !== 'resize') {\n\t\t\t\t\t\t\t\tcache.target = $(event.target);\n\t\t\t\t\t\t\t} else if (!event.target) {\n\t\t\t\t\t\t\t\tcache.target = this.elements.target;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (target !== 'event') {\n\t\t\t\t\t\t\tcache.target = $(target.jquery ? target : this.elements.target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttarget = cache.target;\n\n\t\t\t\t\t\t// Parse the target into a jQuery object and make sure there's an element present\n\t\t\t\t\t\ttarget = $(target).eq(0);\n\t\t\t\t\t\tif (target.length === 0) {\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Check if window or document is the target\n\t\t\t\t\t\telse if (target[0] === document || target[0] === window) {\n\t\t\t\t\t\t\t\ttargetWidth = BROWSER.iOS ? window.innerWidth : target.width();\n\t\t\t\t\t\t\t\ttargetHeight = BROWSER.iOS ? window.innerHeight : target.height();\n\n\t\t\t\t\t\t\t\tif (target[0] === window) {\n\t\t\t\t\t\t\t\t\tposition = {\n\t\t\t\t\t\t\t\t\t\ttop: (viewport || target).scrollTop(),\n\t\t\t\t\t\t\t\t\t\tleft: (viewport || target).scrollLeft()\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Check if the target is an <AREA> element\n\t\t\t\t\t\t\telse if (PLUGINS.imagemap && target.is('area')) {\n\t\t\t\t\t\t\t\t\tpluginCalculations = PLUGINS.imagemap(this, target, at, PLUGINS.viewport ? method : FALSE);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Check if the target is an SVG element\n\t\t\t\t\t\t\t\telse if (PLUGINS.svg && target && target[0].ownerSVGElement) {\n\t\t\t\t\t\t\t\t\t\tpluginCalculations = PLUGINS.svg(this, target, at, PLUGINS.viewport ? method : FALSE);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Otherwise use regular jQuery methods\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\ttargetWidth = target.outerWidth(FALSE);\n\t\t\t\t\t\t\t\t\t\t\ttargetHeight = target.outerHeight(FALSE);\n\t\t\t\t\t\t\t\t\t\t\tposition = target.offset();\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Parse returned plugin values into proper variables\n\t\t\t\t\t\tif (pluginCalculations) {\n\t\t\t\t\t\t\ttargetWidth = pluginCalculations.width;\n\t\t\t\t\t\t\ttargetHeight = pluginCalculations.height;\n\t\t\t\t\t\t\toffset = pluginCalculations.offset;\n\t\t\t\t\t\t\tposition = pluginCalculations.position;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Adjust position to take into account offset parents\n\t\t\t\t\t\tposition = this.reposition.offset(target, position, container);\n\n\t\t\t\t\t\t// Adjust for position.fixed tooltips (and also iOS scroll bug in v3.2-4.0 & v4.3-4.3.2)\n\t\t\t\t\t\tif (BROWSER.iOS > 3.1 && BROWSER.iOS < 4.1 || BROWSER.iOS >= 4.3 && BROWSER.iOS < 4.33 || !BROWSER.iOS && type === 'fixed') {\n\t\t\t\t\t\t\tposition.left -= win.scrollLeft();\n\t\t\t\t\t\t\tposition.top -= win.scrollTop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Adjust position relative to target\n\t\t\t\t\t\tif (!pluginCalculations || pluginCalculations && pluginCalculations.adjustable !== FALSE) {\n\t\t\t\t\t\t\tposition.left += at.x === RIGHT ? targetWidth : at.x === CENTER ? targetWidth / 2 : 0;\n\t\t\t\t\t\t\tposition.top += at.y === BOTTOM ? targetHeight : at.y === CENTER ? targetHeight / 2 : 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t// Adjust position relative to tooltip\n\t\t\tposition.left += adjust.x + (my.x === RIGHT ? -tooltipWidth : my.x === CENTER ? -tooltipWidth / 2 : 0);\n\t\t\tposition.top += adjust.y + (my.y === BOTTOM ? -tooltipHeight : my.y === CENTER ? -tooltipHeight / 2 : 0);\n\n\t\t\t// Use viewport adjustment plugin if enabled\n\t\t\tif (PLUGINS.viewport) {\n\t\t\t\tadjusted = position.adjusted = PLUGINS.viewport(this, position, posOptions, targetWidth, targetHeight, tooltipWidth, tooltipHeight);\n\n\t\t\t\t// Apply offsets supplied by positioning plugin (if used)\n\t\t\t\tif (offset && adjusted.left) {\n\t\t\t\t\tposition.left += offset.left;\n\t\t\t\t}\n\t\t\t\tif (offset && adjusted.top) {\n\t\t\t\t\tposition.top += offset.top;\n\t\t\t\t}\n\n\t\t\t\t// Apply any new 'my' position\n\t\t\t\tif (adjusted.my) {\n\t\t\t\t\tthis.position.my = adjusted.my;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Viewport adjustment is disabled, set values to zero\n\t\t\telse {\n\t\t\t\t\tposition.adjusted = { left: 0, top: 0 };\n\t\t\t\t}\n\n\t\t\t// Set tooltip position class if it's changed\n\t\t\tif (cache.posClass !== (newClass = this._createPosClass(this.position.my))) {\n\t\t\t\ttooltip.removeClass(cache.posClass).addClass(cache.posClass = newClass);\n\t\t\t}\n\n\t\t\t// tooltipmove event\n\t\t\tif (!this._trigger('move', [position, viewport.elem || viewport], event)) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tdelete position.adjusted;\n\n\t\t\t// If effect is disabled, target it mouse, no animation is defined or positioning gives NaN out, set CSS directly\n\t\t\tif (effect === FALSE || !visible || isNaN(position.left) || isNaN(position.top) || target === 'mouse' || !$.isFunction(posOptions.effect)) {\n\t\t\t\ttooltip.css(position);\n\t\t\t}\n\n\t\t\t// Use custom function if provided\n\t\t\telse if ($.isFunction(posOptions.effect)) {\n\t\t\t\t\tposOptions.effect.call(tooltip, this, $.extend({}, position));\n\t\t\t\t\ttooltip.queue(function (next) {\n\t\t\t\t\t\t// Reset attributes to avoid cross-browser rendering bugs\n\t\t\t\t\t\t$(this).css({ opacity: '', height: '' });\n\t\t\t\t\t\tif (BROWSER.ie) {\n\t\t\t\t\t\t\tthis.style.removeAttribute('filter');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t// Set positioning flag\n\t\t\tthis.positioning = FALSE;\n\n\t\t\treturn this;\n\t\t};\n\n\t\t// Custom (more correct for qTip!) offset calculator\n\t\tPROTOTYPE.reposition.offset = function (elem, pos, container) {\n\t\t\tif (!container[0]) {\n\t\t\t\treturn pos;\n\t\t\t}\n\n\t\t\tvar ownerDocument = $(elem[0].ownerDocument),\n\t\t\t    quirks = !!BROWSER.ie && document.compatMode !== 'CSS1Compat',\n\t\t\t    parent = container[0],\n\t\t\t    scrolled,\n\t\t\t    position,\n\t\t\t    parentOffset,\n\t\t\t    overflow;\n\n\t\t\tfunction scroll(e, i) {\n\t\t\t\tpos.left += i * e.scrollLeft();\n\t\t\t\tpos.top += i * e.scrollTop();\n\t\t\t}\n\n\t\t\t// Compensate for non-static containers offset\n\t\t\tdo {\n\t\t\t\tif ((position = $.css(parent, 'position')) !== 'static') {\n\t\t\t\t\tif (position === 'fixed') {\n\t\t\t\t\t\tparentOffset = parent.getBoundingClientRect();\n\t\t\t\t\t\tscroll(ownerDocument, -1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparentOffset = $(parent).position();\n\t\t\t\t\t\tparentOffset.left += parseFloat($.css(parent, 'borderLeftWidth')) || 0;\n\t\t\t\t\t\tparentOffset.top += parseFloat($.css(parent, 'borderTopWidth')) || 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tpos.left -= parentOffset.left + (parseFloat($.css(parent, 'marginLeft')) || 0);\n\t\t\t\t\tpos.top -= parentOffset.top + (parseFloat($.css(parent, 'marginTop')) || 0);\n\n\t\t\t\t\t// If this is the first parent element with an overflow of \"scroll\" or \"auto\", store it\n\t\t\t\t\tif (!scrolled && (overflow = $.css(parent, 'overflow')) !== 'hidden' && overflow !== 'visible') {\n\t\t\t\t\t\tscrolled = $(parent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (parent = parent.offsetParent);\n\n\t\t\t// Compensate for containers scroll if it also has an offsetParent (or in IE quirks mode)\n\t\t\tif (scrolled && (scrolled[0] !== ownerDocument[0] || quirks)) {\n\t\t\t\tscroll(scrolled, 1);\n\t\t\t}\n\n\t\t\treturn pos;\n\t\t};\n\n\t\t// Corner class\n\t\tvar C = (CORNER = PROTOTYPE.reposition.Corner = function (corner, forceY) {\n\t\t\tcorner = ('' + corner).replace(/([A-Z])/, ' $1').replace(/middle/gi, CENTER).toLowerCase();\n\t\t\tthis.x = (corner.match(/left|right/i) || corner.match(/center/) || ['inherit'])[0].toLowerCase();\n\t\t\tthis.y = (corner.match(/top|bottom|center/i) || ['inherit'])[0].toLowerCase();\n\t\t\tthis.forceY = !!forceY;\n\n\t\t\tvar f = corner.charAt(0);\n\t\t\tthis.precedance = f === 't' || f === 'b' ? Y : X;\n\t\t}).prototype;\n\n\t\tC.invert = function (z, center) {\n\t\t\tthis[z] = this[z] === LEFT ? RIGHT : this[z] === RIGHT ? LEFT : center || this[z];\n\t\t};\n\n\t\tC.string = function (join) {\n\t\t\tvar x = this.x,\n\t\t\t    y = this.y;\n\n\t\t\tvar result = x !== y ? x === 'center' || y !== 'center' && (this.precedance === Y || this.forceY) ? [y, x] : [x, y] : [x];\n\n\t\t\treturn join !== false ? result.join(' ') : result;\n\t\t};\n\n\t\tC.abbrev = function () {\n\t\t\tvar result = this.string(false);\n\t\t\treturn result[0].charAt(0) + (result[1] && result[1].charAt(0) || '');\n\t\t};\n\n\t\tC.clone = function () {\n\t\t\treturn new CORNER(this.string(), this.forceY);\n\t\t};\n\n\t\t;\n\t\tPROTOTYPE.toggle = function (state, event) {\n\t\t\tvar cache = this.cache,\n\t\t\t    options = this.options,\n\t\t\t    tooltip = this.tooltip;\n\n\t\t\t// Try to prevent flickering when tooltip overlaps show element\n\t\t\tif (event) {\n\t\t\t\tif (/over|enter/.test(event.type) && cache.event && /out|leave/.test(cache.event.type) && options.show.target.add(event.target).length === options.show.target.length && tooltip.has(event.relatedTarget).length) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// Cache event\n\t\t\t\tcache.event = $.event.fix(event);\n\t\t\t}\n\n\t\t\t// If we're currently waiting and we've just hidden... stop it\n\t\t\tthis.waiting && !state && (this.hiddenDuringWait = TRUE);\n\n\t\t\t// Render the tooltip if showing and it isn't already\n\t\t\tif (!this.rendered) {\n\t\t\t\treturn state ? this.render(1) : this;\n\t\t\t} else if (this.destroyed || this.disabled) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar type = state ? 'show' : 'hide',\n\t\t\t    opts = this.options[type],\n\t\t\t    otherOpts = this.options[!state ? 'show' : 'hide'],\n\t\t\t    posOptions = this.options.position,\n\t\t\t    contentOptions = this.options.content,\n\t\t\t    width = this.tooltip.css('width'),\n\t\t\t    visible = this.tooltip.is(':visible'),\n\t\t\t    animate = state || opts.target.length === 1,\n\t\t\t    sameTarget = !event || opts.target.length < 2 || cache.target[0] === event.target,\n\t\t\t    identicalState,\n\t\t\t    allow,\n\t\t\t    showEvent,\n\t\t\t    delay,\n\t\t\t    after;\n\n\t\t\t// Detect state if valid one isn't provided\n\t\t\tif ((typeof state === 'undefined' ? 'undefined' : _typeof(state)).search('boolean|number')) {\n\t\t\t\tstate = !visible;\n\t\t\t}\n\n\t\t\t// Check if the tooltip is in an identical state to the new would-be state\n\t\t\tidenticalState = !tooltip.is(':animated') && visible === state && sameTarget;\n\n\t\t\t// Fire tooltip(show/hide) event and check if destroyed\n\t\t\tallow = !identicalState ? !!this._trigger(type, [90]) : NULL;\n\n\t\t\t// Check to make sure the tooltip wasn't destroyed in the callback\n\t\t\tif (this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// If the user didn't stop the method prematurely and we're showing the tooltip, focus it\n\t\t\tif (allow !== FALSE && state) {\n\t\t\t\tthis.focus(event);\n\t\t\t}\n\n\t\t\t// If the state hasn't changed or the user stopped it, return early\n\t\t\tif (!allow || identicalState) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Set ARIA hidden attribute\n\t\t\t$.attr(tooltip[0], 'aria-hidden', !!!state);\n\n\t\t\t// Execute state specific properties\n\t\t\tif (state) {\n\t\t\t\t// Store show origin coordinates\n\t\t\t\tthis.mouse && (cache.origin = $.event.fix(this.mouse));\n\n\t\t\t\t// Update tooltip content & title if it's a dynamic function\n\t\t\t\tif ($.isFunction(contentOptions.text)) {\n\t\t\t\t\tthis._updateContent(contentOptions.text, FALSE);\n\t\t\t\t}\n\t\t\t\tif ($.isFunction(contentOptions.title)) {\n\t\t\t\t\tthis._updateTitle(contentOptions.title, FALSE);\n\t\t\t\t}\n\n\t\t\t\t// Cache mousemove events for positioning purposes (if not already tracking)\n\t\t\t\tif (!trackingBound && posOptions.target === 'mouse' && posOptions.adjust.mouse) {\n\t\t\t\t\t$(document).bind('mousemove.' + NAMESPACE, this._storeMouse);\n\t\t\t\t\ttrackingBound = TRUE;\n\t\t\t\t}\n\n\t\t\t\t// Update the tooltip position (set width first to prevent viewport/max-width issues)\n\t\t\t\tif (!width) {\n\t\t\t\t\ttooltip.css('width', tooltip.outerWidth(FALSE));\n\t\t\t\t}\n\t\t\t\tthis.reposition(event, arguments[2]);\n\t\t\t\tif (!width) {\n\t\t\t\t\ttooltip.css('width', '');\n\t\t\t\t}\n\n\t\t\t\t// Hide other tooltips if tooltip is solo\n\t\t\t\tif (!!opts.solo) {\n\t\t\t\t\t(typeof opts.solo === 'string' ? $(opts.solo) : $(SELECTOR, opts.solo)).not(tooltip).not(opts.target).qtip('hide', $.Event('tooltipsolo'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Clear show timer if we're hiding\n\t\t\t\tclearTimeout(this.timers.show);\n\n\t\t\t\t// Remove cached origin on hide\n\t\t\t\tdelete cache.origin;\n\n\t\t\t\t// Remove mouse tracking event if not needed (all tracking qTips are hidden)\n\t\t\t\tif (trackingBound && !$(SELECTOR + '[tracking=\"true\"]:visible', opts.solo).not(tooltip).length) {\n\t\t\t\t\t$(document).unbind('mousemove.' + NAMESPACE);\n\t\t\t\t\ttrackingBound = FALSE;\n\t\t\t\t}\n\n\t\t\t\t// Blur the tooltip\n\t\t\t\tthis.blur(event);\n\t\t\t}\n\n\t\t\t// Define post-animation, state specific properties\n\t\t\tafter = $.proxy(function () {\n\t\t\t\tif (state) {\n\t\t\t\t\t// Prevent antialias from disappearing in IE by removing filter\n\t\t\t\t\tif (BROWSER.ie) {\n\t\t\t\t\t\ttooltip[0].style.removeAttribute('filter');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove overflow setting to prevent tip bugs\n\t\t\t\t\ttooltip.css('overflow', '');\n\n\t\t\t\t\t// Autofocus elements if enabled\n\t\t\t\t\tif ('string' === typeof opts.autofocus) {\n\t\t\t\t\t\t$(this.options.show.autofocus, tooltip).focus();\n\t\t\t\t\t}\n\n\t\t\t\t\t// If set, hide tooltip when inactive for delay period\n\t\t\t\t\tthis.options.show.target.trigger('qtip-' + this.id + '-inactive');\n\t\t\t\t} else {\n\t\t\t\t\t// Reset CSS states\n\t\t\t\t\ttooltip.css({\n\t\t\t\t\t\tdisplay: '',\n\t\t\t\t\t\tvisibility: '',\n\t\t\t\t\t\topacity: '',\n\t\t\t\t\t\tleft: '',\n\t\t\t\t\t\ttop: ''\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// tooltipvisible/tooltiphidden events\n\t\t\t\tthis._trigger(state ? 'visible' : 'hidden');\n\t\t\t}, this);\n\n\t\t\t// If no effect type is supplied, use a simple toggle\n\t\t\tif (opts.effect === FALSE || animate === FALSE) {\n\t\t\t\ttooltip[type]();\n\t\t\t\tafter();\n\t\t\t}\n\n\t\t\t// Use custom function if provided\n\t\t\telse if ($.isFunction(opts.effect)) {\n\t\t\t\t\ttooltip.stop(1, 1);\n\t\t\t\t\topts.effect.call(tooltip, this);\n\t\t\t\t\ttooltip.queue('fx', function (n) {\n\t\t\t\t\t\tafter();n();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Use basic fade function by default\n\t\t\t\telse {\n\t\t\t\t\t\ttooltip.fadeTo(90, state ? 1 : 0, after);\n\t\t\t\t\t}\n\n\t\t\t// If inactive hide method is set, active it\n\t\t\tif (state) {\n\t\t\t\topts.target.trigger('qtip-' + this.id + '-inactive');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tPROTOTYPE.show = function (event) {\n\t\t\treturn this.toggle(TRUE, event);\n\t\t};\n\n\t\tPROTOTYPE.hide = function (event) {\n\t\t\treturn this.toggle(FALSE, event);\n\t\t};\n\t\t;PROTOTYPE.focus = function (event) {\n\t\t\tif (!this.rendered || this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar qtips = $(SELECTOR),\n\t\t\t    tooltip = this.tooltip,\n\t\t\t    curIndex = parseInt(tooltip[0].style.zIndex, 10),\n\t\t\t    newIndex = QTIP.zindex + qtips.length,\n\t\t\t    focusedElem;\n\n\t\t\t// Only update the z-index if it has changed and tooltip is not already focused\n\t\t\tif (!tooltip.hasClass(CLASS_FOCUS)) {\n\t\t\t\t// tooltipfocus event\n\t\t\t\tif (this._trigger('focus', [newIndex], event)) {\n\t\t\t\t\t// Only update z-index's if they've changed\n\t\t\t\t\tif (curIndex !== newIndex) {\n\t\t\t\t\t\t// Reduce our z-index's and keep them properly ordered\n\t\t\t\t\t\tqtips.each(function () {\n\t\t\t\t\t\t\tif (this.style.zIndex > curIndex) {\n\t\t\t\t\t\t\t\tthis.style.zIndex = this.style.zIndex - 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Fire blur event for focused tooltip\n\t\t\t\t\t\tqtips.filter('.' + CLASS_FOCUS).qtip('blur', event);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the new z-index\n\t\t\t\t\ttooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tPROTOTYPE.blur = function (event) {\n\t\t\tif (!this.rendered || this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Set focused status to FALSE\n\t\t\tthis.tooltip.removeClass(CLASS_FOCUS);\n\n\t\t\t// tooltipblur event\n\t\t\tthis._trigger('blur', [this.tooltip.css('zIndex')], event);\n\n\t\t\treturn this;\n\t\t};\n\t\t;PROTOTYPE.disable = function (state) {\n\t\t\tif (this.destroyed) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// If 'toggle' is passed, toggle the current state\n\t\t\tif (state === 'toggle') {\n\t\t\t\tstate = !(this.rendered ? this.tooltip.hasClass(CLASS_DISABLED) : this.disabled);\n\t\t\t}\n\n\t\t\t// Disable if no state passed\n\t\t\telse if ('boolean' !== typeof state) {\n\t\t\t\t\tstate = TRUE;\n\t\t\t\t}\n\n\t\t\tif (this.rendered) {\n\t\t\t\tthis.tooltip.toggleClass(CLASS_DISABLED, state).attr('aria-disabled', state);\n\t\t\t}\n\n\t\t\tthis.disabled = !!state;\n\n\t\t\treturn this;\n\t\t};\n\n\t\tPROTOTYPE.enable = function () {\n\t\t\treturn this.disable(FALSE);\n\t\t};\n\t\t;PROTOTYPE._createButton = function () {\n\t\t\tvar self = this,\n\t\t\t    elements = this.elements,\n\t\t\t    tooltip = elements.tooltip,\n\t\t\t    button = this.options.content.button,\n\t\t\t    isString = typeof button === 'string',\n\t\t\t    close = isString ? button : 'Close tooltip';\n\n\t\t\tif (elements.button) {\n\t\t\t\telements.button.remove();\n\t\t\t}\n\n\t\t\t// Use custom button if one was supplied by user, else use default\n\t\t\tif (button.jquery) {\n\t\t\t\telements.button = button;\n\t\t\t} else {\n\t\t\t\telements.button = $('<a />', {\n\t\t\t\t\t'class': 'qtip-close ' + (this.options.style.widget ? '' : NAMESPACE + '-icon'),\n\t\t\t\t\t'title': close,\n\t\t\t\t\t'aria-label': close\n\t\t\t\t}).prepend($('<span />', {\n\t\t\t\t\t'class': 'ui-icon ui-icon-close',\n\t\t\t\t\t'html': '&times;'\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Create button and setup attributes\n\t\t\telements.button.appendTo(elements.titlebar || tooltip).attr('role', 'button').click(function (event) {\n\t\t\t\tif (!tooltip.hasClass(CLASS_DISABLED)) {\n\t\t\t\t\tself.hide(event);\n\t\t\t\t}\n\t\t\t\treturn FALSE;\n\t\t\t});\n\t\t};\n\n\t\tPROTOTYPE._updateButton = function (button) {\n\t\t\t// Make sure tooltip is rendered and if not, return\n\t\t\tif (!this.rendered) {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\tvar elem = this.elements.button;\n\t\t\tif (button) {\n\t\t\t\tthis._createButton();\n\t\t\t} else {\n\t\t\t\telem.remove();\n\t\t\t}\n\t\t};\n\t\t; // Widget class creator\n\t\tfunction createWidgetClass(cls) {\n\t\t\treturn WIDGET.concat('').join(cls ? '-' + cls + ' ' : ' ');\n\t\t}\n\n\t\t// Widget class setter method\n\t\tPROTOTYPE._setWidget = function () {\n\t\t\tvar on = this.options.style.widget,\n\t\t\t    elements = this.elements,\n\t\t\t    tooltip = elements.tooltip,\n\t\t\t    disabled = tooltip.hasClass(CLASS_DISABLED);\n\n\t\t\ttooltip.removeClass(CLASS_DISABLED);\n\t\t\tCLASS_DISABLED = on ? 'ui-state-disabled' : 'qtip-disabled';\n\t\t\ttooltip.toggleClass(CLASS_DISABLED, disabled);\n\n\t\t\ttooltip.toggleClass('ui-helper-reset ' + createWidgetClass(), on).toggleClass(CLASS_DEFAULT, this.options.style.def && !on);\n\n\t\t\tif (elements.content) {\n\t\t\t\telements.content.toggleClass(createWidgetClass('content'), on);\n\t\t\t}\n\t\t\tif (elements.titlebar) {\n\t\t\t\telements.titlebar.toggleClass(createWidgetClass('header'), on);\n\t\t\t}\n\t\t\tif (elements.button) {\n\t\t\t\telements.button.toggleClass(NAMESPACE + '-icon', !on);\n\t\t\t}\n\t\t};\n\t\t;function delay(callback, duration) {\n\t\t\t// If tooltip has displayed, start hide timer\n\t\t\tif (duration > 0) {\n\t\t\t\treturn setTimeout($.proxy(callback, this), duration);\n\t\t\t} else {\n\t\t\t\tcallback.call(this);\n\t\t\t}\n\t\t}\n\n\t\tfunction showMethod(event) {\n\t\t\tif (this.tooltip.hasClass(CLASS_DISABLED)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear hide timers\n\t\t\tclearTimeout(this.timers.show);\n\t\t\tclearTimeout(this.timers.hide);\n\n\t\t\t// Start show timer\n\t\t\tthis.timers.show = delay.call(this, function () {\n\t\t\t\tthis.toggle(TRUE, event);\n\t\t\t}, this.options.show.delay);\n\t\t}\n\n\t\tfunction hideMethod(event) {\n\t\t\tif (this.tooltip.hasClass(CLASS_DISABLED) || this.destroyed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if new target was actually the tooltip element\n\t\t\tvar relatedTarget = $(event.relatedTarget),\n\t\t\t    ontoTooltip = relatedTarget.closest(SELECTOR)[0] === this.tooltip[0],\n\t\t\t    ontoTarget = relatedTarget[0] === this.options.show.target[0];\n\n\t\t\t// Clear timers and stop animation queue\n\t\t\tclearTimeout(this.timers.show);\n\t\t\tclearTimeout(this.timers.hide);\n\n\t\t\t// Prevent hiding if tooltip is fixed and event target is the tooltip.\n\t\t\t// Or if mouse positioning is enabled and cursor momentarily overlaps\n\t\t\tif (this !== relatedTarget[0] && this.options.position.target === 'mouse' && ontoTooltip || this.options.hide.fixed && /mouse(out|leave|move)/.test(event.type) && (ontoTooltip || ontoTarget)) {\n\t\t\t\ttry {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t} catch (e) {}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If tooltip has displayed, start hide timer\n\t\t\tthis.timers.hide = delay.call(this, function () {\n\t\t\t\tthis.toggle(FALSE, event);\n\t\t\t}, this.options.hide.delay, this);\n\t\t}\n\n\t\tfunction inactiveMethod(event) {\n\t\t\tif (this.tooltip.hasClass(CLASS_DISABLED) || !this.options.hide.inactive) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear timer\n\t\t\tclearTimeout(this.timers.inactive);\n\n\t\t\tthis.timers.inactive = delay.call(this, function () {\n\t\t\t\tthis.hide(event);\n\t\t\t}, this.options.hide.inactive);\n\t\t}\n\n\t\tfunction repositionMethod(event) {\n\t\t\tif (this.rendered && this.tooltip[0].offsetWidth > 0) {\n\t\t\t\tthis.reposition(event);\n\t\t\t}\n\t\t}\n\n\t\t// Store mouse coordinates\n\t\tPROTOTYPE._storeMouse = function (event) {\n\t\t\t(this.mouse = $.event.fix(event)).type = 'mousemove';\n\t\t\treturn this;\n\t\t};\n\n\t\t// Bind events\n\t\tPROTOTYPE._bind = function (targets, events, method, suffix, context) {\n\t\t\tif (!targets || !method || !events.length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar ns = '.' + this._id + (suffix ? '-' + suffix : '');\n\t\t\t$(targets).bind((events.split ? events : events.join(ns + ' ')) + ns, $.proxy(method, context || this));\n\t\t\treturn this;\n\t\t};\n\t\tPROTOTYPE._unbind = function (targets, suffix) {\n\t\t\ttargets && $(targets).unbind('.' + this._id + (suffix ? '-' + suffix : ''));\n\t\t\treturn this;\n\t\t};\n\n\t\t// Global delegation helper\n\t\tfunction delegate(selector, events, method) {\n\t\t\t$(document.body).delegate(selector, (events.split ? events : events.join('.' + NAMESPACE + ' ')) + '.' + NAMESPACE, function () {\n\t\t\t\tvar api = QTIP.api[$.attr(this, ATTR_ID)];\n\t\t\t\tapi && !api.disabled && method.apply(api, arguments);\n\t\t\t});\n\t\t}\n\t\t// Event trigger\n\t\tPROTOTYPE._trigger = function (type, args, event) {\n\t\t\tvar callback = $.Event('tooltip' + type);\n\t\t\tcallback.originalEvent = event && $.extend({}, event) || this.cache.event || NULL;\n\n\t\t\tthis.triggering = type;\n\t\t\tthis.tooltip.trigger(callback, [this].concat(args || []));\n\t\t\tthis.triggering = FALSE;\n\n\t\t\treturn !callback.isDefaultPrevented();\n\t\t};\n\n\t\tPROTOTYPE._bindEvents = function (showEvents, hideEvents, showTargets, hideTargets, showMethod, hideMethod) {\n\t\t\t// Get tasrgets that lye within both\n\t\t\tvar similarTargets = showTargets.filter(hideTargets).add(hideTargets.filter(showTargets)),\n\t\t\t    toggleEvents = [];\n\n\t\t\t// If hide and show targets are the same...\n\t\t\tif (similarTargets.length) {\n\n\t\t\t\t// Filter identical show/hide events\n\t\t\t\t$.each(hideEvents, function (i, type) {\n\t\t\t\t\tvar showIndex = $.inArray(type, showEvents);\n\n\t\t\t\t\t// Both events are identical, remove from both hide and show events\n\t\t\t\t\t// and append to toggleEvents\n\t\t\t\t\tshowIndex > -1 && toggleEvents.push(showEvents.splice(showIndex, 1)[0]);\n\t\t\t\t});\n\n\t\t\t\t// Toggle events are special case of identical show/hide events, which happen in sequence\n\t\t\t\tif (toggleEvents.length) {\n\t\t\t\t\t// Bind toggle events to the similar targets\n\t\t\t\t\tthis._bind(similarTargets, toggleEvents, function (event) {\n\t\t\t\t\t\tvar state = this.rendered ? this.tooltip[0].offsetWidth > 0 : false;\n\t\t\t\t\t\t(state ? hideMethod : showMethod).call(this, event);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove the similar targets from the regular show/hide bindings\n\t\t\t\t\tshowTargets = showTargets.not(similarTargets);\n\t\t\t\t\thideTargets = hideTargets.not(similarTargets);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply show/hide/toggle events\n\t\t\tthis._bind(showTargets, showEvents, showMethod);\n\t\t\tthis._bind(hideTargets, hideEvents, hideMethod);\n\t\t};\n\n\t\tPROTOTYPE._assignInitialEvents = function (event) {\n\t\t\tvar options = this.options,\n\t\t\t    showTarget = options.show.target,\n\t\t\t    hideTarget = options.hide.target,\n\t\t\t    showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],\n\t\t\t    hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];\n\n\t\t\t// Catch remove/removeqtip events on target element to destroy redundant tooltips\n\t\t\tthis._bind(this.elements.target, ['remove', 'removeqtip'], function (event) {\n\t\t\t\tthis.destroy(true);\n\t\t\t}, 'destroy');\n\n\t\t\t/*\n    * Make sure hoverIntent functions properly by using mouseleave as a hide event if\n    * mouseenter/mouseout is used for show.event, even if it isn't in the users options.\n    */\n\t\t\tif (/mouse(over|enter)/i.test(options.show.event) && !/mouse(out|leave)/i.test(options.hide.event)) {\n\t\t\t\thideEvents.push('mouseleave');\n\t\t\t}\n\n\t\t\t/*\n    * Also make sure initial mouse targetting works correctly by caching mousemove coords\n    * on show targets before the tooltip has rendered. Also set onTarget when triggered to\n    * keep mouse tracking working.\n    */\n\t\t\tthis._bind(showTarget, 'mousemove', function (event) {\n\t\t\t\tthis._storeMouse(event);\n\t\t\t\tthis.cache.onTarget = TRUE;\n\t\t\t});\n\n\t\t\t// Define hoverIntent function\n\t\t\tfunction hoverIntent(event) {\n\t\t\t\t// Only continue if tooltip isn't disabled\n\t\t\t\tif (this.disabled || this.destroyed) {\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\t// Cache the event data\n\t\t\t\tthis.cache.event = event && $.event.fix(event);\n\t\t\t\tthis.cache.target = event && $(event.target);\n\n\t\t\t\t// Start the event sequence\n\t\t\t\tclearTimeout(this.timers.show);\n\t\t\t\tthis.timers.show = delay.call(this, function () {\n\t\t\t\t\tthis.render((typeof event === 'undefined' ? 'undefined' : _typeof(event)) === 'object' || options.show.ready);\n\t\t\t\t}, options.prerender ? 0 : options.show.delay);\n\t\t\t}\n\n\t\t\t// Filter and bind events\n\t\t\tthis._bindEvents(showEvents, hideEvents, showTarget, hideTarget, hoverIntent, function () {\n\t\t\t\tif (!this.timers) {\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\t\t\t\tclearTimeout(this.timers.show);\n\t\t\t});\n\n\t\t\t// Prerendering is enabled, create tooltip now\n\t\t\tif (options.show.ready || options.prerender) {\n\t\t\t\thoverIntent.call(this, event);\n\t\t\t}\n\t\t};\n\n\t\t// Event assignment method\n\t\tPROTOTYPE._assignEvents = function () {\n\t\t\tvar self = this,\n\t\t\t    options = this.options,\n\t\t\t    posOptions = options.position,\n\t\t\t    tooltip = this.tooltip,\n\t\t\t    showTarget = options.show.target,\n\t\t\t    hideTarget = options.hide.target,\n\t\t\t    containerTarget = posOptions.container,\n\t\t\t    viewportTarget = posOptions.viewport,\n\t\t\t    documentTarget = $(document),\n\t\t\t    bodyTarget = $(document.body),\n\t\t\t    windowTarget = $(window),\n\t\t\t    showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],\n\t\t\t    hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];\n\n\t\t\t// Assign passed event callbacks\n\t\t\t$.each(options.events, function (name, callback) {\n\t\t\t\tself._bind(tooltip, name === 'toggle' ? ['tooltipshow', 'tooltiphide'] : ['tooltip' + name], callback, null, tooltip);\n\t\t\t});\n\n\t\t\t// Hide tooltips when leaving current window/frame (but not select/option elements)\n\t\t\tif (/mouse(out|leave)/i.test(options.hide.event) && options.hide.leave === 'window') {\n\t\t\t\tthis._bind(documentTarget, ['mouseout', 'blur'], function (event) {\n\t\t\t\t\tif (!/select|option/.test(event.target.nodeName) && !event.relatedTarget) {\n\t\t\t\t\t\tthis.hide(event);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Enable hide.fixed by adding appropriate class\n\t\t\tif (options.hide.fixed) {\n\t\t\t\thideTarget = hideTarget.add(tooltip.addClass(CLASS_FIXED));\n\t\t\t}\n\n\t\t\t/*\n    * Make sure hoverIntent functions properly by using mouseleave to clear show timer if\n    * mouseenter/mouseout is used for show.event, even if it isn't in the users options.\n    */\n\t\t\telse if (/mouse(over|enter)/i.test(options.show.event)) {\n\t\t\t\t\tthis._bind(hideTarget, 'mouseleave', function () {\n\t\t\t\t\t\tclearTimeout(this.timers.show);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t// Hide tooltip on document mousedown if unfocus events are enabled\n\t\t\tif (('' + options.hide.event).indexOf('unfocus') > -1) {\n\t\t\t\tthis._bind(containerTarget.closest('html'), ['mousedown', 'touchstart'], function (event) {\n\t\t\t\t\tvar elem = $(event.target),\n\t\t\t\t\t    enabled = this.rendered && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0,\n\t\t\t\t\t    isAncestor = elem.parents(SELECTOR).filter(this.tooltip[0]).length > 0;\n\n\t\t\t\t\tif (elem[0] !== this.target[0] && elem[0] !== this.tooltip[0] && !isAncestor && !this.target.has(elem[0]).length && enabled) {\n\t\t\t\t\t\tthis.hide(event);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Check if the tooltip hides when inactive\n\t\t\tif ('number' === typeof options.hide.inactive) {\n\t\t\t\t// Bind inactive method to show target(s) as a custom event\n\t\t\t\tthis._bind(showTarget, 'qtip-' + this.id + '-inactive', inactiveMethod, 'inactive');\n\n\t\t\t\t// Define events which reset the 'inactive' event handler\n\t\t\t\tthis._bind(hideTarget.add(tooltip), QTIP.inactiveEvents, inactiveMethod);\n\t\t\t}\n\n\t\t\t// Filter and bind events\n\t\t\tthis._bindEvents(showEvents, hideEvents, showTarget, hideTarget, showMethod, hideMethod);\n\n\t\t\t// Mouse movement bindings\n\t\t\tthis._bind(showTarget.add(tooltip), 'mousemove', function (event) {\n\t\t\t\t// Check if the tooltip hides when mouse is moved a certain distance\n\t\t\t\tif ('number' === typeof options.hide.distance) {\n\t\t\t\t\tvar origin = this.cache.origin || {},\n\t\t\t\t\t    limit = this.options.hide.distance,\n\t\t\t\t\t    abs = Math.abs;\n\n\t\t\t\t\t// Check if the movement has gone beyond the limit, and hide it if so\n\t\t\t\t\tif (abs(event.pageX - origin.pageX) >= limit || abs(event.pageY - origin.pageY) >= limit) {\n\t\t\t\t\t\tthis.hide(event);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache mousemove coords on show targets\n\t\t\t\tthis._storeMouse(event);\n\t\t\t});\n\n\t\t\t// Mouse positioning events\n\t\t\tif (posOptions.target === 'mouse') {\n\t\t\t\t// If mouse adjustment is on...\n\t\t\t\tif (posOptions.adjust.mouse) {\n\t\t\t\t\t// Apply a mouseleave event so we don't get problems with overlapping\n\t\t\t\t\tif (options.hide.event) {\n\t\t\t\t\t\t// Track if we're on the target or not\n\t\t\t\t\t\tthis._bind(showTarget, ['mouseenter', 'mouseleave'], function (event) {\n\t\t\t\t\t\t\tif (!this.cache) {\n\t\t\t\t\t\t\t\treturn FALSE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.cache.onTarget = event.type === 'mouseenter';\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update tooltip position on mousemove\n\t\t\t\t\tthis._bind(documentTarget, 'mousemove', function (event) {\n\t\t\t\t\t\t// Update the tooltip position only if the tooltip is visible and adjustment is enabled\n\t\t\t\t\t\tif (this.rendered && this.cache.onTarget && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0) {\n\t\t\t\t\t\t\tthis.reposition(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adjust positions of the tooltip on window resize if enabled\n\t\t\tif (posOptions.adjust.resize || viewportTarget.length) {\n\t\t\t\tthis._bind($.event.special.resize ? viewportTarget : windowTarget, 'resize', repositionMethod);\n\t\t\t}\n\n\t\t\t// Adjust tooltip position on scroll of the window or viewport element if present\n\t\t\tif (posOptions.adjust.scroll) {\n\t\t\t\tthis._bind(windowTarget.add(posOptions.container), 'scroll', repositionMethod);\n\t\t\t}\n\t\t};\n\n\t\t// Un-assignment method\n\t\tPROTOTYPE._unassignEvents = function () {\n\t\t\tvar options = this.options,\n\t\t\t    showTargets = options.show.target,\n\t\t\t    hideTargets = options.hide.target,\n\t\t\t    targets = $.grep([this.elements.target[0], this.rendered && this.tooltip[0], options.position.container[0], options.position.viewport[0], options.position.container.closest('html')[0], // unfocus\n\t\t\twindow, document], function (i) {\n\t\t\t\treturn (typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object';\n\t\t\t});\n\n\t\t\t// Add show and hide targets if they're valid\n\t\t\tif (showTargets && showTargets.toArray) {\n\t\t\t\ttargets = targets.concat(showTargets.toArray());\n\t\t\t}\n\t\t\tif (hideTargets && hideTargets.toArray) {\n\t\t\t\ttargets = targets.concat(hideTargets.toArray());\n\t\t\t}\n\n\t\t\t// Unbind the events\n\t\t\tthis._unbind(targets)._unbind(targets, 'destroy')._unbind(targets, 'inactive');\n\t\t};\n\n\t\t// Apply common event handlers using delegate (avoids excessive .bind calls!)\n\t\t$(function () {\n\t\t\tdelegate(SELECTOR, ['mouseenter', 'mouseleave'], function (event) {\n\t\t\t\tvar state = event.type === 'mouseenter',\n\t\t\t\t    tooltip = $(event.currentTarget),\n\t\t\t\t    target = $(event.relatedTarget || event.target),\n\t\t\t\t    options = this.options;\n\n\t\t\t\t// On mouseenter...\n\t\t\t\tif (state) {\n\t\t\t\t\t// Focus the tooltip on mouseenter (z-index stacking)\n\t\t\t\t\tthis.focus(event);\n\n\t\t\t\t\t// Clear hide timer on tooltip hover to prevent it from closing\n\t\t\t\t\ttooltip.hasClass(CLASS_FIXED) && !tooltip.hasClass(CLASS_DISABLED) && clearTimeout(this.timers.hide);\n\t\t\t\t}\n\n\t\t\t\t// On mouseleave...\n\t\t\t\telse {\n\t\t\t\t\t\t// When mouse tracking is enabled, hide when we leave the tooltip and not onto the show target (if a hide event is set)\n\t\t\t\t\t\tif (options.position.target === 'mouse' && options.position.adjust.mouse && options.hide.event && options.show.target && !target.closest(options.show.target[0]).length) {\n\t\t\t\t\t\t\tthis.hide(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Add hover class\n\t\t\t\ttooltip.toggleClass(CLASS_HOVER, state);\n\t\t\t});\n\n\t\t\t// Define events which reset the 'inactive' event handler\n\t\t\tdelegate('[' + ATTR_ID + ']', INACTIVE_EVENTS, inactiveMethod);\n\t\t});\n\t\t; // Initialization method\n\t\tfunction init(elem, id, opts) {\n\t\t\tvar obj,\n\t\t\t    posOptions,\n\t\t\t    attr,\n\t\t\t    config,\n\t\t\t    title,\n\n\n\t\t\t// Setup element references\n\t\t\tdocBody = $(document.body),\n\n\n\t\t\t// Use document body instead of document element if needed\n\t\t\tnewTarget = elem[0] === document ? docBody : elem,\n\n\n\t\t\t// Grab metadata from element if plugin is present\n\t\t\tmetadata = elem.metadata ? elem.metadata(opts.metadata) : NULL,\n\n\n\t\t\t// If metadata type if HTML5, grab 'name' from the object instead, or use the regular data object otherwise\n\t\t\tmetadata5 = opts.metadata.type === 'html5' && metadata ? metadata[opts.metadata.name] : NULL,\n\n\n\t\t\t// Grab data from metadata.name (or data-qtipopts as fallback) using .data() method,\n\t\t\thtml5 = elem.data(opts.metadata.name || 'qtipopts');\n\n\t\t\t// If we don't get an object returned attempt to parse it manualyl without parseJSON\n\t\t\ttry {\n\t\t\t\thtml5 = typeof html5 === 'string' ? $.parseJSON(html5) : html5;\n\t\t\t} catch (e) {}\n\n\t\t\t// Merge in and sanitize metadata\n\t\t\tconfig = $.extend(TRUE, {}, QTIP.defaults, opts, (typeof html5 === 'undefined' ? 'undefined' : _typeof(html5)) === 'object' ? sanitizeOptions(html5) : NULL, sanitizeOptions(metadata5 || metadata));\n\n\t\t\t// Re-grab our positioning options now we've merged our metadata and set id to passed value\n\t\t\tposOptions = config.position;\n\t\t\tconfig.id = id;\n\n\t\t\t// Setup missing content if none is detected\n\t\t\tif ('boolean' === typeof config.content.text) {\n\t\t\t\tattr = elem.attr(config.content.attr);\n\n\t\t\t\t// Grab from supplied attribute if available\n\t\t\t\tif (config.content.attr !== FALSE && attr) {\n\t\t\t\t\tconfig.content.text = attr;\n\t\t\t\t}\n\n\t\t\t\t// No valid content was found, abort render\n\t\t\t\telse {\n\t\t\t\t\t\treturn FALSE;\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Setup target options\n\t\t\tif (!posOptions.container.length) {\n\t\t\t\tposOptions.container = docBody;\n\t\t\t}\n\t\t\tif (posOptions.target === FALSE) {\n\t\t\t\tposOptions.target = newTarget;\n\t\t\t}\n\t\t\tif (config.show.target === FALSE) {\n\t\t\t\tconfig.show.target = newTarget;\n\t\t\t}\n\t\t\tif (config.show.solo === TRUE) {\n\t\t\t\tconfig.show.solo = posOptions.container.closest('body');\n\t\t\t}\n\t\t\tif (config.hide.target === FALSE) {\n\t\t\t\tconfig.hide.target = newTarget;\n\t\t\t}\n\t\t\tif (config.position.viewport === TRUE) {\n\t\t\t\tconfig.position.viewport = posOptions.container;\n\t\t\t}\n\n\t\t\t// Ensure we only use a single container\n\t\t\tposOptions.container = posOptions.container.eq(0);\n\n\t\t\t// Convert position corner values into x and y strings\n\t\t\tposOptions.at = new CORNER(posOptions.at, TRUE);\n\t\t\tposOptions.my = new CORNER(posOptions.my);\n\n\t\t\t// Destroy previous tooltip if overwrite is enabled, or skip element if not\n\t\t\tif (elem.data(NAMESPACE)) {\n\t\t\t\tif (config.overwrite) {\n\t\t\t\t\telem.qtip('destroy', true);\n\t\t\t\t} else if (config.overwrite === FALSE) {\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add has-qtip attribute\n\t\t\telem.attr(ATTR_HAS, id);\n\n\t\t\t// Remove title attribute and store it if present\n\t\t\tif (config.suppress && (title = elem.attr('title'))) {\n\t\t\t\t// Final attr call fixes event delegatiom and IE default tooltip showing problem\n\t\t\t\telem.removeAttr('title').attr(oldtitle, title).attr('title', '');\n\t\t\t}\n\n\t\t\t// Initialize the tooltip and add API reference\n\t\t\tobj = new QTip(elem, config, id, !!attr);\n\t\t\telem.data(NAMESPACE, obj);\n\n\t\t\treturn obj;\n\t\t}\n\n\t\t// jQuery $.fn extension method\n\t\tQTIP = $.fn.qtip = function (options, notation, newValue) {\n\t\t\tvar command = ('' + options).toLowerCase(),\n\t\t\t    // Parse command\n\t\t\treturned = NULL,\n\t\t\t    args = $.makeArray(arguments).slice(1),\n\t\t\t    event = args[args.length - 1],\n\t\t\t    opts = this[0] ? $.data(this[0], NAMESPACE) : NULL;\n\n\t\t\t// Check for API request\n\t\t\tif (!arguments.length && opts || command === 'api') {\n\t\t\t\treturn opts;\n\t\t\t}\n\n\t\t\t// Execute API command if present\n\t\t\telse if ('string' === typeof options) {\n\t\t\t\t\tthis.each(function () {\n\t\t\t\t\t\tvar api = $.data(this, NAMESPACE);\n\t\t\t\t\t\tif (!api) {\n\t\t\t\t\t\t\treturn TRUE;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Cache the event if possible\n\t\t\t\t\t\tif (event && event.timeStamp) {\n\t\t\t\t\t\t\tapi.cache.event = event;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Check for specific API commands\n\t\t\t\t\t\tif (notation && (command === 'option' || command === 'options')) {\n\t\t\t\t\t\t\tif (newValue !== undefined || $.isPlainObject(notation)) {\n\t\t\t\t\t\t\t\tapi.set(notation, newValue);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturned = api.get(notation);\n\t\t\t\t\t\t\t\treturn FALSE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute API command\n\t\t\t\t\t\telse if (api[command]) {\n\t\t\t\t\t\t\t\tapi[command].apply(api, args);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn returned !== NULL ? returned : this;\n\t\t\t\t}\n\n\t\t\t\t// No API commands. validate provided options and setup qTips\n\t\t\t\telse if ('object' === (typeof options === 'undefined' ? 'undefined' : _typeof(options)) || !arguments.length) {\n\t\t\t\t\t\t// Sanitize options first\n\t\t\t\t\t\topts = sanitizeOptions($.extend(TRUE, {}, options));\n\n\t\t\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\t\t\tvar api, id;\n\n\t\t\t\t\t\t\t// Find next available ID, or use custom ID if provided\n\t\t\t\t\t\t\tid = $.isArray(opts.id) ? opts.id[i] : opts.id;\n\t\t\t\t\t\t\tid = !id || id === FALSE || id.length < 1 || QTIP.api[id] ? QTIP.nextid++ : id;\n\n\t\t\t\t\t\t\t// Initialize the qTip and re-grab newly sanitized options\n\t\t\t\t\t\t\tapi = init($(this), id, opts);\n\t\t\t\t\t\t\tif (api === FALSE) {\n\t\t\t\t\t\t\t\treturn TRUE;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tQTIP.api[id] = api;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Initialize plugins\n\t\t\t\t\t\t\t$.each(PLUGINS, function () {\n\t\t\t\t\t\t\t\tif (this.initialize === 'initialize') {\n\t\t\t\t\t\t\t\t\tthis(api);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// Assign initial pre-render events\n\t\t\t\t\t\t\tapi._assignInitialEvents(event);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t};\n\n\t\t// Expose class\n\t\t$.qtip = QTip;\n\n\t\t// Populated in render method\n\t\tQTIP.api = {};\n\t\t;$.each({\n\t\t\t/* Allow other plugins to successfully retrieve the title of an element with a qTip applied */\n\t\t\tattr: function attr(_attr, val) {\n\t\t\t\tif (this.length) {\n\t\t\t\t\tvar self = this[0],\n\t\t\t\t\t    title = 'title',\n\t\t\t\t\t    api = $.data(self, 'qtip');\n\n\t\t\t\t\tif (_attr === title && api && 'object' === (typeof api === 'undefined' ? 'undefined' : _typeof(api)) && api.options.suppress) {\n\t\t\t\t\t\tif (arguments.length < 2) {\n\t\t\t\t\t\t\treturn $.attr(self, oldtitle);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If qTip is rendered and title was originally used as content, update it\n\t\t\t\t\t\tif (api && api.options.content.attr === title && api.cache.attr) {\n\t\t\t\t\t\t\tapi.set('content.text', val);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Use the regular attr method to set, then cache the result\n\t\t\t\t\t\treturn this.attr(oldtitle, val);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn $.fn['attr' + replaceSuffix].apply(this, arguments);\n\t\t\t},\n\n\t\t\t/* Allow clone to correctly retrieve cached title attributes */\n\t\t\tclone: function clone(keepData) {\n\t\t\t\tvar titles = $([]),\n\t\t\t\t    title = 'title',\n\n\n\t\t\t\t// Clone our element using the real clone method\n\t\t\t\telems = $.fn['clone' + replaceSuffix].apply(this, arguments);\n\n\t\t\t\t// Grab all elements with an oldtitle set, and change it to regular title attribute, if keepData is false\n\t\t\t\tif (!keepData) {\n\t\t\t\t\telems.filter('[' + oldtitle + ']').attr('title', function () {\n\t\t\t\t\t\treturn $.attr(this, oldtitle);\n\t\t\t\t\t}).removeAttr(oldtitle);\n\t\t\t\t}\n\n\t\t\t\treturn elems;\n\t\t\t}\n\t\t}, function (name, func) {\n\t\t\tif (!func || $.fn[name + replaceSuffix]) {\n\t\t\t\treturn TRUE;\n\t\t\t}\n\n\t\t\tvar old = $.fn[name + replaceSuffix] = $.fn[name];\n\t\t\t$.fn[name] = function () {\n\t\t\t\treturn func.apply(this, arguments) || old.apply(this, arguments);\n\t\t\t};\n\t\t});\n\n\t\t/* Fire off 'removeqtip' handler in $.cleanData if jQuery UI not present (it already does similar).\n   * This snippet is taken directly from jQuery UI source code found here:\n   *     http://code.jquery.com/ui/jquery-ui-git.js\n   */\n\t\tif (!$.ui) {\n\t\t\t$['cleanData' + replaceSuffix] = $.cleanData;\n\t\t\t$.cleanData = function (elems) {\n\t\t\t\tfor (var i = 0, elem; (elem = $(elems[i])).length; i++) {\n\t\t\t\t\tif (elem.attr(ATTR_HAS)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\telem.triggerHandler('removeqtip');\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$['cleanData' + replaceSuffix].apply(this, arguments);\n\t\t\t};\n\t\t}\n\t\t; // qTip version\n\t\tQTIP.version = '2.2.1-29-';\n\n\t\t// Base ID for all qTips\n\t\tQTIP.nextid = 0;\n\n\t\t// Inactive events array\n\t\tQTIP.inactiveEvents = INACTIVE_EVENTS;\n\n\t\t// Base z-index for all qTips\n\t\tQTIP.zindex = 15000;\n\n\t\t// Define configuration defaults\n\t\tQTIP.defaults = {\n\t\t\tprerender: FALSE,\n\t\t\tid: FALSE,\n\t\t\toverwrite: TRUE,\n\t\t\tsuppress: TRUE,\n\t\t\tcontent: {\n\t\t\t\ttext: TRUE,\n\t\t\t\tattr: 'title',\n\t\t\t\ttitle: FALSE,\n\t\t\t\tbutton: FALSE\n\t\t\t},\n\t\t\tposition: {\n\t\t\t\tmy: 'top left',\n\t\t\t\tat: 'bottom right',\n\t\t\t\ttarget: FALSE,\n\t\t\t\tcontainer: FALSE,\n\t\t\t\tviewport: FALSE,\n\t\t\t\tadjust: {\n\t\t\t\t\tx: 0, y: 0,\n\t\t\t\t\tmouse: TRUE,\n\t\t\t\t\tscroll: TRUE,\n\t\t\t\t\tresize: TRUE,\n\t\t\t\t\tmethod: 'flipinvert flipinvert'\n\t\t\t\t},\n\t\t\t\teffect: function effect(api, pos, viewport) {\n\t\t\t\t\t$(this).animate(pos, {\n\t\t\t\t\t\tduration: 200,\n\t\t\t\t\t\tqueue: FALSE\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tshow: {\n\t\t\t\ttarget: FALSE,\n\t\t\t\tevent: 'mouseenter',\n\t\t\t\teffect: TRUE,\n\t\t\t\tdelay: 90,\n\t\t\t\tsolo: FALSE,\n\t\t\t\tready: FALSE,\n\t\t\t\tautofocus: FALSE\n\t\t\t},\n\t\t\thide: {\n\t\t\t\ttarget: FALSE,\n\t\t\t\tevent: 'mouseleave',\n\t\t\t\teffect: TRUE,\n\t\t\t\tdelay: 0,\n\t\t\t\tfixed: FALSE,\n\t\t\t\tinactive: FALSE,\n\t\t\t\tleave: 'window',\n\t\t\t\tdistance: FALSE\n\t\t\t},\n\t\t\tstyle: {\n\t\t\t\tclasses: '',\n\t\t\t\twidget: FALSE,\n\t\t\t\twidth: FALSE,\n\t\t\t\theight: FALSE,\n\t\t\t\tdef: TRUE\n\t\t\t},\n\t\t\tevents: {\n\t\t\t\trender: NULL,\n\t\t\t\tmove: NULL,\n\t\t\t\tshow: NULL,\n\t\t\t\thide: NULL,\n\t\t\t\ttoggle: NULL,\n\t\t\t\tvisible: NULL,\n\t\t\t\thidden: NULL,\n\t\t\t\tfocus: NULL,\n\t\t\t\tblur: NULL\n\t\t\t}\n\t\t};\n\t\t;var TIP,\n\n\n\t\t// .bind()/.on() namespace\n\t\tTIPNS = '.qtip-tip',\n\n\n\t\t// Common CSS strings\n\t\tMARGIN = 'margin',\n\t\t    BORDER = 'border',\n\t\t    COLOR = 'color',\n\t\t    BG_COLOR = 'background-color',\n\t\t    TRANSPARENT = 'transparent',\n\t\t    IMPORTANT = ' !important',\n\n\n\t\t// Check if the browser supports <canvas/> elements\n\t\tHASCANVAS = !!document.createElement('canvas').getContext,\n\n\n\t\t// Invalid colour values used in parseColours()\n\t\tINVALID = /rgba?\\(0, 0, 0(, 0)?\\)|transparent|#123456/i;\n\n\t\t// Camel-case method, taken from jQuery source\n\t\t// http://code.jquery.com/jquery-1.8.0.js\n\t\tfunction camel(s) {\n\t\t\treturn s.charAt(0).toUpperCase() + s.slice(1);\n\t\t}\n\n\t\t/*\n   * Modified from Modernizr's testPropsAll()\n   * http://modernizr.com/downloads/modernizr-latest.js\n   */\n\t\tvar cssProps = {},\n\t\t    cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\t\tfunction vendorCss(elem, prop) {\n\t\t\tvar ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n\t\t\t    props = (prop + ' ' + cssPrefixes.join(ucProp + ' ') + ucProp).split(' '),\n\t\t\t    cur,\n\t\t\t    val,\n\t\t\t    i = 0;\n\n\t\t\t// If the property has already been mapped...\n\t\t\tif (cssProps[prop]) {\n\t\t\t\treturn elem.css(cssProps[prop]);\n\t\t\t}\n\n\t\t\twhile (cur = props[i++]) {\n\t\t\t\tif ((val = elem.css(cur)) !== undefined) {\n\t\t\t\t\treturn cssProps[prop] = cur, val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Parse a given elements CSS property into an int\n\t\tfunction intCss(elem, prop) {\n\t\t\treturn Math.ceil(parseFloat(vendorCss(elem, prop)));\n\t\t}\n\n\t\t// VML creation (for IE only)\n\t\tif (!HASCANVAS) {\n\t\t\tvar createVML = function createVML(tag, props, style) {\n\t\t\t\treturn '<qtipvml:' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"qtip-vml\" ' + (props || '') + ' style=\"behavior: url(#default#VML); ' + (style || '') + '\" />';\n\t\t\t};\n\t\t}\n\n\t\t// Canvas only definitions\n\t\telse {\n\t\t\t\tvar PIXEL_RATIO = window.devicePixelRatio || 1,\n\t\t\t\t    BACKING_STORE_RATIO = function () {\n\t\t\t\t\tvar context = document.createElement('canvas').getContext('2d');\n\t\t\t\t\treturn context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;\n\t\t\t\t}(),\n\t\t\t\t    SCALE = PIXEL_RATIO / BACKING_STORE_RATIO;\n\t\t\t}\n\n\t\tfunction Tip(qtip, options) {\n\t\t\tthis._ns = 'tip';\n\t\t\tthis.options = options;\n\t\t\tthis.offset = options.offset;\n\t\t\tthis.size = [options.width, options.height];\n\n\t\t\t// Initialize\n\t\t\tthis.init(this.qtip = qtip);\n\t\t}\n\n\t\t$.extend(Tip.prototype, {\n\t\t\tinit: function init(qtip) {\n\t\t\t\tvar context, tip;\n\n\t\t\t\t// Create tip element and prepend to the tooltip\n\t\t\t\ttip = this.element = qtip.elements.tip = $('<div />', { 'class': NAMESPACE + '-tip' }).prependTo(qtip.tooltip);\n\n\t\t\t\t// Create tip drawing element(s)\n\t\t\t\tif (HASCANVAS) {\n\t\t\t\t\t// save() as soon as we create the canvas element so FF2 doesn't bork on our first restore()!\n\t\t\t\t\tcontext = $('<canvas />').appendTo(this.element)[0].getContext('2d');\n\n\t\t\t\t\t// Setup constant parameters\n\t\t\t\t\tcontext.lineJoin = 'miter';\n\t\t\t\t\tcontext.miterLimit = 100000;\n\t\t\t\t\tcontext.save();\n\t\t\t\t} else {\n\t\t\t\t\tcontext = createVML('shape', 'coordorigin=\"0,0\"', 'position:absolute;');\n\t\t\t\t\tthis.element.html(context + context);\n\n\t\t\t\t\t// Prevent mousing down on the tip since it causes problems with .live() handling in IE due to VML\n\t\t\t\t\tqtip._bind($('*', tip).add(tip), ['click', 'mousedown'], function (event) {\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t}, this._ns);\n\t\t\t\t}\n\n\t\t\t\t// Bind update events\n\t\t\t\tqtip._bind(qtip.tooltip, 'tooltipmove', this.reposition, this._ns, this);\n\n\t\t\t\t// Create it\n\t\t\t\tthis.create();\n\t\t\t},\n\n\t\t\t_swapDimensions: function _swapDimensions() {\n\t\t\t\tthis.size[0] = this.options.height;\n\t\t\t\tthis.size[1] = this.options.width;\n\t\t\t},\n\t\t\t_resetDimensions: function _resetDimensions() {\n\t\t\t\tthis.size[0] = this.options.width;\n\t\t\t\tthis.size[1] = this.options.height;\n\t\t\t},\n\n\t\t\t_useTitle: function _useTitle(corner) {\n\t\t\t\tvar titlebar = this.qtip.elements.titlebar;\n\t\t\t\treturn titlebar && (corner.y === TOP || corner.y === CENTER && this.element.position().top + this.size[1] / 2 + this.options.offset < titlebar.outerHeight(TRUE));\n\t\t\t},\n\n\t\t\t_parseCorner: function _parseCorner(corner) {\n\t\t\t\tvar my = this.qtip.options.position.my;\n\n\t\t\t\t// Detect corner and mimic properties\n\t\t\t\tif (corner === FALSE || my === FALSE) {\n\t\t\t\t\tcorner = FALSE;\n\t\t\t\t} else if (corner === TRUE) {\n\t\t\t\t\tcorner = new CORNER(my.string());\n\t\t\t\t} else if (!corner.string) {\n\t\t\t\t\tcorner = new CORNER(corner);\n\t\t\t\t\tcorner.fixed = TRUE;\n\t\t\t\t}\n\n\t\t\t\treturn corner;\n\t\t\t},\n\n\t\t\t_parseWidth: function _parseWidth(corner, side, use) {\n\t\t\t\tvar elements = this.qtip.elements,\n\t\t\t\t    prop = BORDER + camel(side) + 'Width';\n\n\t\t\t\treturn (use ? intCss(use, prop) : intCss(elements.content, prop) || intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop)) || 0;\n\t\t\t},\n\n\t\t\t_parseRadius: function _parseRadius(corner) {\n\t\t\t\tvar elements = this.qtip.elements,\n\t\t\t\t    prop = BORDER + camel(corner.y) + camel(corner.x) + 'Radius';\n\n\t\t\t\treturn BROWSER.ie < 9 ? 0 : intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop) || 0;\n\t\t\t},\n\n\t\t\t_invalidColour: function _invalidColour(elem, prop, compare) {\n\t\t\t\tvar val = elem.css(prop);\n\t\t\t\treturn !val || compare && val === elem.css(compare) || INVALID.test(val) ? FALSE : val;\n\t\t\t},\n\n\t\t\t_parseColours: function _parseColours(corner) {\n\t\t\t\tvar elements = this.qtip.elements,\n\t\t\t\t    tip = this.element.css('cssText', ''),\n\t\t\t\t    borderSide = BORDER + camel(corner[corner.precedance]) + camel(COLOR),\n\t\t\t\t    colorElem = this._useTitle(corner) && elements.titlebar || elements.content,\n\t\t\t\t    css = this._invalidColour,\n\t\t\t\t    color = [];\n\n\t\t\t\t// Attempt to detect the background colour from various elements, left-to-right precedance\n\t\t\t\tcolor[0] = css(tip, BG_COLOR) || css(colorElem, BG_COLOR) || css(elements.content, BG_COLOR) || css(elements.tooltip, BG_COLOR) || tip.css(BG_COLOR);\n\n\t\t\t\t// Attempt to detect the correct border side colour from various elements, left-to-right precedance\n\t\t\t\tcolor[1] = css(tip, borderSide, COLOR) || css(colorElem, borderSide, COLOR) || css(elements.content, borderSide, COLOR) || css(elements.tooltip, borderSide, COLOR) || elements.tooltip.css(borderSide);\n\n\t\t\t\t// Reset background and border colours\n\t\t\t\t$('*', tip).add(tip).css('cssText', BG_COLOR + ':' + TRANSPARENT + IMPORTANT + ';' + BORDER + ':0' + IMPORTANT + ';');\n\n\t\t\t\treturn color;\n\t\t\t},\n\n\t\t\t_calculateSize: function _calculateSize(corner) {\n\t\t\t\tvar y = corner.precedance === Y,\n\t\t\t\t    width = this.options['width'],\n\t\t\t\t    height = this.options['height'],\n\t\t\t\t    isCenter = corner.abbrev() === 'c',\n\t\t\t\t    base = (y ? width : height) * (isCenter ? 0.5 : 1),\n\t\t\t\t    pow = Math.pow,\n\t\t\t\t    round = Math.round,\n\t\t\t\t    bigHyp,\n\t\t\t\t    ratio,\n\t\t\t\t    result,\n\t\t\t\t    smallHyp = Math.sqrt(pow(base, 2) + pow(height, 2)),\n\t\t\t\t    hyp = [this.border / base * smallHyp, this.border / height * smallHyp];\n\n\t\t\t\thyp[2] = Math.sqrt(pow(hyp[0], 2) - pow(this.border, 2));\n\t\t\t\thyp[3] = Math.sqrt(pow(hyp[1], 2) - pow(this.border, 2));\n\n\t\t\t\tbigHyp = smallHyp + hyp[2] + hyp[3] + (isCenter ? 0 : hyp[0]);\n\t\t\t\tratio = bigHyp / smallHyp;\n\n\t\t\t\tresult = [round(ratio * width), round(ratio * height)];\n\t\t\t\treturn y ? result : result.reverse();\n\t\t\t},\n\n\t\t\t// Tip coordinates calculator\n\t\t\t_calculateTip: function _calculateTip(corner, size, scale) {\n\t\t\t\tscale = scale || 1;\n\t\t\t\tsize = size || this.size;\n\n\t\t\t\tvar width = size[0] * scale,\n\t\t\t\t    height = size[1] * scale,\n\t\t\t\t    width2 = Math.ceil(width / 2),\n\t\t\t\t    height2 = Math.ceil(height / 2),\n\n\n\t\t\t\t// Define tip coordinates in terms of height and width values\n\t\t\t\ttips = {\n\t\t\t\t\tbr: [0, 0, width, height, width, 0],\n\t\t\t\t\tbl: [0, 0, width, 0, 0, height],\n\t\t\t\t\ttr: [0, height, width, 0, width, height],\n\t\t\t\t\ttl: [0, 0, 0, height, width, height],\n\t\t\t\t\ttc: [0, height, width2, 0, width, height],\n\t\t\t\t\tbc: [0, 0, width, 0, width2, height],\n\t\t\t\t\trc: [0, 0, width, height2, 0, height],\n\t\t\t\t\tlc: [width, 0, width, height, 0, height2]\n\t\t\t\t};\n\n\t\t\t\t// Set common side shapes\n\t\t\t\ttips.lt = tips.br;tips.rt = tips.bl;\n\t\t\t\ttips.lb = tips.tr;tips.rb = tips.tl;\n\n\t\t\t\treturn tips[corner.abbrev()];\n\t\t\t},\n\n\t\t\t// Tip coordinates drawer (canvas)\n\t\t\t_drawCoords: function _drawCoords(context, coords) {\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.moveTo(coords[0], coords[1]);\n\t\t\t\tcontext.lineTo(coords[2], coords[3]);\n\t\t\t\tcontext.lineTo(coords[4], coords[5]);\n\t\t\t\tcontext.closePath();\n\t\t\t},\n\n\t\t\tcreate: function create() {\n\t\t\t\t// Determine tip corner\n\t\t\t\tvar c = this.corner = (HASCANVAS || BROWSER.ie) && this._parseCorner(this.options.corner);\n\n\t\t\t\t// If we have a tip corner...\n\t\t\t\tif (this.enabled = !!this.corner && this.corner.abbrev() !== 'c') {\n\t\t\t\t\t// Cache it\n\t\t\t\t\tthis.qtip.cache.corner = c.clone();\n\n\t\t\t\t\t// Create it\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\n\t\t\t\t// Toggle tip element\n\t\t\t\tthis.element.toggle(this.enabled);\n\n\t\t\t\treturn this.corner;\n\t\t\t},\n\n\t\t\tupdate: function update(corner, position) {\n\t\t\t\tif (!this.enabled) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tvar elements = this.qtip.elements,\n\t\t\t\t    tip = this.element,\n\t\t\t\t    inner = tip.children(),\n\t\t\t\t    options = this.options,\n\t\t\t\t    curSize = this.size,\n\t\t\t\t    mimic = options.mimic,\n\t\t\t\t    round = Math.round,\n\t\t\t\t    color,\n\t\t\t\t    precedance,\n\t\t\t\t    context,\n\t\t\t\t    coords,\n\t\t\t\t    bigCoords,\n\t\t\t\t    translate,\n\t\t\t\t    newSize,\n\t\t\t\t    border,\n\t\t\t\t    BACKING_STORE_RATIO;\n\n\t\t\t\t// Re-determine tip if not already set\n\t\t\t\tif (!corner) {\n\t\t\t\t\tcorner = this.qtip.cache.corner || this.corner;\n\t\t\t\t}\n\n\t\t\t\t// Use corner property if we detect an invalid mimic value\n\t\t\t\tif (mimic === FALSE) {\n\t\t\t\t\tmimic = corner;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise inherit mimic properties from the corner object as necessary\n\t\t\t\telse {\n\t\t\t\t\t\tmimic = new CORNER(mimic);\n\t\t\t\t\t\tmimic.precedance = corner.precedance;\n\n\t\t\t\t\t\tif (mimic.x === 'inherit') {\n\t\t\t\t\t\t\tmimic.x = corner.x;\n\t\t\t\t\t\t} else if (mimic.y === 'inherit') {\n\t\t\t\t\t\t\tmimic.y = corner.y;\n\t\t\t\t\t\t} else if (mimic.x === mimic.y) {\n\t\t\t\t\t\t\tmimic[corner.precedance] = corner[corner.precedance];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tprecedance = mimic.precedance;\n\n\t\t\t\t// Ensure the tip width.height are relative to the tip position\n\t\t\t\tif (corner.precedance === X) {\n\t\t\t\t\tthis._swapDimensions();\n\t\t\t\t} else {\n\t\t\t\t\tthis._resetDimensions();\n\t\t\t\t}\n\n\t\t\t\t// Update our colours\n\t\t\t\tcolor = this.color = this._parseColours(corner);\n\n\t\t\t\t// Detect border width, taking into account colours\n\t\t\t\tif (color[1] !== TRANSPARENT) {\n\t\t\t\t\t// Grab border width\n\t\t\t\t\tborder = this.border = this._parseWidth(corner, corner[corner.precedance]);\n\n\t\t\t\t\t// If border width isn't zero, use border color as fill if it's not invalid (1.0 style tips)\n\t\t\t\t\tif (options.border && border < 1 && !INVALID.test(color[1])) {\n\t\t\t\t\t\tcolor[0] = color[1];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set border width (use detected border width if options.border is true)\n\t\t\t\t\tthis.border = border = options.border !== TRUE ? options.border : border;\n\t\t\t\t}\n\n\t\t\t\t// Border colour was invalid, set border to zero\n\t\t\t\telse {\n\t\t\t\t\t\tthis.border = border = 0;\n\t\t\t\t\t}\n\n\t\t\t\t// Determine tip size\n\t\t\t\tnewSize = this.size = this._calculateSize(corner);\n\t\t\t\ttip.css({\n\t\t\t\t\twidth: newSize[0],\n\t\t\t\t\theight: newSize[1],\n\t\t\t\t\tlineHeight: newSize[1] + 'px'\n\t\t\t\t});\n\n\t\t\t\t// Calculate tip translation\n\t\t\t\tif (corner.precedance === Y) {\n\t\t\t\t\ttranslate = [round(mimic.x === LEFT ? border : mimic.x === RIGHT ? newSize[0] - curSize[0] - border : (newSize[0] - curSize[0]) / 2), round(mimic.y === TOP ? newSize[1] - curSize[1] : 0)];\n\t\t\t\t} else {\n\t\t\t\t\ttranslate = [round(mimic.x === LEFT ? newSize[0] - curSize[0] : 0), round(mimic.y === TOP ? border : mimic.y === BOTTOM ? newSize[1] - curSize[1] - border : (newSize[1] - curSize[1]) / 2)];\n\t\t\t\t}\n\n\t\t\t\t// Canvas drawing implementation\n\t\t\t\tif (HASCANVAS) {\n\t\t\t\t\t// Grab canvas context and clear/save it\n\t\t\t\t\tcontext = inner[0].getContext('2d');\n\t\t\t\t\tcontext.restore();context.save();\n\t\t\t\t\tcontext.clearRect(0, 0, 6000, 6000);\n\n\t\t\t\t\t// Calculate coordinates\n\t\t\t\t\tcoords = this._calculateTip(mimic, curSize, SCALE);\n\t\t\t\t\tbigCoords = this._calculateTip(mimic, this.size, SCALE);\n\n\t\t\t\t\t// Set the canvas size using calculated size\n\t\t\t\t\tinner.attr(WIDTH, newSize[0] * SCALE).attr(HEIGHT, newSize[1] * SCALE);\n\t\t\t\t\tinner.css(WIDTH, newSize[0]).css(HEIGHT, newSize[1]);\n\n\t\t\t\t\t// Draw the outer-stroke tip\n\t\t\t\t\tthis._drawCoords(context, bigCoords);\n\t\t\t\t\tcontext.fillStyle = color[1];\n\t\t\t\t\tcontext.fill();\n\n\t\t\t\t\t// Draw the actual tip\n\t\t\t\t\tcontext.translate(translate[0] * SCALE, translate[1] * SCALE);\n\t\t\t\t\tthis._drawCoords(context, coords);\n\t\t\t\t\tcontext.fillStyle = color[0];\n\t\t\t\t\tcontext.fill();\n\t\t\t\t}\n\n\t\t\t\t// VML (IE Proprietary implementation)\n\t\t\t\telse {\n\t\t\t\t\t\t// Calculate coordinates\n\t\t\t\t\t\tcoords = this._calculateTip(mimic);\n\n\t\t\t\t\t\t// Setup coordinates string\n\t\t\t\t\t\tcoords = 'm' + coords[0] + ',' + coords[1] + ' l' + coords[2] + ',' + coords[3] + ' ' + coords[4] + ',' + coords[5] + ' xe';\n\n\t\t\t\t\t\t// Setup VML-specific offset for pixel-perfection\n\t\t\t\t\t\ttranslate[2] = border && /^(r|b)/i.test(corner.string()) ? BROWSER.ie === 8 ? 2 : 1 : 0;\n\n\t\t\t\t\t\t// Set initial CSS\n\t\t\t\t\t\tinner.css({\n\t\t\t\t\t\t\tcoordsize: newSize[0] + border + ' ' + (newSize[1] + border),\n\t\t\t\t\t\t\tantialias: '' + (mimic.string().indexOf(CENTER) > -1),\n\t\t\t\t\t\t\tleft: translate[0] - translate[2] * Number(precedance === X),\n\t\t\t\t\t\t\ttop: translate[1] - translate[2] * Number(precedance === Y),\n\t\t\t\t\t\t\twidth: newSize[0] + border,\n\t\t\t\t\t\t\theight: newSize[1] + border\n\t\t\t\t\t\t}).each(function (i) {\n\t\t\t\t\t\t\tvar $this = $(this);\n\n\t\t\t\t\t\t\t// Set shape specific attributes\n\t\t\t\t\t\t\t$this[$this.prop ? 'prop' : 'attr']({\n\t\t\t\t\t\t\t\tcoordsize: newSize[0] + border + ' ' + (newSize[1] + border),\n\t\t\t\t\t\t\t\tpath: coords,\n\t\t\t\t\t\t\t\tfillcolor: color[0],\n\t\t\t\t\t\t\t\tfilled: !!i,\n\t\t\t\t\t\t\t\tstroked: !i\n\t\t\t\t\t\t\t}).toggle(!!(border || i));\n\n\t\t\t\t\t\t\t// Check if border is enabled and add stroke element\n\t\t\t\t\t\t\t!i && $this.html(createVML('stroke', 'weight=\"' + border * 2 + 'px\" color=\"' + color[1] + '\" miterlimit=\"1000\" joinstyle=\"miter\"'));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t// Opera bug #357 - Incorrect tip position\n\t\t\t\t// https://github.com/Craga89/qTip2/issues/367\n\t\t\t\twindow.opera && setTimeout(function () {\n\t\t\t\t\telements.tip.css({\n\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\tvisibility: 'visible'\n\t\t\t\t\t});\n\t\t\t\t}, 1);\n\n\t\t\t\t// Position if needed\n\t\t\t\tif (position !== FALSE) {\n\t\t\t\t\tthis.calculate(corner, newSize);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcalculate: function calculate(corner, size) {\n\t\t\t\tif (!this.enabled) {\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\tvar self = this,\n\t\t\t\t    elements = this.qtip.elements,\n\t\t\t\t    tip = this.element,\n\t\t\t\t    userOffset = this.options.offset,\n\t\t\t\t    isWidget = elements.tooltip.hasClass('ui-widget'),\n\t\t\t\t    position = {},\n\t\t\t\t    precedance,\n\t\t\t\t    corners;\n\n\t\t\t\t// Inherit corner if not provided\n\t\t\t\tcorner = corner || this.corner;\n\t\t\t\tprecedance = corner.precedance;\n\n\t\t\t\t// Determine which tip dimension to use for adjustment\n\t\t\t\tsize = size || this._calculateSize(corner);\n\n\t\t\t\t// Setup corners and offset array\n\t\t\t\tcorners = [corner.x, corner.y];\n\t\t\t\tif (precedance === X) {\n\t\t\t\t\tcorners.reverse();\n\t\t\t\t}\n\n\t\t\t\t// Calculate tip position\n\t\t\t\t$.each(corners, function (i, side) {\n\t\t\t\t\tvar b, bc, br;\n\n\t\t\t\t\tif (side === CENTER) {\n\t\t\t\t\t\tb = precedance === Y ? LEFT : TOP;\n\t\t\t\t\t\tposition[b] = '50%';\n\t\t\t\t\t\tposition[MARGIN + '-' + b] = -Math.round(size[precedance === Y ? 0 : 1] / 2) + userOffset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = self._parseWidth(corner, side, elements.tooltip);\n\t\t\t\t\t\tbc = self._parseWidth(corner, side, elements.content);\n\t\t\t\t\t\tbr = self._parseRadius(corner);\n\n\t\t\t\t\t\tposition[side] = Math.max(-self.border, i ? bc : userOffset + (br > b ? br : -b));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Adjust for tip size\n\t\t\t\tposition[corner[precedance]] -= size[precedance === X ? 0 : 1];\n\n\t\t\t\t// Set and return new position\n\t\t\t\ttip.css({ margin: '', top: '', bottom: '', left: '', right: '' }).css(position);\n\t\t\t\treturn position;\n\t\t\t},\n\n\t\t\treposition: function reposition(event, api, pos, viewport) {\n\t\t\t\tif (!this.enabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar cache = api.cache,\n\t\t\t\t    newCorner = this.corner.clone(),\n\t\t\t\t    adjust = pos.adjusted,\n\t\t\t\t    method = api.options.position.adjust.method.split(' '),\n\t\t\t\t    horizontal = method[0],\n\t\t\t\t    vertical = method[1] || method[0],\n\t\t\t\t    shift = { left: FALSE, top: FALSE, x: 0, y: 0 },\n\t\t\t\t    offset,\n\t\t\t\t    css = {},\n\t\t\t\t    props;\n\n\t\t\t\tfunction shiftflip(direction, precedance, popposite, side, opposite) {\n\t\t\t\t\t// Horizontal - Shift or flip method\n\t\t\t\t\tif (direction === SHIFT && newCorner.precedance === precedance && adjust[side] && newCorner[popposite] !== CENTER) {\n\t\t\t\t\t\tnewCorner.precedance = newCorner.precedance === X ? Y : X;\n\t\t\t\t\t} else if (direction !== SHIFT && adjust[side]) {\n\t\t\t\t\t\tnewCorner[precedance] = newCorner[precedance] === CENTER ? adjust[side] > 0 ? side : opposite : newCorner[precedance] === side ? opposite : side;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction shiftonly(xy, side, opposite) {\n\t\t\t\t\tif (newCorner[xy] === CENTER) {\n\t\t\t\t\t\tcss[MARGIN + '-' + side] = shift[xy] = offset[MARGIN + '-' + side] - adjust[side];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprops = offset[opposite] !== undefined ? [adjust[side], -offset[side]] : [-adjust[side], offset[side]];\n\n\t\t\t\t\t\tif ((shift[xy] = Math.max(props[0], props[1])) > props[0]) {\n\t\t\t\t\t\t\tpos[side] -= adjust[side];\n\t\t\t\t\t\t\tshift[side] = FALSE;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcss[offset[opposite] !== undefined ? opposite : side] = shift[xy];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If our tip position isn't fixed e.g. doesn't adjust with viewport...\n\t\t\t\tif (this.corner.fixed !== TRUE) {\n\t\t\t\t\t// Perform shift/flip adjustments\n\t\t\t\t\tshiftflip(horizontal, X, Y, LEFT, RIGHT);\n\t\t\t\t\tshiftflip(vertical, Y, X, TOP, BOTTOM);\n\n\t\t\t\t\t// Update and redraw the tip if needed (check cached details of last drawn tip)\n\t\t\t\t\tif (newCorner.string() !== cache.corner.string() || cache.cornerTop !== adjust.top || cache.cornerLeft !== adjust.left) {\n\t\t\t\t\t\tthis.update(newCorner, FALSE);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Setup tip offset properties\n\t\t\t\toffset = this.calculate(newCorner);\n\n\t\t\t\t// Readjust offset object to make it left/top\n\t\t\t\tif (offset.right !== undefined) {\n\t\t\t\t\toffset.left = -offset.right;\n\t\t\t\t}\n\t\t\t\tif (offset.bottom !== undefined) {\n\t\t\t\t\toffset.top = -offset.bottom;\n\t\t\t\t}\n\t\t\t\toffset.user = this.offset;\n\n\t\t\t\t// Perform shift adjustments\n\t\t\t\tif (shift.left = horizontal === SHIFT && !!adjust.left) {\n\t\t\t\t\tshiftonly(X, LEFT, RIGHT);\n\t\t\t\t}\n\t\t\t\tif (shift.top = vertical === SHIFT && !!adjust.top) {\n\t\t\t\t\tshiftonly(Y, TOP, BOTTOM);\n\t\t\t\t}\n\n\t\t\t\t/*\n    * If the tip is adjusted in both dimensions, or in a\n    * direction that would cause it to be anywhere but the\n    * outer border, hide it!\n    */\n\t\t\t\tthis.element.css(css).toggle(!(shift.x && shift.y || newCorner.x === CENTER && shift.y || newCorner.y === CENTER && shift.x));\n\n\t\t\t\t// Adjust position to accomodate tip dimensions\n\t\t\t\tpos.left -= offset.left.charAt ? offset.user : horizontal !== SHIFT || shift.top || !shift.left && !shift.top ? offset.left + this.border : 0;\n\t\t\t\tpos.top -= offset.top.charAt ? offset.user : vertical !== SHIFT || shift.left || !shift.left && !shift.top ? offset.top + this.border : 0;\n\n\t\t\t\t// Cache details\n\t\t\t\tcache.cornerLeft = adjust.left;cache.cornerTop = adjust.top;\n\t\t\t\tcache.corner = newCorner.clone();\n\t\t\t},\n\n\t\t\tdestroy: function destroy() {\n\t\t\t\t// Unbind events\n\t\t\t\tthis.qtip._unbind(this.qtip.tooltip, this._ns);\n\n\t\t\t\t// Remove the tip element(s)\n\t\t\t\tif (this.qtip.elements.tip) {\n\t\t\t\t\tthis.qtip.elements.tip.find('*').remove().end().remove();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tTIP = PLUGINS.tip = function (api) {\n\t\t\treturn new Tip(api, api.options.style.tip);\n\t\t};\n\n\t\t// Initialize tip on render\n\t\tTIP.initialize = 'render';\n\n\t\t// Setup plugin sanitization options\n\t\tTIP.sanitize = function (options) {\n\t\t\tif (options.style && 'tip' in options.style) {\n\t\t\t\tvar opts = options.style.tip;\n\t\t\t\tif ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') {\n\t\t\t\t\topts = options.style.tip = { corner: opts };\n\t\t\t\t}\n\t\t\t\tif (!/string|boolean/i.test(_typeof(opts.corner))) {\n\t\t\t\t\topts.corner = TRUE;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Add new option checks for the plugin\n\t\tCHECKS.tip = {\n\t\t\t'^position.my|style.tip.(corner|mimic|border)$': function positionMyStyleTipCornerMimicBorder$() {\n\t\t\t\t// Make sure a tip can be drawn\n\t\t\t\tthis.create();\n\n\t\t\t\t// Reposition the tooltip\n\t\t\t\tthis.qtip.reposition();\n\t\t\t},\n\t\t\t'^style.tip.(height|width)$': function styleTipHeightWidth$(obj) {\n\t\t\t\t// Re-set dimensions and redraw the tip\n\t\t\t\tthis.size = [obj.width, obj.height];\n\t\t\t\tthis.update();\n\n\t\t\t\t// Reposition the tooltip\n\t\t\t\tthis.qtip.reposition();\n\t\t\t},\n\t\t\t'^content.title|style.(classes|widget)$': function contentTitleStyleClassesWidget$() {\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t};\n\n\t\t// Extend original qTip defaults\n\t\t$.extend(TRUE, QTIP.defaults, {\n\t\t\tstyle: {\n\t\t\t\ttip: {\n\t\t\t\t\tcorner: TRUE,\n\t\t\t\t\tmimic: FALSE,\n\t\t\t\t\twidth: 6,\n\t\t\t\t\theight: 6,\n\t\t\t\t\tborder: TRUE,\n\t\t\t\t\toffset: 0\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t;var MODAL,\n\t\t    OVERLAY,\n\t\t    MODALCLASS = 'qtip-modal',\n\t\t    MODALSELECTOR = '.' + MODALCLASS;\n\n\t\tOVERLAY = function OVERLAY() {\n\t\t\tvar self = this,\n\t\t\t    focusableElems = {},\n\t\t\t    current,\n\t\t\t    onLast,\n\t\t\t    prevState,\n\t\t\t    elem;\n\n\t\t\t// Modified code from jQuery UI 1.10.0 source\n\t\t\t// http://code.jquery.com/ui/1.10.0/jquery-ui.js\n\t\t\tfunction focusable(element) {\n\t\t\t\t// Use the defined focusable checker when possible\n\t\t\t\tif ($.expr[':'].focusable) {\n\t\t\t\t\treturn $.expr[':'].focusable;\n\t\t\t\t}\n\n\t\t\t\tvar isTabIndexNotNaN = !isNaN($.attr(element, 'tabindex')),\n\t\t\t\t    nodeName = element.nodeName && element.nodeName.toLowerCase(),\n\t\t\t\t    map,\n\t\t\t\t    mapName,\n\t\t\t\t    img;\n\n\t\t\t\tif ('area' === nodeName) {\n\t\t\t\t\tmap = element.parentNode;\n\t\t\t\t\tmapName = map.name;\n\t\t\t\t\tif (!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\timg = $('img[usemap=#' + mapName + ']')[0];\n\t\t\t\t\treturn !!img && img.is(':visible');\n\t\t\t\t}\n\t\t\t\treturn (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : 'a' === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Focus inputs using cached focusable elements (see update())\n\t\t\tfunction focusInputs(blurElems) {\n\t\t\t\t// Blurring body element in IE causes window.open windows to unfocus!\n\t\t\t\tif (focusableElems.length < 1 && blurElems.length) {\n\t\t\t\t\tblurElems.not('body').blur();\n\t\t\t\t}\n\n\t\t\t\t// Focus the inputs\n\t\t\t\telse {\n\t\t\t\t\t\tfocusableElems.first().focus();\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Steal focus from elements outside tooltip\n\t\t\tfunction stealFocus(event) {\n\t\t\t\tif (!elem.is(':visible')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar target = $(event.target),\n\t\t\t\t    tooltip = current.tooltip,\n\t\t\t\t    container = target.closest(SELECTOR),\n\t\t\t\t    targetOnTop;\n\n\t\t\t\t// Determine if input container target is above this\n\t\t\t\ttargetOnTop = container.length < 1 ? FALSE : parseInt(container[0].style.zIndex, 10) > parseInt(tooltip[0].style.zIndex, 10);\n\n\t\t\t\t// If we're showing a modal, but focus has landed on an input below\n\t\t\t\t// this modal, divert focus to the first visible input in this modal\n\t\t\t\t// or if we can't find one... the tooltip itself\n\t\t\t\tif (!targetOnTop && target.closest(SELECTOR)[0] !== tooltip[0]) {\n\t\t\t\t\tfocusInputs(target);\n\t\t\t\t}\n\n\t\t\t\t// Detect when we leave the last focusable element...\n\t\t\t\tonLast = event.target === focusableElems[focusableElems.length - 1];\n\t\t\t}\n\n\t\t\t$.extend(self, {\n\t\t\t\tinit: function init() {\n\t\t\t\t\t// Create document overlay\n\t\t\t\t\telem = self.elem = $('<div />', {\n\t\t\t\t\t\tid: 'qtip-overlay',\n\t\t\t\t\t\thtml: '<div></div>',\n\t\t\t\t\t\tmousedown: function mousedown() {\n\t\t\t\t\t\t\treturn FALSE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).hide();\n\n\t\t\t\t\t// Make sure we can't focus anything outside the tooltip\n\t\t\t\t\t$(document.body).bind('focusin' + MODALSELECTOR, stealFocus);\n\n\t\t\t\t\t// Apply keyboard \"Escape key\" close handler\n\t\t\t\t\t$(document).bind('keydown' + MODALSELECTOR, function (event) {\n\t\t\t\t\t\tif (current && current.options.show.modal.escape && event.keyCode === 27) {\n\t\t\t\t\t\t\tcurrent.hide(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Apply click handler for blur option\n\t\t\t\t\telem.bind('click' + MODALSELECTOR, function (event) {\n\t\t\t\t\t\tif (current && current.options.show.modal.blur) {\n\t\t\t\t\t\t\tcurrent.hide(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn self;\n\t\t\t\t},\n\n\t\t\t\tupdate: function update(api) {\n\t\t\t\t\t// Update current API reference\n\t\t\t\t\tcurrent = api;\n\n\t\t\t\t\t// Update focusable elements if enabled\n\t\t\t\t\tif (api.options.show.modal.stealfocus !== FALSE) {\n\t\t\t\t\t\tfocusableElems = api.tooltip.find('*').filter(function () {\n\t\t\t\t\t\t\treturn focusable(this);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfocusableElems = [];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\ttoggle: function toggle(api, state, duration) {\n\t\t\t\t\tvar docBody = $(document.body),\n\t\t\t\t\t    tooltip = api.tooltip,\n\t\t\t\t\t    options = api.options.show.modal,\n\t\t\t\t\t    effect = options.effect,\n\t\t\t\t\t    type = state ? 'show' : 'hide',\n\t\t\t\t\t    visible = elem.is(':visible'),\n\t\t\t\t\t    visibleModals = $(MODALSELECTOR).filter(':visible:not(:animated)').not(tooltip),\n\t\t\t\t\t    zindex;\n\n\t\t\t\t\t// Set active tooltip API reference\n\t\t\t\t\tself.update(api);\n\n\t\t\t\t\t// If the modal can steal the focus...\n\t\t\t\t\t// Blur the current item and focus anything in the modal we an\n\t\t\t\t\tif (state && options.stealfocus !== FALSE) {\n\t\t\t\t\t\tfocusInputs($(':focus'));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Toggle backdrop cursor style on show\n\t\t\t\t\telem.toggleClass('blurs', options.blur);\n\n\t\t\t\t\t// Append to body on show\n\t\t\t\t\tif (state) {\n\t\t\t\t\t\telem.appendTo(document.body);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent modal from conflicting with show.solo, and don't hide backdrop is other modals are visible\n\t\t\t\t\tif (elem.is(':animated') && visible === state && prevState !== FALSE || !state && visibleModals.length) {\n\t\t\t\t\t\treturn self;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Stop all animations\n\t\t\t\t\telem.stop(TRUE, FALSE);\n\n\t\t\t\t\t// Use custom function if provided\n\t\t\t\t\tif ($.isFunction(effect)) {\n\t\t\t\t\t\teffect.call(elem, state);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If no effect type is supplied, use a simple toggle\n\t\t\t\t\telse if (effect === FALSE) {\n\t\t\t\t\t\t\telem[type]();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Use basic fade function\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\telem.fadeTo(parseInt(duration, 10) || 90, state ? 1 : 0, function () {\n\t\t\t\t\t\t\t\t\tif (!state) {\n\t\t\t\t\t\t\t\t\t\telem.hide();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t// Reset position and detach from body on hide\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\telem.queue(function (next) {\n\t\t\t\t\t\t\telem.css({ left: '', top: '' });\n\t\t\t\t\t\t\tif (!$(MODALSELECTOR).length) {\n\t\t\t\t\t\t\t\telem.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cache the state\n\t\t\t\t\tprevState = state;\n\n\t\t\t\t\t// If the tooltip is destroyed, set reference to null\n\t\t\t\t\tif (current.destroyed) {\n\t\t\t\t\t\tcurrent = NULL;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn self;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tself.init();\n\t\t};\n\t\tOVERLAY = new OVERLAY();\n\n\t\tfunction Modal(api, options) {\n\t\t\tthis.options = options;\n\t\t\tthis._ns = '-modal';\n\n\t\t\tthis.init(this.qtip = api);\n\t\t}\n\n\t\t$.extend(Modal.prototype, {\n\t\t\tinit: function init(qtip) {\n\t\t\t\tvar tooltip = qtip.tooltip;\n\n\t\t\t\t// If modal is disabled... return\n\t\t\t\tif (!this.options.on) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// Set overlay reference\n\t\t\t\tqtip.elements.overlay = OVERLAY.elem;\n\n\t\t\t\t// Add unique attribute so we can grab modal tooltips easily via a SELECTOR, and set z-index\n\t\t\t\ttooltip.addClass(MODALCLASS).css('z-index', QTIP.modal_zindex + $(MODALSELECTOR).length);\n\n\t\t\t\t// Apply our show/hide/focus modal events\n\t\t\t\tqtip._bind(tooltip, ['tooltipshow', 'tooltiphide'], function (event, api, duration) {\n\t\t\t\t\tvar oEvent = event.originalEvent;\n\n\t\t\t\t\t// Make sure mouseout doesn't trigger a hide when showing the modal and mousing onto backdrop\n\t\t\t\t\tif (event.target === tooltip[0]) {\n\t\t\t\t\t\tif (oEvent && event.type === 'tooltiphide' && /mouse(leave|enter)/.test(oEvent.type) && $(oEvent.relatedTarget).closest(OVERLAY.elem[0]).length) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t\t} else if (!oEvent || oEvent && oEvent.type !== 'tooltipsolo') {\n\t\t\t\t\t\t\tthis.toggle(event, event.type === 'tooltipshow', duration);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, this._ns, this);\n\n\t\t\t\t// Adjust modal z-index on tooltip focus\n\t\t\t\tqtip._bind(tooltip, 'tooltipfocus', function (event, api) {\n\t\t\t\t\t// If focus was cancelled before it reached us, don't do anything\n\t\t\t\t\tif (event.isDefaultPrevented() || event.target !== tooltip[0]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar qtips = $(MODALSELECTOR),\n\n\n\t\t\t\t\t// Keep the modal's lower than other, regular qtips\n\t\t\t\t\tnewIndex = QTIP.modal_zindex + qtips.length,\n\t\t\t\t\t    curIndex = parseInt(tooltip[0].style.zIndex, 10);\n\n\t\t\t\t\t// Set overlay z-index\n\t\t\t\t\tOVERLAY.elem[0].style.zIndex = newIndex - 1;\n\n\t\t\t\t\t// Reduce modal z-index's and keep them properly ordered\n\t\t\t\t\tqtips.each(function () {\n\t\t\t\t\t\tif (this.style.zIndex > curIndex) {\n\t\t\t\t\t\t\tthis.style.zIndex -= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Fire blur event for focused tooltip\n\t\t\t\t\tqtips.filter('.' + CLASS_FOCUS).qtip('blur', event.originalEvent);\n\n\t\t\t\t\t// Set the new z-index\n\t\t\t\t\ttooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;\n\n\t\t\t\t\t// Set current\n\t\t\t\t\tOVERLAY.update(api);\n\n\t\t\t\t\t// Prevent default handling\n\t\t\t\t\ttry {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}, this._ns, this);\n\n\t\t\t\t// Focus any other visible modals when this one hides\n\t\t\t\tqtip._bind(tooltip, 'tooltiphide', function (event) {\n\t\t\t\t\tif (event.target === tooltip[0]) {\n\t\t\t\t\t\t$(MODALSELECTOR).filter(':visible').not(tooltip).last().qtip('focus', event);\n\t\t\t\t\t}\n\t\t\t\t}, this._ns, this);\n\t\t\t},\n\n\t\t\ttoggle: function toggle(event, state, duration) {\n\t\t\t\t// Make sure default event hasn't been prevented\n\t\t\t\tif (event && event.isDefaultPrevented()) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// Toggle it\n\t\t\t\tOVERLAY.toggle(this.qtip, !!state, duration);\n\t\t\t},\n\n\t\t\tdestroy: function destroy() {\n\t\t\t\t// Remove modal class\n\t\t\t\tthis.qtip.tooltip.removeClass(MODALCLASS);\n\n\t\t\t\t// Remove bound events\n\t\t\t\tthis.qtip._unbind(this.qtip.tooltip, this._ns);\n\n\t\t\t\t// Delete element reference\n\t\t\t\tOVERLAY.toggle(this.qtip, FALSE);\n\t\t\t\tdelete this.qtip.elements.overlay;\n\t\t\t}\n\t\t});\n\n\t\tMODAL = PLUGINS.modal = function (api) {\n\t\t\treturn new Modal(api, api.options.show.modal);\n\t\t};\n\n\t\t// Setup sanitiztion rules\n\t\tMODAL.sanitize = function (opts) {\n\t\t\tif (opts.show) {\n\t\t\t\tif (_typeof(opts.show.modal) !== 'object') {\n\t\t\t\t\topts.show.modal = { on: !!opts.show.modal };\n\t\t\t\t} else if (typeof opts.show.modal.on === 'undefined') {\n\t\t\t\t\topts.show.modal.on = TRUE;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Base z-index for all modal tooltips (use qTip core z-index as a base)\n\t\tQTIP.modal_zindex = QTIP.zindex - 200;\n\n\t\t// Plugin needs to be initialized on render\n\t\tMODAL.initialize = 'render';\n\n\t\t// Setup option set checks\n\t\tCHECKS.modal = {\n\t\t\t'^show.modal.(on|blur)$': function showModalOnBlur$() {\n\t\t\t\t// Initialise\n\t\t\t\tthis.destroy();\n\t\t\t\tthis.init();\n\n\t\t\t\t// Show the modal if not visible already and tooltip is visible\n\t\t\t\tthis.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth > 0);\n\t\t\t}\n\t\t};\n\n\t\t// Extend original api defaults\n\t\t$.extend(TRUE, QTIP.defaults, {\n\t\t\tshow: {\n\t\t\t\tmodal: {\n\t\t\t\t\ton: FALSE,\n\t\t\t\t\teffect: TRUE,\n\t\t\t\t\tblur: TRUE,\n\t\t\t\t\tstealfocus: TRUE,\n\t\t\t\t\tescape: TRUE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t;PLUGINS.viewport = function (api, position, posOptions, targetWidth, targetHeight, elemWidth, elemHeight) {\n\t\t\tvar target = posOptions.target,\n\t\t\t    tooltip = api.elements.tooltip,\n\t\t\t    my = posOptions.my,\n\t\t\t    at = posOptions.at,\n\t\t\t    adjust = posOptions.adjust,\n\t\t\t    method = adjust.method.split(' '),\n\t\t\t    methodX = method[0],\n\t\t\t    methodY = method[1] || method[0],\n\t\t\t    viewport = posOptions.viewport,\n\t\t\t    container = posOptions.container,\n\t\t\t    cache = api.cache,\n\t\t\t    adjusted = { left: 0, top: 0 },\n\t\t\t    fixed,\n\t\t\t    newMy,\n\t\t\t    containerOffset,\n\t\t\t    containerStatic,\n\t\t\t    viewportWidth,\n\t\t\t    viewportHeight,\n\t\t\t    viewportScroll,\n\t\t\t    viewportOffset;\n\n\t\t\t// If viewport is not a jQuery element, or it's the window/document, or no adjustment method is used... return\n\t\t\tif (!viewport.jquery || target[0] === window || target[0] === document.body || adjust.method === 'none') {\n\t\t\t\treturn adjusted;\n\t\t\t}\n\n\t\t\t// Cach container details\n\t\t\tcontainerOffset = container.offset() || adjusted;\n\t\t\tcontainerStatic = container.css('position') === 'static';\n\n\t\t\t// Cache our viewport details\n\t\t\tfixed = tooltip.css('position') === 'fixed';\n\t\t\tviewportWidth = viewport[0] === window ? viewport.width() : viewport.outerWidth(FALSE);\n\t\t\tviewportHeight = viewport[0] === window ? viewport.height() : viewport.outerHeight(FALSE);\n\t\t\tviewportScroll = { left: fixed ? 0 : viewport.scrollLeft(), top: fixed ? 0 : viewport.scrollTop() };\n\t\t\tviewportOffset = viewport.offset() || adjusted;\n\n\t\t\t// Generic calculation method\n\t\t\tfunction calculate(side, otherSide, type, adjust, side1, side2, lengthName, targetLength, elemLength) {\n\t\t\t\tvar initialPos = position[side1],\n\t\t\t\t    mySide = my[side],\n\t\t\t\t    atSide = at[side],\n\t\t\t\t    isShift = type === SHIFT,\n\t\t\t\t    myLength = mySide === side1 ? elemLength : mySide === side2 ? -elemLength : -elemLength / 2,\n\t\t\t\t    atLength = atSide === side1 ? targetLength : atSide === side2 ? -targetLength : -targetLength / 2,\n\t\t\t\t    sideOffset = viewportScroll[side1] + viewportOffset[side1] - (containerStatic ? 0 : containerOffset[side1]),\n\t\t\t\t    overflow1 = sideOffset - initialPos,\n\t\t\t\t    overflow2 = initialPos + elemLength - (lengthName === WIDTH ? viewportWidth : viewportHeight) - sideOffset,\n\t\t\t\t    offset = myLength - (my.precedance === side || mySide === my[otherSide] ? atLength : 0) - (atSide === CENTER ? targetLength / 2 : 0);\n\n\t\t\t\t// shift\n\t\t\t\tif (isShift) {\n\t\t\t\t\toffset = (mySide === side1 ? 1 : -1) * myLength;\n\n\t\t\t\t\t// Adjust position but keep it within viewport dimensions\n\t\t\t\t\tposition[side1] += overflow1 > 0 ? overflow1 : overflow2 > 0 ? -overflow2 : 0;\n\t\t\t\t\tposition[side1] = Math.max(-containerOffset[side1] + viewportOffset[side1], initialPos - offset, Math.min(Math.max(-containerOffset[side1] + viewportOffset[side1] + (lengthName === WIDTH ? viewportWidth : viewportHeight), initialPos + offset), position[side1],\n\n\t\t\t\t\t// Make sure we don't adjust complete off the element when using 'center'\n\t\t\t\t\tmySide === 'center' ? initialPos - myLength : 1E9));\n\t\t\t\t}\n\n\t\t\t\t// flip/flipinvert\n\t\t\t\telse {\n\t\t\t\t\t\t// Update adjustment amount depending on if using flipinvert or flip\n\t\t\t\t\t\tadjust *= type === FLIPINVERT ? 2 : 0;\n\n\t\t\t\t\t\t// Check for overflow on the left/top\n\t\t\t\t\t\tif (overflow1 > 0 && (mySide !== side1 || overflow2 > 0)) {\n\t\t\t\t\t\t\tposition[side1] -= offset + adjust;\n\t\t\t\t\t\t\tnewMy.invert(side, side1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Check for overflow on the bottom/right\n\t\t\t\t\t\telse if (overflow2 > 0 && (mySide !== side2 || overflow1 > 0)) {\n\t\t\t\t\t\t\t\tposition[side1] -= (mySide === CENTER ? -offset : offset) + adjust;\n\t\t\t\t\t\t\t\tnewMy.invert(side, side2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Make sure we haven't made things worse with the adjustment and reset if so\n\t\t\t\t\t\tif (position[side1] < viewportScroll && -position[side1] > overflow2) {\n\t\t\t\t\t\t\tposition[side1] = initialPos;newMy = my.clone();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\treturn position[side1] - initialPos;\n\t\t\t}\n\n\t\t\t// Set newMy if using flip or flipinvert methods\n\t\t\tif (methodX !== 'shift' || methodY !== 'shift') {\n\t\t\t\tnewMy = my.clone();\n\t\t\t}\n\n\t\t\t// Adjust position based onviewport and adjustment options\n\t\t\tadjusted = {\n\t\t\t\tleft: methodX !== 'none' ? calculate(X, Y, methodX, adjust.x, LEFT, RIGHT, WIDTH, targetWidth, elemWidth) : 0,\n\t\t\t\ttop: methodY !== 'none' ? calculate(Y, X, methodY, adjust.y, TOP, BOTTOM, HEIGHT, targetHeight, elemHeight) : 0,\n\t\t\t\tmy: newMy\n\t\t\t};\n\n\t\t\treturn adjusted;\n\t\t};\n\t\t;PLUGINS.polys = {\n\t\t\t// POLY area coordinate calculator\n\t\t\t//\tSpecial thanks to Ed Cradock for helping out with this.\n\t\t\t//\tUses a binary search algorithm to find suitable coordinates.\n\t\t\tpolygon: function polygon(baseCoords, corner) {\n\t\t\t\tvar result = {\n\t\t\t\t\twidth: 0, height: 0,\n\t\t\t\t\tposition: {\n\t\t\t\t\t\ttop: 1e10, right: 0,\n\t\t\t\t\t\tbottom: 0, left: 1e10\n\t\t\t\t\t},\n\t\t\t\t\tadjustable: FALSE\n\t\t\t\t},\n\t\t\t\t    i = 0,\n\t\t\t\t    next,\n\t\t\t\t    coords = [],\n\t\t\t\t    compareX = 1,\n\t\t\t\t    compareY = 1,\n\t\t\t\t    realX = 0,\n\t\t\t\t    realY = 0,\n\t\t\t\t    newWidth,\n\t\t\t\t    newHeight;\n\n\t\t\t\t// First pass, sanitize coords and determine outer edges\n\t\t\t\ti = baseCoords.length;while (i--) {\n\t\t\t\t\tnext = [parseInt(baseCoords[--i], 10), parseInt(baseCoords[i + 1], 10)];\n\n\t\t\t\t\tif (next[0] > result.position.right) {\n\t\t\t\t\t\tresult.position.right = next[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (next[0] < result.position.left) {\n\t\t\t\t\t\tresult.position.left = next[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (next[1] > result.position.bottom) {\n\t\t\t\t\t\tresult.position.bottom = next[1];\n\t\t\t\t\t}\n\t\t\t\t\tif (next[1] < result.position.top) {\n\t\t\t\t\t\tresult.position.top = next[1];\n\t\t\t\t\t}\n\n\t\t\t\t\tcoords.push(next);\n\t\t\t\t}\n\n\t\t\t\t// Calculate height and width from outer edges\n\t\t\t\tnewWidth = result.width = Math.abs(result.position.right - result.position.left);\n\t\t\t\tnewHeight = result.height = Math.abs(result.position.bottom - result.position.top);\n\n\t\t\t\t// If it's the center corner...\n\t\t\t\tif (corner.abbrev() === 'c') {\n\t\t\t\t\tresult.position = {\n\t\t\t\t\t\tleft: result.position.left + result.width / 2,\n\t\t\t\t\t\ttop: result.position.top + result.height / 2\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t// Second pass, use a binary search algorithm to locate most suitable coordinate\n\t\t\t\t\twhile (newWidth > 0 && newHeight > 0 && compareX > 0 && compareY > 0) {\n\t\t\t\t\t\tnewWidth = Math.floor(newWidth / 2);\n\t\t\t\t\t\tnewHeight = Math.floor(newHeight / 2);\n\n\t\t\t\t\t\tif (corner.x === LEFT) {\n\t\t\t\t\t\t\tcompareX = newWidth;\n\t\t\t\t\t\t} else if (corner.x === RIGHT) {\n\t\t\t\t\t\t\tcompareX = result.width - newWidth;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcompareX += Math.floor(newWidth / 2);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (corner.y === TOP) {\n\t\t\t\t\t\t\tcompareY = newHeight;\n\t\t\t\t\t\t} else if (corner.y === BOTTOM) {\n\t\t\t\t\t\t\tcompareY = result.height - newHeight;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcompareY += Math.floor(newHeight / 2);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ti = coords.length;while (i--) {\n\t\t\t\t\t\t\tif (coords.length < 2) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trealX = coords[i][0] - result.position.left;\n\t\t\t\t\t\t\trealY = coords[i][1] - result.position.top;\n\n\t\t\t\t\t\t\tif (corner.x === LEFT && realX >= compareX || corner.x === RIGHT && realX <= compareX || corner.x === CENTER && (realX < compareX || realX > result.width - compareX) || corner.y === TOP && realY >= compareY || corner.y === BOTTOM && realY <= compareY || corner.y === CENTER && (realY < compareY || realY > result.height - compareY)) {\n\t\t\t\t\t\t\t\tcoords.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult.position = { left: coords[0][0], top: coords[0][1] };\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\trect: function rect(ax, ay, bx, by) {\n\t\t\t\treturn {\n\t\t\t\t\twidth: Math.abs(bx - ax),\n\t\t\t\t\theight: Math.abs(by - ay),\n\t\t\t\t\tposition: {\n\t\t\t\t\t\tleft: Math.min(ax, bx),\n\t\t\t\t\t\ttop: Math.min(ay, by)\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t_angles: {\n\t\t\t\ttc: 3 / 2, tr: 7 / 4, tl: 5 / 4,\n\t\t\t\tbc: 1 / 2, br: 1 / 4, bl: 3 / 4,\n\t\t\t\trc: 2, lc: 1, c: 0\n\t\t\t},\n\t\t\tellipse: function ellipse(cx, cy, rx, ry, corner) {\n\t\t\t\tvar c = PLUGINS.polys._angles[corner.abbrev()],\n\t\t\t\t    rxc = c === 0 ? 0 : rx * Math.cos(c * Math.PI),\n\t\t\t\t    rys = ry * Math.sin(c * Math.PI);\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: rx * 2 - Math.abs(rxc),\n\t\t\t\t\theight: ry * 2 - Math.abs(rys),\n\t\t\t\t\tposition: {\n\t\t\t\t\t\tleft: cx + rxc,\n\t\t\t\t\t\ttop: cy + rys\n\t\t\t\t\t},\n\t\t\t\t\tadjustable: FALSE\n\t\t\t\t};\n\t\t\t},\n\t\t\tcircle: function circle(cx, cy, r, corner) {\n\t\t\t\treturn PLUGINS.polys.ellipse(cx, cy, r, r, corner);\n\t\t\t}\n\t\t};\n\t\t;PLUGINS.svg = function (api, svg, corner) {\n\t\t\tvar doc = $(document),\n\t\t\t    elem = svg[0],\n\t\t\t    root = $(elem.ownerSVGElement),\n\t\t\t    ownerDocument = elem.ownerDocument,\n\t\t\t    strokeWidth2 = (parseInt(svg.css('stroke-width'), 10) || 0) / 2,\n\t\t\t    frameOffset,\n\t\t\t    mtx,\n\t\t\t    transformed,\n\t\t\t    viewBox,\n\t\t\t    len,\n\t\t\t    next,\n\t\t\t    i,\n\t\t\t    points,\n\t\t\t    result,\n\t\t\t    position,\n\t\t\t    dimensions;\n\n\t\t\t// Ascend the parentNode chain until we find an element with getBBox()\n\t\t\twhile (!elem.getBBox) {\n\t\t\t\telem = elem.parentNode;\n\t\t\t}\n\t\t\tif (!elem.getBBox || !elem.parentNode) {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// Determine which shape calculation to use\n\t\t\tswitch (elem.nodeName) {\n\t\t\t\tcase 'ellipse':\n\t\t\t\tcase 'circle':\n\t\t\t\t\tresult = PLUGINS.polys.ellipse(elem.cx.baseVal.value, elem.cy.baseVal.value, (elem.rx || elem.r).baseVal.value + strokeWidth2, (elem.ry || elem.r).baseVal.value + strokeWidth2, corner);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'line':\n\t\t\t\tcase 'polygon':\n\t\t\t\tcase 'polyline':\n\t\t\t\t\t// Determine points object (line has none, so mimic using array)\n\t\t\t\t\tpoints = elem.points || [{ x: elem.x1.baseVal.value, y: elem.y1.baseVal.value }, { x: elem.x2.baseVal.value, y: elem.y2.baseVal.value }];\n\n\t\t\t\t\tfor (result = [], i = -1, len = points.numberOfItems || points.length; ++i < len;) {\n\t\t\t\t\t\tnext = points.getItem ? points.getItem(i) : points[i];\n\t\t\t\t\t\tresult.push.apply(result, [next.x, next.y]);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult = PLUGINS.polys.polygon(result, corner);\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Unknown shape or rectangle? Use bounding box\n\t\t\t\tdefault:\n\t\t\t\t\tresult = elem.getBBox();\n\t\t\t\t\tresult = {\n\t\t\t\t\t\twidth: result.width,\n\t\t\t\t\t\theight: result.height,\n\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\tleft: result.x,\n\t\t\t\t\t\t\ttop: result.y\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Shortcut assignments\n\t\t\tposition = result.position;\n\t\t\troot = root[0];\n\n\t\t\t// Convert position into a pixel value\n\t\t\tif (root.createSVGPoint) {\n\t\t\t\tmtx = elem.getScreenCTM();\n\t\t\t\tpoints = root.createSVGPoint();\n\n\t\t\t\tpoints.x = position.left;\n\t\t\t\tpoints.y = position.top;\n\t\t\t\ttransformed = points.matrixTransform(mtx);\n\t\t\t\tposition.left = transformed.x;\n\t\t\t\tposition.top = transformed.y;\n\t\t\t}\n\n\t\t\t// Check the element is not in a child document, and if so, adjust for frame elements offset\n\t\t\tif (ownerDocument !== document && api.position.target !== 'mouse') {\n\t\t\t\tframeOffset = $((ownerDocument.defaultView || ownerDocument.parentWindow).frameElement).offset();\n\t\t\t\tif (frameOffset) {\n\t\t\t\t\tposition.left += frameOffset.left;\n\t\t\t\t\tposition.top += frameOffset.top;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adjust by scroll offset of owner document\n\t\t\townerDocument = $(ownerDocument);\n\t\t\tposition.left += ownerDocument.scrollLeft();\n\t\t\tposition.top += ownerDocument.scrollTop();\n\n\t\t\treturn result;\n\t\t};\n\t\t;PLUGINS.imagemap = function (api, area, corner, adjustMethod) {\n\t\t\tif (!area.jquery) {\n\t\t\t\tarea = $(area);\n\t\t\t}\n\n\t\t\tvar shape = (area.attr('shape') || 'rect').toLowerCase().replace('poly', 'polygon'),\n\t\t\t    image = $('img[usemap=\"#' + area.parent('map').attr('name') + '\"]'),\n\t\t\t    coordsString = $.trim(area.attr('coords')),\n\t\t\t    coordsArray = coordsString.replace(/,$/, '').split(','),\n\t\t\t    imageOffset,\n\t\t\t    coords,\n\t\t\t    i,\n\t\t\t    next,\n\t\t\t    result,\n\t\t\t    len;\n\n\t\t\t// If we can't find the image using the map...\n\t\t\tif (!image.length) {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// Pass coordinates string if polygon\n\t\t\tif (shape === 'polygon') {\n\t\t\t\tresult = PLUGINS.polys.polygon(coordsArray, corner);\n\t\t\t}\n\n\t\t\t// Otherwise parse the coordinates and pass them as arguments\n\t\t\telse if (PLUGINS.polys[shape]) {\n\t\t\t\t\tfor (i = -1, len = coordsArray.length, coords = []; ++i < len;) {\n\t\t\t\t\t\tcoords.push(parseInt(coordsArray[i], 10));\n\t\t\t\t\t}\n\n\t\t\t\t\tresult = PLUGINS.polys[shape].apply(this, coords.concat(corner));\n\t\t\t\t}\n\n\t\t\t\t// If no shapre calculation method was found, return false\n\t\t\t\telse {\n\t\t\t\t\t\treturn FALSE;\n\t\t\t\t\t}\n\n\t\t\t// Make sure we account for padding and borders on the image\n\t\t\timageOffset = image.offset();\n\t\t\timageOffset.left += Math.ceil((image.outerWidth(FALSE) - image.width()) / 2);\n\t\t\timageOffset.top += Math.ceil((image.outerHeight(FALSE) - image.height()) / 2);\n\n\t\t\t// Add image position to offset coordinates\n\t\t\tresult.position.left += imageOffset.left;\n\t\t\tresult.position.top += imageOffset.top;\n\n\t\t\treturn result;\n\t\t};\n\t\t;var IE6,\n\n\n\t\t/*\n   * BGIFrame adaption (http://plugins.jquery.com/project/bgiframe)\n   * Special thanks to Brandon Aaron\n   */\n\t\tBGIFRAME = '<iframe class=\"qtip-bgiframe\" frameborder=\"0\" tabindex=\"-1\" src=\"javascript:\\'\\';\" ' + ' style=\"display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); ' + '-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\"></iframe>';\n\n\t\tfunction Ie6(api, qtip) {\n\t\t\tthis._ns = 'ie6';\n\t\t\tthis.init(this.qtip = api);\n\t\t}\n\n\t\t$.extend(Ie6.prototype, {\n\t\t\t_scroll: function _scroll() {\n\t\t\t\tvar overlay = this.qtip.elements.overlay;\n\t\t\t\toverlay && (overlay[0].style.top = $(window).scrollTop() + 'px');\n\t\t\t},\n\n\t\t\tinit: function init(qtip) {\n\t\t\t\tvar tooltip = qtip.tooltip,\n\t\t\t\t    scroll;\n\n\t\t\t\t// Create the BGIFrame element if needed\n\t\t\t\tif ($('select, object').length < 1) {\n\t\t\t\t\tthis.bgiframe = qtip.elements.bgiframe = $(BGIFRAME).appendTo(tooltip);\n\n\t\t\t\t\t// Update BGIFrame on tooltip move\n\t\t\t\t\tqtip._bind(tooltip, 'tooltipmove', this.adjustBGIFrame, this._ns, this);\n\t\t\t\t}\n\n\t\t\t\t// redraw() container for width/height calculations\n\t\t\t\tthis.redrawContainer = $('<div/>', { id: NAMESPACE + '-rcontainer' }).appendTo(document.body);\n\n\t\t\t\t// Fixup modal plugin if present too\n\t\t\t\tif (qtip.elements.overlay && qtip.elements.overlay.addClass('qtipmodal-ie6fix')) {\n\t\t\t\t\tqtip._bind(window, ['scroll', 'resize'], this._scroll, this._ns, this);\n\t\t\t\t\tqtip._bind(tooltip, ['tooltipshow'], this._scroll, this._ns, this);\n\t\t\t\t}\n\n\t\t\t\t// Set dimensions\n\t\t\t\tthis.redraw();\n\t\t\t},\n\n\t\t\tadjustBGIFrame: function adjustBGIFrame() {\n\t\t\t\tvar tooltip = this.qtip.tooltip,\n\t\t\t\t    dimensions = {\n\t\t\t\t\theight: tooltip.outerHeight(FALSE),\n\t\t\t\t\twidth: tooltip.outerWidth(FALSE)\n\t\t\t\t},\n\t\t\t\t    plugin = this.qtip.plugins.tip,\n\t\t\t\t    tip = this.qtip.elements.tip,\n\t\t\t\t    tipAdjust,\n\t\t\t\t    offset;\n\n\t\t\t\t// Adjust border offset\n\t\t\t\toffset = parseInt(tooltip.css('borderLeftWidth'), 10) || 0;\n\t\t\t\toffset = { left: -offset, top: -offset };\n\n\t\t\t\t// Adjust for tips plugin\n\t\t\t\tif (plugin && tip) {\n\t\t\t\t\ttipAdjust = plugin.corner.precedance === 'x' ? [WIDTH, LEFT] : [HEIGHT, TOP];\n\t\t\t\t\toffset[tipAdjust[1]] -= tip[tipAdjust[0]]();\n\t\t\t\t}\n\n\t\t\t\t// Update bgiframe\n\t\t\t\tthis.bgiframe.css(offset).css(dimensions);\n\t\t\t},\n\n\t\t\t// Max/min width simulator function\n\t\t\tredraw: function redraw() {\n\t\t\t\tif (this.qtip.rendered < 1 || this.drawing) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tvar tooltip = this.qtip.tooltip,\n\t\t\t\t    style = this.qtip.options.style,\n\t\t\t\t    container = this.qtip.options.position.container,\n\t\t\t\t    perc,\n\t\t\t\t    width,\n\t\t\t\t    max,\n\t\t\t\t    min;\n\n\t\t\t\t// Set drawing flag\n\t\t\t\tthis.qtip.drawing = 1;\n\n\t\t\t\t// If tooltip has a set height/width, just set it... like a boss!\n\t\t\t\tif (style.height) {\n\t\t\t\t\ttooltip.css(HEIGHT, style.height);\n\t\t\t\t}\n\t\t\t\tif (style.width) {\n\t\t\t\t\ttooltip.css(WIDTH, style.width);\n\t\t\t\t}\n\n\t\t\t\t// Simulate max/min width if not set width present...\n\t\t\t\telse {\n\t\t\t\t\t\t// Reset width and add fluid class\n\t\t\t\t\t\ttooltip.css(WIDTH, '').appendTo(this.redrawContainer);\n\n\t\t\t\t\t\t// Grab our tooltip width (add 1 if odd so we don't get wrapping problems.. huzzah!)\n\t\t\t\t\t\twidth = tooltip.width();\n\t\t\t\t\t\tif (width % 2 < 1) {\n\t\t\t\t\t\t\twidth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Grab our max/min properties\n\t\t\t\t\t\tmax = tooltip.css('maxWidth') || '';\n\t\t\t\t\t\tmin = tooltip.css('minWidth') || '';\n\n\t\t\t\t\t\t// Parse into proper pixel values\n\t\t\t\t\t\tperc = (max + min).indexOf('%') > -1 ? container.width() / 100 : 0;\n\t\t\t\t\t\tmax = (max.indexOf('%') > -1 ? perc : 1) * parseInt(max, 10) || width;\n\t\t\t\t\t\tmin = (min.indexOf('%') > -1 ? perc : 1) * parseInt(min, 10) || 0;\n\n\t\t\t\t\t\t// Determine new dimension size based on max/min/current values\n\t\t\t\t\t\twidth = max + min ? Math.min(Math.max(width, min), max) : width;\n\n\t\t\t\t\t\t// Set the newly calculated width and remvoe fluid class\n\t\t\t\t\t\ttooltip.css(WIDTH, Math.round(width)).appendTo(container);\n\t\t\t\t\t}\n\n\t\t\t\t// Set drawing flag\n\t\t\t\tthis.drawing = 0;\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tdestroy: function destroy() {\n\t\t\t\t// Remove iframe\n\t\t\t\tthis.bgiframe && this.bgiframe.remove();\n\n\t\t\t\t// Remove bound events\n\t\t\t\tthis.qtip._unbind([window, this.qtip.tooltip], this._ns);\n\t\t\t}\n\t\t});\n\n\t\tIE6 = PLUGINS.ie6 = function (api) {\n\t\t\t// Proceed only if the browser is IE6\n\t\t\treturn BROWSER.ie === 6 ? new Ie6(api) : FALSE;\n\t\t};\n\n\t\tIE6.initialize = 'render';\n\n\t\tCHECKS.ie6 = {\n\t\t\t'^content|style$': function contentStyle$() {\n\t\t\t\tthis.redraw();\n\t\t\t}\n\t\t};\n\t\t;\n\t});\n})(window, document);"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.ui-1.11.4.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.ui-1.11.4.js ***!
  \***********************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! jQuery UI - v1.11.4 - 2015-03-11\n* http://jqueryui.com\n* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js\n* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */\n\n(function (factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([\"jquery\"], factory);\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory(jQuery);\n\t}\n})(function ($) {\n\t/*!\n  * jQuery UI Core 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/category/ui-core/\n  */\n\n\t// $.ui might exist from components with no dependencies, e.g., $.ui.position\n\t$.ui = $.ui || {};\n\n\t$.extend($.ui, {\n\t\tversion: \"1.11.4\",\n\n\t\tkeyCode: {\n\t\t\tBACKSPACE: 8,\n\t\t\tCOMMA: 188,\n\t\t\tDELETE: 46,\n\t\t\tDOWN: 40,\n\t\t\tEND: 35,\n\t\t\tENTER: 13,\n\t\t\tESCAPE: 27,\n\t\t\tHOME: 36,\n\t\t\tLEFT: 37,\n\t\t\tPAGE_DOWN: 34,\n\t\t\tPAGE_UP: 33,\n\t\t\tPERIOD: 190,\n\t\t\tRIGHT: 39,\n\t\t\tSPACE: 32,\n\t\t\tTAB: 9,\n\t\t\tUP: 38\n\t\t}\n\t});\n\n\t// plugins\n\t$.fn.extend({\n\t\tscrollParent: function scrollParent(includeHidden) {\n\t\t\tvar position = this.css(\"position\"),\n\t\t\t    excludeStaticParent = position === \"absolute\",\n\t\t\t    overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\n\t\t\t    scrollParent = this.parents().filter(function () {\n\t\t\t\tvar parent = $(this);\n\t\t\t\tif (excludeStaticParent && parent.css(\"position\") === \"static\") {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn overflowRegex.test(parent.css(\"overflow\") + parent.css(\"overflow-y\") + parent.css(\"overflow-x\"));\n\t\t\t}).eq(0);\n\n\t\t\treturn position === \"fixed\" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;\n\t\t},\n\n\t\tuniqueId: function () {\n\t\t\tvar uuid = 0;\n\n\t\t\treturn function () {\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\tif (!this.id) {\n\t\t\t\t\t\tthis.id = \"ui-id-\" + ++uuid;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}(),\n\n\t\tremoveUniqueId: function removeUniqueId() {\n\t\t\treturn this.each(function () {\n\t\t\t\tif (/^ui-id-\\d+$/.test(this.id)) {\n\t\t\t\t\t$(this).removeAttr(\"id\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t// selectors\n\tfunction _focusable(element, isTabIndexNotNaN) {\n\t\tvar map,\n\t\t    mapName,\n\t\t    img,\n\t\t    nodeName = element.nodeName.toLowerCase();\n\t\tif (\"area\" === nodeName) {\n\t\t\tmap = element.parentNode;\n\t\t\tmapName = map.name;\n\t\t\tif (!element.href || !mapName || map.nodeName.toLowerCase() !== \"map\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\timg = $(\"img[usemap='#\" + mapName + \"']\")[0];\n\t\t\treturn !!img && visible(img);\n\t\t}\n\t\treturn (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : \"a\" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) &&\n\t\t// the element and all of its ancestors must be visible\n\t\tvisible(element);\n\t}\n\n\tfunction visible(element) {\n\t\treturn $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {\n\t\t\treturn $.css(this, \"visibility\") === \"hidden\";\n\t\t}).length;\n\t}\n\n\t$.extend($.expr[\":\"], {\n\t\tdata: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {\n\t\t\treturn function (elem) {\n\t\t\t\treturn !!$.data(elem, dataName);\n\t\t\t};\n\t\t}) :\n\t\t// support: jQuery <1.8\n\t\tfunction (elem, i, match) {\n\t\t\treturn !!$.data(elem, match[3]);\n\t\t},\n\n\t\tfocusable: function focusable(element) {\n\t\t\treturn _focusable(element, !isNaN($.attr(element, \"tabindex\")));\n\t\t},\n\n\t\ttabbable: function tabbable(element) {\n\t\t\tvar tabIndex = $.attr(element, \"tabindex\"),\n\t\t\t    isTabIndexNaN = isNaN(tabIndex);\n\t\t\treturn (isTabIndexNaN || tabIndex >= 0) && _focusable(element, !isTabIndexNaN);\n\t\t}\n\t});\n\n\t// support: jQuery <1.8\n\tif (!$(\"<a>\").outerWidth(1).jquery) {\n\t\t$.each([\"Width\", \"Height\"], function (i, name) {\n\t\t\tvar side = name === \"Width\" ? [\"Left\", \"Right\"] : [\"Top\", \"Bottom\"],\n\t\t\t    type = name.toLowerCase(),\n\t\t\t    orig = {\n\t\t\t\tinnerWidth: $.fn.innerWidth,\n\t\t\t\tinnerHeight: $.fn.innerHeight,\n\t\t\t\touterWidth: $.fn.outerWidth,\n\t\t\t\touterHeight: $.fn.outerHeight\n\t\t\t};\n\n\t\t\tfunction reduce(elem, size, border, margin) {\n\t\t\t\t$.each(side, function () {\n\t\t\t\t\tsize -= parseFloat($.css(elem, \"padding\" + this)) || 0;\n\t\t\t\t\tif (border) {\n\t\t\t\t\t\tsize -= parseFloat($.css(elem, \"border\" + this + \"Width\")) || 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (margin) {\n\t\t\t\t\t\tsize -= parseFloat($.css(elem, \"margin\" + this)) || 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn size;\n\t\t\t}\n\n\t\t\t$.fn[\"inner\" + name] = function (size) {\n\t\t\t\tif (size === undefined) {\n\t\t\t\t\treturn orig[\"inner\" + name].call(this);\n\t\t\t\t}\n\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\t$(this).css(type, reduce(this, size) + \"px\");\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t$.fn[\"outer\" + name] = function (size, margin) {\n\t\t\t\tif (typeof size !== \"number\") {\n\t\t\t\t\treturn orig[\"outer\" + name].call(this, size);\n\t\t\t\t}\n\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\t$(this).css(type, reduce(this, size, true, margin) + \"px\");\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t// support: jQuery <1.8\n\tif (!$.fn.addBack) {\n\t\t$.fn.addBack = function (selector) {\n\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t};\n\t}\n\n\t// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)\n\tif ($(\"<a>\").data(\"a-b\", \"a\").removeData(\"a-b\").data(\"a-b\")) {\n\t\t$.fn.removeData = function (removeData) {\n\t\t\treturn function (key) {\n\t\t\t\tif (arguments.length) {\n\t\t\t\t\treturn removeData.call(this, $.camelCase(key));\n\t\t\t\t} else {\n\t\t\t\t\treturn removeData.call(this);\n\t\t\t\t}\n\t\t\t};\n\t\t}($.fn.removeData);\n\t}\n\n\t// deprecated\n\t$.ui.ie = !!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());\n\n\t$.fn.extend({\n\t\tfocus: function (orig) {\n\t\t\treturn function (delay, fn) {\n\t\t\t\treturn typeof delay === \"number\" ? this.each(function () {\n\t\t\t\t\tvar elem = this;\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t$(elem).focus();\n\t\t\t\t\t\tif (fn) {\n\t\t\t\t\t\t\tfn.call(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, delay);\n\t\t\t\t}) : orig.apply(this, arguments);\n\t\t\t};\n\t\t}($.fn.focus),\n\n\t\tdisableSelection: function () {\n\t\t\tvar eventType = \"onselectstart\" in document.createElement(\"div\") ? \"selectstart\" : \"mousedown\";\n\n\t\t\treturn function () {\n\t\t\t\treturn this.bind(eventType + \".ui-disableSelection\", function (event) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t});\n\t\t\t};\n\t\t}(),\n\n\t\tenableSelection: function enableSelection() {\n\t\t\treturn this.unbind(\".ui-disableSelection\");\n\t\t},\n\n\t\tzIndex: function zIndex(_zIndex) {\n\t\t\tif (_zIndex !== undefined) {\n\t\t\t\treturn this.css(\"zIndex\", _zIndex);\n\t\t\t}\n\n\t\t\tif (this.length) {\n\t\t\t\tvar elem = $(this[0]),\n\t\t\t\t    position,\n\t\t\t\t    value;\n\t\t\t\twhile (elem.length && elem[0] !== document) {\n\t\t\t\t\t// Ignore z-index if position is set to a value where z-index is ignored by the browser\n\t\t\t\t\t// This makes behavior of this function consistent across browsers\n\t\t\t\t\t// WebKit always returns auto if the element is positioned\n\t\t\t\t\tposition = elem.css(\"position\");\n\t\t\t\t\tif (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n\t\t\t\t\t\t// IE returns 0 when zIndex is not specified\n\t\t\t\t\t\t// other browsers return a string\n\t\t\t\t\t\t// we ignore the case of nested elements with an explicit value of 0\n\t\t\t\t\t\t// <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n\t\t\t\t\t\tvalue = parseInt(elem.css(\"zIndex\"), 10);\n\t\t\t\t\t\tif (!isNaN(value) && value !== 0) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telem = elem.parent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\t});\n\n\t// $.ui.plugin is deprecated. Use $.widget() extensions instead.\n\t$.ui.plugin = {\n\t\tadd: function add(module, option, set) {\n\t\t\tvar i,\n\t\t\t    proto = $.ui[module].prototype;\n\t\t\tfor (i in set) {\n\t\t\t\tproto.plugins[i] = proto.plugins[i] || [];\n\t\t\t\tproto.plugins[i].push([option, set[i]]);\n\t\t\t}\n\t\t},\n\t\tcall: function call(instance, name, args, allowDisconnected) {\n\t\t\tvar i,\n\t\t\t    set = instance.plugins[name];\n\n\t\t\tif (!set) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (i = 0; i < set.length; i++) {\n\t\t\t\tif (instance.options[set[i][0]]) {\n\t\t\t\t\tset[i][1].apply(instance.element, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/*!\n  * jQuery UI Widget 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/jQuery.widget/\n  */\n\n\tvar widget_uuid = 0,\n\t    widget_slice = Array.prototype.slice;\n\n\t$.cleanData = function (orig) {\n\t\treturn function (elems) {\n\t\t\tvar events, elem, i;\n\t\t\tfor (i = 0; (elem = elems[i]) != null; i++) {\n\t\t\t\ttry {\n\n\t\t\t\t\t// Only trigger remove when necessary to save time\n\t\t\t\t\tevents = $._data(elem, \"events\");\n\t\t\t\t\tif (events && events.remove) {\n\t\t\t\t\t\t$(elem).triggerHandler(\"remove\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// http://bugs.jquery.com/ticket/8235\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\t\t\torig(elems);\n\t\t};\n\t}($.cleanData);\n\n\t$.widget = function (name, base, prototype) {\n\t\tvar fullName,\n\t\t    existingConstructor,\n\t\t    constructor,\n\t\t    basePrototype,\n\n\t\t// proxiedPrototype allows the provided prototype to remain unmodified\n\t\t// so that it can be used as a mixin for multiple widgets (#8876)\n\t\tproxiedPrototype = {},\n\t\t    namespace = name.split(\".\")[0];\n\n\t\tname = name.split(\".\")[1];\n\t\tfullName = namespace + \"-\" + name;\n\n\t\tif (!prototype) {\n\t\t\tprototype = base;\n\t\t\tbase = $.Widget;\n\t\t}\n\n\t\t// create selector for plugin\n\t\t$.expr[\":\"][fullName.toLowerCase()] = function (elem) {\n\t\t\treturn !!$.data(elem, fullName);\n\t\t};\n\n\t\t$[namespace] = $[namespace] || {};\n\t\texistingConstructor = $[namespace][name];\n\t\tconstructor = $[namespace][name] = function (options, element) {\n\t\t\t// allow instantiation without \"new\" keyword\n\t\t\tif (!this._createWidget) {\n\t\t\t\treturn new constructor(options, element);\n\t\t\t}\n\n\t\t\t// allow instantiation without initializing for simple inheritance\n\t\t\t// must use \"new\" keyword (the code above always passes args)\n\t\t\tif (arguments.length) {\n\t\t\t\tthis._createWidget(options, element);\n\t\t\t}\n\t\t};\n\t\t// extend with the existing constructor to carry over any static properties\n\t\t$.extend(constructor, existingConstructor, {\n\t\t\tversion: prototype.version,\n\t\t\t// copy the object used to create the prototype in case we need to\n\t\t\t// redefine the widget later\n\t\t\t_proto: $.extend({}, prototype),\n\t\t\t// track widgets that inherit from this widget in case this widget is\n\t\t\t// redefined after a widget inherits from it\n\t\t\t_childConstructors: []\n\t\t});\n\n\t\tbasePrototype = new base();\n\t\t// we need to make the options hash a property directly on the new instance\n\t\t// otherwise we'll modify the options hash on the prototype that we're\n\t\t// inheriting from\n\t\tbasePrototype.options = $.widget.extend({}, basePrototype.options);\n\t\t$.each(prototype, function (prop, value) {\n\t\t\tif (!$.isFunction(value)) {\n\t\t\t\tproxiedPrototype[prop] = value;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tproxiedPrototype[prop] = function () {\n\t\t\t\tvar _super = function _super() {\n\t\t\t\t\treturn base.prototype[prop].apply(this, arguments);\n\t\t\t\t},\n\t\t\t\t    _superApply = function _superApply(args) {\n\t\t\t\t\treturn base.prototype[prop].apply(this, args);\n\t\t\t\t};\n\t\t\t\treturn function () {\n\t\t\t\t\tvar __super = this._super,\n\t\t\t\t\t    __superApply = this._superApply,\n\t\t\t\t\t    returnValue;\n\n\t\t\t\t\tthis._super = _super;\n\t\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\t\treturnValue = value.apply(this, arguments);\n\n\t\t\t\t\tthis._super = __super;\n\t\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\t\treturn returnValue;\n\t\t\t\t};\n\t\t\t}();\n\t\t});\n\t\tconstructor.prototype = $.widget.extend(basePrototype, {\n\t\t\t// TODO: remove support for widgetEventPrefix\n\t\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t\t// don't prefix for widgets that aren't DOM-based\n\t\t\twidgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name\n\t\t}, proxiedPrototype, {\n\t\t\tconstructor: constructor,\n\t\t\tnamespace: namespace,\n\t\t\twidgetName: name,\n\t\t\twidgetFullName: fullName\n\t\t});\n\n\t\t// If this widget is being redefined then we need to find all widgets that\n\t\t// are inheriting from it and redefine all of them so that they inherit from\n\t\t// the new version of this widget. We're essentially trying to replace one\n\t\t// level in the prototype chain.\n\t\tif (existingConstructor) {\n\t\t\t$.each(existingConstructor._childConstructors, function (i, child) {\n\t\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t\t// redefine the child widget using the same prototype that was\n\t\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t\t$.widget(childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto);\n\t\t\t});\n\t\t\t// remove the list of existing child constructors from the old constructor\n\t\t\t// so the old child constructors can be garbage collected\n\t\t\tdelete existingConstructor._childConstructors;\n\t\t} else {\n\t\t\tbase._childConstructors.push(constructor);\n\t\t}\n\n\t\t$.widget.bridge(name, constructor);\n\n\t\treturn constructor;\n\t};\n\n\t$.widget.extend = function (target) {\n\t\tvar input = widget_slice.call(arguments, 1),\n\t\t    inputIndex = 0,\n\t\t    inputLength = input.length,\n\t\t    key,\n\t\t    value;\n\t\tfor (; inputIndex < inputLength; inputIndex++) {\n\t\t\tfor (key in input[inputIndex]) {\n\t\t\t\tvalue = input[inputIndex][key];\n\t\t\t\tif (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n\t\t\t\t\t// Clone objects\n\t\t\t\t\tif ($.isPlainObject(value)) {\n\t\t\t\t\t\ttarget[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) :\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend({}, value);\n\t\t\t\t\t\t// Copy everything else by reference\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t};\n\n\t$.widget.bridge = function (name, object) {\n\t\tvar fullName = object.prototype.widgetFullName || name;\n\t\t$.fn[name] = function (options) {\n\t\t\tvar isMethodCall = typeof options === \"string\",\n\t\t\t    args = widget_slice.call(arguments, 1),\n\t\t\t    returnValue = this;\n\n\t\t\tif (isMethodCall) {\n\t\t\t\tthis.each(function () {\n\t\t\t\t\tvar methodValue,\n\t\t\t\t\t    instance = $.data(this, fullName);\n\t\t\t\t\tif (options === \"instance\") {\n\t\t\t\t\t\treturnValue = instance;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (!instance) {\n\t\t\t\t\t\treturn $.error(\"cannot call methods on \" + name + \" prior to initialization; \" + \"attempted to call method '\" + options + \"'\");\n\t\t\t\t\t}\n\t\t\t\t\tif (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n\t\t\t\t\t\treturn $.error(\"no such method '\" + options + \"' for \" + name + \" widget instance\");\n\t\t\t\t\t}\n\t\t\t\t\tmethodValue = instance[options].apply(instance, args);\n\t\t\t\t\tif (methodValue !== instance && methodValue !== undefined) {\n\t\t\t\t\t\treturnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\t// Allow multiple hashes to be passed on init\n\t\t\t\tif (args.length) {\n\t\t\t\t\toptions = $.widget.extend.apply(null, [options].concat(args));\n\t\t\t\t}\n\n\t\t\t\tthis.each(function () {\n\t\t\t\t\tvar instance = $.data(this, fullName);\n\t\t\t\t\tif (instance) {\n\t\t\t\t\t\tinstance.option(options || {});\n\t\t\t\t\t\tif (instance._init) {\n\t\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$.data(this, fullName, new object(options, this));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t};\n\t};\n\n\t$.Widget = function () /* options, element */{};\n\t$.Widget._childConstructors = [];\n\n\t$.Widget.prototype = {\n\t\twidgetName: \"widget\",\n\t\twidgetEventPrefix: \"\",\n\t\tdefaultElement: \"<div>\",\n\t\toptions: {\n\t\t\tdisabled: false,\n\n\t\t\t// callbacks\n\t\t\tcreate: null\n\t\t},\n\t\t_createWidget: function _createWidget(options, element) {\n\t\t\telement = $(element || this.defaultElement || this)[0];\n\t\t\tthis.element = $(element);\n\t\t\tthis.uuid = widget_uuid++;\n\t\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\n\t\t\tthis.bindings = $();\n\t\t\tthis.hoverable = $();\n\t\t\tthis.focusable = $();\n\n\t\t\tif (element !== this) {\n\t\t\t\t$.data(element, this.widgetFullName, this);\n\t\t\t\tthis._on(true, this.element, {\n\t\t\t\t\tremove: function remove(event) {\n\t\t\t\t\t\tif (event.target === element) {\n\t\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.document = $(element.style ?\n\t\t\t\t// element within the document\n\t\t\t\telement.ownerDocument :\n\t\t\t\t// element is window or document\n\t\t\t\telement.document || element);\n\t\t\t\tthis.window = $(this.document[0].defaultView || this.document[0].parentWindow);\n\t\t\t}\n\n\t\t\tthis.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);\n\n\t\t\tthis._create();\n\t\t\tthis._trigger(\"create\", null, this._getCreateEventData());\n\t\t\tthis._init();\n\t\t},\n\t\t_getCreateOptions: $.noop,\n\t\t_getCreateEventData: $.noop,\n\t\t_create: $.noop,\n\t\t_init: $.noop,\n\n\t\tdestroy: function destroy() {\n\t\t\tthis._destroy();\n\t\t\t// we can probably remove the unbind calls in 2.0\n\t\t\t// all event bindings should go through this._on()\n\t\t\tthis.element.unbind(this.eventNamespace).removeData(this.widgetFullName)\n\t\t\t// support: jquery <1.6.3\n\t\t\t// http://bugs.jquery.com/ticket/9413\n\t\t\t.removeData($.camelCase(this.widgetFullName));\n\t\t\tthis.widget().unbind(this.eventNamespace).removeAttr(\"aria-disabled\").removeClass(this.widgetFullName + \"-disabled \" + \"ui-state-disabled\");\n\n\t\t\t// clean up events and states\n\t\t\tthis.bindings.unbind(this.eventNamespace);\n\t\t\tthis.hoverable.removeClass(\"ui-state-hover\");\n\t\t\tthis.focusable.removeClass(\"ui-state-focus\");\n\t\t},\n\t\t_destroy: $.noop,\n\n\t\twidget: function widget() {\n\t\t\treturn this.element;\n\t\t},\n\n\t\toption: function option(key, value) {\n\t\t\tvar options = key,\n\t\t\t    parts,\n\t\t\t    curOption,\n\t\t\t    i;\n\n\t\t\tif (arguments.length === 0) {\n\t\t\t\t// don't return a reference to the internal hash\n\t\t\t\treturn $.widget.extend({}, this.options);\n\t\t\t}\n\n\t\t\tif (typeof key === \"string\") {\n\t\t\t\t// handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\t\toptions = {};\n\t\t\t\tparts = key.split(\".\");\n\t\t\t\tkey = parts.shift();\n\t\t\t\tif (parts.length) {\n\t\t\t\t\tcurOption = options[key] = $.widget.extend({}, this.options[key]);\n\t\t\t\t\tfor (i = 0; i < parts.length - 1; i++) {\n\t\t\t\t\t\tcurOption[parts[i]] = curOption[parts[i]] || {};\n\t\t\t\t\t\tcurOption = curOption[parts[i]];\n\t\t\t\t\t}\n\t\t\t\t\tkey = parts.pop();\n\t\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\t\treturn curOption[key] === undefined ? null : curOption[key];\n\t\t\t\t\t}\n\t\t\t\t\tcurOption[key] = value;\n\t\t\t\t} else {\n\t\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\t\treturn this.options[key] === undefined ? null : this.options[key];\n\t\t\t\t\t}\n\t\t\t\t\toptions[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._setOptions(options);\n\n\t\t\treturn this;\n\t\t},\n\t\t_setOptions: function _setOptions(options) {\n\t\t\tvar key;\n\n\t\t\tfor (key in options) {\n\t\t\t\tthis._setOption(key, options[key]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tthis.options[key] = value;\n\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.widget().toggleClass(this.widgetFullName + \"-disabled\", !!value);\n\n\t\t\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\t\t\tif (value) {\n\t\t\t\t\tthis.hoverable.removeClass(\"ui-state-hover\");\n\t\t\t\t\tthis.focusable.removeClass(\"ui-state-focus\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tenable: function enable() {\n\t\t\treturn this._setOptions({ disabled: false });\n\t\t},\n\t\tdisable: function disable() {\n\t\t\treturn this._setOptions({ disabled: true });\n\t\t},\n\n\t\t_on: function _on(suppressDisabledCheck, element, handlers) {\n\t\t\tvar delegateElement,\n\t\t\t    instance = this;\n\n\t\t\t// no suppressDisabledCheck flag, shuffle arguments\n\t\t\tif (typeof suppressDisabledCheck !== \"boolean\") {\n\t\t\t\thandlers = element;\n\t\t\t\telement = suppressDisabledCheck;\n\t\t\t\tsuppressDisabledCheck = false;\n\t\t\t}\n\n\t\t\t// no element argument, shuffle and use this.element\n\t\t\tif (!handlers) {\n\t\t\t\thandlers = element;\n\t\t\t\telement = this.element;\n\t\t\t\tdelegateElement = this.widget();\n\t\t\t} else {\n\t\t\t\telement = delegateElement = $(element);\n\t\t\t\tthis.bindings = this.bindings.add(element);\n\t\t\t}\n\n\t\t\t$.each(handlers, function (event, handler) {\n\t\t\t\tfunction handlerProxy() {\n\t\t\t\t\t// allow widgets to customize the disabled handling\n\t\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\t\tif (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass(\"ui-state-disabled\"))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n\t\t\t\t}\n\n\t\t\t\t// copy the guid so direct unbinding works\n\t\t\t\tif (typeof handler !== \"string\") {\n\t\t\t\t\thandlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;\n\t\t\t\t}\n\n\t\t\t\tvar match = event.match(/^([\\w:-]*)\\s*(.*)$/),\n\t\t\t\t    eventName = match[1] + instance.eventNamespace,\n\t\t\t\t    selector = match[2];\n\t\t\t\tif (selector) {\n\t\t\t\t\tdelegateElement.delegate(selector, eventName, handlerProxy);\n\t\t\t\t} else {\n\t\t\t\t\telement.bind(eventName, handlerProxy);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_off: function _off(element, eventName) {\n\t\t\teventName = (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace;\n\t\t\telement.unbind(eventName).undelegate(eventName);\n\n\t\t\t// Clear the stack to avoid memory leaks (#10056)\n\t\t\tthis.bindings = $(this.bindings.not(element).get());\n\t\t\tthis.focusable = $(this.focusable.not(element).get());\n\t\t\tthis.hoverable = $(this.hoverable.not(element).get());\n\t\t},\n\n\t\t_delay: function _delay(handler, delay) {\n\t\t\tfunction handlerProxy() {\n\t\t\t\treturn (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n\t\t\t}\n\t\t\tvar instance = this;\n\t\t\treturn setTimeout(handlerProxy, delay || 0);\n\t\t},\n\n\t\t_hoverable: function _hoverable(element) {\n\t\t\tthis.hoverable = this.hoverable.add(element);\n\t\t\tthis._on(element, {\n\t\t\t\tmouseenter: function mouseenter(event) {\n\t\t\t\t\t$(event.currentTarget).addClass(\"ui-state-hover\");\n\t\t\t\t},\n\t\t\t\tmouseleave: function mouseleave(event) {\n\t\t\t\t\t$(event.currentTarget).removeClass(\"ui-state-hover\");\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_focusable: function _focusable(element) {\n\t\t\tthis.focusable = this.focusable.add(element);\n\t\t\tthis._on(element, {\n\t\t\t\tfocusin: function focusin(event) {\n\t\t\t\t\t$(event.currentTarget).addClass(\"ui-state-focus\");\n\t\t\t\t},\n\t\t\t\tfocusout: function focusout(event) {\n\t\t\t\t\t$(event.currentTarget).removeClass(\"ui-state-focus\");\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_trigger: function _trigger(type, event, data) {\n\t\t\tvar prop,\n\t\t\t    orig,\n\t\t\t    callback = this.options[type];\n\n\t\t\tdata = data || {};\n\t\t\tevent = $.Event(event);\n\t\t\tevent.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();\n\t\t\t// the original event may come from any element\n\t\t\t// so we need to reset the target on the new event\n\t\t\tevent.target = this.element[0];\n\n\t\t\t// copy original event properties over to the new event\n\t\t\torig = event.originalEvent;\n\t\t\tif (orig) {\n\t\t\t\tfor (prop in orig) {\n\t\t\t\t\tif (!(prop in event)) {\n\t\t\t\t\t\tevent[prop] = orig[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.element.trigger(event, data);\n\t\t\treturn !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());\n\t\t}\n\t};\n\n\t$.each({ show: \"fadeIn\", hide: \"fadeOut\" }, function (method, defaultEffect) {\n\t\t$.Widget.prototype[\"_\" + method] = function (element, options, callback) {\n\t\t\tif (typeof options === \"string\") {\n\t\t\t\toptions = { effect: options };\n\t\t\t}\n\t\t\tvar hasOptions,\n\t\t\t    effectName = !options ? method : options === true || typeof options === \"number\" ? defaultEffect : options.effect || defaultEffect;\n\t\t\toptions = options || {};\n\t\t\tif (typeof options === \"number\") {\n\t\t\t\toptions = { duration: options };\n\t\t\t}\n\t\t\thasOptions = !$.isEmptyObject(options);\n\t\t\toptions.complete = callback;\n\t\t\tif (options.delay) {\n\t\t\t\telement.delay(options.delay);\n\t\t\t}\n\t\t\tif (hasOptions && $.effects && $.effects.effect[effectName]) {\n\t\t\t\telement[method](options);\n\t\t\t} else if (effectName !== method && element[effectName]) {\n\t\t\t\telement[effectName](options.duration, options.easing, callback);\n\t\t\t} else {\n\t\t\t\telement.queue(function (next) {\n\t\t\t\t\t$(this)[method]();\n\t\t\t\t\tif (callback) {\n\t\t\t\t\t\tcallback.call(element[0]);\n\t\t\t\t\t}\n\t\t\t\t\tnext();\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t});\n\n\tvar widget = $.widget;\n\n\t/*!\n  * jQuery UI Mouse 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/mouse/\n  */\n\n\tvar mouseHandled = false;\n\t$(document).mouseup(function () {\n\t\tmouseHandled = false;\n\t});\n\n\tvar mouse = $.widget(\"ui.mouse\", {\n\t\tversion: \"1.11.4\",\n\t\toptions: {\n\t\t\tcancel: \"input,textarea,button,select,option\",\n\t\t\tdistance: 1,\n\t\t\tdelay: 0\n\t\t},\n\t\t_mouseInit: function _mouseInit() {\n\t\t\tvar that = this;\n\n\t\t\tthis.element.bind(\"mousedown.\" + this.widgetName, function (event) {\n\t\t\t\treturn that._mouseDown(event);\n\t\t\t}).bind(\"click.\" + this.widgetName, function (event) {\n\t\t\t\tif (true === $.data(event.target, that.widgetName + \".preventClickEvent\")) {\n\t\t\t\t\t$.removeData(event.target, that.widgetName + \".preventClickEvent\");\n\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.started = false;\n\t\t},\n\n\t\t// TODO: make sure destroying one instance of mouse doesn't mess with\n\t\t// other instances of mouse\n\t\t_mouseDestroy: function _mouseDestroy() {\n\t\t\tthis.element.unbind(\".\" + this.widgetName);\n\t\t\tif (this._mouseMoveDelegate) {\n\t\t\t\tthis.document.unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\t\t\t}\n\t\t},\n\n\t\t_mouseDown: function _mouseDown(event) {\n\t\t\t// don't let more than one widget handle mouseStart\n\t\t\tif (mouseHandled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._mouseMoved = false;\n\n\t\t\t// we may have missed mouseup (out of window)\n\t\t\tthis._mouseStarted && this._mouseUp(event);\n\n\t\t\tthis._mouseDownEvent = event;\n\n\t\t\tvar that = this,\n\t\t\t    btnIsLeft = event.which === 1,\n\n\t\t\t// event.target.nodeName works around a bug in IE 8 with\n\t\t\t// disabled inputs (#7620)\n\t\t\telIsCancel = typeof this.options.cancel === \"string\" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;\n\t\t\tif (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis.mouseDelayMet = !this.options.delay;\n\t\t\tif (!this.mouseDelayMet) {\n\t\t\t\tthis._mouseDelayTimer = setTimeout(function () {\n\t\t\t\t\tthat.mouseDelayMet = true;\n\t\t\t\t}, this.options.delay);\n\t\t\t}\n\n\t\t\tif (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n\t\t\t\tthis._mouseStarted = this._mouseStart(event) !== false;\n\t\t\t\tif (!this._mouseStarted) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Click event may never have fired (Gecko & Opera)\n\t\t\tif (true === $.data(event.target, this.widgetName + \".preventClickEvent\")) {\n\t\t\t\t$.removeData(event.target, this.widgetName + \".preventClickEvent\");\n\t\t\t}\n\n\t\t\t// these delegates are required to keep context\n\t\t\tthis._mouseMoveDelegate = function (event) {\n\t\t\t\treturn that._mouseMove(event);\n\t\t\t};\n\t\t\tthis._mouseUpDelegate = function (event) {\n\t\t\t\treturn that._mouseUp(event);\n\t\t\t};\n\n\t\t\tthis.document.bind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).bind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\n\t\t\tevent.preventDefault();\n\n\t\t\tmouseHandled = true;\n\t\t\treturn true;\n\t\t},\n\n\t\t_mouseMove: function _mouseMove(event) {\n\t\t\t// Only check for mouseups outside the document if you've moved inside the document\n\t\t\t// at least once. This prevents the firing of mouseup in the case of IE<9, which will\n\t\t\t// fire a mousemove event if content is placed under the cursor. See #7778\n\t\t\t// Support: IE <9\n\t\t\tif (this._mouseMoved) {\n\t\t\t\t// IE mouseup check - mouseup happened when mouse was out of window\n\t\t\t\tif ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {\n\t\t\t\t\treturn this._mouseUp(event);\n\n\t\t\t\t\t// Iframe mouseup check - mouseup occurred in another document\n\t\t\t\t} else if (!event.which) {\n\t\t\t\t\treturn this._mouseUp(event);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (event.which || event.button) {\n\t\t\t\tthis._mouseMoved = true;\n\t\t\t}\n\n\t\t\tif (this._mouseStarted) {\n\t\t\t\tthis._mouseDrag(event);\n\t\t\t\treturn event.preventDefault();\n\t\t\t}\n\n\t\t\tif (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n\t\t\t\tthis._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;\n\t\t\t\tthis._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);\n\t\t\t}\n\n\t\t\treturn !this._mouseStarted;\n\t\t},\n\n\t\t_mouseUp: function _mouseUp(event) {\n\t\t\tthis.document.unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\n\t\t\tif (this._mouseStarted) {\n\t\t\t\tthis._mouseStarted = false;\n\n\t\t\t\tif (event.target === this._mouseDownEvent.target) {\n\t\t\t\t\t$.data(event.target, this.widgetName + \".preventClickEvent\", true);\n\t\t\t\t}\n\n\t\t\t\tthis._mouseStop(event);\n\t\t\t}\n\n\t\t\tmouseHandled = false;\n\t\t\treturn false;\n\t\t},\n\n\t\t_mouseDistanceMet: function _mouseDistanceMet(event) {\n\t\t\treturn Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;\n\t\t},\n\n\t\t_mouseDelayMet: function _mouseDelayMet() /* event */{\n\t\t\treturn this.mouseDelayMet;\n\t\t},\n\n\t\t// These are placeholder methods, to be overriden by extending plugin\n\t\t_mouseStart: function _mouseStart() /* event */{},\n\t\t_mouseDrag: function _mouseDrag() /* event */{},\n\t\t_mouseStop: function _mouseStop() /* event */{},\n\t\t_mouseCapture: function _mouseCapture() /* event */{\n\t\t\treturn true;\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Position 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/position/\n  */\n\n\t(function () {\n\n\t\t$.ui = $.ui || {};\n\n\t\tvar cachedScrollbarWidth,\n\t\t    supportsOffsetFractions,\n\t\t    max = Math.max,\n\t\t    abs = Math.abs,\n\t\t    round = Math.round,\n\t\t    rhorizontal = /left|center|right/,\n\t\t    rvertical = /top|center|bottom/,\n\t\t    roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\n\t\t    rposition = /^\\w+/,\n\t\t    rpercent = /%$/,\n\t\t    _position = $.fn.position;\n\n\t\tfunction getOffsets(offsets, width, height) {\n\t\t\treturn [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)];\n\t\t}\n\n\t\tfunction parseCss(element, property) {\n\t\t\treturn parseInt($.css(element, property), 10) || 0;\n\t\t}\n\n\t\tfunction getDimensions(elem) {\n\t\t\tvar raw = elem[0];\n\t\t\tif (raw.nodeType === 9) {\n\t\t\t\treturn {\n\t\t\t\t\twidth: elem.width(),\n\t\t\t\t\theight: elem.height(),\n\t\t\t\t\toffset: { top: 0, left: 0 }\n\t\t\t\t};\n\t\t\t}\n\t\t\tif ($.isWindow(raw)) {\n\t\t\t\treturn {\n\t\t\t\t\twidth: elem.width(),\n\t\t\t\t\theight: elem.height(),\n\t\t\t\t\toffset: { top: elem.scrollTop(), left: elem.scrollLeft() }\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (raw.preventDefault) {\n\t\t\t\treturn {\n\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0,\n\t\t\t\t\toffset: { top: raw.pageY, left: raw.pageX }\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\twidth: elem.outerWidth(),\n\t\t\t\theight: elem.outerHeight(),\n\t\t\t\toffset: elem.offset()\n\t\t\t};\n\t\t}\n\n\t\t$.position = {\n\t\t\tscrollbarWidth: function scrollbarWidth() {\n\t\t\t\tif (cachedScrollbarWidth !== undefined) {\n\t\t\t\t\treturn cachedScrollbarWidth;\n\t\t\t\t}\n\t\t\t\tvar w1,\n\t\t\t\t    w2,\n\t\t\t\t    div = $(\"<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>\"),\n\t\t\t\t    innerDiv = div.children()[0];\n\n\t\t\t\t$(\"body\").append(div);\n\t\t\t\tw1 = innerDiv.offsetWidth;\n\t\t\t\tdiv.css(\"overflow\", \"scroll\");\n\n\t\t\t\tw2 = innerDiv.offsetWidth;\n\n\t\t\t\tif (w1 === w2) {\n\t\t\t\t\tw2 = div[0].clientWidth;\n\t\t\t\t}\n\n\t\t\t\tdiv.remove();\n\n\t\t\t\treturn cachedScrollbarWidth = w1 - w2;\n\t\t\t},\n\t\t\tgetScrollInfo: function getScrollInfo(within) {\n\t\t\t\tvar overflowX = within.isWindow || within.isDocument ? \"\" : within.element.css(\"overflow-x\"),\n\t\t\t\t    overflowY = within.isWindow || within.isDocument ? \"\" : within.element.css(\"overflow-y\"),\n\t\t\t\t    hasOverflowX = overflowX === \"scroll\" || overflowX === \"auto\" && within.width < within.element[0].scrollWidth,\n\t\t\t\t    hasOverflowY = overflowY === \"scroll\" || overflowY === \"auto\" && within.height < within.element[0].scrollHeight;\n\t\t\t\treturn {\n\t\t\t\t\twidth: hasOverflowY ? $.position.scrollbarWidth() : 0,\n\t\t\t\t\theight: hasOverflowX ? $.position.scrollbarWidth() : 0\n\t\t\t\t};\n\t\t\t},\n\t\t\tgetWithinInfo: function getWithinInfo(element) {\n\t\t\t\tvar withinElement = $(element || window),\n\t\t\t\t    isWindow = $.isWindow(withinElement[0]),\n\t\t\t\t    isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;\n\t\t\t\treturn {\n\t\t\t\t\telement: withinElement,\n\t\t\t\t\tisWindow: isWindow,\n\t\t\t\t\tisDocument: isDocument,\n\t\t\t\t\toffset: withinElement.offset() || { left: 0, top: 0 },\n\t\t\t\t\tscrollLeft: withinElement.scrollLeft(),\n\t\t\t\t\tscrollTop: withinElement.scrollTop(),\n\n\t\t\t\t\t// support: jQuery 1.6.x\n\t\t\t\t\t// jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows\n\t\t\t\t\twidth: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),\n\t\t\t\t\theight: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\t$.fn.position = function (options) {\n\t\t\tif (!options || !options.of) {\n\t\t\t\treturn _position.apply(this, arguments);\n\t\t\t}\n\n\t\t\t// make a copy, we don't want to modify arguments\n\t\t\toptions = $.extend({}, options);\n\n\t\t\tvar atOffset,\n\t\t\t    targetWidth,\n\t\t\t    targetHeight,\n\t\t\t    targetOffset,\n\t\t\t    basePosition,\n\t\t\t    dimensions,\n\t\t\t    target = $(options.of),\n\t\t\t    within = $.position.getWithinInfo(options.within),\n\t\t\t    scrollInfo = $.position.getScrollInfo(within),\n\t\t\t    collision = (options.collision || \"flip\").split(\" \"),\n\t\t\t    offsets = {};\n\n\t\t\tdimensions = getDimensions(target);\n\t\t\tif (target[0].preventDefault) {\n\t\t\t\t// force left top to allow flipping\n\t\t\t\toptions.at = \"left top\";\n\t\t\t}\n\t\t\ttargetWidth = dimensions.width;\n\t\t\ttargetHeight = dimensions.height;\n\t\t\ttargetOffset = dimensions.offset;\n\t\t\t// clone to reuse original targetOffset later\n\t\t\tbasePosition = $.extend({}, targetOffset);\n\n\t\t\t// force my and at to have valid horizontal and vertical positions\n\t\t\t// if a value is missing or invalid, it will be converted to center\n\t\t\t$.each([\"my\", \"at\"], function () {\n\t\t\t\tvar pos = (options[this] || \"\").split(\" \"),\n\t\t\t\t    horizontalOffset,\n\t\t\t\t    verticalOffset;\n\n\t\t\t\tif (pos.length === 1) {\n\t\t\t\t\tpos = rhorizontal.test(pos[0]) ? pos.concat([\"center\"]) : rvertical.test(pos[0]) ? [\"center\"].concat(pos) : [\"center\", \"center\"];\n\t\t\t\t}\n\t\t\t\tpos[0] = rhorizontal.test(pos[0]) ? pos[0] : \"center\";\n\t\t\t\tpos[1] = rvertical.test(pos[1]) ? pos[1] : \"center\";\n\n\t\t\t\t// calculate offsets\n\t\t\t\thorizontalOffset = roffset.exec(pos[0]);\n\t\t\t\tverticalOffset = roffset.exec(pos[1]);\n\t\t\t\toffsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0];\n\n\t\t\t\t// reduce to just the positions without the offsets\n\t\t\t\toptions[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];\n\t\t\t});\n\n\t\t\t// normalize collision option\n\t\t\tif (collision.length === 1) {\n\t\t\t\tcollision[1] = collision[0];\n\t\t\t}\n\n\t\t\tif (options.at[0] === \"right\") {\n\t\t\t\tbasePosition.left += targetWidth;\n\t\t\t} else if (options.at[0] === \"center\") {\n\t\t\t\tbasePosition.left += targetWidth / 2;\n\t\t\t}\n\n\t\t\tif (options.at[1] === \"bottom\") {\n\t\t\t\tbasePosition.top += targetHeight;\n\t\t\t} else if (options.at[1] === \"center\") {\n\t\t\t\tbasePosition.top += targetHeight / 2;\n\t\t\t}\n\n\t\t\tatOffset = getOffsets(offsets.at, targetWidth, targetHeight);\n\t\t\tbasePosition.left += atOffset[0];\n\t\t\tbasePosition.top += atOffset[1];\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar collisionPosition,\n\t\t\t\t    using,\n\t\t\t\t    elem = $(this),\n\t\t\t\t    elemWidth = elem.outerWidth(),\n\t\t\t\t    elemHeight = elem.outerHeight(),\n\t\t\t\t    marginLeft = parseCss(this, \"marginLeft\"),\n\t\t\t\t    marginTop = parseCss(this, \"marginTop\"),\n\t\t\t\t    collisionWidth = elemWidth + marginLeft + parseCss(this, \"marginRight\") + scrollInfo.width,\n\t\t\t\t    collisionHeight = elemHeight + marginTop + parseCss(this, \"marginBottom\") + scrollInfo.height,\n\t\t\t\t    position = $.extend({}, basePosition),\n\t\t\t\t    myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());\n\n\t\t\t\tif (options.my[0] === \"right\") {\n\t\t\t\t\tposition.left -= elemWidth;\n\t\t\t\t} else if (options.my[0] === \"center\") {\n\t\t\t\t\tposition.left -= elemWidth / 2;\n\t\t\t\t}\n\n\t\t\t\tif (options.my[1] === \"bottom\") {\n\t\t\t\t\tposition.top -= elemHeight;\n\t\t\t\t} else if (options.my[1] === \"center\") {\n\t\t\t\t\tposition.top -= elemHeight / 2;\n\t\t\t\t}\n\n\t\t\t\tposition.left += myOffset[0];\n\t\t\t\tposition.top += myOffset[1];\n\n\t\t\t\t// if the browser doesn't support fractions, then round for consistent results\n\t\t\t\tif (!supportsOffsetFractions) {\n\t\t\t\t\tposition.left = round(position.left);\n\t\t\t\t\tposition.top = round(position.top);\n\t\t\t\t}\n\n\t\t\t\tcollisionPosition = {\n\t\t\t\t\tmarginLeft: marginLeft,\n\t\t\t\t\tmarginTop: marginTop\n\t\t\t\t};\n\n\t\t\t\t$.each([\"left\", \"top\"], function (i, dir) {\n\t\t\t\t\tif ($.ui.position[collision[i]]) {\n\t\t\t\t\t\t$.ui.position[collision[i]][dir](position, {\n\t\t\t\t\t\t\ttargetWidth: targetWidth,\n\t\t\t\t\t\t\ttargetHeight: targetHeight,\n\t\t\t\t\t\t\telemWidth: elemWidth,\n\t\t\t\t\t\t\telemHeight: elemHeight,\n\t\t\t\t\t\t\tcollisionPosition: collisionPosition,\n\t\t\t\t\t\t\tcollisionWidth: collisionWidth,\n\t\t\t\t\t\t\tcollisionHeight: collisionHeight,\n\t\t\t\t\t\t\toffset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],\n\t\t\t\t\t\t\tmy: options.my,\n\t\t\t\t\t\t\tat: options.at,\n\t\t\t\t\t\t\twithin: within,\n\t\t\t\t\t\t\telem: elem\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (options.using) {\n\t\t\t\t\t// adds feedback as second argument to using callback, if present\n\t\t\t\t\tusing = function using(props) {\n\t\t\t\t\t\tvar left = targetOffset.left - position.left,\n\t\t\t\t\t\t    right = left + targetWidth - elemWidth,\n\t\t\t\t\t\t    top = targetOffset.top - position.top,\n\t\t\t\t\t\t    bottom = top + targetHeight - elemHeight,\n\t\t\t\t\t\t    feedback = {\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\telement: target,\n\t\t\t\t\t\t\t\tleft: targetOffset.left,\n\t\t\t\t\t\t\t\ttop: targetOffset.top,\n\t\t\t\t\t\t\t\twidth: targetWidth,\n\t\t\t\t\t\t\t\theight: targetHeight\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\telement: {\n\t\t\t\t\t\t\t\telement: elem,\n\t\t\t\t\t\t\t\tleft: position.left,\n\t\t\t\t\t\t\t\ttop: position.top,\n\t\t\t\t\t\t\t\twidth: elemWidth,\n\t\t\t\t\t\t\t\theight: elemHeight\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\thorizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\n\t\t\t\t\t\t\tvertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (targetWidth < elemWidth && abs(left + right) < targetWidth) {\n\t\t\t\t\t\t\tfeedback.horizontal = \"center\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {\n\t\t\t\t\t\t\tfeedback.vertical = \"middle\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {\n\t\t\t\t\t\t\tfeedback.important = \"horizontal\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfeedback.important = \"vertical\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\toptions.using.call(this, props, feedback);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\telem.offset($.extend(position, { using: using }));\n\t\t\t});\n\t\t};\n\n\t\t$.ui.position = {\n\t\t\tfit: {\n\t\t\t\tleft: function left(position, data) {\n\t\t\t\t\tvar within = data.within,\n\t\t\t\t\t    withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\n\t\t\t\t\t    outerWidth = within.width,\n\t\t\t\t\t    collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n\t\t\t\t\t    overLeft = withinOffset - collisionPosLeft,\n\t\t\t\t\t    overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\n\t\t\t\t\t    newOverRight;\n\n\t\t\t\t\t// element is wider than within\n\t\t\t\t\tif (data.collisionWidth > outerWidth) {\n\t\t\t\t\t\t// element is initially over the left side of within\n\t\t\t\t\t\tif (overLeft > 0 && overRight <= 0) {\n\t\t\t\t\t\t\tnewOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;\n\t\t\t\t\t\t\tposition.left += overLeft - newOverRight;\n\t\t\t\t\t\t\t// element is initially over right side of within\n\t\t\t\t\t\t} else if (overRight > 0 && overLeft <= 0) {\n\t\t\t\t\t\t\tposition.left = withinOffset;\n\t\t\t\t\t\t\t// element is initially over both left and right sides of within\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (overLeft > overRight) {\n\t\t\t\t\t\t\t\tposition.left = withinOffset + outerWidth - data.collisionWidth;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tposition.left = withinOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// too far left -> align with left edge\n\t\t\t\t\t} else if (overLeft > 0) {\n\t\t\t\t\t\tposition.left += overLeft;\n\t\t\t\t\t\t// too far right -> align with right edge\n\t\t\t\t\t} else if (overRight > 0) {\n\t\t\t\t\t\tposition.left -= overRight;\n\t\t\t\t\t\t// adjust based on position and margin\n\t\t\t\t\t} else {\n\t\t\t\t\t\tposition.left = max(position.left - collisionPosLeft, position.left);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttop: function top(position, data) {\n\t\t\t\t\tvar within = data.within,\n\t\t\t\t\t    withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\n\t\t\t\t\t    outerHeight = data.within.height,\n\t\t\t\t\t    collisionPosTop = position.top - data.collisionPosition.marginTop,\n\t\t\t\t\t    overTop = withinOffset - collisionPosTop,\n\t\t\t\t\t    overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\n\t\t\t\t\t    newOverBottom;\n\n\t\t\t\t\t// element is taller than within\n\t\t\t\t\tif (data.collisionHeight > outerHeight) {\n\t\t\t\t\t\t// element is initially over the top of within\n\t\t\t\t\t\tif (overTop > 0 && overBottom <= 0) {\n\t\t\t\t\t\t\tnewOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;\n\t\t\t\t\t\t\tposition.top += overTop - newOverBottom;\n\t\t\t\t\t\t\t// element is initially over bottom of within\n\t\t\t\t\t\t} else if (overBottom > 0 && overTop <= 0) {\n\t\t\t\t\t\t\tposition.top = withinOffset;\n\t\t\t\t\t\t\t// element is initially over both top and bottom of within\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (overTop > overBottom) {\n\t\t\t\t\t\t\t\tposition.top = withinOffset + outerHeight - data.collisionHeight;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tposition.top = withinOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// too far up -> align with top\n\t\t\t\t\t} else if (overTop > 0) {\n\t\t\t\t\t\tposition.top += overTop;\n\t\t\t\t\t\t// too far down -> align with bottom edge\n\t\t\t\t\t} else if (overBottom > 0) {\n\t\t\t\t\t\tposition.top -= overBottom;\n\t\t\t\t\t\t// adjust based on position and margin\n\t\t\t\t\t} else {\n\t\t\t\t\t\tposition.top = max(position.top - collisionPosTop, position.top);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tflip: {\n\t\t\t\tleft: function left(position, data) {\n\t\t\t\t\tvar within = data.within,\n\t\t\t\t\t    withinOffset = within.offset.left + within.scrollLeft,\n\t\t\t\t\t    outerWidth = within.width,\n\t\t\t\t\t    offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\n\t\t\t\t\t    collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n\t\t\t\t\t    overLeft = collisionPosLeft - offsetLeft,\n\t\t\t\t\t    overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\n\t\t\t\t\t    myOffset = data.my[0] === \"left\" ? -data.elemWidth : data.my[0] === \"right\" ? data.elemWidth : 0,\n\t\t\t\t\t    atOffset = data.at[0] === \"left\" ? data.targetWidth : data.at[0] === \"right\" ? -data.targetWidth : 0,\n\t\t\t\t\t    offset = -2 * data.offset[0],\n\t\t\t\t\t    newOverRight,\n\t\t\t\t\t    newOverLeft;\n\n\t\t\t\t\tif (overLeft < 0) {\n\t\t\t\t\t\tnewOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;\n\t\t\t\t\t\tif (newOverRight < 0 || newOverRight < abs(overLeft)) {\n\t\t\t\t\t\t\tposition.left += myOffset + atOffset + offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (overRight > 0) {\n\t\t\t\t\t\tnewOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;\n\t\t\t\t\t\tif (newOverLeft > 0 || abs(newOverLeft) < overRight) {\n\t\t\t\t\t\t\tposition.left += myOffset + atOffset + offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttop: function top(position, data) {\n\t\t\t\t\tvar within = data.within,\n\t\t\t\t\t    withinOffset = within.offset.top + within.scrollTop,\n\t\t\t\t\t    outerHeight = within.height,\n\t\t\t\t\t    offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\n\t\t\t\t\t    collisionPosTop = position.top - data.collisionPosition.marginTop,\n\t\t\t\t\t    overTop = collisionPosTop - offsetTop,\n\t\t\t\t\t    overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\n\t\t\t\t\t    top = data.my[1] === \"top\",\n\t\t\t\t\t    myOffset = top ? -data.elemHeight : data.my[1] === \"bottom\" ? data.elemHeight : 0,\n\t\t\t\t\t    atOffset = data.at[1] === \"top\" ? data.targetHeight : data.at[1] === \"bottom\" ? -data.targetHeight : 0,\n\t\t\t\t\t    offset = -2 * data.offset[1],\n\t\t\t\t\t    newOverTop,\n\t\t\t\t\t    newOverBottom;\n\t\t\t\t\tif (overTop < 0) {\n\t\t\t\t\t\tnewOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;\n\t\t\t\t\t\tif (newOverBottom < 0 || newOverBottom < abs(overTop)) {\n\t\t\t\t\t\t\tposition.top += myOffset + atOffset + offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (overBottom > 0) {\n\t\t\t\t\t\tnewOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;\n\t\t\t\t\t\tif (newOverTop > 0 || abs(newOverTop) < overBottom) {\n\t\t\t\t\t\t\tposition.top += myOffset + atOffset + offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tflipfit: {\n\t\t\t\tleft: function left() {\n\t\t\t\t\t$.ui.position.flip.left.apply(this, arguments);\n\t\t\t\t\t$.ui.position.fit.left.apply(this, arguments);\n\t\t\t\t},\n\t\t\t\ttop: function top() {\n\t\t\t\t\t$.ui.position.flip.top.apply(this, arguments);\n\t\t\t\t\t$.ui.position.fit.top.apply(this, arguments);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// fraction support test\n\t\t(function () {\n\t\t\tvar testElement,\n\t\t\t    testElementParent,\n\t\t\t    testElementStyle,\n\t\t\t    offsetLeft,\n\t\t\t    i,\n\t\t\t    body = document.getElementsByTagName(\"body\")[0],\n\t\t\t    div = document.createElement(\"div\");\n\n\t\t\t//Create a \"fake body\" for testing based on method used in jQuery.support\n\t\t\ttestElement = document.createElement(body ? \"div\" : \"body\");\n\t\t\ttestElementStyle = {\n\t\t\t\tvisibility: \"hidden\",\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0,\n\t\t\t\tborder: 0,\n\t\t\t\tmargin: 0,\n\t\t\t\tbackground: \"none\"\n\t\t\t};\n\t\t\tif (body) {\n\t\t\t\t$.extend(testElementStyle, {\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\tleft: \"-1000px\",\n\t\t\t\t\ttop: \"-1000px\"\n\t\t\t\t});\n\t\t\t}\n\t\t\tfor (i in testElementStyle) {\n\t\t\t\ttestElement.style[i] = testElementStyle[i];\n\t\t\t}\n\t\t\ttestElement.appendChild(div);\n\t\t\ttestElementParent = body || document.documentElement;\n\t\t\ttestElementParent.insertBefore(testElement, testElementParent.firstChild);\n\n\t\t\tdiv.style.cssText = \"position: absolute; left: 10.7432222px;\";\n\n\t\t\toffsetLeft = $(div).offset().left;\n\t\t\tsupportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;\n\n\t\t\ttestElement.innerHTML = \"\";\n\t\t\ttestElementParent.removeChild(testElement);\n\t\t})();\n\t})();\n\n\tvar position = $.ui.position;\n\n\t/*!\n  * jQuery UI Accordion 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/accordion/\n  */\n\n\tvar accordion = $.widget(\"ui.accordion\", {\n\t\tversion: \"1.11.4\",\n\t\toptions: {\n\t\t\tactive: 0,\n\t\t\tanimate: {},\n\t\t\tcollapsible: false,\n\t\t\tevent: \"click\",\n\t\t\theader: \"> li > :first-child,> :not(li):even\",\n\t\t\theightStyle: \"auto\",\n\t\t\ticons: {\n\t\t\t\tactiveHeader: \"ui-icon-triangle-1-s\",\n\t\t\t\theader: \"ui-icon-triangle-1-e\"\n\t\t\t},\n\n\t\t\t// callbacks\n\t\t\tactivate: null,\n\t\t\tbeforeActivate: null\n\t\t},\n\n\t\thideProps: {\n\t\t\tborderTopWidth: \"hide\",\n\t\t\tborderBottomWidth: \"hide\",\n\t\t\tpaddingTop: \"hide\",\n\t\t\tpaddingBottom: \"hide\",\n\t\t\theight: \"hide\"\n\t\t},\n\n\t\tshowProps: {\n\t\t\tborderTopWidth: \"show\",\n\t\t\tborderBottomWidth: \"show\",\n\t\t\tpaddingTop: \"show\",\n\t\t\tpaddingBottom: \"show\",\n\t\t\theight: \"show\"\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\tvar options = this.options;\n\t\t\tthis.prevShow = this.prevHide = $();\n\t\t\tthis.element.addClass(\"ui-accordion ui-widget ui-helper-reset\")\n\t\t\t// ARIA\n\t\t\t.attr(\"role\", \"tablist\");\n\n\t\t\t// don't allow collapsible: false and active: false / null\n\t\t\tif (!options.collapsible && (options.active === false || options.active == null)) {\n\t\t\t\toptions.active = 0;\n\t\t\t}\n\n\t\t\tthis._processPanels();\n\t\t\t// handle negative values\n\t\t\tif (options.active < 0) {\n\t\t\t\toptions.active += this.headers.length;\n\t\t\t}\n\t\t\tthis._refresh();\n\t\t},\n\n\t\t_getCreateEventData: function _getCreateEventData() {\n\t\t\treturn {\n\t\t\t\theader: this.active,\n\t\t\t\tpanel: !this.active.length ? $() : this.active.next()\n\t\t\t};\n\t\t},\n\n\t\t_createIcons: function _createIcons() {\n\t\t\tvar icons = this.options.icons;\n\t\t\tif (icons) {\n\t\t\t\t$(\"<span>\").addClass(\"ui-accordion-header-icon ui-icon \" + icons.header).prependTo(this.headers);\n\t\t\t\tthis.active.children(\".ui-accordion-header-icon\").removeClass(icons.header).addClass(icons.activeHeader);\n\t\t\t\tthis.headers.addClass(\"ui-accordion-icons\");\n\t\t\t}\n\t\t},\n\n\t\t_destroyIcons: function _destroyIcons() {\n\t\t\tthis.headers.removeClass(\"ui-accordion-icons\").children(\".ui-accordion-header-icon\").remove();\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tvar contents;\n\n\t\t\t// clean up main element\n\t\t\tthis.element.removeClass(\"ui-accordion ui-widget ui-helper-reset\").removeAttr(\"role\");\n\n\t\t\t// clean up headers\n\t\t\tthis.headers.removeClass(\"ui-accordion-header ui-accordion-header-active ui-state-default \" + \"ui-corner-all ui-state-active ui-state-disabled ui-corner-top\").removeAttr(\"role\").removeAttr(\"aria-expanded\").removeAttr(\"aria-selected\").removeAttr(\"aria-controls\").removeAttr(\"tabIndex\").removeUniqueId();\n\n\t\t\tthis._destroyIcons();\n\n\t\t\t// clean up content panels\n\t\t\tcontents = this.headers.next().removeClass(\"ui-helper-reset ui-widget-content ui-corner-bottom \" + \"ui-accordion-content ui-accordion-content-active ui-state-disabled\").css(\"display\", \"\").removeAttr(\"role\").removeAttr(\"aria-hidden\").removeAttr(\"aria-labelledby\").removeUniqueId();\n\n\t\t\tif (this.options.heightStyle !== \"content\") {\n\t\t\t\tcontents.css(\"height\", \"\");\n\t\t\t}\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tif (key === \"active\") {\n\t\t\t\t// _activate() will handle invalid values and update this.options\n\t\t\t\tthis._activate(value);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (key === \"event\") {\n\t\t\t\tif (this.options.event) {\n\t\t\t\t\tthis._off(this.headers, this.options.event);\n\t\t\t\t}\n\t\t\t\tthis._setupEvents(value);\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\n\t\t\t// setting collapsible: false while collapsed; open first panel\n\t\t\tif (key === \"collapsible\" && !value && this.options.active === false) {\n\t\t\t\tthis._activate(0);\n\t\t\t}\n\n\t\t\tif (key === \"icons\") {\n\t\t\t\tthis._destroyIcons();\n\t\t\t\tif (value) {\n\t\t\t\t\tthis._createIcons();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// #5332 - opacity doesn't cascade to positioned elements in IE\n\t\t\t// so we need to add the disabled class to the headers and panels\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.element.toggleClass(\"ui-state-disabled\", !!value).attr(\"aria-disabled\", value);\n\t\t\t\tthis.headers.add(this.headers.next()).toggleClass(\"ui-state-disabled\", !!value);\n\t\t\t}\n\t\t},\n\n\t\t_keydown: function _keydown(event) {\n\t\t\tif (event.altKey || event.ctrlKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar keyCode = $.ui.keyCode,\n\t\t\t    length = this.headers.length,\n\t\t\t    currentIndex = this.headers.index(event.target),\n\t\t\t    toFocus = false;\n\n\t\t\tswitch (event.keyCode) {\n\t\t\t\tcase keyCode.RIGHT:\n\t\t\t\tcase keyCode.DOWN:\n\t\t\t\t\ttoFocus = this.headers[(currentIndex + 1) % length];\n\t\t\t\t\tbreak;\n\t\t\t\tcase keyCode.LEFT:\n\t\t\t\tcase keyCode.UP:\n\t\t\t\t\ttoFocus = this.headers[(currentIndex - 1 + length) % length];\n\t\t\t\t\tbreak;\n\t\t\t\tcase keyCode.SPACE:\n\t\t\t\tcase keyCode.ENTER:\n\t\t\t\t\tthis._eventHandler(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase keyCode.HOME:\n\t\t\t\t\ttoFocus = this.headers[0];\n\t\t\t\t\tbreak;\n\t\t\t\tcase keyCode.END:\n\t\t\t\t\ttoFocus = this.headers[length - 1];\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (toFocus) {\n\t\t\t\t$(event.target).attr(\"tabIndex\", -1);\n\t\t\t\t$(toFocus).attr(\"tabIndex\", 0);\n\t\t\t\ttoFocus.focus();\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t_panelKeyDown: function _panelKeyDown(event) {\n\t\t\tif (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {\n\t\t\t\t$(event.currentTarget).prev().focus();\n\t\t\t}\n\t\t},\n\n\t\trefresh: function refresh() {\n\t\t\tvar options = this.options;\n\t\t\tthis._processPanels();\n\n\t\t\t// was collapsed or no panel\n\t\t\tif (options.active === false && options.collapsible === true || !this.headers.length) {\n\t\t\t\toptions.active = false;\n\t\t\t\tthis.active = $();\n\t\t\t\t// active false only when collapsible is true\n\t\t\t} else if (options.active === false) {\n\t\t\t\tthis._activate(0);\n\t\t\t\t// was active, but active panel is gone\n\t\t\t} else if (this.active.length && !$.contains(this.element[0], this.active[0])) {\n\t\t\t\t// all remaining panel are disabled\n\t\t\t\tif (this.headers.length === this.headers.find(\".ui-state-disabled\").length) {\n\t\t\t\t\toptions.active = false;\n\t\t\t\t\tthis.active = $();\n\t\t\t\t\t// activate previous panel\n\t\t\t\t} else {\n\t\t\t\t\tthis._activate(Math.max(0, options.active - 1));\n\t\t\t\t}\n\t\t\t\t// was active, active panel still exists\n\t\t\t} else {\n\t\t\t\t// make sure active index is correct\n\t\t\t\toptions.active = this.headers.index(this.active);\n\t\t\t}\n\n\t\t\tthis._destroyIcons();\n\n\t\t\tthis._refresh();\n\t\t},\n\n\t\t_processPanels: function _processPanels() {\n\t\t\tvar prevHeaders = this.headers,\n\t\t\t    prevPanels = this.panels;\n\n\t\t\tthis.headers = this.element.find(this.options.header).addClass(\"ui-accordion-header ui-state-default ui-corner-all\");\n\n\t\t\tthis.panels = this.headers.next().addClass(\"ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\").filter(\":not(.ui-accordion-content-active)\").hide();\n\n\t\t\t// Avoid memory leaks (#10056)\n\t\t\tif (prevPanels) {\n\t\t\t\tthis._off(prevHeaders.not(this.headers));\n\t\t\t\tthis._off(prevPanels.not(this.panels));\n\t\t\t}\n\t\t},\n\n\t\t_refresh: function _refresh() {\n\t\t\tvar maxHeight,\n\t\t\t    options = this.options,\n\t\t\t    heightStyle = options.heightStyle,\n\t\t\t    parent = this.element.parent();\n\n\t\t\tthis.active = this._findActive(options.active).addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\").removeClass(\"ui-corner-all\");\n\t\t\tthis.active.next().addClass(\"ui-accordion-content-active\").show();\n\n\t\t\tthis.headers.attr(\"role\", \"tab\").each(function () {\n\t\t\t\tvar header = $(this),\n\t\t\t\t    headerId = header.uniqueId().attr(\"id\"),\n\t\t\t\t    panel = header.next(),\n\t\t\t\t    panelId = panel.uniqueId().attr(\"id\");\n\t\t\t\theader.attr(\"aria-controls\", panelId);\n\t\t\t\tpanel.attr(\"aria-labelledby\", headerId);\n\t\t\t}).next().attr(\"role\", \"tabpanel\");\n\n\t\t\tthis.headers.not(this.active).attr({\n\t\t\t\t\"aria-selected\": \"false\",\n\t\t\t\t\"aria-expanded\": \"false\",\n\t\t\t\ttabIndex: -1\n\t\t\t}).next().attr({\n\t\t\t\t\"aria-hidden\": \"true\"\n\t\t\t}).hide();\n\n\t\t\t// make sure at least one header is in the tab order\n\t\t\tif (!this.active.length) {\n\t\t\t\tthis.headers.eq(0).attr(\"tabIndex\", 0);\n\t\t\t} else {\n\t\t\t\tthis.active.attr({\n\t\t\t\t\t\"aria-selected\": \"true\",\n\t\t\t\t\t\"aria-expanded\": \"true\",\n\t\t\t\t\ttabIndex: 0\n\t\t\t\t}).next().attr({\n\t\t\t\t\t\"aria-hidden\": \"false\"\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._createIcons();\n\n\t\t\tthis._setupEvents(options.event);\n\n\t\t\tif (heightStyle === \"fill\") {\n\t\t\t\tmaxHeight = parent.height();\n\t\t\t\tthis.element.siblings(\":visible\").each(function () {\n\t\t\t\t\tvar elem = $(this),\n\t\t\t\t\t    position = elem.css(\"position\");\n\n\t\t\t\t\tif (position === \"absolute\" || position === \"fixed\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmaxHeight -= elem.outerHeight(true);\n\t\t\t\t});\n\n\t\t\t\tthis.headers.each(function () {\n\t\t\t\t\tmaxHeight -= $(this).outerHeight(true);\n\t\t\t\t});\n\n\t\t\t\tthis.headers.next().each(function () {\n\t\t\t\t\t$(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n\t\t\t\t}).css(\"overflow\", \"auto\");\n\t\t\t} else if (heightStyle === \"auto\") {\n\t\t\t\tmaxHeight = 0;\n\t\t\t\tthis.headers.next().each(function () {\n\t\t\t\t\tmaxHeight = Math.max(maxHeight, $(this).css(\"height\", \"\").height());\n\t\t\t\t}).height(maxHeight);\n\t\t\t}\n\t\t},\n\n\t\t_activate: function _activate(index) {\n\t\t\tvar active = this._findActive(index)[0];\n\n\t\t\t// trying to activate the already active panel\n\t\t\tif (active === this.active[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// trying to collapse, simulate a click on the currently active header\n\t\t\tactive = active || this.active[0];\n\n\t\t\tthis._eventHandler({\n\t\t\t\ttarget: active,\n\t\t\t\tcurrentTarget: active,\n\t\t\t\tpreventDefault: $.noop\n\t\t\t});\n\t\t},\n\n\t\t_findActive: function _findActive(selector) {\n\t\t\treturn typeof selector === \"number\" ? this.headers.eq(selector) : $();\n\t\t},\n\n\t\t_setupEvents: function _setupEvents(event) {\n\t\t\tvar events = {\n\t\t\t\tkeydown: \"_keydown\"\n\t\t\t};\n\t\t\tif (event) {\n\t\t\t\t$.each(event.split(\" \"), function (index, eventName) {\n\t\t\t\t\tevents[eventName] = \"_eventHandler\";\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._off(this.headers.add(this.headers.next()));\n\t\t\tthis._on(this.headers, events);\n\t\t\tthis._on(this.headers.next(), { keydown: \"_panelKeyDown\" });\n\t\t\tthis._hoverable(this.headers);\n\t\t\tthis._focusable(this.headers);\n\t\t},\n\n\t\t_eventHandler: function _eventHandler(event) {\n\t\t\tvar options = this.options,\n\t\t\t    active = this.active,\n\t\t\t    clicked = $(event.currentTarget),\n\t\t\t    clickedIsActive = clicked[0] === active[0],\n\t\t\t    collapsing = clickedIsActive && options.collapsible,\n\t\t\t    toShow = collapsing ? $() : clicked.next(),\n\t\t\t    toHide = active.next(),\n\t\t\t    eventData = {\n\t\t\t\toldHeader: active,\n\t\t\t\toldPanel: toHide,\n\t\t\t\tnewHeader: collapsing ? $() : clicked,\n\t\t\t\tnewPanel: toShow\n\t\t\t};\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif (\n\t\t\t// click on active header, but not collapsible\n\t\t\tclickedIsActive && !options.collapsible ||\n\t\t\t// allow canceling activation\n\t\t\tthis._trigger(\"beforeActivate\", event, eventData) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toptions.active = collapsing ? false : this.headers.index(clicked);\n\n\t\t\t// when the call to ._toggle() comes after the class changes\n\t\t\t// it causes a very odd bug in IE 8 (see #6720)\n\t\t\tthis.active = clickedIsActive ? $() : clicked;\n\t\t\tthis._toggle(eventData);\n\n\t\t\t// switch classes\n\t\t\t// corner classes on the previously active header stay after the animation\n\t\t\tactive.removeClass(\"ui-accordion-header-active ui-state-active\");\n\t\t\tif (options.icons) {\n\t\t\t\tactive.children(\".ui-accordion-header-icon\").removeClass(options.icons.activeHeader).addClass(options.icons.header);\n\t\t\t}\n\n\t\t\tif (!clickedIsActive) {\n\t\t\t\tclicked.removeClass(\"ui-corner-all\").addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\");\n\t\t\t\tif (options.icons) {\n\t\t\t\t\tclicked.children(\".ui-accordion-header-icon\").removeClass(options.icons.header).addClass(options.icons.activeHeader);\n\t\t\t\t}\n\n\t\t\t\tclicked.next().addClass(\"ui-accordion-content-active\");\n\t\t\t}\n\t\t},\n\n\t\t_toggle: function _toggle(data) {\n\t\t\tvar toShow = data.newPanel,\n\t\t\t    toHide = this.prevShow.length ? this.prevShow : data.oldPanel;\n\n\t\t\t// handle activating a panel during the animation for another activation\n\t\t\tthis.prevShow.add(this.prevHide).stop(true, true);\n\t\t\tthis.prevShow = toShow;\n\t\t\tthis.prevHide = toHide;\n\n\t\t\tif (this.options.animate) {\n\t\t\t\tthis._animate(toShow, toHide, data);\n\t\t\t} else {\n\t\t\t\ttoHide.hide();\n\t\t\t\ttoShow.show();\n\t\t\t\tthis._toggleComplete(data);\n\t\t\t}\n\n\t\t\ttoHide.attr({\n\t\t\t\t\"aria-hidden\": \"true\"\n\t\t\t});\n\t\t\ttoHide.prev().attr({\n\t\t\t\t\"aria-selected\": \"false\",\n\t\t\t\t\"aria-expanded\": \"false\"\n\t\t\t});\n\t\t\t// if we're switching panels, remove the old header from the tab order\n\t\t\t// if we're opening from collapsed state, remove the previous header from the tab order\n\t\t\t// if we're collapsing, then keep the collapsing header in the tab order\n\t\t\tif (toShow.length && toHide.length) {\n\t\t\t\ttoHide.prev().attr({\n\t\t\t\t\t\"tabIndex\": -1,\n\t\t\t\t\t\"aria-expanded\": \"false\"\n\t\t\t\t});\n\t\t\t} else if (toShow.length) {\n\t\t\t\tthis.headers.filter(function () {\n\t\t\t\t\treturn parseInt($(this).attr(\"tabIndex\"), 10) === 0;\n\t\t\t\t}).attr(\"tabIndex\", -1);\n\t\t\t}\n\n\t\t\ttoShow.attr(\"aria-hidden\", \"false\").prev().attr({\n\t\t\t\t\"aria-selected\": \"true\",\n\t\t\t\t\"aria-expanded\": \"true\",\n\t\t\t\ttabIndex: 0\n\t\t\t});\n\t\t},\n\n\t\t_animate: function _animate(toShow, toHide, data) {\n\t\t\tvar total,\n\t\t\t    easing,\n\t\t\t    duration,\n\t\t\t    that = this,\n\t\t\t    adjust = 0,\n\t\t\t    boxSizing = toShow.css(\"box-sizing\"),\n\t\t\t    down = toShow.length && (!toHide.length || toShow.index() < toHide.index()),\n\t\t\t    animate = this.options.animate || {},\n\t\t\t    options = down && animate.down || animate,\n\t\t\t    complete = function complete() {\n\t\t\t\tthat._toggleComplete(data);\n\t\t\t};\n\n\t\t\tif (typeof options === \"number\") {\n\t\t\t\tduration = options;\n\t\t\t}\n\t\t\tif (typeof options === \"string\") {\n\t\t\t\teasing = options;\n\t\t\t}\n\t\t\t// fall back from options to animation in case of partial down settings\n\t\t\teasing = easing || options.easing || animate.easing;\n\t\t\tduration = duration || options.duration || animate.duration;\n\n\t\t\tif (!toHide.length) {\n\t\t\t\treturn toShow.animate(this.showProps, duration, easing, complete);\n\t\t\t}\n\t\t\tif (!toShow.length) {\n\t\t\t\treturn toHide.animate(this.hideProps, duration, easing, complete);\n\t\t\t}\n\n\t\t\ttotal = toShow.show().outerHeight();\n\t\t\ttoHide.animate(this.hideProps, {\n\t\t\t\tduration: duration,\n\t\t\t\teasing: easing,\n\t\t\t\tstep: function step(now, fx) {\n\t\t\t\t\tfx.now = Math.round(now);\n\t\t\t\t}\n\t\t\t});\n\t\t\ttoShow.hide().animate(this.showProps, {\n\t\t\t\tduration: duration,\n\t\t\t\teasing: easing,\n\t\t\t\tcomplete: complete,\n\t\t\t\tstep: function step(now, fx) {\n\t\t\t\t\tfx.now = Math.round(now);\n\t\t\t\t\tif (fx.prop !== \"height\") {\n\t\t\t\t\t\tif (boxSizing === \"content-box\") {\n\t\t\t\t\t\t\tadjust += fx.now;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (that.options.heightStyle !== \"content\") {\n\t\t\t\t\t\tfx.now = Math.round(total - toHide.outerHeight() - adjust);\n\t\t\t\t\t\tadjust = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_toggleComplete: function _toggleComplete(data) {\n\t\t\tvar toHide = data.oldPanel;\n\n\t\t\ttoHide.removeClass(\"ui-accordion-content-active\").prev().removeClass(\"ui-corner-top\").addClass(\"ui-corner-all\");\n\n\t\t\t// Work around for rendering bug in IE (#5421)\n\t\t\tif (toHide.length) {\n\t\t\t\ttoHide.parent()[0].className = toHide.parent()[0].className;\n\t\t\t}\n\t\t\tthis._trigger(\"activate\", null, data);\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Menu 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/menu/\n  */\n\n\tvar menu = $.widget(\"ui.menu\", {\n\t\tversion: \"1.11.4\",\n\t\tdefaultElement: \"<ul>\",\n\t\tdelay: 300,\n\t\toptions: {\n\t\t\ticons: {\n\t\t\t\tsubmenu: \"ui-icon-carat-1-e\"\n\t\t\t},\n\t\t\titems: \"> *\",\n\t\t\tmenus: \"ul\",\n\t\t\tposition: {\n\t\t\t\tmy: \"left-1 top\",\n\t\t\t\tat: \"right top\"\n\t\t\t},\n\t\t\trole: \"menu\",\n\n\t\t\t// callbacks\n\t\t\tblur: null,\n\t\t\tfocus: null,\n\t\t\tselect: null\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\tthis.activeMenu = this.element;\n\n\t\t\t// Flag used to prevent firing of the click handler\n\t\t\t// as the event bubbles up through nested menus\n\t\t\tthis.mouseHandled = false;\n\t\t\tthis.element.uniqueId().addClass(\"ui-menu ui-widget ui-widget-content\").toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length).attr({\n\t\t\t\trole: this.options.role,\n\t\t\t\ttabIndex: 0\n\t\t\t});\n\n\t\t\tif (this.options.disabled) {\n\t\t\t\tthis.element.addClass(\"ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n\t\t\t}\n\n\t\t\tthis._on({\n\t\t\t\t// Prevent focus from sticking to links inside menu after clicking\n\t\t\t\t// them (focus should always stay on UL during navigation).\n\t\t\t\t\"mousedown .ui-menu-item\": function mousedownUiMenuItem(event) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t},\n\t\t\t\t\"click .ui-menu-item\": function clickUiMenuItem(event) {\n\t\t\t\t\tvar target = $(event.target);\n\t\t\t\t\tif (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\n\t\t\t\t\t\tthis.select(event);\n\n\t\t\t\t\t\t// Only set the mouseHandled flag if the event will bubble, see #9469.\n\t\t\t\t\t\tif (!event.isPropagationStopped()) {\n\t\t\t\t\t\t\tthis.mouseHandled = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Open submenu on click\n\t\t\t\t\t\tif (target.has(\".ui-menu\").length) {\n\t\t\t\t\t\t\tthis.expand(event);\n\t\t\t\t\t\t} else if (!this.element.is(\":focus\") && $(this.document[0].activeElement).closest(\".ui-menu\").length) {\n\n\t\t\t\t\t\t\t// Redirect focus to the menu\n\t\t\t\t\t\t\tthis.element.trigger(\"focus\", [true]);\n\n\t\t\t\t\t\t\t// If the active item is on the top level, let it stay active.\n\t\t\t\t\t\t\t// Otherwise, blur the active item since it is no longer visible.\n\t\t\t\t\t\t\tif (this.active && this.active.parents(\".ui-menu\").length === 1) {\n\t\t\t\t\t\t\t\tclearTimeout(this.timer);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"mouseenter .ui-menu-item\": function mouseenterUiMenuItem(event) {\n\t\t\t\t\t// Ignore mouse events while typeahead is active, see #10458.\n\t\t\t\t\t// Prevents focusing the wrong item when typeahead causes a scroll while the mouse\n\t\t\t\t\t// is over an item in the menu\n\t\t\t\t\tif (this.previousFilter) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar target = $(event.currentTarget);\n\t\t\t\t\t// Remove ui-state-active class from siblings of the newly focused menu item\n\t\t\t\t\t// to avoid a jump caused by adjacent elements both having a class with a border\n\t\t\t\t\ttarget.siblings(\".ui-state-active\").removeClass(\"ui-state-active\");\n\t\t\t\t\tthis.focus(event, target);\n\t\t\t\t},\n\t\t\t\tmouseleave: \"collapseAll\",\n\t\t\t\t\"mouseleave .ui-menu\": \"collapseAll\",\n\t\t\t\tfocus: function focus(event, keepActiveItem) {\n\t\t\t\t\t// If there's already an active item, keep it active\n\t\t\t\t\t// If not, activate the first item\n\t\t\t\t\tvar item = this.active || this.element.find(this.options.items).eq(0);\n\n\t\t\t\t\tif (!keepActiveItem) {\n\t\t\t\t\t\tthis.focus(event, item);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tblur: function blur(event) {\n\t\t\t\t\tthis._delay(function () {\n\t\t\t\t\t\tif (!$.contains(this.element[0], this.document[0].activeElement)) {\n\t\t\t\t\t\t\tthis.collapseAll(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tkeydown: \"_keydown\"\n\t\t\t});\n\n\t\t\tthis.refresh();\n\n\t\t\t// Clicks outside of a menu collapse any open menus\n\t\t\tthis._on(this.document, {\n\t\t\t\tclick: function click(event) {\n\t\t\t\t\tif (this._closeOnDocumentClick(event)) {\n\t\t\t\t\t\tthis.collapseAll(event);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reset the mouseHandled flag\n\t\t\t\t\tthis.mouseHandled = false;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\t// Destroy (sub)menus\n\t\t\tthis.element.removeAttr(\"aria-activedescendant\").find(\".ui-menu\").addBack().removeClass(\"ui-menu ui-widget ui-widget-content ui-menu-icons ui-front\").removeAttr(\"role\").removeAttr(\"tabIndex\").removeAttr(\"aria-labelledby\").removeAttr(\"aria-expanded\").removeAttr(\"aria-hidden\").removeAttr(\"aria-disabled\").removeUniqueId().show();\n\n\t\t\t// Destroy menu items\n\t\t\tthis.element.find(\".ui-menu-item\").removeClass(\"ui-menu-item\").removeAttr(\"role\").removeAttr(\"aria-disabled\").removeUniqueId().removeClass(\"ui-state-hover\").removeAttr(\"tabIndex\").removeAttr(\"role\").removeAttr(\"aria-haspopup\").children().each(function () {\n\t\t\t\tvar elem = $(this);\n\t\t\t\tif (elem.data(\"ui-menu-submenu-carat\")) {\n\t\t\t\t\telem.remove();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Destroy menu dividers\n\t\t\tthis.element.find(\".ui-menu-divider\").removeClass(\"ui-menu-divider ui-widget-content\");\n\t\t},\n\n\t\t_keydown: function _keydown(event) {\n\t\t\tvar match,\n\t\t\t    prev,\n\t\t\t    character,\n\t\t\t    skip,\n\t\t\t    preventDefault = true;\n\n\t\t\tswitch (event.keyCode) {\n\t\t\t\tcase $.ui.keyCode.PAGE_UP:\n\t\t\t\t\tthis.previousPage(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.PAGE_DOWN:\n\t\t\t\t\tthis.nextPage(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.HOME:\n\t\t\t\t\tthis._move(\"first\", \"first\", event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.END:\n\t\t\t\t\tthis._move(\"last\", \"last\", event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.UP:\n\t\t\t\t\tthis.previous(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.DOWN:\n\t\t\t\t\tthis.next(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.LEFT:\n\t\t\t\t\tthis.collapse(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.RIGHT:\n\t\t\t\t\tif (this.active && !this.active.is(\".ui-state-disabled\")) {\n\t\t\t\t\t\tthis.expand(event);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.ENTER:\n\t\t\t\tcase $.ui.keyCode.SPACE:\n\t\t\t\t\tthis._activate(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.ESCAPE:\n\t\t\t\t\tthis.collapse(event);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tpreventDefault = false;\n\t\t\t\t\tprev = this.previousFilter || \"\";\n\t\t\t\t\tcharacter = String.fromCharCode(event.keyCode);\n\t\t\t\t\tskip = false;\n\n\t\t\t\t\tclearTimeout(this.filterTimer);\n\n\t\t\t\t\tif (character === prev) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcharacter = prev + character;\n\t\t\t\t\t}\n\n\t\t\t\t\tmatch = this._filterMenuItems(character);\n\t\t\t\t\tmatch = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(\".ui-menu-item\") : match;\n\n\t\t\t\t\t// If no matches on the current filter, reset to the last character pressed\n\t\t\t\t\t// to move down the menu to the first item that starts with that character\n\t\t\t\t\tif (!match.length) {\n\t\t\t\t\t\tcharacter = String.fromCharCode(event.keyCode);\n\t\t\t\t\t\tmatch = this._filterMenuItems(character);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (match.length) {\n\t\t\t\t\t\tthis.focus(event, match);\n\t\t\t\t\t\tthis.previousFilter = character;\n\t\t\t\t\t\tthis.filterTimer = this._delay(function () {\n\t\t\t\t\t\t\tdelete this.previousFilter;\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete this.previousFilter;\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (preventDefault) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t_activate: function _activate(event) {\n\t\t\tif (!this.active.is(\".ui-state-disabled\")) {\n\t\t\t\tif (this.active.is(\"[aria-haspopup='true']\")) {\n\t\t\t\t\tthis.expand(event);\n\t\t\t\t} else {\n\t\t\t\t\tthis.select(event);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trefresh: function refresh() {\n\t\t\tvar menus,\n\t\t\t    items,\n\t\t\t    that = this,\n\t\t\t    icon = this.options.icons.submenu,\n\t\t\t    submenus = this.element.find(this.options.menus);\n\n\t\t\tthis.element.toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length);\n\n\t\t\t// Initialize nested menus\n\t\t\tsubmenus.filter(\":not(.ui-menu)\").addClass(\"ui-menu ui-widget ui-widget-content ui-front\").hide().attr({\n\t\t\t\trole: this.options.role,\n\t\t\t\t\"aria-hidden\": \"true\",\n\t\t\t\t\"aria-expanded\": \"false\"\n\t\t\t}).each(function () {\n\t\t\t\tvar menu = $(this),\n\t\t\t\t    item = menu.parent(),\n\t\t\t\t    submenuCarat = $(\"<span>\").addClass(\"ui-menu-icon ui-icon \" + icon).data(\"ui-menu-submenu-carat\", true);\n\n\t\t\t\titem.attr(\"aria-haspopup\", \"true\").prepend(submenuCarat);\n\t\t\t\tmenu.attr(\"aria-labelledby\", item.attr(\"id\"));\n\t\t\t});\n\n\t\t\tmenus = submenus.add(this.element);\n\t\t\titems = menus.find(this.options.items);\n\n\t\t\t// Initialize menu-items containing spaces and/or dashes only as dividers\n\t\t\titems.not(\".ui-menu-item\").each(function () {\n\t\t\t\tvar item = $(this);\n\t\t\t\tif (that._isDivider(item)) {\n\t\t\t\t\titem.addClass(\"ui-widget-content ui-menu-divider\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Don't refresh list items that are already adapted\n\t\t\titems.not(\".ui-menu-item, .ui-menu-divider\").addClass(\"ui-menu-item\").uniqueId().attr({\n\t\t\t\ttabIndex: -1,\n\t\t\t\trole: this._itemRole()\n\t\t\t});\n\n\t\t\t// Add aria-disabled attribute to any disabled menu item\n\t\t\titems.filter(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n\n\t\t\t// If the active item has been removed, blur the menu\n\t\t\tif (this.active && !$.contains(this.element[0], this.active[0])) {\n\t\t\t\tthis.blur();\n\t\t\t}\n\t\t},\n\n\t\t_itemRole: function _itemRole() {\n\t\t\treturn {\n\t\t\t\tmenu: \"menuitem\",\n\t\t\t\tlistbox: \"option\"\n\t\t\t}[this.options.role];\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tif (key === \"icons\") {\n\t\t\t\tthis.element.find(\".ui-menu-icon\").removeClass(this.options.icons.submenu).addClass(value.submenu);\n\t\t\t}\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.element.toggleClass(\"ui-state-disabled\", !!value).attr(\"aria-disabled\", value);\n\t\t\t}\n\t\t\tthis._super(key, value);\n\t\t},\n\n\t\tfocus: function focus(event, item) {\n\t\t\tvar nested, focused;\n\t\t\tthis.blur(event, event && event.type === \"focus\");\n\n\t\t\tthis._scrollIntoView(item);\n\n\t\t\tthis.active = item.first();\n\t\t\tfocused = this.active.addClass(\"ui-state-focus\").removeClass(\"ui-state-active\");\n\t\t\t// Only update aria-activedescendant if there's a role\n\t\t\t// otherwise we assume focus is managed elsewhere\n\t\t\tif (this.options.role) {\n\t\t\t\tthis.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\n\t\t\t}\n\n\t\t\t// Highlight active parent menu item, if any\n\t\t\tthis.active.parent().closest(\".ui-menu-item\").addClass(\"ui-state-active\");\n\n\t\t\tif (event && event.type === \"keydown\") {\n\t\t\t\tthis._close();\n\t\t\t} else {\n\t\t\t\tthis.timer = this._delay(function () {\n\t\t\t\t\tthis._close();\n\t\t\t\t}, this.delay);\n\t\t\t}\n\n\t\t\tnested = item.children(\".ui-menu\");\n\t\t\tif (nested.length && event && /^mouse/.test(event.type)) {\n\t\t\t\tthis._startOpening(nested);\n\t\t\t}\n\t\t\tthis.activeMenu = item.parent();\n\n\t\t\tthis._trigger(\"focus\", event, { item: item });\n\t\t},\n\n\t\t_scrollIntoView: function _scrollIntoView(item) {\n\t\t\tvar borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n\t\t\tif (this._hasScroll()) {\n\t\t\t\tborderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\n\t\t\t\tpaddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\n\t\t\t\toffset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n\t\t\t\tscroll = this.activeMenu.scrollTop();\n\t\t\t\telementHeight = this.activeMenu.height();\n\t\t\t\titemHeight = item.outerHeight();\n\n\t\t\t\tif (offset < 0) {\n\t\t\t\t\tthis.activeMenu.scrollTop(scroll + offset);\n\t\t\t\t} else if (offset + itemHeight > elementHeight) {\n\t\t\t\t\tthis.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tblur: function blur(event, fromFocus) {\n\t\t\tif (!fromFocus) {\n\t\t\t\tclearTimeout(this.timer);\n\t\t\t}\n\n\t\t\tif (!this.active) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.active.removeClass(\"ui-state-focus\");\n\t\t\tthis.active = null;\n\n\t\t\tthis._trigger(\"blur\", event, { item: this.active });\n\t\t},\n\n\t\t_startOpening: function _startOpening(submenu) {\n\t\t\tclearTimeout(this.timer);\n\n\t\t\t// Don't open if already open fixes a Firefox bug that caused a .5 pixel\n\t\t\t// shift in the submenu position when mousing over the carat icon\n\t\t\tif (submenu.attr(\"aria-hidden\") !== \"true\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.timer = this._delay(function () {\n\t\t\t\tthis._close();\n\t\t\t\tthis._open(submenu);\n\t\t\t}, this.delay);\n\t\t},\n\n\t\t_open: function _open(submenu) {\n\t\t\tvar position = $.extend({\n\t\t\t\tof: this.active\n\t\t\t}, this.options.position);\n\n\t\t\tclearTimeout(this.timer);\n\t\t\tthis.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\")).hide().attr(\"aria-hidden\", \"true\");\n\n\t\t\tsubmenu.show().removeAttr(\"aria-hidden\").attr(\"aria-expanded\", \"true\").position(position);\n\t\t},\n\n\t\tcollapseAll: function collapseAll(event, all) {\n\t\t\tclearTimeout(this.timer);\n\t\t\tthis.timer = this._delay(function () {\n\t\t\t\t// If we were passed an event, look for the submenu that contains the event\n\t\t\t\tvar currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(\".ui-menu\"));\n\n\t\t\t\t// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\n\t\t\t\tif (!currentMenu.length) {\n\t\t\t\t\tcurrentMenu = this.element;\n\t\t\t\t}\n\n\t\t\t\tthis._close(currentMenu);\n\n\t\t\t\tthis.blur(event);\n\t\t\t\tthis.activeMenu = currentMenu;\n\t\t\t}, this.delay);\n\t\t},\n\n\t\t// With no arguments, closes the currently active menu - if nothing is active\n\t\t// it closes all menus.  If passed an argument, it will search for menus BELOW\n\t\t_close: function _close(startMenu) {\n\t\t\tif (!startMenu) {\n\t\t\t\tstartMenu = this.active ? this.active.parent() : this.element;\n\t\t\t}\n\n\t\t\tstartMenu.find(\".ui-menu\").hide().attr(\"aria-hidden\", \"true\").attr(\"aria-expanded\", \"false\").end().find(\".ui-state-active\").not(\".ui-state-focus\").removeClass(\"ui-state-active\");\n\t\t},\n\n\t\t_closeOnDocumentClick: function _closeOnDocumentClick(event) {\n\t\t\treturn !$(event.target).closest(\".ui-menu\").length;\n\t\t},\n\n\t\t_isDivider: function _isDivider(item) {\n\n\t\t\t// Match hyphen, em dash, en dash\n\t\t\treturn !/[^\\-\\u2014\\u2013\\s]/.test(item.text());\n\t\t},\n\n\t\tcollapse: function collapse(event) {\n\t\t\tvar newItem = this.active && this.active.parent().closest(\".ui-menu-item\", this.element);\n\t\t\tif (newItem && newItem.length) {\n\t\t\t\tthis._close();\n\t\t\t\tthis.focus(event, newItem);\n\t\t\t}\n\t\t},\n\n\t\texpand: function expand(event) {\n\t\t\tvar newItem = this.active && this.active.children(\".ui-menu \").find(this.options.items).first();\n\n\t\t\tif (newItem && newItem.length) {\n\t\t\t\tthis._open(newItem.parent());\n\n\t\t\t\t// Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n\t\t\t\tthis._delay(function () {\n\t\t\t\t\tthis.focus(event, newItem);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\tnext: function next(event) {\n\t\t\tthis._move(\"next\", \"first\", event);\n\t\t},\n\n\t\tprevious: function previous(event) {\n\t\t\tthis._move(\"prev\", \"last\", event);\n\t\t},\n\n\t\tisFirstItem: function isFirstItem() {\n\t\t\treturn this.active && !this.active.prevAll(\".ui-menu-item\").length;\n\t\t},\n\n\t\tisLastItem: function isLastItem() {\n\t\t\treturn this.active && !this.active.nextAll(\".ui-menu-item\").length;\n\t\t},\n\n\t\t_move: function _move(direction, filter, event) {\n\t\t\tvar next;\n\t\t\tif (this.active) {\n\t\t\t\tif (direction === \"first\" || direction === \"last\") {\n\t\t\t\t\tnext = this.active[direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\").eq(-1);\n\t\t\t\t} else {\n\t\t\t\t\tnext = this.active[direction + \"All\"](\".ui-menu-item\").eq(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!next || !next.length || !this.active) {\n\t\t\t\tnext = this.activeMenu.find(this.options.items)[filter]();\n\t\t\t}\n\n\t\t\tthis.focus(event, next);\n\t\t},\n\n\t\tnextPage: function nextPage(event) {\n\t\t\tvar item, base, height;\n\n\t\t\tif (!this.active) {\n\t\t\t\tthis.next(event);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.isLastItem()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._hasScroll()) {\n\t\t\t\tbase = this.active.offset().top;\n\t\t\t\theight = this.element.height();\n\t\t\t\tthis.active.nextAll(\".ui-menu-item\").each(function () {\n\t\t\t\t\titem = $(this);\n\t\t\t\t\treturn item.offset().top - base - height < 0;\n\t\t\t\t});\n\n\t\t\t\tthis.focus(event, item);\n\t\t\t} else {\n\t\t\t\tthis.focus(event, this.activeMenu.find(this.options.items)[!this.active ? \"first\" : \"last\"]());\n\t\t\t}\n\t\t},\n\n\t\tpreviousPage: function previousPage(event) {\n\t\t\tvar item, base, height;\n\t\t\tif (!this.active) {\n\t\t\t\tthis.next(event);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.isFirstItem()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._hasScroll()) {\n\t\t\t\tbase = this.active.offset().top;\n\t\t\t\theight = this.element.height();\n\t\t\t\tthis.active.prevAll(\".ui-menu-item\").each(function () {\n\t\t\t\t\titem = $(this);\n\t\t\t\t\treturn item.offset().top - base + height > 0;\n\t\t\t\t});\n\n\t\t\t\tthis.focus(event, item);\n\t\t\t} else {\n\t\t\t\tthis.focus(event, this.activeMenu.find(this.options.items).first());\n\t\t\t}\n\t\t},\n\n\t\t_hasScroll: function _hasScroll() {\n\t\t\treturn this.element.outerHeight() < this.element.prop(\"scrollHeight\");\n\t\t},\n\n\t\tselect: function select(event) {\n\t\t\t// TODO: It should never be possible to not have an active item at this\n\t\t\t// point, but the tests don't trigger mouseenter before click.\n\t\t\tthis.active = this.active || $(event.target).closest(\".ui-menu-item\");\n\t\t\tvar ui = { item: this.active };\n\t\t\tif (!this.active.has(\".ui-menu\").length) {\n\t\t\t\tthis.collapseAll(event, true);\n\t\t\t}\n\t\t\tthis._trigger(\"select\", event, ui);\n\t\t},\n\n\t\t_filterMenuItems: function _filterMenuItems(character) {\n\t\t\tvar escapedCharacter = character.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\"),\n\t\t\t    regex = new RegExp(\"^\" + escapedCharacter, \"i\");\n\n\t\t\treturn this.activeMenu.find(this.options.items)\n\n\t\t\t// Only match on items, not dividers or other content (#10571)\n\t\t\t.filter(\".ui-menu-item\").filter(function () {\n\t\t\t\treturn regex.test($.trim($(this).text()));\n\t\t\t});\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Autocomplete 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/autocomplete/\n  */\n\n\t$.widget(\"ui.autocomplete\", {\n\t\tversion: \"1.11.4\",\n\t\tdefaultElement: \"<input>\",\n\t\toptions: {\n\t\t\tappendTo: null,\n\t\t\tautoFocus: false,\n\t\t\tdelay: 300,\n\t\t\tminLength: 1,\n\t\t\tposition: {\n\t\t\t\tmy: \"left top\",\n\t\t\t\tat: \"left bottom\",\n\t\t\t\tcollision: \"none\"\n\t\t\t},\n\t\t\tsource: null,\n\n\t\t\t// callbacks\n\t\t\tchange: null,\n\t\t\tclose: null,\n\t\t\tfocus: null,\n\t\t\topen: null,\n\t\t\tresponse: null,\n\t\t\tsearch: null,\n\t\t\tselect: null\n\t\t},\n\n\t\trequestIndex: 0,\n\t\tpending: 0,\n\n\t\t_create: function _create() {\n\t\t\t// Some browsers only repeat keydown events, not keypress events,\n\t\t\t// so we use the suppressKeyPress flag to determine if we've already\n\t\t\t// handled the keydown event. #7269\n\t\t\t// Unfortunately the code for & in keypress is the same as the up arrow,\n\t\t\t// so we use the suppressKeyPressRepeat flag to avoid handling keypress\n\t\t\t// events when we know the keydown event was used to modify the\n\t\t\t// search term. #7799\n\t\t\tvar suppressKeyPress,\n\t\t\t    suppressKeyPressRepeat,\n\t\t\t    suppressInput,\n\t\t\t    nodeName = this.element[0].nodeName.toLowerCase(),\n\t\t\t    isTextarea = nodeName === \"textarea\",\n\t\t\t    isInput = nodeName === \"input\";\n\n\t\t\tthis.isMultiLine =\n\t\t\t// Textareas are always multi-line\n\t\t\tisTextarea ? true :\n\t\t\t// Inputs are always single-line, even if inside a contentEditable element\n\t\t\t// IE also treats inputs as contentEditable\n\t\t\tisInput ? false :\n\t\t\t// All other element types are determined by whether or not they're contentEditable\n\t\t\tthis.element.prop(\"isContentEditable\");\n\n\t\t\tthis.valueMethod = this.element[isTextarea || isInput ? \"val\" : \"text\"];\n\t\t\tthis.isNewMenu = true;\n\n\t\t\tthis.element.addClass(\"ui-autocomplete-input\").attr(\"autocomplete\", \"off\");\n\n\t\t\tthis._on(this.element, {\n\t\t\t\tkeydown: function keydown(event) {\n\t\t\t\t\tif (this.element.prop(\"readOnly\")) {\n\t\t\t\t\t\tsuppressKeyPress = true;\n\t\t\t\t\t\tsuppressInput = true;\n\t\t\t\t\t\tsuppressKeyPressRepeat = true;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsuppressKeyPress = false;\n\t\t\t\t\tsuppressInput = false;\n\t\t\t\t\tsuppressKeyPressRepeat = false;\n\t\t\t\t\tvar keyCode = $.ui.keyCode;\n\t\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\t\tcase keyCode.PAGE_UP:\n\t\t\t\t\t\t\tsuppressKeyPress = true;\n\t\t\t\t\t\t\tthis._move(\"previousPage\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.PAGE_DOWN:\n\t\t\t\t\t\t\tsuppressKeyPress = true;\n\t\t\t\t\t\t\tthis._move(\"nextPage\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.UP:\n\t\t\t\t\t\t\tsuppressKeyPress = true;\n\t\t\t\t\t\t\tthis._keyEvent(\"previous\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.DOWN:\n\t\t\t\t\t\t\tsuppressKeyPress = true;\n\t\t\t\t\t\t\tthis._keyEvent(\"next\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.ENTER:\n\t\t\t\t\t\t\t// when menu is open and has focus\n\t\t\t\t\t\t\tif (this.menu.active) {\n\t\t\t\t\t\t\t\t// #6055 - Opera still allows the keypress to occur\n\t\t\t\t\t\t\t\t// which causes forms to submit\n\t\t\t\t\t\t\t\tsuppressKeyPress = true;\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tthis.menu.select(event);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.TAB:\n\t\t\t\t\t\t\tif (this.menu.active) {\n\t\t\t\t\t\t\t\tthis.menu.select(event);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.ESCAPE:\n\t\t\t\t\t\t\tif (this.menu.element.is(\":visible\")) {\n\t\t\t\t\t\t\t\tif (!this.isMultiLine) {\n\t\t\t\t\t\t\t\t\tthis._value(this.term);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.close(event);\n\t\t\t\t\t\t\t\t// Different browsers have different default behavior for escape\n\t\t\t\t\t\t\t\t// Single press can mean undo or clear\n\t\t\t\t\t\t\t\t// Double press in IE means clear the whole form\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tsuppressKeyPressRepeat = true;\n\t\t\t\t\t\t\t// search timeout should be triggered before the input value is changed\n\t\t\t\t\t\t\tthis._searchTimeout(event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkeypress: function keypress(event) {\n\t\t\t\t\tif (suppressKeyPress) {\n\t\t\t\t\t\tsuppressKeyPress = false;\n\t\t\t\t\t\tif (!this.isMultiLine || this.menu.element.is(\":visible\")) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (suppressKeyPressRepeat) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// replicate some key handlers to allow them to repeat in Firefox and Opera\n\t\t\t\t\tvar keyCode = $.ui.keyCode;\n\t\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\t\tcase keyCode.PAGE_UP:\n\t\t\t\t\t\t\tthis._move(\"previousPage\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.PAGE_DOWN:\n\t\t\t\t\t\t\tthis._move(\"nextPage\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.UP:\n\t\t\t\t\t\t\tthis._keyEvent(\"previous\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase keyCode.DOWN:\n\t\t\t\t\t\t\tthis._keyEvent(\"next\", event);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tinput: function input(event) {\n\t\t\t\t\tif (suppressInput) {\n\t\t\t\t\t\tsuppressInput = false;\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._searchTimeout(event);\n\t\t\t\t},\n\t\t\t\tfocus: function focus() {\n\t\t\t\t\tthis.selectedItem = null;\n\t\t\t\t\tthis.previous = this._value();\n\t\t\t\t},\n\t\t\t\tblur: function blur(event) {\n\t\t\t\t\tif (this.cancelBlur) {\n\t\t\t\t\t\tdelete this.cancelBlur;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(this.searching);\n\t\t\t\t\tthis.close(event);\n\t\t\t\t\tthis._change(event);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._initSource();\n\t\t\tthis.menu = $(\"<ul>\").addClass(\"ui-autocomplete ui-front\").appendTo(this._appendTo()).menu({\n\t\t\t\t// disable ARIA support, the live region takes care of that\n\t\t\t\trole: null\n\t\t\t}).hide().menu(\"instance\");\n\n\t\t\tthis._on(this.menu.element, {\n\t\t\t\tmousedown: function mousedown(event) {\n\t\t\t\t\t// prevent moving focus out of the text field\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t// IE doesn't prevent moving focus even with event.preventDefault()\n\t\t\t\t\t// so we set a flag to know when we should ignore the blur event\n\t\t\t\t\tthis.cancelBlur = true;\n\t\t\t\t\tthis._delay(function () {\n\t\t\t\t\t\tdelete this.cancelBlur;\n\t\t\t\t\t});\n\n\t\t\t\t\t// clicking on the scrollbar causes focus to shift to the body\n\t\t\t\t\t// but we can't detect a mouseup or a click immediately afterward\n\t\t\t\t\t// so we have to track the next mousedown and close the menu if\n\t\t\t\t\t// the user clicks somewhere outside of the autocomplete\n\t\t\t\t\tvar menuElement = this.menu.element[0];\n\t\t\t\t\tif (!$(event.target).closest(\".ui-menu-item\").length) {\n\t\t\t\t\t\tthis._delay(function () {\n\t\t\t\t\t\t\tvar that = this;\n\t\t\t\t\t\t\tthis.document.one(\"mousedown\", function (event) {\n\t\t\t\t\t\t\t\tif (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {\n\t\t\t\t\t\t\t\t\tthat.close();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmenufocus: function menufocus(event, ui) {\n\t\t\t\t\tvar label, item;\n\t\t\t\t\t// support: Firefox\n\t\t\t\t\t// Prevent accidental activation of menu items in Firefox (#7024 #9118)\n\t\t\t\t\tif (this.isNewMenu) {\n\t\t\t\t\t\tthis.isNewMenu = false;\n\t\t\t\t\t\tif (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {\n\t\t\t\t\t\t\tthis.menu.blur();\n\n\t\t\t\t\t\t\tthis.document.one(\"mousemove\", function () {\n\t\t\t\t\t\t\t\t$(event.target).trigger(event.originalEvent);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\titem = ui.item.data(\"ui-autocomplete-item\");\n\t\t\t\t\tif (false !== this._trigger(\"focus\", event, { item: item })) {\n\t\t\t\t\t\t// use value to match what will end up in the input, if it was a key event\n\t\t\t\t\t\tif (event.originalEvent && /^key/.test(event.originalEvent.type)) {\n\t\t\t\t\t\t\tthis._value(item.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Announce the value in the liveRegion\n\t\t\t\t\tlabel = ui.item.attr(\"aria-label\") || item.value;\n\t\t\t\t\tif (label && $.trim(label).length) {\n\t\t\t\t\t\tthis.liveRegion.children().hide();\n\t\t\t\t\t\t$(\"<div>\").text(label).appendTo(this.liveRegion);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmenuselect: function menuselect(event, ui) {\n\t\t\t\t\tvar item = ui.item.data(\"ui-autocomplete-item\"),\n\t\t\t\t\t    previous = this.previous;\n\n\t\t\t\t\t// only trigger when focus was lost (click on menu)\n\t\t\t\t\tif (this.element[0] !== this.document[0].activeElement) {\n\t\t\t\t\t\tthis.element.focus();\n\t\t\t\t\t\tthis.previous = previous;\n\t\t\t\t\t\t// #6109 - IE triggers two focus events and the second\n\t\t\t\t\t\t// is asynchronous, so we need to reset the previous\n\t\t\t\t\t\t// term synchronously and asynchronously :-(\n\t\t\t\t\t\tthis._delay(function () {\n\t\t\t\t\t\t\tthis.previous = previous;\n\t\t\t\t\t\t\tthis.selectedItem = item;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (false !== this._trigger(\"select\", event, { item: item })) {\n\t\t\t\t\t\tthis._value(item.value);\n\t\t\t\t\t}\n\t\t\t\t\t// reset the term after the select event\n\t\t\t\t\t// this allows custom select handling to work properly\n\t\t\t\t\tthis.term = this._value();\n\n\t\t\t\t\tthis.close(event);\n\t\t\t\t\tthis.selectedItem = item;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.liveRegion = $(\"<span>\", {\n\t\t\t\trole: \"status\",\n\t\t\t\t\"aria-live\": \"assertive\",\n\t\t\t\t\"aria-relevant\": \"additions\"\n\t\t\t}).addClass(\"ui-helper-hidden-accessible\").appendTo(this.document[0].body);\n\n\t\t\t// turning off autocomplete prevents the browser from remembering the\n\t\t\t// value when navigating through history, so we re-enable autocomplete\n\t\t\t// if the page is unloaded before the widget is destroyed. #7790\n\t\t\tthis._on(this.window, {\n\t\t\t\tbeforeunload: function beforeunload() {\n\t\t\t\t\tthis.element.removeAttr(\"autocomplete\");\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tclearTimeout(this.searching);\n\t\t\tthis.element.removeClass(\"ui-autocomplete-input\").removeAttr(\"autocomplete\");\n\t\t\tthis.menu.element.remove();\n\t\t\tthis.liveRegion.remove();\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tthis._super(key, value);\n\t\t\tif (key === \"source\") {\n\t\t\t\tthis._initSource();\n\t\t\t}\n\t\t\tif (key === \"appendTo\") {\n\t\t\t\tthis.menu.element.appendTo(this._appendTo());\n\t\t\t}\n\t\t\tif (key === \"disabled\" && value && this.xhr) {\n\t\t\t\tthis.xhr.abort();\n\t\t\t}\n\t\t},\n\n\t\t_appendTo: function _appendTo() {\n\t\t\tvar element = this.options.appendTo;\n\n\t\t\tif (element) {\n\t\t\t\telement = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n\t\t\t}\n\n\t\t\tif (!element || !element[0]) {\n\t\t\t\telement = this.element.closest(\".ui-front\");\n\t\t\t}\n\n\t\t\tif (!element.length) {\n\t\t\t\telement = this.document[0].body;\n\t\t\t}\n\n\t\t\treturn element;\n\t\t},\n\n\t\t_initSource: function _initSource() {\n\t\t\tvar array,\n\t\t\t    url,\n\t\t\t    that = this;\n\t\t\tif ($.isArray(this.options.source)) {\n\t\t\t\tarray = this.options.source;\n\t\t\t\tthis.source = function (request, response) {\n\t\t\t\t\tresponse($.ui.autocomplete.filter(array, request.term));\n\t\t\t\t};\n\t\t\t} else if (typeof this.options.source === \"string\") {\n\t\t\t\turl = this.options.source;\n\t\t\t\tthis.source = function (request, response) {\n\t\t\t\t\tif (that.xhr) {\n\t\t\t\t\t\tthat.xhr.abort();\n\t\t\t\t\t}\n\t\t\t\t\tthat.xhr = $.ajax({\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\tdata: request,\n\t\t\t\t\t\tdataType: \"json\",\n\t\t\t\t\t\tsuccess: function success(data) {\n\t\t\t\t\t\t\tresponse(data);\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: function error() {\n\t\t\t\t\t\t\tresponse([]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.source = this.options.source;\n\t\t\t}\n\t\t},\n\n\t\t_searchTimeout: function _searchTimeout(event) {\n\t\t\tclearTimeout(this.searching);\n\t\t\tthis.searching = this._delay(function () {\n\n\t\t\t\t// Search if the value has changed, or if the user retypes the same value (see #7434)\n\t\t\t\tvar equalValues = this.term === this._value(),\n\t\t\t\t    menuVisible = this.menu.element.is(\":visible\"),\n\t\t\t\t    modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;\n\n\t\t\t\tif (!equalValues || equalValues && !menuVisible && !modifierKey) {\n\t\t\t\t\tthis.selectedItem = null;\n\t\t\t\t\tthis.search(null, event);\n\t\t\t\t}\n\t\t\t}, this.options.delay);\n\t\t},\n\n\t\tsearch: function search(value, event) {\n\t\t\tvalue = value != null ? value : this._value();\n\n\t\t\t// always save the actual value, not the one passed as an argument\n\t\t\tthis.term = this._value();\n\n\t\t\tif (value.length < this.options.minLength) {\n\t\t\t\treturn this.close(event);\n\t\t\t}\n\n\t\t\tif (this._trigger(\"search\", event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn this._search(value);\n\t\t},\n\n\t\t_search: function _search(value) {\n\t\t\tthis.pending++;\n\t\t\tthis.element.addClass(\"ui-autocomplete-loading\");\n\t\t\tthis.cancelSearch = false;\n\n\t\t\tthis.source({ term: value }, this._response());\n\t\t},\n\n\t\t_response: function _response() {\n\t\t\tvar index = ++this.requestIndex;\n\n\t\t\treturn $.proxy(function (content) {\n\t\t\t\tif (index === this.requestIndex) {\n\t\t\t\t\tthis.__response(content);\n\t\t\t\t}\n\n\t\t\t\tthis.pending--;\n\t\t\t\tif (!this.pending) {\n\t\t\t\t\tthis.element.removeClass(\"ui-autocomplete-loading\");\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t__response: function __response(content) {\n\t\t\tif (content) {\n\t\t\t\tcontent = this._normalize(content);\n\t\t\t}\n\t\t\tthis._trigger(\"response\", null, { content: content });\n\t\t\tif (!this.options.disabled && content && content.length && !this.cancelSearch) {\n\t\t\t\tthis._suggest(content);\n\t\t\t\tthis._trigger(\"open\");\n\t\t\t} else {\n\t\t\t\t// use ._close() instead of .close() so we don't cancel future searches\n\t\t\t\tthis._close();\n\t\t\t}\n\t\t},\n\n\t\tclose: function close(event) {\n\t\t\tthis.cancelSearch = true;\n\t\t\tthis._close(event);\n\t\t},\n\n\t\t_close: function _close(event) {\n\t\t\tif (this.menu.element.is(\":visible\")) {\n\t\t\t\tthis.menu.element.hide();\n\t\t\t\tthis.menu.blur();\n\t\t\t\tthis.isNewMenu = true;\n\t\t\t\tthis._trigger(\"close\", event);\n\t\t\t}\n\t\t},\n\n\t\t_change: function _change(event) {\n\t\t\tif (this.previous !== this._value()) {\n\t\t\t\tthis._trigger(\"change\", event, { item: this.selectedItem });\n\t\t\t}\n\t\t},\n\n\t\t_normalize: function _normalize(items) {\n\t\t\t// assume all items have the right format when the first item is complete\n\t\t\tif (items.length && items[0].label && items[0].value) {\n\t\t\t\treturn items;\n\t\t\t}\n\t\t\treturn $.map(items, function (item) {\n\t\t\t\tif (typeof item === \"string\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: item,\n\t\t\t\t\t\tvalue: item\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn $.extend({}, item, {\n\t\t\t\t\tlabel: item.label || item.value,\n\t\t\t\t\tvalue: item.value || item.label\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t_suggest: function _suggest(items) {\n\t\t\tvar ul = this.menu.element.empty();\n\t\t\tthis._renderMenu(ul, items);\n\t\t\tthis.isNewMenu = true;\n\t\t\tthis.menu.refresh();\n\n\t\t\t// size and position menu\n\t\t\tul.show();\n\t\t\tthis._resizeMenu();\n\t\t\tul.position($.extend({\n\t\t\t\tof: this.element\n\t\t\t}, this.options.position));\n\n\t\t\tif (this.options.autoFocus) {\n\t\t\t\tthis.menu.next();\n\t\t\t}\n\t\t},\n\n\t\t_resizeMenu: function _resizeMenu() {\n\t\t\tvar ul = this.menu.element;\n\t\t\tul.outerWidth(Math.max(\n\t\t\t// Firefox wraps long text (possibly a rounding bug)\n\t\t\t// so we add 1px to avoid the wrapping (#7513)\n\t\t\tul.width(\"\").outerWidth() + 1, this.element.outerWidth()));\n\t\t},\n\n\t\t_renderMenu: function _renderMenu(ul, items) {\n\t\t\tvar that = this;\n\t\t\t$.each(items, function (index, item) {\n\t\t\t\tthat._renderItemData(ul, item);\n\t\t\t});\n\t\t},\n\n\t\t_renderItemData: function _renderItemData(ul, item) {\n\t\t\treturn this._renderItem(ul, item).data(\"ui-autocomplete-item\", item);\n\t\t},\n\n\t\t_renderItem: function _renderItem(ul, item) {\n\t\t\treturn $(\"<li>\").text(item.label).appendTo(ul);\n\t\t},\n\n\t\t_move: function _move(direction, event) {\n\t\t\tif (!this.menu.element.is(\":visible\")) {\n\t\t\t\tthis.search(null, event);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {\n\n\t\t\t\tif (!this.isMultiLine) {\n\t\t\t\t\tthis._value(this.term);\n\t\t\t\t}\n\n\t\t\t\tthis.menu.blur();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.menu[direction](event);\n\t\t},\n\n\t\twidget: function widget() {\n\t\t\treturn this.menu.element;\n\t\t},\n\n\t\t_value: function _value() {\n\t\t\treturn this.valueMethod.apply(this.element, arguments);\n\t\t},\n\n\t\t_keyEvent: function _keyEvent(keyEvent, event) {\n\t\t\tif (!this.isMultiLine || this.menu.element.is(\":visible\")) {\n\t\t\t\tthis._move(keyEvent, event);\n\n\t\t\t\t// prevents moving cursor to beginning/end of the text field in some browsers\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t});\n\n\t$.extend($.ui.autocomplete, {\n\t\tescapeRegex: function escapeRegex(value) {\n\t\t\treturn value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n\t\t},\n\t\tfilter: function filter(array, term) {\n\t\t\tvar matcher = new RegExp($.ui.autocomplete.escapeRegex(term), \"i\");\n\t\t\treturn $.grep(array, function (value) {\n\t\t\t\treturn matcher.test(value.label || value.value || value);\n\t\t\t});\n\t\t}\n\t});\n\n\t// live region extension, adding a `messages` option\n\t// NOTE: This is an experimental API. We are still investigating\n\t// a full solution for string manipulation and internationalization.\n\t$.widget(\"ui.autocomplete\", $.ui.autocomplete, {\n\t\toptions: {\n\t\t\tmessages: {\n\t\t\t\tnoResults: \"No search results.\",\n\t\t\t\tresults: function results(amount) {\n\t\t\t\t\treturn amount + (amount > 1 ? \" results are\" : \" result is\") + \" available, use up and down arrow keys to navigate.\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t__response: function __response(content) {\n\t\t\tvar message;\n\t\t\tthis._superApply(arguments);\n\t\t\tif (this.options.disabled || this.cancelSearch) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (content && content.length) {\n\t\t\t\tmessage = this.options.messages.results(content.length);\n\t\t\t} else {\n\t\t\t\tmessage = this.options.messages.noResults;\n\t\t\t}\n\t\t\tthis.liveRegion.children().hide();\n\t\t\t$(\"<div>\").text(message).appendTo(this.liveRegion);\n\t\t}\n\t});\n\n\tvar autocomplete = $.ui.autocomplete;\n\n\t/*!\n  * jQuery UI Button 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/button/\n  */\n\n\tvar lastActive,\n\t    baseClasses = \"ui-button ui-widget ui-state-default ui-corner-all\",\n\t    typeClasses = \"ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only\",\n\t    formResetHandler = function formResetHandler() {\n\t\tvar form = $(this);\n\t\tsetTimeout(function () {\n\t\t\tform.find(\":ui-button\").button(\"refresh\");\n\t\t}, 1);\n\t},\n\t    radioGroup = function radioGroup(radio) {\n\t\tvar name = radio.name,\n\t\t    form = radio.form,\n\t\t    radios = $([]);\n\t\tif (name) {\n\t\t\tname = name.replace(/'/g, \"\\\\'\");\n\t\t\tif (form) {\n\t\t\t\tradios = $(form).find(\"[name='\" + name + \"'][type=radio]\");\n\t\t\t} else {\n\t\t\t\tradios = $(\"[name='\" + name + \"'][type=radio]\", radio.ownerDocument).filter(function () {\n\t\t\t\t\treturn !this.form;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn radios;\n\t};\n\n\t$.widget(\"ui.button\", {\n\t\tversion: \"1.11.4\",\n\t\tdefaultElement: \"<button>\",\n\t\toptions: {\n\t\t\tdisabled: null,\n\t\t\ttext: true,\n\t\t\tlabel: null,\n\t\t\ticons: {\n\t\t\t\tprimary: null,\n\t\t\t\tsecondary: null\n\t\t\t}\n\t\t},\n\t\t_create: function _create() {\n\t\t\tthis.element.closest(\"form\").unbind(\"reset\" + this.eventNamespace).bind(\"reset\" + this.eventNamespace, formResetHandler);\n\n\t\t\tif (typeof this.options.disabled !== \"boolean\") {\n\t\t\t\tthis.options.disabled = !!this.element.prop(\"disabled\");\n\t\t\t} else {\n\t\t\t\tthis.element.prop(\"disabled\", this.options.disabled);\n\t\t\t}\n\n\t\t\tthis._determineButtonType();\n\t\t\tthis.hasTitle = !!this.buttonElement.attr(\"title\");\n\n\t\t\tvar that = this,\n\t\t\t    options = this.options,\n\t\t\t    toggleButton = this.type === \"checkbox\" || this.type === \"radio\",\n\t\t\t    activeClass = !toggleButton ? \"ui-state-active\" : \"\";\n\n\t\t\tif (options.label === null) {\n\t\t\t\toptions.label = this.type === \"input\" ? this.buttonElement.val() : this.buttonElement.html();\n\t\t\t}\n\n\t\t\tthis._hoverable(this.buttonElement);\n\n\t\t\tthis.buttonElement.addClass(baseClasses).attr(\"role\", \"button\").bind(\"mouseenter\" + this.eventNamespace, function () {\n\t\t\t\tif (options.disabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this === lastActive) {\n\t\t\t\t\t$(this).addClass(\"ui-state-active\");\n\t\t\t\t}\n\t\t\t}).bind(\"mouseleave\" + this.eventNamespace, function () {\n\t\t\t\tif (options.disabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$(this).removeClass(activeClass);\n\t\t\t}).bind(\"click\" + this.eventNamespace, function (event) {\n\t\t\t\tif (options.disabled) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Can't use _focusable() because the element that receives focus\n\t\t\t// and the element that gets the ui-state-focus class are different\n\t\t\tthis._on({\n\t\t\t\tfocus: function focus() {\n\t\t\t\t\tthis.buttonElement.addClass(\"ui-state-focus\");\n\t\t\t\t},\n\t\t\t\tblur: function blur() {\n\t\t\t\t\tthis.buttonElement.removeClass(\"ui-state-focus\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (toggleButton) {\n\t\t\t\tthis.element.bind(\"change\" + this.eventNamespace, function () {\n\t\t\t\t\tthat.refresh();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.type === \"checkbox\") {\n\t\t\t\tthis.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n\t\t\t\t\tif (options.disabled) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.type === \"radio\") {\n\t\t\t\tthis.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n\t\t\t\t\tif (options.disabled) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t$(this).addClass(\"ui-state-active\");\n\t\t\t\t\tthat.buttonElement.attr(\"aria-pressed\", \"true\");\n\n\t\t\t\t\tvar radio = that.element[0];\n\t\t\t\t\tradioGroup(radio).not(radio).map(function () {\n\t\t\t\t\t\treturn $(this).button(\"widget\")[0];\n\t\t\t\t\t}).removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.buttonElement.bind(\"mousedown\" + this.eventNamespace, function () {\n\t\t\t\t\tif (options.disabled) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t$(this).addClass(\"ui-state-active\");\n\t\t\t\t\tlastActive = this;\n\t\t\t\t\tthat.document.one(\"mouseup\", function () {\n\t\t\t\t\t\tlastActive = null;\n\t\t\t\t\t});\n\t\t\t\t}).bind(\"mouseup\" + this.eventNamespace, function () {\n\t\t\t\t\tif (options.disabled) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t$(this).removeClass(\"ui-state-active\");\n\t\t\t\t}).bind(\"keydown\" + this.eventNamespace, function (event) {\n\t\t\t\t\tif (options.disabled) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {\n\t\t\t\t\t\t$(this).addClass(\"ui-state-active\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t// see #8559, we bind to blur here in case the button element loses\n\t\t\t\t// focus between keydown and keyup, it would be left in an \"active\" state\n\t\t\t\t.bind(\"keyup\" + this.eventNamespace + \" blur\" + this.eventNamespace, function () {\n\t\t\t\t\t$(this).removeClass(\"ui-state-active\");\n\t\t\t\t});\n\n\t\t\t\tif (this.buttonElement.is(\"a\")) {\n\t\t\t\t\tthis.buttonElement.keyup(function (event) {\n\t\t\t\t\t\tif (event.keyCode === $.ui.keyCode.SPACE) {\n\t\t\t\t\t\t\t// TODO pass through original event correctly (just as 2nd argument doesn't work)\n\t\t\t\t\t\t\t$(this).click();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._setOption(\"disabled\", options.disabled);\n\t\t\tthis._resetButton();\n\t\t},\n\n\t\t_determineButtonType: function _determineButtonType() {\n\t\t\tvar ancestor, labelSelector, checked;\n\n\t\t\tif (this.element.is(\"[type=checkbox]\")) {\n\t\t\t\tthis.type = \"checkbox\";\n\t\t\t} else if (this.element.is(\"[type=radio]\")) {\n\t\t\t\tthis.type = \"radio\";\n\t\t\t} else if (this.element.is(\"input\")) {\n\t\t\t\tthis.type = \"input\";\n\t\t\t} else {\n\t\t\t\tthis.type = \"button\";\n\t\t\t}\n\n\t\t\tif (this.type === \"checkbox\" || this.type === \"radio\") {\n\t\t\t\t// we don't search against the document in case the element\n\t\t\t\t// is disconnected from the DOM\n\t\t\t\tancestor = this.element.parents().last();\n\t\t\t\tlabelSelector = \"label[for='\" + this.element.attr(\"id\") + \"']\";\n\t\t\t\tthis.buttonElement = ancestor.find(labelSelector);\n\t\t\t\tif (!this.buttonElement.length) {\n\t\t\t\t\tancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();\n\t\t\t\t\tthis.buttonElement = ancestor.filter(labelSelector);\n\t\t\t\t\tif (!this.buttonElement.length) {\n\t\t\t\t\t\tthis.buttonElement = ancestor.find(labelSelector);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.element.addClass(\"ui-helper-hidden-accessible\");\n\n\t\t\t\tchecked = this.element.is(\":checked\");\n\t\t\t\tif (checked) {\n\t\t\t\t\tthis.buttonElement.addClass(\"ui-state-active\");\n\t\t\t\t}\n\t\t\t\tthis.buttonElement.prop(\"aria-pressed\", checked);\n\t\t\t} else {\n\t\t\t\tthis.buttonElement = this.element;\n\t\t\t}\n\t\t},\n\n\t\twidget: function widget() {\n\t\t\treturn this.buttonElement;\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.element.removeClass(\"ui-helper-hidden-accessible\");\n\t\t\tthis.buttonElement.removeClass(baseClasses + \" ui-state-active \" + typeClasses).removeAttr(\"role\").removeAttr(\"aria-pressed\").html(this.buttonElement.find(\".ui-button-text\").html());\n\n\t\t\tif (!this.hasTitle) {\n\t\t\t\tthis.buttonElement.removeAttr(\"title\");\n\t\t\t}\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tthis._super(key, value);\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.widget().toggleClass(\"ui-state-disabled\", !!value);\n\t\t\t\tthis.element.prop(\"disabled\", !!value);\n\t\t\t\tif (value) {\n\t\t\t\t\tif (this.type === \"checkbox\" || this.type === \"radio\") {\n\t\t\t\t\t\tthis.buttonElement.removeClass(\"ui-state-focus\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.buttonElement.removeClass(\"ui-state-focus ui-state-active\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._resetButton();\n\t\t},\n\n\t\trefresh: function refresh() {\n\t\t\t//See #8237 & #8828\n\t\t\tvar isDisabled = this.element.is(\"input, button\") ? this.element.is(\":disabled\") : this.element.hasClass(\"ui-button-disabled\");\n\n\t\t\tif (isDisabled !== this.options.disabled) {\n\t\t\t\tthis._setOption(\"disabled\", isDisabled);\n\t\t\t}\n\t\t\tif (this.type === \"radio\") {\n\t\t\t\tradioGroup(this.element[0]).each(function () {\n\t\t\t\t\tif ($(this).is(\":checked\")) {\n\t\t\t\t\t\t$(this).button(\"widget\").addClass(\"ui-state-active\").attr(\"aria-pressed\", \"true\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$(this).button(\"widget\").removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.type === \"checkbox\") {\n\t\t\t\tif (this.element.is(\":checked\")) {\n\t\t\t\t\tthis.buttonElement.addClass(\"ui-state-active\").attr(\"aria-pressed\", \"true\");\n\t\t\t\t} else {\n\t\t\t\t\tthis.buttonElement.removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_resetButton: function _resetButton() {\n\t\t\tif (this.type === \"input\") {\n\t\t\t\tif (this.options.label) {\n\t\t\t\t\tthis.element.val(this.options.label);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar buttonElement = this.buttonElement.removeClass(typeClasses),\n\t\t\t    buttonText = $(\"<span></span>\", this.document[0]).addClass(\"ui-button-text\").html(this.options.label).appendTo(buttonElement.empty()).text(),\n\t\t\t    icons = this.options.icons,\n\t\t\t    multipleIcons = icons.primary && icons.secondary,\n\t\t\t    buttonClasses = [];\n\n\t\t\tif (icons.primary || icons.secondary) {\n\t\t\t\tif (this.options.text) {\n\t\t\t\t\tbuttonClasses.push(\"ui-button-text-icon\" + (multipleIcons ? \"s\" : icons.primary ? \"-primary\" : \"-secondary\"));\n\t\t\t\t}\n\n\t\t\t\tif (icons.primary) {\n\t\t\t\t\tbuttonElement.prepend(\"<span class='ui-button-icon-primary ui-icon \" + icons.primary + \"'></span>\");\n\t\t\t\t}\n\n\t\t\t\tif (icons.secondary) {\n\t\t\t\t\tbuttonElement.append(\"<span class='ui-button-icon-secondary ui-icon \" + icons.secondary + \"'></span>\");\n\t\t\t\t}\n\n\t\t\t\tif (!this.options.text) {\n\t\t\t\t\tbuttonClasses.push(multipleIcons ? \"ui-button-icons-only\" : \"ui-button-icon-only\");\n\n\t\t\t\t\tif (!this.hasTitle) {\n\t\t\t\t\t\tbuttonElement.attr(\"title\", $.trim(buttonText));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbuttonClasses.push(\"ui-button-text-only\");\n\t\t\t}\n\t\t\tbuttonElement.addClass(buttonClasses.join(\" \"));\n\t\t}\n\t});\n\n\t$.widget(\"ui.buttonset\", {\n\t\tversion: \"1.11.4\",\n\t\toptions: {\n\t\t\titems: \"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)\"\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\tthis.element.addClass(\"ui-buttonset\");\n\t\t},\n\n\t\t_init: function _init() {\n\t\t\tthis.refresh();\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.buttons.button(\"option\", key, value);\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\t\t},\n\n\t\trefresh: function refresh() {\n\t\t\tvar rtl = this.element.css(\"direction\") === \"rtl\",\n\t\t\t    allButtons = this.element.find(this.options.items),\n\t\t\t    existingButtons = allButtons.filter(\":ui-button\");\n\n\t\t\t// Initialize new buttons\n\t\t\tallButtons.not(\":ui-button\").button();\n\n\t\t\t// Refresh existing buttons\n\t\t\texistingButtons.button(\"refresh\");\n\n\t\t\tthis.buttons = allButtons.map(function () {\n\t\t\t\treturn $(this).button(\"widget\")[0];\n\t\t\t}).removeClass(\"ui-corner-all ui-corner-left ui-corner-right\").filter(\":first\").addClass(rtl ? \"ui-corner-right\" : \"ui-corner-left\").end().filter(\":last\").addClass(rtl ? \"ui-corner-left\" : \"ui-corner-right\").end().end();\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.element.removeClass(\"ui-buttonset\");\n\t\t\tthis.buttons.map(function () {\n\t\t\t\treturn $(this).button(\"widget\")[0];\n\t\t\t}).removeClass(\"ui-corner-left ui-corner-right\").end().button(\"destroy\");\n\t\t}\n\t});\n\n\tvar button = $.ui.button;\n\n\t/*!\n  * jQuery UI Datepicker 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/datepicker/\n  */\n\n\t$.extend($.ui, { datepicker: { version: \"1.11.4\" } });\n\n\tvar datepicker_instActive;\n\n\tfunction datepicker_getZindex(elem) {\n\t\tvar position, value;\n\t\twhile (elem.length && elem[0] !== document) {\n\t\t\t// Ignore z-index if position is set to a value where z-index is ignored by the browser\n\t\t\t// This makes behavior of this function consistent across browsers\n\t\t\t// WebKit always returns auto if the element is positioned\n\t\t\tposition = elem.css(\"position\");\n\t\t\tif (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n\t\t\t\t// IE returns 0 when zIndex is not specified\n\t\t\t\t// other browsers return a string\n\t\t\t\t// we ignore the case of nested elements with an explicit value of 0\n\t\t\t\t// <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n\t\t\t\tvalue = parseInt(elem.css(\"zIndex\"), 10);\n\t\t\t\tif (!isNaN(value) && value !== 0) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t\telem = elem.parent();\n\t\t}\n\n\t\treturn 0;\n\t}\n\t/* Date picker manager.\n    Use the singleton instance of this class, $.datepicker, to interact with the date picker.\n    Settings for (groups of) date pickers are maintained in an instance object,\n    allowing multiple different settings on the same page. */\n\n\tfunction Datepicker() {\n\t\tthis._curInst = null; // The current instance in use\n\t\tthis._keyEvent = false; // If the last event was a key event\n\t\tthis._disabledInputs = []; // List of date picker inputs that have been disabled\n\t\tthis._datepickerShowing = false; // True if the popup picker is showing , false if not\n\t\tthis._inDialog = false; // True if showing within a \"dialog\", false if not\n\t\tthis._mainDivId = \"ui-datepicker-div\"; // The ID of the main datepicker division\n\t\tthis._inlineClass = \"ui-datepicker-inline\"; // The name of the inline marker class\n\t\tthis._appendClass = \"ui-datepicker-append\"; // The name of the append marker class\n\t\tthis._triggerClass = \"ui-datepicker-trigger\"; // The name of the trigger marker class\n\t\tthis._dialogClass = \"ui-datepicker-dialog\"; // The name of the dialog marker class\n\t\tthis._disableClass = \"ui-datepicker-disabled\"; // The name of the disabled covering marker class\n\t\tthis._unselectableClass = \"ui-datepicker-unselectable\"; // The name of the unselectable cell marker class\n\t\tthis._currentClass = \"ui-datepicker-current-day\"; // The name of the current day marker class\n\t\tthis._dayOverClass = \"ui-datepicker-days-cell-over\"; // The name of the day hover marker class\n\t\tthis.regional = []; // Available regional settings, indexed by language code\n\t\tthis.regional[\"\"] = { // Default regional settings\n\t\t\tcloseText: \"Done\", // Display text for close link\n\t\t\tprevText: \"Prev\", // Display text for previous month link\n\t\t\tnextText: \"Next\", // Display text for next month link\n\t\t\tcurrentText: \"Today\", // Display text for current month link\n\t\t\tmonthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"], // Names of months for drop-down and formatting\n\t\t\tmonthNamesShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], // For formatting\n\t\t\tdayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], // For formatting\n\t\t\tdayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], // For formatting\n\t\t\tdayNamesMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"], // Column headings for days starting at Sunday\n\t\t\tweekHeader: \"Wk\", // Column header for week of the year\n\t\t\tdateFormat: \"mm/dd/yy\", // See format options on parseDate\n\t\t\tfirstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...\n\t\t\tisRTL: false, // True if right-to-left language, false if left-to-right\n\t\t\tshowMonthAfterYear: false, // True if the year select precedes month, false for month then year\n\t\t\tyearSuffix: \"\" // Additional text to append to the year in the month headers\n\t\t};\n\t\tthis._defaults = { // Global defaults for all the date picker instances\n\t\t\tshowOn: \"focus\", // \"focus\" for popup on focus,\n\t\t\t// \"button\" for trigger button, or \"both\" for either\n\t\t\tshowAnim: \"fadeIn\", // Name of jQuery animation for popup\n\t\t\tshowOptions: {}, // Options for enhanced animations\n\t\t\tdefaultDate: null, // Used when field is blank: actual date,\n\t\t\t// +/-number for offset from today, null for today\n\t\t\tappendText: \"\", // Display text following the input box, e.g. showing the format\n\t\t\tbuttonText: \"...\", // Text for trigger button\n\t\t\tbuttonImage: \"\", // URL for trigger button image\n\t\t\tbuttonImageOnly: false, // True if the image appears alone, false if it appears on a button\n\t\t\thideIfNoPrevNext: false, // True to hide next/previous month links\n\t\t\t// if not applicable, false to just disable them\n\t\t\tnavigationAsDateFormat: false, // True if date formatting applied to prev/today/next links\n\t\t\tgotoCurrent: false, // True if today link goes back to current selection instead\n\t\t\tchangeMonth: false, // True if month can be selected directly, false if only prev/next\n\t\t\tchangeYear: false, // True if year can be selected directly, false if only prev/next\n\t\t\tyearRange: \"c-10:c+10\", // Range of years to display in drop-down,\n\t\t\t// either relative to today's year (-nn:+nn), relative to currently displayed year\n\t\t\t// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\n\t\t\tshowOtherMonths: false, // True to show dates in other months, false to leave blank\n\t\t\tselectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable\n\t\t\tshowWeek: false, // True to show week of the year, false to not show it\n\t\t\tcalculateWeek: this.iso8601Week, // How to calculate the week of the year,\n\t\t\t// takes a Date and returns the number of the week for it\n\t\t\tshortYearCutoff: \"+10\", // Short year values < this are in the current century,\n\t\t\t// > this are in the previous century,\n\t\t\t// string value starting with \"+\" for current year + value\n\t\t\tminDate: null, // The earliest selectable date, or null for no limit\n\t\t\tmaxDate: null, // The latest selectable date, or null for no limit\n\t\t\tduration: \"fast\", // Duration of display/closure\n\t\t\tbeforeShowDay: null, // Function that takes a date and returns an array with\n\t\t\t// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n\t\t\t// [2] = cell title (optional), e.g. $.datepicker.noWeekends\n\t\t\tbeforeShow: null, // Function that takes an input field and\n\t\t\t// returns a set of custom settings for the date picker\n\t\t\tonSelect: null, // Define a callback function when a date is selected\n\t\t\tonChangeMonthYear: null, // Define a callback function when the month or year is changed\n\t\t\tonClose: null, // Define a callback function when the datepicker is closed\n\t\t\tnumberOfMonths: 1, // Number of months to show at a time\n\t\t\tshowCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)\n\t\t\tstepMonths: 1, // Number of months to step back/forward\n\t\t\tstepBigMonths: 12, // Number of months to step back/forward for the big links\n\t\t\taltField: \"\", // Selector for an alternate field to store selected dates into\n\t\t\taltFormat: \"\", // The date format to use for the alternate field\n\t\t\tconstrainInput: true, // The input is constrained by the current date format\n\t\t\tshowButtonPanel: false, // True to show button panel, false to not show it\n\t\t\tautoSize: false, // True to size the input for the date format, false to leave as is\n\t\t\tdisabled: false // The initial disabled state\n\t\t};\n\t\t$.extend(this._defaults, this.regional[\"\"]);\n\t\tthis.regional.en = $.extend(true, {}, this.regional[\"\"]);\n\t\tthis.regional[\"en-US\"] = $.extend(true, {}, this.regional.en);\n\t\tthis.dpDiv = datepicker_bindHover($(\"<div id='\" + this._mainDivId + \"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"));\n\t}\n\n\t$.extend(Datepicker.prototype, {\n\t\t/* Class name added to elements to indicate already configured with a date picker. */\n\t\tmarkerClassName: \"hasDatepicker\",\n\n\t\t//Keep track of the maximum number of rows displayed (see #7043)\n\t\tmaxRows: 4,\n\n\t\t// TODO rename to \"widget\" when switching to widget factory\n\t\t_widgetDatepicker: function _widgetDatepicker() {\n\t\t\treturn this.dpDiv;\n\t\t},\n\n\t\t/* Override the default settings for all instances of the date picker.\n   * @param  settings  object - the new settings to use as defaults (anonymous object)\n   * @return the manager object\n   */\n\t\tsetDefaults: function setDefaults(settings) {\n\t\t\tdatepicker_extendRemove(this._defaults, settings || {});\n\t\t\treturn this;\n\t\t},\n\n\t\t/* Attach the date picker to a jQuery selection.\n   * @param  target\telement - the target input field or division or span\n   * @param  settings  object - the new settings to use for this date picker instance (anonymous)\n   */\n\t\t_attachDatepicker: function _attachDatepicker(target, settings) {\n\t\t\tvar nodeName, inline, inst;\n\t\t\tnodeName = target.nodeName.toLowerCase();\n\t\t\tinline = nodeName === \"div\" || nodeName === \"span\";\n\t\t\tif (!target.id) {\n\t\t\t\tthis.uuid += 1;\n\t\t\t\ttarget.id = \"dp\" + this.uuid;\n\t\t\t}\n\t\t\tinst = this._newInst($(target), inline);\n\t\t\tinst.settings = $.extend({}, settings || {});\n\t\t\tif (nodeName === \"input\") {\n\t\t\t\tthis._connectDatepicker(target, inst);\n\t\t\t} else if (inline) {\n\t\t\t\tthis._inlineDatepicker(target, inst);\n\t\t\t}\n\t\t},\n\n\t\t/* Create a new instance object. */\n\t\t_newInst: function _newInst(target, inline) {\n\t\t\tvar id = target[0].id.replace(/([^A-Za-z0-9_\\-])/g, \"\\\\\\\\$1\"); // escape jQuery meta chars\n\t\t\treturn { id: id, input: target, // associated target\n\t\t\t\tselectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection\n\t\t\t\tdrawMonth: 0, drawYear: 0, // month being drawn\n\t\t\t\tinline: inline, // is datepicker inline or not\n\t\t\t\tdpDiv: !inline ? this.dpDiv : // presentation div\n\t\t\t\tdatepicker_bindHover($(\"<div class='\" + this._inlineClass + \" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\")) };\n\t\t},\n\n\t\t/* Attach the date picker to an input field. */\n\t\t_connectDatepicker: function _connectDatepicker(target, inst) {\n\t\t\tvar input = $(target);\n\t\t\tinst.append = $([]);\n\t\t\tinst.trigger = $([]);\n\t\t\tif (input.hasClass(this.markerClassName)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._attachments(input, inst);\n\t\t\tinput.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);\n\t\t\tthis._autoSize(inst);\n\t\t\t$.data(target, \"datepicker\", inst);\n\t\t\t//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\n\t\t\tif (inst.settings.disabled) {\n\t\t\t\tthis._disableDatepicker(target);\n\t\t\t}\n\t\t},\n\n\t\t/* Make attachments based on settings. */\n\t\t_attachments: function _attachments(input, inst) {\n\t\t\tvar showOn,\n\t\t\t    buttonText,\n\t\t\t    buttonImage,\n\t\t\t    appendText = this._get(inst, \"appendText\"),\n\t\t\t    isRTL = this._get(inst, \"isRTL\");\n\n\t\t\tif (inst.append) {\n\t\t\t\tinst.append.remove();\n\t\t\t}\n\t\t\tif (appendText) {\n\t\t\t\tinst.append = $(\"<span class='\" + this._appendClass + \"'>\" + appendText + \"</span>\");\n\t\t\t\tinput[isRTL ? \"before\" : \"after\"](inst.append);\n\t\t\t}\n\n\t\t\tinput.unbind(\"focus\", this._showDatepicker);\n\n\t\t\tif (inst.trigger) {\n\t\t\t\tinst.trigger.remove();\n\t\t\t}\n\n\t\t\tshowOn = this._get(inst, \"showOn\");\n\t\t\tif (showOn === \"focus\" || showOn === \"both\") {\n\t\t\t\t// pop-up date picker when in the marked field\n\t\t\t\tinput.focus(this._showDatepicker);\n\t\t\t}\n\t\t\tif (showOn === \"button\" || showOn === \"both\") {\n\t\t\t\t// pop-up date picker when button clicked\n\t\t\t\tbuttonText = this._get(inst, \"buttonText\");\n\t\t\t\tbuttonImage = this._get(inst, \"buttonImage\");\n\t\t\t\tinst.trigger = $(this._get(inst, \"buttonImageOnly\") ? $(\"<img/>\").addClass(this._triggerClass).attr({ src: buttonImage, alt: buttonText, title: buttonText }) : $(\"<button type='button'></button>\").addClass(this._triggerClass).html(!buttonImage ? buttonText : $(\"<img/>\").attr({ src: buttonImage, alt: buttonText, title: buttonText })));\n\t\t\t\tinput[isRTL ? \"before\" : \"after\"](inst.trigger);\n\t\t\t\tinst.trigger.click(function () {\n\t\t\t\t\tif ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {\n\t\t\t\t\t\t$.datepicker._hideDatepicker();\n\t\t\t\t\t} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {\n\t\t\t\t\t\t$.datepicker._hideDatepicker();\n\t\t\t\t\t\t$.datepicker._showDatepicker(input[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$.datepicker._showDatepicker(input[0]);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/* Apply the maximum length for the date format. */\n\t\t_autoSize: function _autoSize(inst) {\n\t\t\tif (this._get(inst, \"autoSize\") && !inst.inline) {\n\t\t\t\tvar findMax,\n\t\t\t\t    max,\n\t\t\t\t    maxI,\n\t\t\t\t    i,\n\t\t\t\t    date = new Date(2009, 12 - 1, 20),\n\t\t\t\t    // Ensure double digits\n\t\t\t\tdateFormat = this._get(inst, \"dateFormat\");\n\n\t\t\t\tif (dateFormat.match(/[DM]/)) {\n\t\t\t\t\tfindMax = function findMax(names) {\n\t\t\t\t\t\tmax = 0;\n\t\t\t\t\t\tmaxI = 0;\n\t\t\t\t\t\tfor (i = 0; i < names.length; i++) {\n\t\t\t\t\t\t\tif (names[i].length > max) {\n\t\t\t\t\t\t\t\tmax = names[i].length;\n\t\t\t\t\t\t\t\tmaxI = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn maxI;\n\t\t\t\t\t};\n\t\t\t\t\tdate.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? \"monthNames\" : \"monthNamesShort\")));\n\t\t\t\t\tdate.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? \"dayNames\" : \"dayNamesShort\")) + 20 - date.getDay());\n\t\t\t\t}\n\t\t\t\tinst.input.attr(\"size\", this._formatDate(inst, date).length);\n\t\t\t}\n\t\t},\n\n\t\t/* Attach an inline date picker to a div. */\n\t\t_inlineDatepicker: function _inlineDatepicker(target, inst) {\n\t\t\tvar divSpan = $(target);\n\t\t\tif (divSpan.hasClass(this.markerClassName)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdivSpan.addClass(this.markerClassName).append(inst.dpDiv);\n\t\t\t$.data(target, \"datepicker\", inst);\n\t\t\tthis._setDate(inst, this._getDefaultDate(inst), true);\n\t\t\tthis._updateDatepicker(inst);\n\t\t\tthis._updateAlternate(inst);\n\t\t\t//If disabled option is true, disable the datepicker before showing it (see ticket #5665)\n\t\t\tif (inst.settings.disabled) {\n\t\t\t\tthis._disableDatepicker(target);\n\t\t\t}\n\t\t\t// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n\t\t\t// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\n\t\t\tinst.dpDiv.css(\"display\", \"block\");\n\t\t},\n\n\t\t/* Pop-up the date picker in a \"dialog\" box.\n   * @param  input element - ignored\n   * @param  date\tstring or Date - the initial date to display\n   * @param  onSelect  function - the function to call when a date is selected\n   * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\n   * @param  pos int[2] - coordinates for the dialog's position within the screen or\n   *\t\t\t\t\tevent - with x/y coordinates or\n   *\t\t\t\t\tleave empty for default (screen centre)\n   * @return the manager object\n   */\n\t\t_dialogDatepicker: function _dialogDatepicker(input, date, onSelect, settings, pos) {\n\t\t\tvar id,\n\t\t\t    browserWidth,\n\t\t\t    browserHeight,\n\t\t\t    scrollX,\n\t\t\t    scrollY,\n\t\t\t    inst = this._dialogInst; // internal instance\n\n\t\t\tif (!inst) {\n\t\t\t\tthis.uuid += 1;\n\t\t\t\tid = \"dp\" + this.uuid;\n\t\t\t\tthis._dialogInput = $(\"<input type='text' id='\" + id + \"' style='position: absolute; top: -100px; width: 0px;'/>\");\n\t\t\t\tthis._dialogInput.keydown(this._doKeyDown);\n\t\t\t\t$(\"body\").append(this._dialogInput);\n\t\t\t\tinst = this._dialogInst = this._newInst(this._dialogInput, false);\n\t\t\t\tinst.settings = {};\n\t\t\t\t$.data(this._dialogInput[0], \"datepicker\", inst);\n\t\t\t}\n\t\t\tdatepicker_extendRemove(inst.settings, settings || {});\n\t\t\tdate = date && date.constructor === Date ? this._formatDate(inst, date) : date;\n\t\t\tthis._dialogInput.val(date);\n\n\t\t\tthis._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;\n\t\t\tif (!this._pos) {\n\t\t\t\tbrowserWidth = document.documentElement.clientWidth;\n\t\t\t\tbrowserHeight = document.documentElement.clientHeight;\n\t\t\t\tscrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\t\t\t\tscrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\t\t\t\tthis._pos = // should use actual width/height below\n\t\t\t\t[browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY];\n\t\t\t}\n\n\t\t\t// move input on screen for focus, but hidden behind dialog\n\t\t\tthis._dialogInput.css(\"left\", this._pos[0] + 20 + \"px\").css(\"top\", this._pos[1] + \"px\");\n\t\t\tinst.settings.onSelect = onSelect;\n\t\t\tthis._inDialog = true;\n\t\t\tthis.dpDiv.addClass(this._dialogClass);\n\t\t\tthis._showDatepicker(this._dialogInput[0]);\n\t\t\tif ($.blockUI) {\n\t\t\t\t$.blockUI(this.dpDiv);\n\t\t\t}\n\t\t\t$.data(this._dialogInput[0], \"datepicker\", inst);\n\t\t\treturn this;\n\t\t},\n\n\t\t/* Detach a datepicker from its control.\n   * @param  target\telement - the target input field or division or span\n   */\n\t\t_destroyDatepicker: function _destroyDatepicker(target) {\n\t\t\tvar nodeName,\n\t\t\t    $target = $(target),\n\t\t\t    inst = $.data(target, \"datepicker\");\n\n\t\t\tif (!$target.hasClass(this.markerClassName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnodeName = target.nodeName.toLowerCase();\n\t\t\t$.removeData(target, \"datepicker\");\n\t\t\tif (nodeName === \"input\") {\n\t\t\t\tinst.append.remove();\n\t\t\t\tinst.trigger.remove();\n\t\t\t\t$target.removeClass(this.markerClassName).unbind(\"focus\", this._showDatepicker).unbind(\"keydown\", this._doKeyDown).unbind(\"keypress\", this._doKeyPress).unbind(\"keyup\", this._doKeyUp);\n\t\t\t} else if (nodeName === \"div\" || nodeName === \"span\") {\n\t\t\t\t$target.removeClass(this.markerClassName).empty();\n\t\t\t}\n\n\t\t\tif (datepicker_instActive === inst) {\n\t\t\t\tdatepicker_instActive = null;\n\t\t\t}\n\t\t},\n\n\t\t/* Enable the date picker to a jQuery selection.\n   * @param  target\telement - the target input field or division or span\n   */\n\t\t_enableDatepicker: function _enableDatepicker(target) {\n\t\t\tvar nodeName,\n\t\t\t    inline,\n\t\t\t    $target = $(target),\n\t\t\t    inst = $.data(target, \"datepicker\");\n\n\t\t\tif (!$target.hasClass(this.markerClassName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnodeName = target.nodeName.toLowerCase();\n\t\t\tif (nodeName === \"input\") {\n\t\t\t\ttarget.disabled = false;\n\t\t\t\tinst.trigger.filter(\"button\").each(function () {\n\t\t\t\t\tthis.disabled = false;\n\t\t\t\t}).end().filter(\"img\").css({ opacity: \"1.0\", cursor: \"\" });\n\t\t\t} else if (nodeName === \"div\" || nodeName === \"span\") {\n\t\t\t\tinline = $target.children(\".\" + this._inlineClass);\n\t\t\t\tinline.children().removeClass(\"ui-state-disabled\");\n\t\t\t\tinline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", false);\n\t\t\t}\n\t\t\tthis._disabledInputs = $.map(this._disabledInputs, function (value) {\n\t\t\t\treturn value === target ? null : value;\n\t\t\t}); // delete entry\n\t\t},\n\n\t\t/* Disable the date picker to a jQuery selection.\n   * @param  target\telement - the target input field or division or span\n   */\n\t\t_disableDatepicker: function _disableDatepicker(target) {\n\t\t\tvar nodeName,\n\t\t\t    inline,\n\t\t\t    $target = $(target),\n\t\t\t    inst = $.data(target, \"datepicker\");\n\n\t\t\tif (!$target.hasClass(this.markerClassName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnodeName = target.nodeName.toLowerCase();\n\t\t\tif (nodeName === \"input\") {\n\t\t\t\ttarget.disabled = true;\n\t\t\t\tinst.trigger.filter(\"button\").each(function () {\n\t\t\t\t\tthis.disabled = true;\n\t\t\t\t}).end().filter(\"img\").css({ opacity: \"0.5\", cursor: \"default\" });\n\t\t\t} else if (nodeName === \"div\" || nodeName === \"span\") {\n\t\t\t\tinline = $target.children(\".\" + this._inlineClass);\n\t\t\t\tinline.children().addClass(\"ui-state-disabled\");\n\t\t\t\tinline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", true);\n\t\t\t}\n\t\t\tthis._disabledInputs = $.map(this._disabledInputs, function (value) {\n\t\t\t\treturn value === target ? null : value;\n\t\t\t}); // delete entry\n\t\t\tthis._disabledInputs[this._disabledInputs.length] = target;\n\t\t},\n\n\t\t/* Is the first field in a jQuery collection disabled as a datepicker?\n   * @param  target\telement - the target input field or division or span\n   * @return boolean - true if disabled, false if enabled\n   */\n\t\t_isDisabledDatepicker: function _isDisabledDatepicker(target) {\n\t\t\tif (!target) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (var i = 0; i < this._disabledInputs.length; i++) {\n\t\t\t\tif (this._disabledInputs[i] === target) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\t/* Retrieve the instance data for the target control.\n   * @param  target  element - the target input field or division or span\n   * @return  object - the associated instance data\n   * @throws  error if a jQuery problem getting data\n   */\n\t\t_getInst: function _getInst(target) {\n\t\t\ttry {\n\t\t\t\treturn $.data(target, \"datepicker\");\n\t\t\t} catch (err) {\n\t\t\t\tthrow \"Missing instance data for this datepicker\";\n\t\t\t}\n\t\t},\n\n\t\t/* Update or retrieve the settings for a date picker attached to an input field or division.\n   * @param  target  element - the target input field or division or span\n   * @param  name\tobject - the new settings to update or\n   *\t\t\t\tstring - the name of the setting to change or retrieve,\n   *\t\t\t\twhen retrieving also \"all\" for all instance settings or\n   *\t\t\t\t\"defaults\" for all global defaults\n   * @param  value   any - the new value for the setting\n   *\t\t\t\t(omit if above is an object or to retrieve a value)\n   */\n\t\t_optionDatepicker: function _optionDatepicker(target, name, value) {\n\t\t\tvar settings,\n\t\t\t    date,\n\t\t\t    minDate,\n\t\t\t    maxDate,\n\t\t\t    inst = this._getInst(target);\n\n\t\t\tif (arguments.length === 2 && typeof name === \"string\") {\n\t\t\t\treturn name === \"defaults\" ? $.extend({}, $.datepicker._defaults) : inst ? name === \"all\" ? $.extend({}, inst.settings) : this._get(inst, name) : null;\n\t\t\t}\n\n\t\t\tsettings = name || {};\n\t\t\tif (typeof name === \"string\") {\n\t\t\t\tsettings = {};\n\t\t\t\tsettings[name] = value;\n\t\t\t}\n\n\t\t\tif (inst) {\n\t\t\t\tif (this._curInst === inst) {\n\t\t\t\t\tthis._hideDatepicker();\n\t\t\t\t}\n\n\t\t\t\tdate = this._getDateDatepicker(target, true);\n\t\t\t\tminDate = this._getMinMaxDate(inst, \"min\");\n\t\t\t\tmaxDate = this._getMinMaxDate(inst, \"max\");\n\t\t\t\tdatepicker_extendRemove(inst.settings, settings);\n\t\t\t\t// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\n\t\t\t\tif (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {\n\t\t\t\t\tinst.settings.minDate = this._formatDate(inst, minDate);\n\t\t\t\t}\n\t\t\t\tif (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {\n\t\t\t\t\tinst.settings.maxDate = this._formatDate(inst, maxDate);\n\t\t\t\t}\n\t\t\t\tif (\"disabled\" in settings) {\n\t\t\t\t\tif (settings.disabled) {\n\t\t\t\t\t\tthis._disableDatepicker(target);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._enableDatepicker(target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._attachments($(target), inst);\n\t\t\t\tthis._autoSize(inst);\n\t\t\t\tthis._setDate(inst, date);\n\t\t\t\tthis._updateAlternate(inst);\n\t\t\t\tthis._updateDatepicker(inst);\n\t\t\t}\n\t\t},\n\n\t\t// change method deprecated\n\t\t_changeDatepicker: function _changeDatepicker(target, name, value) {\n\t\t\tthis._optionDatepicker(target, name, value);\n\t\t},\n\n\t\t/* Redraw the date picker attached to an input field or division.\n   * @param  target  element - the target input field or division or span\n   */\n\t\t_refreshDatepicker: function _refreshDatepicker(target) {\n\t\t\tvar inst = this._getInst(target);\n\t\t\tif (inst) {\n\t\t\t\tthis._updateDatepicker(inst);\n\t\t\t}\n\t\t},\n\n\t\t/* Set the dates for a jQuery selection.\n   * @param  target element - the target input field or division or span\n   * @param  date\tDate - the new date\n   */\n\t\t_setDateDatepicker: function _setDateDatepicker(target, date) {\n\t\t\tvar inst = this._getInst(target);\n\t\t\tif (inst) {\n\t\t\t\tthis._setDate(inst, date);\n\t\t\t\tthis._updateDatepicker(inst);\n\t\t\t\tthis._updateAlternate(inst);\n\t\t\t}\n\t\t},\n\n\t\t/* Get the date(s) for the first entry in a jQuery selection.\n   * @param  target element - the target input field or division or span\n   * @param  noDefault boolean - true if no default date is to be used\n   * @return Date - the current date\n   */\n\t\t_getDateDatepicker: function _getDateDatepicker(target, noDefault) {\n\t\t\tvar inst = this._getInst(target);\n\t\t\tif (inst && !inst.inline) {\n\t\t\t\tthis._setDateFromField(inst, noDefault);\n\t\t\t}\n\t\t\treturn inst ? this._getDate(inst) : null;\n\t\t},\n\n\t\t/* Handle keystrokes. */\n\t\t_doKeyDown: function _doKeyDown(event) {\n\t\t\tvar onSelect,\n\t\t\t    dateStr,\n\t\t\t    sel,\n\t\t\t    inst = $.datepicker._getInst(event.target),\n\t\t\t    handled = true,\n\t\t\t    isRTL = inst.dpDiv.is(\".ui-datepicker-rtl\");\n\n\t\t\tinst._keyEvent = true;\n\t\t\tif ($.datepicker._datepickerShowing) {\n\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\t$.datepicker._hideDatepicker();\n\t\t\t\t\t\thandled = false;\n\t\t\t\t\t\tbreak; // hide on tab out\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\tsel = $(\"td.\" + $.datepicker._dayOverClass + \":not(.\" + $.datepicker._currentClass + \")\", inst.dpDiv);\n\t\t\t\t\t\tif (sel[0]) {\n\t\t\t\t\t\t\t$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tonSelect = $.datepicker._get(inst, \"onSelect\");\n\t\t\t\t\t\tif (onSelect) {\n\t\t\t\t\t\t\tdateStr = $.datepicker._formatDate(inst);\n\n\t\t\t\t\t\t\t// trigger custom callback\n\t\t\t\t\t\t\tonSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$.datepicker._hideDatepicker();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false; // don't submit the form\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t$.datepicker._hideDatepicker();\n\t\t\t\t\t\tbreak; // hide on escape\n\t\t\t\t\tcase 33:\n\t\t\t\t\t\t$.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\t\t\t\t\t\tbreak; // previous month/year on page up/+ ctrl\n\t\t\t\t\tcase 34:\n\t\t\t\t\t\t$.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\t\t\t\t\t\tbreak; // next month/year on page down/+ ctrl\n\t\t\t\t\tcase 35:\n\t\t\t\t\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t\t\t\t\t$.datepicker._clearDate(event.target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\thandled = event.ctrlKey || event.metaKey;\n\t\t\t\t\t\tbreak; // clear on ctrl or command +end\n\t\t\t\t\tcase 36:\n\t\t\t\t\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t\t\t\t\t$.datepicker._gotoToday(event.target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\thandled = event.ctrlKey || event.metaKey;\n\t\t\t\t\t\tbreak; // current on ctrl or command +home\n\t\t\t\t\tcase 37:\n\t\t\t\t\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t\t\t\t\t$.datepicker._adjustDate(event.target, isRTL ? +1 : -1, \"D\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\thandled = event.ctrlKey || event.metaKey;\n\t\t\t\t\t\t// -1 day on ctrl or command +left\n\t\t\t\t\t\tif (event.originalEvent.altKey) {\n\t\t\t\t\t\t\t$.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// next month/year on alt +left on Mac\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t\t\t\t\t$.datepicker._adjustDate(event.target, -7, \"D\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\thandled = event.ctrlKey || event.metaKey;\n\t\t\t\t\t\tbreak; // -1 week on ctrl or command +up\n\t\t\t\t\tcase 39:\n\t\t\t\t\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t\t\t\t\t$.datepicker._adjustDate(event.target, isRTL ? -1 : +1, \"D\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\thandled = event.ctrlKey || event.metaKey;\n\t\t\t\t\t\t// +1 day on ctrl or command +right\n\t\t\t\t\t\tif (event.originalEvent.altKey) {\n\t\t\t\t\t\t\t$.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// next month/year on alt +right\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 40:\n\t\t\t\t\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t\t\t\t\t$.datepicker._adjustDate(event.target, +7, \"D\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\thandled = event.ctrlKey || event.metaKey;\n\t\t\t\t\t\tbreak; // +1 week on ctrl or command +down\n\t\t\t\t\tdefault:\n\t\t\t\t\t\thandled = false;\n\t\t\t\t}\n\t\t\t} else if (event.keyCode === 36 && event.ctrlKey) {\n\t\t\t\t// display the date picker on ctrl+home\n\t\t\t\t$.datepicker._showDatepicker(this);\n\t\t\t} else {\n\t\t\t\thandled = false;\n\t\t\t}\n\n\t\t\tif (handled) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t}\n\t\t},\n\n\t\t/* Filter entered characters - based on date format. */\n\t\t_doKeyPress: function _doKeyPress(event) {\n\t\t\tvar chars,\n\t\t\t    chr,\n\t\t\t    inst = $.datepicker._getInst(event.target);\n\n\t\t\tif ($.datepicker._get(inst, \"constrainInput\")) {\n\t\t\t\tchars = $.datepicker._possibleChars($.datepicker._get(inst, \"dateFormat\"));\n\t\t\t\tchr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);\n\t\t\t\treturn event.ctrlKey || event.metaKey || chr < \" \" || !chars || chars.indexOf(chr) > -1;\n\t\t\t}\n\t\t},\n\n\t\t/* Synchronise manual entry and field/alternate field. */\n\t\t_doKeyUp: function _doKeyUp(event) {\n\t\t\tvar date,\n\t\t\t    inst = $.datepicker._getInst(event.target);\n\n\t\t\tif (inst.input.val() !== inst.lastVal) {\n\t\t\t\ttry {\n\t\t\t\t\tdate = $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));\n\n\t\t\t\t\tif (date) {\n\t\t\t\t\t\t// only if valid\n\t\t\t\t\t\t$.datepicker._setDateFromField(inst);\n\t\t\t\t\t\t$.datepicker._updateAlternate(inst);\n\t\t\t\t\t\t$.datepicker._updateDatepicker(inst);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t/* Pop-up the date picker for a given input field.\n   * If false returned from beforeShow event handler do not show.\n   * @param  input  element - the input field attached to the date picker or\n   *\t\t\t\t\tevent - if triggered by focus\n   */\n\t\t_showDatepicker: function _showDatepicker(input) {\n\t\t\tinput = input.target || input;\n\t\t\tif (input.nodeName.toLowerCase() !== \"input\") {\n\t\t\t\t// find from button/image trigger\n\t\t\t\tinput = $(\"input\", input.parentNode)[0];\n\t\t\t}\n\n\t\t\tif ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {\n\t\t\t\t// already here\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;\n\n\t\t\tinst = $.datepicker._getInst(input);\n\t\t\tif ($.datepicker._curInst && $.datepicker._curInst !== inst) {\n\t\t\t\t$.datepicker._curInst.dpDiv.stop(true, true);\n\t\t\t\tif (inst && $.datepicker._datepickerShowing) {\n\t\t\t\t\t$.datepicker._hideDatepicker($.datepicker._curInst.input[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbeforeShow = $.datepicker._get(inst, \"beforeShow\");\n\t\t\tbeforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};\n\t\t\tif (beforeShowSettings === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdatepicker_extendRemove(inst.settings, beforeShowSettings);\n\n\t\t\tinst.lastVal = null;\n\t\t\t$.datepicker._lastInput = input;\n\t\t\t$.datepicker._setDateFromField(inst);\n\n\t\t\tif ($.datepicker._inDialog) {\n\t\t\t\t// hide cursor\n\t\t\t\tinput.value = \"\";\n\t\t\t}\n\t\t\tif (!$.datepicker._pos) {\n\t\t\t\t// position below input\n\t\t\t\t$.datepicker._pos = $.datepicker._findPos(input);\n\t\t\t\t$.datepicker._pos[1] += input.offsetHeight; // add the height\n\t\t\t}\n\n\t\t\tisFixed = false;\n\t\t\t$(input).parents().each(function () {\n\t\t\t\tisFixed |= $(this).css(\"position\") === \"fixed\";\n\t\t\t\treturn !isFixed;\n\t\t\t});\n\n\t\t\toffset = { left: $.datepicker._pos[0], top: $.datepicker._pos[1] };\n\t\t\t$.datepicker._pos = null;\n\t\t\t//to avoid flashes on Firefox\n\t\t\tinst.dpDiv.empty();\n\t\t\t// determine sizing offscreen\n\t\t\tinst.dpDiv.css({ position: \"absolute\", display: \"block\", top: \"-1000px\" });\n\t\t\t$.datepicker._updateDatepicker(inst);\n\t\t\t// fix width for dynamic number of date pickers\n\t\t\t// and adjust position before showing\n\t\t\toffset = $.datepicker._checkOffset(inst, offset, isFixed);\n\t\t\tinst.dpDiv.css({ position: $.datepicker._inDialog && $.blockUI ? \"static\" : isFixed ? \"fixed\" : \"absolute\", display: \"none\",\n\t\t\t\tleft: offset.left + \"px\", top: offset.top + \"px\" });\n\n\t\t\tif (!inst.inline) {\n\t\t\t\tshowAnim = $.datepicker._get(inst, \"showAnim\");\n\t\t\t\tduration = $.datepicker._get(inst, \"duration\");\n\t\t\t\tinst.dpDiv.css(\"z-index\", datepicker_getZindex($(input)) + 1);\n\t\t\t\t$.datepicker._datepickerShowing = true;\n\n\t\t\t\tif ($.effects && $.effects.effect[showAnim]) {\n\t\t\t\t\tinst.dpDiv.show(showAnim, $.datepicker._get(inst, \"showOptions\"), duration);\n\t\t\t\t} else {\n\t\t\t\t\tinst.dpDiv[showAnim || \"show\"](showAnim ? duration : null);\n\t\t\t\t}\n\n\t\t\t\tif ($.datepicker._shouldFocusInput(inst)) {\n\t\t\t\t\tinst.input.focus();\n\t\t\t\t}\n\n\t\t\t\t$.datepicker._curInst = inst;\n\t\t\t}\n\t\t},\n\n\t\t/* Generate the date picker content. */\n\t\t_updateDatepicker: function _updateDatepicker(inst) {\n\t\t\tthis.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\n\t\t\tdatepicker_instActive = inst; // for delegate hover events\n\t\t\tinst.dpDiv.empty().append(this._generateHTML(inst));\n\t\t\tthis._attachHandlers(inst);\n\n\t\t\tvar origyearshtml,\n\t\t\t    numMonths = this._getNumberOfMonths(inst),\n\t\t\t    cols = numMonths[1],\n\t\t\t    width = 17,\n\t\t\t    activeCell = inst.dpDiv.find(\".\" + this._dayOverClass + \" a\");\n\n\t\t\tif (activeCell.length > 0) {\n\t\t\t\tdatepicker_handleMouseover.apply(activeCell.get(0));\n\t\t\t}\n\n\t\t\tinst.dpDiv.removeClass(\"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\").width(\"\");\n\t\t\tif (cols > 1) {\n\t\t\t\tinst.dpDiv.addClass(\"ui-datepicker-multi-\" + cols).css(\"width\", width * cols + \"em\");\n\t\t\t}\n\t\t\tinst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-multi\");\n\t\t\tinst.dpDiv[(this._get(inst, \"isRTL\") ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-rtl\");\n\n\t\t\tif (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {\n\t\t\t\tinst.input.focus();\n\t\t\t}\n\n\t\t\t// deffered render of the years select (to avoid flashes on Firefox)\n\t\t\tif (inst.yearshtml) {\n\t\t\t\torigyearshtml = inst.yearshtml;\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t//assure that inst.yearshtml didn't change.\n\t\t\t\t\tif (origyearshtml === inst.yearshtml && inst.yearshtml) {\n\t\t\t\t\t\tinst.dpDiv.find(\"select.ui-datepicker-year:first\").replaceWith(inst.yearshtml);\n\t\t\t\t\t}\n\t\t\t\t\torigyearshtml = inst.yearshtml = null;\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t},\n\n\t\t// #6694 - don't focus the input if it's already focused\n\t\t// this breaks the change event in IE\n\t\t// Support: IE and jQuery <1.9\n\t\t_shouldFocusInput: function _shouldFocusInput(inst) {\n\t\t\treturn inst.input && inst.input.is(\":visible\") && !inst.input.is(\":disabled\") && !inst.input.is(\":focus\");\n\t\t},\n\n\t\t/* Check positioning to remain on screen. */\n\t\t_checkOffset: function _checkOffset(inst, offset, isFixed) {\n\t\t\tvar dpWidth = inst.dpDiv.outerWidth(),\n\t\t\t    dpHeight = inst.dpDiv.outerHeight(),\n\t\t\t    inputWidth = inst.input ? inst.input.outerWidth() : 0,\n\t\t\t    inputHeight = inst.input ? inst.input.outerHeight() : 0,\n\t\t\t    viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),\n\t\t\t    viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());\n\n\t\t\toffset.left -= this._get(inst, \"isRTL\") ? dpWidth - inputWidth : 0;\n\t\t\toffset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;\n\t\t\toffset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;\n\n\t\t\t// now check if datepicker is showing outside window viewport - move to a better place if so.\n\t\t\toffset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);\n\t\t\toffset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);\n\n\t\t\treturn offset;\n\t\t},\n\n\t\t/* Find an object's position on the screen. */\n\t\t_findPos: function _findPos(obj) {\n\t\t\tvar position,\n\t\t\t    inst = this._getInst(obj),\n\t\t\t    isRTL = this._get(inst, \"isRTL\");\n\n\t\t\twhile (obj && (obj.type === \"hidden\" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {\n\t\t\t\tobj = obj[isRTL ? \"previousSibling\" : \"nextSibling\"];\n\t\t\t}\n\n\t\t\tposition = $(obj).offset();\n\t\t\treturn [position.left, position.top];\n\t\t},\n\n\t\t/* Hide the date picker from view.\n   * @param  input  element - the input field attached to the date picker\n   */\n\t\t_hideDatepicker: function _hideDatepicker(input) {\n\t\t\tvar showAnim,\n\t\t\t    duration,\n\t\t\t    postProcess,\n\t\t\t    onClose,\n\t\t\t    inst = this._curInst;\n\n\t\t\tif (!inst || input && inst !== $.data(input, \"datepicker\")) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._datepickerShowing) {\n\t\t\t\tshowAnim = this._get(inst, \"showAnim\");\n\t\t\t\tduration = this._get(inst, \"duration\");\n\t\t\t\tpostProcess = function postProcess() {\n\t\t\t\t\t$.datepicker._tidyDialog(inst);\n\t\t\t\t};\n\n\t\t\t\t// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\n\t\t\t\tif ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {\n\t\t\t\t\tinst.dpDiv.hide(showAnim, $.datepicker._get(inst, \"showOptions\"), duration, postProcess);\n\t\t\t\t} else {\n\t\t\t\t\tinst.dpDiv[showAnim === \"slideDown\" ? \"slideUp\" : showAnim === \"fadeIn\" ? \"fadeOut\" : \"hide\"](showAnim ? duration : null, postProcess);\n\t\t\t\t}\n\n\t\t\t\tif (!showAnim) {\n\t\t\t\t\tpostProcess();\n\t\t\t\t}\n\t\t\t\tthis._datepickerShowing = false;\n\n\t\t\t\tonClose = this._get(inst, \"onClose\");\n\t\t\t\tif (onClose) {\n\t\t\t\t\tonClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : \"\", inst]);\n\t\t\t\t}\n\n\t\t\t\tthis._lastInput = null;\n\t\t\t\tif (this._inDialog) {\n\t\t\t\t\tthis._dialogInput.css({ position: \"absolute\", left: \"0\", top: \"-100px\" });\n\t\t\t\t\tif ($.blockUI) {\n\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t$(\"body\").append(this.dpDiv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._inDialog = false;\n\t\t\t}\n\t\t},\n\n\t\t/* Tidy up after a dialog display. */\n\t\t_tidyDialog: function _tidyDialog(inst) {\n\t\t\tinst.dpDiv.removeClass(this._dialogClass).unbind(\".ui-datepicker-calendar\");\n\t\t},\n\n\t\t/* Close date picker if clicked elsewhere. */\n\t\t_checkExternalClick: function _checkExternalClick(event) {\n\t\t\tif (!$.datepicker._curInst) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar $target = $(event.target),\n\t\t\t    inst = $.datepicker._getInst($target[0]);\n\n\t\t\tif ($target[0].id !== $.datepicker._mainDivId && $target.parents(\"#\" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest(\".\" + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {\n\t\t\t\t$.datepicker._hideDatepicker();\n\t\t\t}\n\t\t},\n\n\t\t/* Adjust one of the date sub-fields. */\n\t\t_adjustDate: function _adjustDate(id, offset, period) {\n\t\t\tvar target = $(id),\n\t\t\t    inst = this._getInst(target[0]);\n\n\t\t\tif (this._isDisabledDatepicker(target[0])) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._adjustInstDate(inst, offset + (period === \"M\" ? this._get(inst, \"showCurrentAtPos\") : 0), // undo positioning\n\t\t\tperiod);\n\t\t\tthis._updateDatepicker(inst);\n\t\t},\n\n\t\t/* Action for current link. */\n\t\t_gotoToday: function _gotoToday(id) {\n\t\t\tvar date,\n\t\t\t    target = $(id),\n\t\t\t    inst = this._getInst(target[0]);\n\n\t\t\tif (this._get(inst, \"gotoCurrent\") && inst.currentDay) {\n\t\t\t\tinst.selectedDay = inst.currentDay;\n\t\t\t\tinst.drawMonth = inst.selectedMonth = inst.currentMonth;\n\t\t\t\tinst.drawYear = inst.selectedYear = inst.currentYear;\n\t\t\t} else {\n\t\t\t\tdate = new Date();\n\t\t\t\tinst.selectedDay = date.getDate();\n\t\t\t\tinst.drawMonth = inst.selectedMonth = date.getMonth();\n\t\t\t\tinst.drawYear = inst.selectedYear = date.getFullYear();\n\t\t\t}\n\t\t\tthis._notifyChange(inst);\n\t\t\tthis._adjustDate(target);\n\t\t},\n\n\t\t/* Action for selecting a new month/year. */\n\t\t_selectMonthYear: function _selectMonthYear(id, select, period) {\n\t\t\tvar target = $(id),\n\t\t\t    inst = this._getInst(target[0]);\n\n\t\t\tinst[\"selected\" + (period === \"M\" ? \"Month\" : \"Year\")] = inst[\"draw\" + (period === \"M\" ? \"Month\" : \"Year\")] = parseInt(select.options[select.selectedIndex].value, 10);\n\n\t\t\tthis._notifyChange(inst);\n\t\t\tthis._adjustDate(target);\n\t\t},\n\n\t\t/* Action for selecting a day. */\n\t\t_selectDay: function _selectDay(id, month, year, td) {\n\t\t\tvar inst,\n\t\t\t    target = $(id);\n\n\t\t\tif ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinst = this._getInst(target[0]);\n\t\t\tinst.selectedDay = inst.currentDay = $(\"a\", td).html();\n\t\t\tinst.selectedMonth = inst.currentMonth = month;\n\t\t\tinst.selectedYear = inst.currentYear = year;\n\t\t\tthis._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));\n\t\t},\n\n\t\t/* Erase the input field and hide the date picker. */\n\t\t_clearDate: function _clearDate(id) {\n\t\t\tvar target = $(id);\n\t\t\tthis._selectDate(target, \"\");\n\t\t},\n\n\t\t/* Update the input field with the selected date. */\n\t\t_selectDate: function _selectDate(id, dateStr) {\n\t\t\tvar onSelect,\n\t\t\t    target = $(id),\n\t\t\t    inst = this._getInst(target[0]);\n\n\t\t\tdateStr = dateStr != null ? dateStr : this._formatDate(inst);\n\t\t\tif (inst.input) {\n\t\t\t\tinst.input.val(dateStr);\n\t\t\t}\n\t\t\tthis._updateAlternate(inst);\n\n\t\t\tonSelect = this._get(inst, \"onSelect\");\n\t\t\tif (onSelect) {\n\t\t\t\tonSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]); // trigger custom callback\n\t\t\t} else if (inst.input) {\n\t\t\t\tinst.input.trigger(\"change\"); // fire the change event\n\t\t\t}\n\n\t\t\tif (inst.inline) {\n\t\t\t\tthis._updateDatepicker(inst);\n\t\t\t} else {\n\t\t\t\tthis._hideDatepicker();\n\t\t\t\tthis._lastInput = inst.input[0];\n\t\t\t\tif (_typeof(inst.input[0]) !== \"object\") {\n\t\t\t\t\tinst.input.focus(); // restore focus\n\t\t\t\t}\n\t\t\t\tthis._lastInput = null;\n\t\t\t}\n\t\t},\n\n\t\t/* Update any alternate field to synchronise with the main field. */\n\t\t_updateAlternate: function _updateAlternate(inst) {\n\t\t\tvar altFormat,\n\t\t\t    date,\n\t\t\t    dateStr,\n\t\t\t    altField = this._get(inst, \"altField\");\n\n\t\t\tif (altField) {\n\t\t\t\t// update alternate field too\n\t\t\t\taltFormat = this._get(inst, \"altFormat\") || this._get(inst, \"dateFormat\");\n\t\t\t\tdate = this._getDate(inst);\n\t\t\t\tdateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));\n\t\t\t\t$(altField).each(function () {\n\t\t\t\t\t$(this).val(dateStr);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/* Set as beforeShowDay function to prevent selection of weekends.\n   * @param  date  Date - the date to customise\n   * @return [boolean, string] - is this date selectable?, what is its CSS class?\n   */\n\t\tnoWeekends: function noWeekends(date) {\n\t\t\tvar day = date.getDay();\n\t\t\treturn [day > 0 && day < 6, \"\"];\n\t\t},\n\n\t\t/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\n   * @param  date  Date - the date to get the week for\n   * @return  number - the number of the week within the year that contains this date\n   */\n\t\tiso8601Week: function iso8601Week(date) {\n\t\t\tvar time,\n\t\t\t    checkDate = new Date(date.getTime());\n\n\t\t\t// Find Thursday of this week starting on Monday\n\t\t\tcheckDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n\n\t\t\ttime = checkDate.getTime();\n\t\t\tcheckDate.setMonth(0); // Compare with Jan 1\n\t\t\tcheckDate.setDate(1);\n\t\t\treturn Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;\n\t\t},\n\n\t\t/* Parse a string value into a date object.\n   * See formatDate below for the possible formats.\n   *\n   * @param  format string - the expected format of the date\n   * @param  value string - the date in the above format\n   * @param  settings Object - attributes include:\n   *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\n   *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n   *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n   *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n   *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n   * @return  Date - the extracted date value or null if value is blank\n   */\n\t\tparseDate: function parseDate(format, value, settings) {\n\t\t\tif (format == null || value == null) {\n\t\t\t\tthrow \"Invalid arguments\";\n\t\t\t}\n\n\t\t\tvalue = (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\" ? value.toString() : value + \"\";\n\t\t\tif (value === \"\") {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar iFormat,\n\t\t\t    dim,\n\t\t\t    extra,\n\t\t\t    iValue = 0,\n\t\t\t    shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,\n\t\t\t    shortYearCutoff = typeof shortYearCutoffTemp !== \"string\" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10),\n\t\t\t    dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n\t\t\t    dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n\t\t\t    monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n\t\t\t    monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n\t\t\t    year = -1,\n\t\t\t    month = -1,\n\t\t\t    day = -1,\n\t\t\t    doy = -1,\n\t\t\t    literal = false,\n\t\t\t    date,\n\n\t\t\t// Check whether a format character is doubled\n\t\t\tlookAhead = function lookAhead(match) {\n\t\t\t\tvar matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\t\t\t\tif (matches) {\n\t\t\t\t\tiFormat++;\n\t\t\t\t}\n\t\t\t\treturn matches;\n\t\t\t},\n\n\t\t\t// Extract a number from the string value\n\t\t\tgetNumber = function getNumber(match) {\n\t\t\t\tvar isDoubled = lookAhead(match),\n\t\t\t\t    size = match === \"@\" ? 14 : match === \"!\" ? 20 : match === \"y\" && isDoubled ? 4 : match === \"o\" ? 3 : 2,\n\t\t\t\t    minSize = match === \"y\" ? size : 1,\n\t\t\t\t    digits = new RegExp(\"^\\\\d{\" + minSize + \",\" + size + \"}\"),\n\t\t\t\t    num = value.substring(iValue).match(digits);\n\t\t\t\tif (!num) {\n\t\t\t\t\tthrow \"Missing number at position \" + iValue;\n\t\t\t\t}\n\t\t\t\tiValue += num[0].length;\n\t\t\t\treturn parseInt(num[0], 10);\n\t\t\t},\n\n\t\t\t// Extract a name from the string value and convert to an index\n\t\t\tgetName = function getName(match, shortNames, longNames) {\n\t\t\t\tvar index = -1,\n\t\t\t\t    names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {\n\t\t\t\t\treturn [[k, v]];\n\t\t\t\t}).sort(function (a, b) {\n\t\t\t\t\treturn -(a[1].length - b[1].length);\n\t\t\t\t});\n\n\t\t\t\t$.each(names, function (i, pair) {\n\t\t\t\t\tvar name = pair[1];\n\t\t\t\t\tif (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {\n\t\t\t\t\t\tindex = pair[0];\n\t\t\t\t\t\tiValue += name.length;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\treturn index + 1;\n\t\t\t\t} else {\n\t\t\t\t\tthrow \"Unknown name at position \" + iValue;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Confirm that a literal character matches the string value\n\t\t\tcheckLiteral = function checkLiteral() {\n\t\t\t\tif (value.charAt(iValue) !== format.charAt(iFormat)) {\n\t\t\t\t\tthrow \"Unexpected literal at position \" + iValue;\n\t\t\t\t}\n\t\t\t\tiValue++;\n\t\t\t};\n\n\t\t\tfor (iFormat = 0; iFormat < format.length; iFormat++) {\n\t\t\t\tif (literal) {\n\t\t\t\t\tif (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n\t\t\t\t\t\tliteral = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcheckLiteral();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tswitch (format.charAt(iFormat)) {\n\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\tday = getNumber(\"d\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"D\":\n\t\t\t\t\t\t\tgetName(\"D\", dayNamesShort, dayNames);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"o\":\n\t\t\t\t\t\t\tdoy = getNumber(\"o\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"m\":\n\t\t\t\t\t\t\tmonth = getNumber(\"m\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"M\":\n\t\t\t\t\t\t\tmonth = getName(\"M\", monthNamesShort, monthNames);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"y\":\n\t\t\t\t\t\t\tyear = getNumber(\"y\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"@\":\n\t\t\t\t\t\t\tdate = new Date(getNumber(\"@\"));\n\t\t\t\t\t\t\tyear = date.getFullYear();\n\t\t\t\t\t\t\tmonth = date.getMonth() + 1;\n\t\t\t\t\t\t\tday = date.getDate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"!\":\n\t\t\t\t\t\t\tdate = new Date((getNumber(\"!\") - this._ticksTo1970) / 10000);\n\t\t\t\t\t\t\tyear = date.getFullYear();\n\t\t\t\t\t\t\tmonth = date.getMonth() + 1;\n\t\t\t\t\t\t\tday = date.getDate();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"'\":\n\t\t\t\t\t\t\tif (lookAhead(\"'\")) {\n\t\t\t\t\t\t\t\tcheckLiteral();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tliteral = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tcheckLiteral();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (iValue < value.length) {\n\t\t\t\textra = value.substr(iValue);\n\t\t\t\tif (!/^\\s+/.test(extra)) {\n\t\t\t\t\tthrow \"Extra/unparsed characters found in date: \" + extra;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (year === -1) {\n\t\t\t\tyear = new Date().getFullYear();\n\t\t\t} else if (year < 100) {\n\t\t\t\tyear += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);\n\t\t\t}\n\n\t\t\tif (doy > -1) {\n\t\t\t\tmonth = 1;\n\t\t\t\tday = doy;\n\t\t\t\tdo {\n\t\t\t\t\tdim = this._getDaysInMonth(year, month - 1);\n\t\t\t\t\tif (day <= dim) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmonth++;\n\t\t\t\t\tday -= dim;\n\t\t\t\t} while (true);\n\t\t\t}\n\n\t\t\tdate = this._daylightSavingAdjust(new Date(year, month - 1, day));\n\t\t\tif (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n\t\t\t\tthrow \"Invalid date\"; // E.g. 31/02/00\n\t\t\t}\n\t\t\treturn date;\n\t\t},\n\n\t\t/* Standard date formats. */\n\t\tATOM: \"yy-mm-dd\", // RFC 3339 (ISO 8601)\n\t\tCOOKIE: \"D, dd M yy\",\n\t\tISO_8601: \"yy-mm-dd\",\n\t\tRFC_822: \"D, d M y\",\n\t\tRFC_850: \"DD, dd-M-y\",\n\t\tRFC_1036: \"D, d M y\",\n\t\tRFC_1123: \"D, d M yy\",\n\t\tRFC_2822: \"D, d M yy\",\n\t\tRSS: \"D, d M y\", // RFC 822\n\t\tTICKS: \"!\",\n\t\tTIMESTAMP: \"@\",\n\t\tW3C: \"yy-mm-dd\", // ISO 8601\n\n\t\t_ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000,\n\n\t\t/* Format a date object into a string value.\n   * The format can be combinations of the following:\n   * d  - day of month (no leading zero)\n   * dd - day of month (two digit)\n   * o  - day of year (no leading zeros)\n   * oo - day of year (three digit)\n   * D  - day name short\n   * DD - day name long\n   * m  - month of year (no leading zero)\n   * mm - month of year (two digit)\n   * M  - month name short\n   * MM - month name long\n   * y  - year (two digit)\n   * yy - year (four digit)\n   * @ - Unix timestamp (ms since 01/01/1970)\n   * ! - Windows ticks (100ns since 01/01/0001)\n   * \"...\" - literal text\n   * '' - single quote\n   *\n   * @param  format string - the desired format of the date\n   * @param  date Date - the date value to format\n   * @param  settings Object - attributes include:\n   *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n   *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n   *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n   *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n   * @return  string - the date in the above format\n   */\n\t\tformatDate: function formatDate(format, date, settings) {\n\t\t\tif (!date) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\tvar iFormat,\n\t\t\t    dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n\t\t\t    dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n\t\t\t    monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n\t\t\t    monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n\n\t\t\t// Check whether a format character is doubled\n\t\t\tlookAhead = function lookAhead(match) {\n\t\t\t\tvar matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\t\t\t\tif (matches) {\n\t\t\t\t\tiFormat++;\n\t\t\t\t}\n\t\t\t\treturn matches;\n\t\t\t},\n\n\t\t\t// Format a number, with leading zero if necessary\n\t\t\tformatNumber = function formatNumber(match, value, len) {\n\t\t\t\tvar num = \"\" + value;\n\t\t\t\tif (lookAhead(match)) {\n\t\t\t\t\twhile (num.length < len) {\n\t\t\t\t\t\tnum = \"0\" + num;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn num;\n\t\t\t},\n\n\t\t\t// Format a name, short or long as requested\n\t\t\tformatName = function formatName(match, value, shortNames, longNames) {\n\t\t\t\treturn lookAhead(match) ? longNames[value] : shortNames[value];\n\t\t\t},\n\t\t\t    output = \"\",\n\t\t\t    literal = false;\n\n\t\t\tif (date) {\n\t\t\t\tfor (iFormat = 0; iFormat < format.length; iFormat++) {\n\t\t\t\t\tif (literal) {\n\t\t\t\t\t\tif (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n\t\t\t\t\t\t\tliteral = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutput += format.charAt(iFormat);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (format.charAt(iFormat)) {\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\toutput += formatNumber(\"d\", date.getDate(), 2);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"D\":\n\t\t\t\t\t\t\t\toutput += formatName(\"D\", date.getDay(), dayNamesShort, dayNames);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"o\":\n\t\t\t\t\t\t\t\toutput += formatNumber(\"o\", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"m\":\n\t\t\t\t\t\t\t\toutput += formatNumber(\"m\", date.getMonth() + 1, 2);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"M\":\n\t\t\t\t\t\t\t\toutput += formatName(\"M\", date.getMonth(), monthNamesShort, monthNames);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"y\":\n\t\t\t\t\t\t\t\toutput += lookAhead(\"y\") ? date.getFullYear() : (date.getYear() % 100 < 10 ? \"0\" : \"\") + date.getYear() % 100;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"@\":\n\t\t\t\t\t\t\t\toutput += date.getTime();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"!\":\n\t\t\t\t\t\t\t\toutput += date.getTime() * 10000 + this._ticksTo1970;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"'\":\n\t\t\t\t\t\t\t\tif (lookAhead(\"'\")) {\n\t\t\t\t\t\t\t\t\toutput += \"'\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tliteral = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\toutput += format.charAt(iFormat);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t},\n\n\t\t/* Extract all possible characters from the date format. */\n\t\t_possibleChars: function _possibleChars(format) {\n\t\t\tvar iFormat,\n\t\t\t    chars = \"\",\n\t\t\t    literal = false,\n\n\t\t\t// Check whether a format character is doubled\n\t\t\tlookAhead = function lookAhead(match) {\n\t\t\t\tvar matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\t\t\t\tif (matches) {\n\t\t\t\t\tiFormat++;\n\t\t\t\t}\n\t\t\t\treturn matches;\n\t\t\t};\n\n\t\t\tfor (iFormat = 0; iFormat < format.length; iFormat++) {\n\t\t\t\tif (literal) {\n\t\t\t\t\tif (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n\t\t\t\t\t\tliteral = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchars += format.charAt(iFormat);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tswitch (format.charAt(iFormat)) {\n\t\t\t\t\t\tcase \"d\":case \"m\":case \"y\":case \"@\":\n\t\t\t\t\t\t\tchars += \"0123456789\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"D\":case \"M\":\n\t\t\t\t\t\t\treturn null; // Accept anything\n\t\t\t\t\t\tcase \"'\":\n\t\t\t\t\t\t\tif (lookAhead(\"'\")) {\n\t\t\t\t\t\t\t\tchars += \"'\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tliteral = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tchars += format.charAt(iFormat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn chars;\n\t\t},\n\n\t\t/* Get a setting value, defaulting if necessary. */\n\t\t_get: function _get(inst, name) {\n\t\t\treturn inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];\n\t\t},\n\n\t\t/* Parse existing date and initialise date picker. */\n\t\t_setDateFromField: function _setDateFromField(inst, noDefault) {\n\t\t\tif (inst.input.val() === inst.lastVal) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar dateFormat = this._get(inst, \"dateFormat\"),\n\t\t\t    dates = inst.lastVal = inst.input ? inst.input.val() : null,\n\t\t\t    defaultDate = this._getDefaultDate(inst),\n\t\t\t    date = defaultDate,\n\t\t\t    settings = this._getFormatConfig(inst);\n\n\t\t\ttry {\n\t\t\t\tdate = this.parseDate(dateFormat, dates, settings) || defaultDate;\n\t\t\t} catch (event) {\n\t\t\t\tdates = noDefault ? \"\" : dates;\n\t\t\t}\n\t\t\tinst.selectedDay = date.getDate();\n\t\t\tinst.drawMonth = inst.selectedMonth = date.getMonth();\n\t\t\tinst.drawYear = inst.selectedYear = date.getFullYear();\n\t\t\tinst.currentDay = dates ? date.getDate() : 0;\n\t\t\tinst.currentMonth = dates ? date.getMonth() : 0;\n\t\t\tinst.currentYear = dates ? date.getFullYear() : 0;\n\t\t\tthis._adjustInstDate(inst);\n\t\t},\n\n\t\t/* Retrieve the default date shown on opening. */\n\t\t_getDefaultDate: function _getDefaultDate(inst) {\n\t\t\treturn this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, \"defaultDate\"), new Date()));\n\t\t},\n\n\t\t/* A date may be specified as an exact value or a relative one. */\n\t\t_determineDate: function _determineDate(inst, date, defaultDate) {\n\t\t\tvar offsetNumeric = function offsetNumeric(offset) {\n\t\t\t\tvar date = new Date();\n\t\t\t\tdate.setDate(date.getDate() + offset);\n\t\t\t\treturn date;\n\t\t\t},\n\t\t\t    offsetString = function offsetString(offset) {\n\t\t\t\ttry {\n\t\t\t\t\treturn $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), offset, $.datepicker._getFormatConfig(inst));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\n\t\t\t\tvar date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(),\n\t\t\t\t    year = date.getFullYear(),\n\t\t\t\t    month = date.getMonth(),\n\t\t\t\t    day = date.getDate(),\n\t\t\t\t    pattern = /([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,\n\t\t\t\t    matches = pattern.exec(offset);\n\n\t\t\t\twhile (matches) {\n\t\t\t\t\tswitch (matches[2] || \"d\") {\n\t\t\t\t\t\tcase \"d\":case \"D\":\n\t\t\t\t\t\t\tday += parseInt(matches[1], 10);break;\n\t\t\t\t\t\tcase \"w\":case \"W\":\n\t\t\t\t\t\t\tday += parseInt(matches[1], 10) * 7;break;\n\t\t\t\t\t\tcase \"m\":case \"M\":\n\t\t\t\t\t\t\tmonth += parseInt(matches[1], 10);\n\t\t\t\t\t\t\tday = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"y\":case \"Y\":\n\t\t\t\t\t\t\tyear += parseInt(matches[1], 10);\n\t\t\t\t\t\t\tday = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmatches = pattern.exec(offset);\n\t\t\t\t}\n\t\t\t\treturn new Date(year, month, day);\n\t\t\t},\n\t\t\t    newDate = date == null || date === \"\" ? defaultDate : typeof date === \"string\" ? offsetString(date) : typeof date === \"number\" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());\n\n\t\t\tnewDate = newDate && newDate.toString() === \"Invalid Date\" ? defaultDate : newDate;\n\t\t\tif (newDate) {\n\t\t\t\tnewDate.setHours(0);\n\t\t\t\tnewDate.setMinutes(0);\n\t\t\t\tnewDate.setSeconds(0);\n\t\t\t\tnewDate.setMilliseconds(0);\n\t\t\t}\n\t\t\treturn this._daylightSavingAdjust(newDate);\n\t\t},\n\n\t\t/* Handle switch to/from daylight saving.\n   * Hours may be non-zero on daylight saving cut-over:\n   * > 12 when midnight changeover, but then cannot generate\n   * midnight datetime, so jump to 1AM, otherwise reset.\n   * @param  date  (Date) the date to check\n   * @return  (Date) the corrected date\n   */\n\t\t_daylightSavingAdjust: function _daylightSavingAdjust(date) {\n\t\t\tif (!date) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tdate.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n\t\t\treturn date;\n\t\t},\n\n\t\t/* Set the date(s) directly. */\n\t\t_setDate: function _setDate(inst, date, noChange) {\n\t\t\tvar clear = !date,\n\t\t\t    origMonth = inst.selectedMonth,\n\t\t\t    origYear = inst.selectedYear,\n\t\t\t    newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));\n\n\t\t\tinst.selectedDay = inst.currentDay = newDate.getDate();\n\t\t\tinst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\n\t\t\tinst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\n\t\t\tif ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {\n\t\t\t\tthis._notifyChange(inst);\n\t\t\t}\n\t\t\tthis._adjustInstDate(inst);\n\t\t\tif (inst.input) {\n\t\t\t\tinst.input.val(clear ? \"\" : this._formatDate(inst));\n\t\t\t}\n\t\t},\n\n\t\t/* Retrieve the date(s) directly. */\n\t\t_getDate: function _getDate(inst) {\n\t\t\tvar startDate = !inst.currentYear || inst.input && inst.input.val() === \"\" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n\t\t\treturn startDate;\n\t\t},\n\n\t\t/* Attach the onxxx handlers.  These are declared statically so\n   * they work with static code transformers like Caja.\n   */\n\t\t_attachHandlers: function _attachHandlers(inst) {\n\t\t\tvar stepMonths = this._get(inst, \"stepMonths\"),\n\t\t\t    id = \"#\" + inst.id.replace(/\\\\\\\\/g, \"\\\\\");\n\t\t\tinst.dpDiv.find(\"[data-handler]\").map(function () {\n\t\t\t\tvar handler = {\n\t\t\t\t\tprev: function prev() {\n\t\t\t\t\t\t$.datepicker._adjustDate(id, -stepMonths, \"M\");\n\t\t\t\t\t},\n\t\t\t\t\tnext: function next() {\n\t\t\t\t\t\t$.datepicker._adjustDate(id, +stepMonths, \"M\");\n\t\t\t\t\t},\n\t\t\t\t\thide: function hide() {\n\t\t\t\t\t\t$.datepicker._hideDatepicker();\n\t\t\t\t\t},\n\t\t\t\t\ttoday: function today() {\n\t\t\t\t\t\t$.datepicker._gotoToday(id);\n\t\t\t\t\t},\n\t\t\t\t\tselectDay: function selectDay() {\n\t\t\t\t\t\t$.datepicker._selectDay(id, +this.getAttribute(\"data-month\"), +this.getAttribute(\"data-year\"), this);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tselectMonth: function selectMonth() {\n\t\t\t\t\t\t$.datepicker._selectMonthYear(id, this, \"M\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tselectYear: function selectYear() {\n\t\t\t\t\t\t$.datepicker._selectMonthYear(id, this, \"Y\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t$(this).bind(this.getAttribute(\"data-event\"), handler[this.getAttribute(\"data-handler\")]);\n\t\t\t});\n\t\t},\n\n\t\t/* Generate the HTML for the current state of the date picker. */\n\t\t_generateHTML: function _generateHTML(inst) {\n\t\t\tvar maxDraw,\n\t\t\t    prevText,\n\t\t\t    prev,\n\t\t\t    nextText,\n\t\t\t    next,\n\t\t\t    currentText,\n\t\t\t    gotoDate,\n\t\t\t    controls,\n\t\t\t    buttonPanel,\n\t\t\t    firstDay,\n\t\t\t    showWeek,\n\t\t\t    dayNames,\n\t\t\t    dayNamesMin,\n\t\t\t    monthNames,\n\t\t\t    monthNamesShort,\n\t\t\t    beforeShowDay,\n\t\t\t    showOtherMonths,\n\t\t\t    selectOtherMonths,\n\t\t\t    defaultDate,\n\t\t\t    html,\n\t\t\t    dow,\n\t\t\t    row,\n\t\t\t    group,\n\t\t\t    col,\n\t\t\t    selectedDate,\n\t\t\t    cornerClass,\n\t\t\t    calender,\n\t\t\t    thead,\n\t\t\t    day,\n\t\t\t    daysInMonth,\n\t\t\t    leadDays,\n\t\t\t    curRows,\n\t\t\t    numRows,\n\t\t\t    printDate,\n\t\t\t    dRow,\n\t\t\t    tbody,\n\t\t\t    daySettings,\n\t\t\t    otherMonth,\n\t\t\t    unselectable,\n\t\t\t    tempDate = new Date(),\n\t\t\t    today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())),\n\t\t\t    // clear time\n\t\t\tisRTL = this._get(inst, \"isRTL\"),\n\t\t\t    showButtonPanel = this._get(inst, \"showButtonPanel\"),\n\t\t\t    hideIfNoPrevNext = this._get(inst, \"hideIfNoPrevNext\"),\n\t\t\t    navigationAsDateFormat = this._get(inst, \"navigationAsDateFormat\"),\n\t\t\t    numMonths = this._getNumberOfMonths(inst),\n\t\t\t    showCurrentAtPos = this._get(inst, \"showCurrentAtPos\"),\n\t\t\t    stepMonths = this._get(inst, \"stepMonths\"),\n\t\t\t    isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1,\n\t\t\t    currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\n\t\t\t    minDate = this._getMinMaxDate(inst, \"min\"),\n\t\t\t    maxDate = this._getMinMaxDate(inst, \"max\"),\n\t\t\t    drawMonth = inst.drawMonth - showCurrentAtPos,\n\t\t\t    drawYear = inst.drawYear;\n\n\t\t\tif (drawMonth < 0) {\n\t\t\t\tdrawMonth += 12;\n\t\t\t\tdrawYear--;\n\t\t\t}\n\t\t\tif (maxDate) {\n\t\t\t\tmaxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\n\t\t\t\tmaxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\n\t\t\t\twhile (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\n\t\t\t\t\tdrawMonth--;\n\t\t\t\t\tif (drawMonth < 0) {\n\t\t\t\t\t\tdrawMonth = 11;\n\t\t\t\t\t\tdrawYear--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinst.drawMonth = drawMonth;\n\t\t\tinst.drawYear = drawYear;\n\n\t\t\tprevText = this._get(inst, \"prevText\");\n\t\t\tprevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));\n\n\t\t\tprev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? \"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'\" + \" title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\";\n\n\t\t\tnextText = this._get(inst, \"nextText\");\n\t\t\tnextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));\n\n\t\t\tnext = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? \"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'\" + \" title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\";\n\n\t\t\tcurrentText = this._get(inst, \"currentText\");\n\t\t\tgotoDate = this._get(inst, \"gotoCurrent\") && inst.currentDay ? currentDate : today;\n\t\t\tcurrentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\n\n\t\t\tcontrols = !inst.inline ? \"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>\" + this._get(inst, \"closeText\") + \"</button>\" : \"\";\n\n\t\t\tbuttonPanel = showButtonPanel ? \"<div class='ui-datepicker-buttonpane ui-widget-content'>\" + (isRTL ? controls : \"\") + (this._isInRange(inst, gotoDate) ? \"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'\" + \">\" + currentText + \"</button>\" : \"\") + (isRTL ? \"\" : controls) + \"</div>\" : \"\";\n\n\t\t\tfirstDay = parseInt(this._get(inst, \"firstDay\"), 10);\n\t\t\tfirstDay = isNaN(firstDay) ? 0 : firstDay;\n\n\t\t\tshowWeek = this._get(inst, \"showWeek\");\n\t\t\tdayNames = this._get(inst, \"dayNames\");\n\t\t\tdayNamesMin = this._get(inst, \"dayNamesMin\");\n\t\t\tmonthNames = this._get(inst, \"monthNames\");\n\t\t\tmonthNamesShort = this._get(inst, \"monthNamesShort\");\n\t\t\tbeforeShowDay = this._get(inst, \"beforeShowDay\");\n\t\t\tshowOtherMonths = this._get(inst, \"showOtherMonths\");\n\t\t\tselectOtherMonths = this._get(inst, \"selectOtherMonths\");\n\t\t\tdefaultDate = this._getDefaultDate(inst);\n\t\t\thtml = \"\";\n\t\t\tdow;\n\t\t\tfor (row = 0; row < numMonths[0]; row++) {\n\t\t\t\tgroup = \"\";\n\t\t\t\tthis.maxRows = 4;\n\t\t\t\tfor (col = 0; col < numMonths[1]; col++) {\n\t\t\t\t\tselectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\n\t\t\t\t\tcornerClass = \" ui-corner-all\";\n\t\t\t\t\tcalender = \"\";\n\t\t\t\t\tif (isMultiMonth) {\n\t\t\t\t\t\tcalender += \"<div class='ui-datepicker-group\";\n\t\t\t\t\t\tif (numMonths[1] > 1) {\n\t\t\t\t\t\t\tswitch (col) {\n\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\tcalender += \" ui-datepicker-group-first\";\n\t\t\t\t\t\t\t\t\tcornerClass = \" ui-corner-\" + (isRTL ? \"right\" : \"left\");break;\n\t\t\t\t\t\t\t\tcase numMonths[1] - 1:\n\t\t\t\t\t\t\t\t\tcalender += \" ui-datepicker-group-last\";\n\t\t\t\t\t\t\t\t\tcornerClass = \" ui-corner-\" + (isRTL ? \"left\" : \"right\");break;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tcalender += \" ui-datepicker-group-middle\";cornerClass = \"\";break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcalender += \"'>\";\n\t\t\t\t\t}\n\t\t\t\t\tcalender += \"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\" + cornerClass + \"'>\" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : \"\") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : \"\") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\n\t\t\t\t\t\"</div><table class='ui-datepicker-calendar'><thead>\" + \"<tr>\";\n\t\t\t\t\tthead = showWeek ? \"<th class='ui-datepicker-week-col'>\" + this._get(inst, \"weekHeader\") + \"</th>\" : \"\";\n\t\t\t\t\tfor (dow = 0; dow < 7; dow++) {\n\t\t\t\t\t\t// days of the week\n\t\t\t\t\t\tday = (dow + firstDay) % 7;\n\t\t\t\t\t\tthead += \"<th scope='col'\" + ((dow + firstDay + 6) % 7 >= 5 ? \" class='ui-datepicker-week-end'\" : \"\") + \">\" + \"<span title='\" + dayNames[day] + \"'>\" + dayNamesMin[day] + \"</span></th>\";\n\t\t\t\t\t}\n\t\t\t\t\tcalender += thead + \"</tr></thead><tbody>\";\n\t\t\t\t\tdaysInMonth = this._getDaysInMonth(drawYear, drawMonth);\n\t\t\t\t\tif (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\n\t\t\t\t\t\tinst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\n\t\t\t\t\t}\n\t\t\t\t\tleadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\n\t\t\t\t\tcurRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\n\t\t\t\t\tnumRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows; //If multiple months, use the higher number of rows (see #7043)\n\t\t\t\t\tthis.maxRows = numRows;\n\t\t\t\t\tprintDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\n\t\t\t\t\tfor (dRow = 0; dRow < numRows; dRow++) {\n\t\t\t\t\t\t// create date picker rows\n\t\t\t\t\t\tcalender += \"<tr>\";\n\t\t\t\t\t\ttbody = !showWeek ? \"\" : \"<td class='ui-datepicker-week-col'>\" + this._get(inst, \"calculateWeek\")(printDate) + \"</td>\";\n\t\t\t\t\t\tfor (dow = 0; dow < 7; dow++) {\n\t\t\t\t\t\t\t// create date picker days\n\t\t\t\t\t\t\tdaySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, \"\"];\n\t\t\t\t\t\t\totherMonth = printDate.getMonth() !== drawMonth;\n\t\t\t\t\t\t\tunselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;\n\t\t\t\t\t\t\ttbody += \"<td class='\" + ((dow + firstDay + 6) % 7 >= 5 ? \" ui-datepicker-week-end\" : \"\") + ( // highlight weekends\n\t\t\t\t\t\t\totherMonth ? \" ui-datepicker-other-month\" : \"\") + ( // highlight days from other months\n\t\t\t\t\t\t\tprintDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\n\t\t\t\t\t\t\tdefaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ?\n\t\t\t\t\t\t\t// or defaultDate is current printedDate and defaultDate is selectedDate\n\t\t\t\t\t\t\t\" \" + this._dayOverClass : \"\") + ( // highlight selected day\n\t\t\t\t\t\t\tunselectable ? \" \" + this._unselectableClass + \" ui-state-disabled\" : \"\") + ( // highlight unselectable days\n\t\t\t\t\t\t\totherMonth && !showOtherMonths ? \"\" : \" \" + daySettings[1] + ( // highlight custom dates\n\t\t\t\t\t\t\tprintDate.getTime() === currentDate.getTime() ? \" \" + this._currentClass : \"\") + ( // highlight selected day\n\t\t\t\t\t\t\tprintDate.getTime() === today.getTime() ? \" ui-datepicker-today\" : \"\")) + \"'\" + ( // highlight today (if different)\n\t\t\t\t\t\t\t(!otherMonth || showOtherMonths) && daySettings[2] ? \" title='\" + daySettings[2].replace(/'/g, \"&#39;\") + \"'\" : \"\") + ( // cell title\n\t\t\t\t\t\t\tunselectable ? \"\" : \" data-handler='selectDay' data-event='click' data-month='\" + printDate.getMonth() + \"' data-year='\" + printDate.getFullYear() + \"'\") + \">\" + ( // actions\n\t\t\t\t\t\t\totherMonth && !showOtherMonths ? \"&#xa0;\" : // display for other months\n\t\t\t\t\t\t\tunselectable ? \"<span class='ui-state-default'>\" + printDate.getDate() + \"</span>\" : \"<a class='ui-state-default\" + (printDate.getTime() === today.getTime() ? \" ui-state-highlight\" : \"\") + (printDate.getTime() === currentDate.getTime() ? \" ui-state-active\" : \"\") + ( // highlight selected day\n\t\t\t\t\t\t\totherMonth ? \" ui-priority-secondary\" : \"\") + // distinguish dates from other months\n\t\t\t\t\t\t\t\"' href='#'>\" + printDate.getDate() + \"</a>\") + \"</td>\"; // display selectable date\n\t\t\t\t\t\t\tprintDate.setDate(printDate.getDate() + 1);\n\t\t\t\t\t\t\tprintDate = this._daylightSavingAdjust(printDate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcalender += tbody + \"</tr>\";\n\t\t\t\t\t}\n\t\t\t\t\tdrawMonth++;\n\t\t\t\t\tif (drawMonth > 11) {\n\t\t\t\t\t\tdrawMonth = 0;\n\t\t\t\t\t\tdrawYear++;\n\t\t\t\t\t}\n\t\t\t\t\tcalender += \"</tbody></table>\" + (isMultiMonth ? \"</div>\" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? \"<div class='ui-datepicker-row-break'></div>\" : \"\") : \"\");\n\t\t\t\t\tgroup += calender;\n\t\t\t\t}\n\t\t\t\thtml += group;\n\t\t\t}\n\t\t\thtml += buttonPanel;\n\t\t\tinst._keyEvent = false;\n\t\t\treturn html;\n\t\t},\n\n\t\t/* Generate the month and year header. */\n\t\t_generateMonthYearHeader: function _generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {\n\n\t\t\tvar inMinYear,\n\t\t\t    inMaxYear,\n\t\t\t    month,\n\t\t\t    years,\n\t\t\t    thisYear,\n\t\t\t    determineYear,\n\t\t\t    year,\n\t\t\t    endYear,\n\t\t\t    changeMonth = this._get(inst, \"changeMonth\"),\n\t\t\t    changeYear = this._get(inst, \"changeYear\"),\n\t\t\t    showMonthAfterYear = this._get(inst, \"showMonthAfterYear\"),\n\t\t\t    html = \"<div class='ui-datepicker-title'>\",\n\t\t\t    monthHtml = \"\";\n\n\t\t\t// month selection\n\t\t\tif (secondary || !changeMonth) {\n\t\t\t\tmonthHtml += \"<span class='ui-datepicker-month'>\" + monthNames[drawMonth] + \"</span>\";\n\t\t\t} else {\n\t\t\t\tinMinYear = minDate && minDate.getFullYear() === drawYear;\n\t\t\t\tinMaxYear = maxDate && maxDate.getFullYear() === drawYear;\n\t\t\t\tmonthHtml += \"<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>\";\n\t\t\t\tfor (month = 0; month < 12; month++) {\n\t\t\t\t\tif ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {\n\t\t\t\t\t\tmonthHtml += \"<option value='\" + month + \"'\" + (month === drawMonth ? \" selected='selected'\" : \"\") + \">\" + monthNamesShort[month] + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmonthHtml += \"</select>\";\n\t\t\t}\n\n\t\t\tif (!showMonthAfterYear) {\n\t\t\t\thtml += monthHtml + (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\");\n\t\t\t}\n\n\t\t\t// year selection\n\t\t\tif (!inst.yearshtml) {\n\t\t\t\tinst.yearshtml = \"\";\n\t\t\t\tif (secondary || !changeYear) {\n\t\t\t\t\thtml += \"<span class='ui-datepicker-year'>\" + drawYear + \"</span>\";\n\t\t\t\t} else {\n\t\t\t\t\t// determine range of years to display\n\t\t\t\t\tyears = this._get(inst, \"yearRange\").split(\":\");\n\t\t\t\t\tthisYear = new Date().getFullYear();\n\t\t\t\t\tdetermineYear = function determineYear(value) {\n\t\t\t\t\t\tvar year = value.match(/c[+\\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);\n\t\t\t\t\t\treturn isNaN(year) ? thisYear : year;\n\t\t\t\t\t};\n\t\t\t\t\tyear = determineYear(years[0]);\n\t\t\t\t\tendYear = Math.max(year, determineYear(years[1] || \"\"));\n\t\t\t\t\tyear = minDate ? Math.max(year, minDate.getFullYear()) : year;\n\t\t\t\t\tendYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;\n\t\t\t\t\tinst.yearshtml += \"<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>\";\n\t\t\t\t\tfor (; year <= endYear; year++) {\n\t\t\t\t\t\tinst.yearshtml += \"<option value='\" + year + \"'\" + (year === drawYear ? \" selected='selected'\" : \"\") + \">\" + year + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t\tinst.yearshtml += \"</select>\";\n\n\t\t\t\t\thtml += inst.yearshtml;\n\t\t\t\t\tinst.yearshtml = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += this._get(inst, \"yearSuffix\");\n\t\t\tif (showMonthAfterYear) {\n\t\t\t\thtml += (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\") + monthHtml;\n\t\t\t}\n\t\t\thtml += \"</div>\"; // Close datepicker_header\n\t\t\treturn html;\n\t\t},\n\n\t\t/* Adjust one of the date sub-fields. */\n\t\t_adjustInstDate: function _adjustInstDate(inst, offset, period) {\n\t\t\tvar year = inst.drawYear + (period === \"Y\" ? offset : 0),\n\t\t\t    month = inst.drawMonth + (period === \"M\" ? offset : 0),\n\t\t\t    day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === \"D\" ? offset : 0),\n\t\t\t    date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));\n\n\t\t\tinst.selectedDay = date.getDate();\n\t\t\tinst.drawMonth = inst.selectedMonth = date.getMonth();\n\t\t\tinst.drawYear = inst.selectedYear = date.getFullYear();\n\t\t\tif (period === \"M\" || period === \"Y\") {\n\t\t\t\tthis._notifyChange(inst);\n\t\t\t}\n\t\t},\n\n\t\t/* Ensure a date is within any min/max bounds. */\n\t\t_restrictMinMax: function _restrictMinMax(inst, date) {\n\t\t\tvar minDate = this._getMinMaxDate(inst, \"min\"),\n\t\t\t    maxDate = this._getMinMaxDate(inst, \"max\"),\n\t\t\t    newDate = minDate && date < minDate ? minDate : date;\n\t\t\treturn maxDate && newDate > maxDate ? maxDate : newDate;\n\t\t},\n\n\t\t/* Notify change of month/year. */\n\t\t_notifyChange: function _notifyChange(inst) {\n\t\t\tvar onChange = this._get(inst, \"onChangeMonthYear\");\n\t\t\tif (onChange) {\n\t\t\t\tonChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);\n\t\t\t}\n\t\t},\n\n\t\t/* Determine the number of months to show. */\n\t\t_getNumberOfMonths: function _getNumberOfMonths(inst) {\n\t\t\tvar numMonths = this._get(inst, \"numberOfMonths\");\n\t\t\treturn numMonths == null ? [1, 1] : typeof numMonths === \"number\" ? [1, numMonths] : numMonths;\n\t\t},\n\n\t\t/* Determine the current maximum date - ensure no time components are set. */\n\t\t_getMinMaxDate: function _getMinMaxDate(inst, minMax) {\n\t\t\treturn this._determineDate(inst, this._get(inst, minMax + \"Date\"), null);\n\t\t},\n\n\t\t/* Find the number of days in a given month. */\n\t\t_getDaysInMonth: function _getDaysInMonth(year, month) {\n\t\t\treturn 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();\n\t\t},\n\n\t\t/* Find the day of the week of the first of a month. */\n\t\t_getFirstDayOfMonth: function _getFirstDayOfMonth(year, month) {\n\t\t\treturn new Date(year, month, 1).getDay();\n\t\t},\n\n\t\t/* Determines if we should allow a \"next/prev\" month display change. */\n\t\t_canAdjustMonth: function _canAdjustMonth(inst, offset, curYear, curMonth) {\n\t\t\tvar numMonths = this._getNumberOfMonths(inst),\n\t\t\t    date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));\n\n\t\t\tif (offset < 0) {\n\t\t\t\tdate.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));\n\t\t\t}\n\t\t\treturn this._isInRange(inst, date);\n\t\t},\n\n\t\t/* Is the given date in the accepted range? */\n\t\t_isInRange: function _isInRange(inst, date) {\n\t\t\tvar yearSplit,\n\t\t\t    currentYear,\n\t\t\t    minDate = this._getMinMaxDate(inst, \"min\"),\n\t\t\t    maxDate = this._getMinMaxDate(inst, \"max\"),\n\t\t\t    minYear = null,\n\t\t\t    maxYear = null,\n\t\t\t    years = this._get(inst, \"yearRange\");\n\t\t\tif (years) {\n\t\t\t\tyearSplit = years.split(\":\");\n\t\t\t\tcurrentYear = new Date().getFullYear();\n\t\t\t\tminYear = parseInt(yearSplit[0], 10);\n\t\t\t\tmaxYear = parseInt(yearSplit[1], 10);\n\t\t\t\tif (yearSplit[0].match(/[+\\-].*/)) {\n\t\t\t\t\tminYear += currentYear;\n\t\t\t\t}\n\t\t\t\tif (yearSplit[1].match(/[+\\-].*/)) {\n\t\t\t\t\tmaxYear += currentYear;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);\n\t\t},\n\n\t\t/* Provide the configuration settings for formatting/parsing. */\n\t\t_getFormatConfig: function _getFormatConfig(inst) {\n\t\t\tvar shortYearCutoff = this._get(inst, \"shortYearCutoff\");\n\t\t\tshortYearCutoff = typeof shortYearCutoff !== \"string\" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);\n\t\t\treturn { shortYearCutoff: shortYearCutoff,\n\t\t\t\tdayNamesShort: this._get(inst, \"dayNamesShort\"), dayNames: this._get(inst, \"dayNames\"),\n\t\t\t\tmonthNamesShort: this._get(inst, \"monthNamesShort\"), monthNames: this._get(inst, \"monthNames\") };\n\t\t},\n\n\t\t/* Format the given date for display. */\n\t\t_formatDate: function _formatDate(inst, day, month, year) {\n\t\t\tif (!day) {\n\t\t\t\tinst.currentDay = inst.selectedDay;\n\t\t\t\tinst.currentMonth = inst.selectedMonth;\n\t\t\t\tinst.currentYear = inst.selectedYear;\n\t\t\t}\n\t\t\tvar date = day ? (typeof day === \"undefined\" ? \"undefined\" : _typeof(day)) === \"object\" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n\t\t\treturn this.formatDate(this._get(inst, \"dateFormat\"), date, this._getFormatConfig(inst));\n\t\t}\n\t});\n\n\t/*\n  * Bind hover events for datepicker elements.\n  * Done via delegate so the binding only occurs once in the lifetime of the parent div.\n  * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\n  */\n\tfunction datepicker_bindHover(dpDiv) {\n\t\tvar selector = \"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";\n\t\treturn dpDiv.delegate(selector, \"mouseout\", function () {\n\t\t\t$(this).removeClass(\"ui-state-hover\");\n\t\t\tif (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n\t\t\t\t$(this).removeClass(\"ui-datepicker-prev-hover\");\n\t\t\t}\n\t\t\tif (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n\t\t\t\t$(this).removeClass(\"ui-datepicker-next-hover\");\n\t\t\t}\n\t\t}).delegate(selector, \"mouseover\", datepicker_handleMouseover);\n\t}\n\n\tfunction datepicker_handleMouseover() {\n\t\tif (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {\n\t\t\t$(this).parents(\".ui-datepicker-calendar\").find(\"a\").removeClass(\"ui-state-hover\");\n\t\t\t$(this).addClass(\"ui-state-hover\");\n\t\t\tif (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n\t\t\t\t$(this).addClass(\"ui-datepicker-prev-hover\");\n\t\t\t}\n\t\t\tif (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n\t\t\t\t$(this).addClass(\"ui-datepicker-next-hover\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/* jQuery extend now ignores nulls! */\n\tfunction datepicker_extendRemove(target, props) {\n\t\t$.extend(target, props);\n\t\tfor (var name in props) {\n\t\t\tif (props[name] == null) {\n\t\t\t\ttarget[name] = props[name];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/* Invoke the datepicker functionality.\n    @param  options  string - a command, optionally followed by additional parameters or\n \t\t\t\t\tObject - settings for attaching new datepicker functionality\n    @return  jQuery object */\n\t$.fn.datepicker = function (options) {\n\n\t\t/* Verify an empty collection wasn't passed - Fixes #6976 */\n\t\tif (!this.length) {\n\t\t\treturn this;\n\t\t}\n\n\t\t/* Initialise the date picker. */\n\t\tif (!$.datepicker.initialized) {\n\t\t\t$(document).mousedown($.datepicker._checkExternalClick);\n\t\t\t$.datepicker.initialized = true;\n\t\t}\n\n\t\t/* Append datepicker main container to body if not exist. */\n\t\tif ($(\"#\" + $.datepicker._mainDivId).length === 0) {\n\t\t\t$(\"body\").append($.datepicker.dpDiv);\n\t\t}\n\n\t\tvar otherArgs = Array.prototype.slice.call(arguments, 1);\n\t\tif (typeof options === \"string\" && (options === \"isDisabled\" || options === \"getDate\" || options === \"widget\")) {\n\t\t\treturn $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n\t\t}\n\t\tif (options === \"option\" && arguments.length === 2 && typeof arguments[1] === \"string\") {\n\t\t\treturn $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n\t\t}\n\t\treturn this.each(function () {\n\t\t\ttypeof options === \"string\" ? $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);\n\t\t});\n\t};\n\n\t$.datepicker = new Datepicker(); // singleton instance\n\t$.datepicker.initialized = false;\n\t$.datepicker.uuid = new Date().getTime();\n\t$.datepicker.version = \"1.11.4\";\n\n\tvar datepicker = $.datepicker;\n\n\t/*!\n  * jQuery UI Draggable 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/draggable/\n  */\n\n\t$.widget(\"ui.draggable\", $.ui.mouse, {\n\t\tversion: \"1.11.4\",\n\t\twidgetEventPrefix: \"drag\",\n\t\toptions: {\n\t\t\taddClasses: true,\n\t\t\tappendTo: \"parent\",\n\t\t\taxis: false,\n\t\t\tconnectToSortable: false,\n\t\t\tcontainment: false,\n\t\t\tcursor: \"auto\",\n\t\t\tcursorAt: false,\n\t\t\tgrid: false,\n\t\t\thandle: false,\n\t\t\thelper: \"original\",\n\t\t\tiframeFix: false,\n\t\t\topacity: false,\n\t\t\trefreshPositions: false,\n\t\t\trevert: false,\n\t\t\trevertDuration: 500,\n\t\t\tscope: \"default\",\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 20,\n\t\t\tscrollSpeed: 20,\n\t\t\tsnap: false,\n\t\t\tsnapMode: \"both\",\n\t\t\tsnapTolerance: 20,\n\t\t\tstack: false,\n\t\t\tzIndex: false,\n\n\t\t\t// callbacks\n\t\t\tdrag: null,\n\t\t\tstart: null,\n\t\t\tstop: null\n\t\t},\n\t\t_create: function _create() {\n\n\t\t\tif (this.options.helper === \"original\") {\n\t\t\t\tthis._setPositionRelative();\n\t\t\t}\n\t\t\tif (this.options.addClasses) {\n\t\t\t\tthis.element.addClass(\"ui-draggable\");\n\t\t\t}\n\t\t\tif (this.options.disabled) {\n\t\t\t\tthis.element.addClass(\"ui-draggable-disabled\");\n\t\t\t}\n\t\t\tthis._setHandleClassName();\n\n\t\t\tthis._mouseInit();\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tthis._super(key, value);\n\t\t\tif (key === \"handle\") {\n\t\t\t\tthis._removeHandleClassName();\n\t\t\t\tthis._setHandleClassName();\n\t\t\t}\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tif ((this.helper || this.element).is(\".ui-draggable-dragging\")) {\n\t\t\t\tthis.destroyOnClear = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.element.removeClass(\"ui-draggable ui-draggable-dragging ui-draggable-disabled\");\n\t\t\tthis._removeHandleClassName();\n\t\t\tthis._mouseDestroy();\n\t\t},\n\n\t\t_mouseCapture: function _mouseCapture(event) {\n\t\t\tvar o = this.options;\n\n\t\t\tthis._blurActiveElement(event);\n\n\t\t\t// among others, prevent a drag on a resizable-handle\n\t\t\tif (this.helper || o.disabled || $(event.target).closest(\".ui-resizable-handle\").length > 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t//Quit if we're not on a valid handle\n\t\t\tthis.handle = this._getHandle(event);\n\t\t\tif (!this.handle) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis._blockFrames(o.iframeFix === true ? \"iframe\" : o.iframeFix);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_blockFrames: function _blockFrames(selector) {\n\t\t\tthis.iframeBlocks = this.document.find(selector).map(function () {\n\t\t\t\tvar iframe = $(this);\n\n\t\t\t\treturn $(\"<div>\").css(\"position\", \"absolute\").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];\n\t\t\t});\n\t\t},\n\n\t\t_unblockFrames: function _unblockFrames() {\n\t\t\tif (this.iframeBlocks) {\n\t\t\t\tthis.iframeBlocks.remove();\n\t\t\t\tdelete this.iframeBlocks;\n\t\t\t}\n\t\t},\n\n\t\t_blurActiveElement: function _blurActiveElement(event) {\n\t\t\tvar document = this.document[0];\n\n\t\t\t// Only need to blur if the event occurred on the draggable itself, see #10527\n\t\t\tif (!this.handleElement.is(event.target)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// support: IE9\n\t\t\t// IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n\t\t\ttry {\n\n\t\t\t\t// Support: IE9, IE10\n\t\t\t\t// If the <body> is blurred, IE will switch windows, see #9520\n\t\t\t\tif (document.activeElement && document.activeElement.nodeName.toLowerCase() !== \"body\") {\n\n\t\t\t\t\t// Blur any element that currently has focus, see #4261\n\t\t\t\t\t$(document.activeElement).blur();\n\t\t\t\t}\n\t\t\t} catch (error) {}\n\t\t},\n\n\t\t_mouseStart: function _mouseStart(event) {\n\n\t\t\tvar o = this.options;\n\n\t\t\t//Create and append the visible helper\n\t\t\tthis.helper = this._createHelper(event);\n\n\t\t\tthis.helper.addClass(\"ui-draggable-dragging\");\n\n\t\t\t//Cache the helper size\n\t\t\tthis._cacheHelperProportions();\n\n\t\t\t//If ddmanager is used for droppables, set the global draggable\n\t\t\tif ($.ui.ddmanager) {\n\t\t\t\t$.ui.ddmanager.current = this;\n\t\t\t}\n\n\t\t\t/*\n    * - Position generation -\n    * This block generates everything position related - it's the core of draggables.\n    */\n\n\t\t\t//Cache the margins of the original element\n\t\t\tthis._cacheMargins();\n\n\t\t\t//Store the helper's css position\n\t\t\tthis.cssPosition = this.helper.css(\"position\");\n\t\t\tthis.scrollParent = this.helper.scrollParent(true);\n\t\t\tthis.offsetParent = this.helper.offsetParent();\n\t\t\tthis.hasFixedAncestor = this.helper.parents().filter(function () {\n\t\t\t\treturn $(this).css(\"position\") === \"fixed\";\n\t\t\t}).length > 0;\n\n\t\t\t//The element's absolute position on the page minus margins\n\t\t\tthis.positionAbs = this.element.offset();\n\t\t\tthis._refreshOffsets(event);\n\n\t\t\t//Generate the original position\n\t\t\tthis.originalPosition = this.position = this._generatePosition(event, false);\n\t\t\tthis.originalPageX = event.pageX;\n\t\t\tthis.originalPageY = event.pageY;\n\n\t\t\t//Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\t\t\to.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);\n\n\t\t\t//Set a containment if given in the options\n\t\t\tthis._setContainment();\n\n\t\t\t//Trigger event + callbacks\n\t\t\tif (this._trigger(\"start\", event) === false) {\n\t\t\t\tthis._clear();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t//Recache the helper size\n\t\t\tthis._cacheHelperProportions();\n\n\t\t\t//Prepare the droppable offsets\n\t\t\tif ($.ui.ddmanager && !o.dropBehaviour) {\n\t\t\t\t$.ui.ddmanager.prepareOffsets(this, event);\n\t\t\t}\n\n\t\t\t// Reset helper's right/bottom css if they're set and set explicit width/height instead\n\t\t\t// as this prevents resizing of elements with right/bottom set (see #7772)\n\t\t\tthis._normalizeRightBottom();\n\n\t\t\tthis._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position\n\n\t\t\t//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)\n\t\t\tif ($.ui.ddmanager) {\n\t\t\t\t$.ui.ddmanager.dragStart(this, event);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_refreshOffsets: function _refreshOffsets(event) {\n\t\t\tthis.offset = {\n\t\t\t\ttop: this.positionAbs.top - this.margins.top,\n\t\t\t\tleft: this.positionAbs.left - this.margins.left,\n\t\t\t\tscroll: false,\n\t\t\t\tparent: this._getParentOffset(),\n\t\t\t\trelative: this._getRelativeOffset()\n\t\t\t};\n\n\t\t\tthis.offset.click = {\n\t\t\t\tleft: event.pageX - this.offset.left,\n\t\t\t\ttop: event.pageY - this.offset.top\n\t\t\t};\n\t\t},\n\n\t\t_mouseDrag: function _mouseDrag(event, noPropagation) {\n\t\t\t// reset any necessary cached properties (see #5009)\n\t\t\tif (this.hasFixedAncestor) {\n\t\t\t\tthis.offset.parent = this._getParentOffset();\n\t\t\t}\n\n\t\t\t//Compute the helpers position\n\t\t\tthis.position = this._generatePosition(event, true);\n\t\t\tthis.positionAbs = this._convertPositionTo(\"absolute\");\n\n\t\t\t//Call plugins and callbacks and use the resulting position if something is returned\n\t\t\tif (!noPropagation) {\n\t\t\t\tvar ui = this._uiHash();\n\t\t\t\tif (this._trigger(\"drag\", event, ui) === false) {\n\t\t\t\t\tthis._mouseUp({});\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.position = ui.position;\n\t\t\t}\n\n\t\t\tthis.helper[0].style.left = this.position.left + \"px\";\n\t\t\tthis.helper[0].style.top = this.position.top + \"px\";\n\n\t\t\tif ($.ui.ddmanager) {\n\t\t\t\t$.ui.ddmanager.drag(this, event);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_mouseStop: function _mouseStop(event) {\n\n\t\t\t//If we are using droppables, inform the manager about the drop\n\t\t\tvar that = this,\n\t\t\t    dropped = false;\n\t\t\tif ($.ui.ddmanager && !this.options.dropBehaviour) {\n\t\t\t\tdropped = $.ui.ddmanager.drop(this, event);\n\t\t\t}\n\n\t\t\t//if a drop comes from outside (a sortable)\n\t\t\tif (this.dropped) {\n\t\t\t\tdropped = this.dropped;\n\t\t\t\tthis.dropped = false;\n\t\t\t}\n\n\t\t\tif (this.options.revert === \"invalid\" && !dropped || this.options.revert === \"valid\" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {\n\t\t\t\t$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {\n\t\t\t\t\tif (that._trigger(\"stop\", event) !== false) {\n\t\t\t\t\t\tthat._clear();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this._trigger(\"stop\", event) !== false) {\n\t\t\t\t\tthis._clear();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_mouseUp: function _mouseUp(event) {\n\t\t\tthis._unblockFrames();\n\n\t\t\t//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)\n\t\t\tif ($.ui.ddmanager) {\n\t\t\t\t$.ui.ddmanager.dragStop(this, event);\n\t\t\t}\n\n\t\t\t// Only need to focus if the event occurred on the draggable itself, see #10527\n\t\t\tif (this.handleElement.is(event.target)) {\n\t\t\t\t// The interaction is over; whether or not the click resulted in a drag, focus the element\n\t\t\t\tthis.element.focus();\n\t\t\t}\n\n\t\t\treturn $.ui.mouse.prototype._mouseUp.call(this, event);\n\t\t},\n\n\t\tcancel: function cancel() {\n\n\t\t\tif (this.helper.is(\".ui-draggable-dragging\")) {\n\t\t\t\tthis._mouseUp({});\n\t\t\t} else {\n\t\t\t\tthis._clear();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t_getHandle: function _getHandle(event) {\n\t\t\treturn this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;\n\t\t},\n\n\t\t_setHandleClassName: function _setHandleClassName() {\n\t\t\tthis.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;\n\t\t\tthis.handleElement.addClass(\"ui-draggable-handle\");\n\t\t},\n\n\t\t_removeHandleClassName: function _removeHandleClassName() {\n\t\t\tthis.handleElement.removeClass(\"ui-draggable-handle\");\n\t\t},\n\n\t\t_createHelper: function _createHelper(event) {\n\n\t\t\tvar o = this.options,\n\t\t\t    helperIsFunction = $.isFunction(o.helper),\n\t\t\t    helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === \"clone\" ? this.element.clone().removeAttr(\"id\") : this.element;\n\n\t\t\tif (!helper.parents(\"body\").length) {\n\t\t\t\thelper.appendTo(o.appendTo === \"parent\" ? this.element[0].parentNode : o.appendTo);\n\t\t\t}\n\n\t\t\t// http://bugs.jqueryui.com/ticket/9446\n\t\t\t// a helper function can return the original element\n\t\t\t// which wouldn't have been set to relative in _create\n\t\t\tif (helperIsFunction && helper[0] === this.element[0]) {\n\t\t\t\tthis._setPositionRelative();\n\t\t\t}\n\n\t\t\tif (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css(\"position\"))) {\n\t\t\t\thelper.css(\"position\", \"absolute\");\n\t\t\t}\n\n\t\t\treturn helper;\n\t\t},\n\n\t\t_setPositionRelative: function _setPositionRelative() {\n\t\t\tif (!/^(?:r|a|f)/.test(this.element.css(\"position\"))) {\n\t\t\t\tthis.element[0].style.position = \"relative\";\n\t\t\t}\n\t\t},\n\n\t\t_adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n\t\t\tif (typeof obj === \"string\") {\n\t\t\t\tobj = obj.split(\" \");\n\t\t\t}\n\t\t\tif ($.isArray(obj)) {\n\t\t\t\tobj = { left: +obj[0], top: +obj[1] || 0 };\n\t\t\t}\n\t\t\tif (\"left\" in obj) {\n\t\t\t\tthis.offset.click.left = obj.left + this.margins.left;\n\t\t\t}\n\t\t\tif (\"right\" in obj) {\n\t\t\t\tthis.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n\t\t\t}\n\t\t\tif (\"top\" in obj) {\n\t\t\t\tthis.offset.click.top = obj.top + this.margins.top;\n\t\t\t}\n\t\t\tif (\"bottom\" in obj) {\n\t\t\t\tthis.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n\t\t\t}\n\t\t},\n\n\t\t_isRootNode: function _isRootNode(element) {\n\t\t\treturn (/(html|body)/i.test(element.tagName) || element === this.document[0]\n\t\t\t);\n\t\t},\n\n\t\t_getParentOffset: function _getParentOffset() {\n\n\t\t\t//Get the offsetParent and cache its position\n\t\t\tvar po = this.offsetParent.offset(),\n\t\t\t    document = this.document[0];\n\n\t\t\t// This is a special case where we need to modify a offset calculated on start, since the following happened:\n\t\t\t// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\n\t\t\t// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\n\t\t\t//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\n\t\t\tif (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n\t\t\t\tpo.left += this.scrollParent.scrollLeft();\n\t\t\t\tpo.top += this.scrollParent.scrollTop();\n\t\t\t}\n\n\t\t\tif (this._isRootNode(this.offsetParent[0])) {\n\t\t\t\tpo = { top: 0, left: 0 };\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttop: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n\t\t\t\tleft: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n\t\t\t};\n\t\t},\n\n\t\t_getRelativeOffset: function _getRelativeOffset() {\n\t\t\tif (this.cssPosition !== \"relative\") {\n\t\t\t\treturn { top: 0, left: 0 };\n\t\t\t}\n\n\t\t\tvar p = this.element.position(),\n\t\t\t    scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n\n\t\t\treturn {\n\t\t\t\ttop: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),\n\t\t\t\tleft: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)\n\t\t\t};\n\t\t},\n\n\t\t_cacheMargins: function _cacheMargins() {\n\t\t\tthis.margins = {\n\t\t\t\tleft: parseInt(this.element.css(\"marginLeft\"), 10) || 0,\n\t\t\t\ttop: parseInt(this.element.css(\"marginTop\"), 10) || 0,\n\t\t\t\tright: parseInt(this.element.css(\"marginRight\"), 10) || 0,\n\t\t\t\tbottom: parseInt(this.element.css(\"marginBottom\"), 10) || 0\n\t\t\t};\n\t\t},\n\n\t\t_cacheHelperProportions: function _cacheHelperProportions() {\n\t\t\tthis.helperProportions = {\n\t\t\t\twidth: this.helper.outerWidth(),\n\t\t\t\theight: this.helper.outerHeight()\n\t\t\t};\n\t\t},\n\n\t\t_setContainment: function _setContainment() {\n\n\t\t\tvar isUserScrollable,\n\t\t\t    c,\n\t\t\t    ce,\n\t\t\t    o = this.options,\n\t\t\t    document = this.document[0];\n\n\t\t\tthis.relativeContainer = null;\n\n\t\t\tif (!o.containment) {\n\t\t\t\tthis.containment = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (o.containment === \"window\") {\n\t\t\t\tthis.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (o.containment === \"document\") {\n\t\t\t\tthis.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (o.containment.constructor === Array) {\n\t\t\t\tthis.containment = o.containment;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (o.containment === \"parent\") {\n\t\t\t\to.containment = this.helper[0].parentNode;\n\t\t\t}\n\n\t\t\tc = $(o.containment);\n\t\t\tce = c[0];\n\n\t\t\tif (!ce) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisUserScrollable = /(scroll|auto)/.test(c.css(\"overflow\"));\n\n\t\t\tthis.containment = [(parseInt(c.css(\"borderLeftWidth\"), 10) || 0) + (parseInt(c.css(\"paddingLeft\"), 10) || 0), (parseInt(c.css(\"borderTopWidth\"), 10) || 0) + (parseInt(c.css(\"paddingTop\"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css(\"borderRightWidth\"), 10) || 0) - (parseInt(c.css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css(\"borderBottomWidth\"), 10) || 0) - (parseInt(c.css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];\n\t\t\tthis.relativeContainer = c;\n\t\t},\n\n\t\t_convertPositionTo: function _convertPositionTo(d, pos) {\n\n\t\t\tif (!pos) {\n\t\t\t\tpos = this.position;\n\t\t\t}\n\n\t\t\tvar mod = d === \"absolute\" ? 1 : -1,\n\t\t\t    scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n\n\t\t\treturn {\n\t\t\t\ttop: pos.top + // The absolute mouse position\n\t\t\t\tthis.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)\n\t\t\t\t(this.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,\n\t\t\t\tleft: pos.left + // The absolute mouse position\n\t\t\t\tthis.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)\n\t\t\t\t(this.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod\n\t\t\t};\n\t\t},\n\n\t\t_generatePosition: function _generatePosition(event, constrainPosition) {\n\n\t\t\tvar containment,\n\t\t\t    co,\n\t\t\t    top,\n\t\t\t    left,\n\t\t\t    o = this.options,\n\t\t\t    scrollIsRootNode = this._isRootNode(this.scrollParent[0]),\n\t\t\t    pageX = event.pageX,\n\t\t\t    pageY = event.pageY;\n\n\t\t\t// Cache the scroll\n\t\t\tif (!scrollIsRootNode || !this.offset.scroll) {\n\t\t\t\tthis.offset.scroll = {\n\t\t\t\t\ttop: this.scrollParent.scrollTop(),\n\t\t\t\t\tleft: this.scrollParent.scrollLeft()\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/*\n    * - Position constraining -\n    * Constrain the position to a mix of grid, containment.\n    */\n\n\t\t\t// If we are not dragging yet, we won't check for options\n\t\t\tif (constrainPosition) {\n\t\t\t\tif (this.containment) {\n\t\t\t\t\tif (this.relativeContainer) {\n\t\t\t\t\t\tco = this.relativeContainer.offset();\n\t\t\t\t\t\tcontainment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainment = this.containment;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (event.pageX - this.offset.click.left < containment[0]) {\n\t\t\t\t\t\tpageX = containment[0] + this.offset.click.left;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.pageY - this.offset.click.top < containment[1]) {\n\t\t\t\t\t\tpageY = containment[1] + this.offset.click.top;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.pageX - this.offset.click.left > containment[2]) {\n\t\t\t\t\t\tpageX = containment[2] + this.offset.click.left;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.pageY - this.offset.click.top > containment[3]) {\n\t\t\t\t\t\tpageY = containment[3] + this.offset.click.top;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (o.grid) {\n\t\t\t\t\t//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)\n\t\t\t\t\ttop = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;\n\t\t\t\t\tpageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n\n\t\t\t\t\tleft = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;\n\t\t\t\t\tpageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n\t\t\t\t}\n\n\t\t\t\tif (o.axis === \"y\") {\n\t\t\t\t\tpageX = this.originalPageX;\n\t\t\t\t}\n\n\t\t\t\tif (o.axis === \"x\") {\n\t\t\t\t\tpageY = this.originalPageY;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttop: pageY - // The absolute mouse position\n\t\t\t\tthis.offset.click.top - // Click offset (relative to the element)\n\t\t\t\tthis.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)\n\t\t\t\tthis.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),\n\t\t\t\tleft: pageX - // The absolute mouse position\n\t\t\t\tthis.offset.click.left - // Click offset (relative to the element)\n\t\t\t\tthis.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)\n\t\t\t\tthis.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)\n\t\t\t};\n\t\t},\n\n\t\t_clear: function _clear() {\n\t\t\tthis.helper.removeClass(\"ui-draggable-dragging\");\n\t\t\tif (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {\n\t\t\t\tthis.helper.remove();\n\t\t\t}\n\t\t\tthis.helper = null;\n\t\t\tthis.cancelHelperRemoval = false;\n\t\t\tif (this.destroyOnClear) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t},\n\n\t\t_normalizeRightBottom: function _normalizeRightBottom() {\n\t\t\tif (this.options.axis !== \"y\" && this.helper.css(\"right\") !== \"auto\") {\n\t\t\t\tthis.helper.width(this.helper.width());\n\t\t\t\tthis.helper.css(\"right\", \"auto\");\n\t\t\t}\n\t\t\tif (this.options.axis !== \"x\" && this.helper.css(\"bottom\") !== \"auto\") {\n\t\t\t\tthis.helper.height(this.helper.height());\n\t\t\t\tthis.helper.css(\"bottom\", \"auto\");\n\t\t\t}\n\t\t},\n\n\t\t// From now on bulk stuff - mainly helpers\n\n\t\t_trigger: function _trigger(type, event, ui) {\n\t\t\tui = ui || this._uiHash();\n\t\t\t$.ui.plugin.call(this, type, [event, ui, this], true);\n\n\t\t\t// Absolute position and offset (see #6884 ) have to be recalculated after plugins\n\t\t\tif (/^(drag|start|stop)/.test(type)) {\n\t\t\t\tthis.positionAbs = this._convertPositionTo(\"absolute\");\n\t\t\t\tui.offset = this.positionAbs;\n\t\t\t}\n\t\t\treturn $.Widget.prototype._trigger.call(this, type, event, ui);\n\t\t},\n\n\t\tplugins: {},\n\n\t\t_uiHash: function _uiHash() {\n\t\t\treturn {\n\t\t\t\thelper: this.helper,\n\t\t\t\tposition: this.position,\n\t\t\t\toriginalPosition: this.originalPosition,\n\t\t\t\toffset: this.positionAbs\n\t\t\t};\n\t\t}\n\n\t});\n\n\t$.ui.plugin.add(\"draggable\", \"connectToSortable\", {\n\t\tstart: function start(event, ui, draggable) {\n\t\t\tvar uiSortable = $.extend({}, ui, {\n\t\t\t\titem: draggable.element\n\t\t\t});\n\n\t\t\tdraggable.sortables = [];\n\t\t\t$(draggable.options.connectToSortable).each(function () {\n\t\t\t\tvar sortable = $(this).sortable(\"instance\");\n\n\t\t\t\tif (sortable && !sortable.options.disabled) {\n\t\t\t\t\tdraggable.sortables.push(sortable);\n\n\t\t\t\t\t// refreshPositions is called at drag start to refresh the containerCache\n\t\t\t\t\t// which is used in drag. This ensures it's initialized and synchronized\n\t\t\t\t\t// with any changes that might have happened on the page since initialization.\n\t\t\t\t\tsortable.refreshPositions();\n\t\t\t\t\tsortable._trigger(\"activate\", event, uiSortable);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tstop: function stop(event, ui, draggable) {\n\t\t\tvar uiSortable = $.extend({}, ui, {\n\t\t\t\titem: draggable.element\n\t\t\t});\n\n\t\t\tdraggable.cancelHelperRemoval = false;\n\n\t\t\t$.each(draggable.sortables, function () {\n\t\t\t\tvar sortable = this;\n\n\t\t\t\tif (sortable.isOver) {\n\t\t\t\t\tsortable.isOver = 0;\n\n\t\t\t\t\t// Allow this sortable to handle removing the helper\n\t\t\t\t\tdraggable.cancelHelperRemoval = true;\n\t\t\t\t\tsortable.cancelHelperRemoval = false;\n\n\t\t\t\t\t// Use _storedCSS To restore properties in the sortable,\n\t\t\t\t\t// as this also handles revert (#9675) since the draggable\n\t\t\t\t\t// may have modified them in unexpected ways (#8809)\n\t\t\t\t\tsortable._storedCSS = {\n\t\t\t\t\t\tposition: sortable.placeholder.css(\"position\"),\n\t\t\t\t\t\ttop: sortable.placeholder.css(\"top\"),\n\t\t\t\t\t\tleft: sortable.placeholder.css(\"left\")\n\t\t\t\t\t};\n\n\t\t\t\t\tsortable._mouseStop(event);\n\n\t\t\t\t\t// Once drag has ended, the sortable should return to using\n\t\t\t\t\t// its original helper, not the shared helper from draggable\n\t\t\t\t\tsortable.options.helper = sortable.options._helper;\n\t\t\t\t} else {\n\t\t\t\t\t// Prevent this Sortable from removing the helper.\n\t\t\t\t\t// However, don't set the draggable to remove the helper\n\t\t\t\t\t// either as another connected Sortable may yet handle the removal.\n\t\t\t\t\tsortable.cancelHelperRemoval = true;\n\n\t\t\t\t\tsortable._trigger(\"deactivate\", event, uiSortable);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdrag: function drag(event, ui, draggable) {\n\t\t\t$.each(draggable.sortables, function () {\n\t\t\t\tvar innermostIntersecting = false,\n\t\t\t\t    sortable = this;\n\n\t\t\t\t// Copy over variables that sortable's _intersectsWith uses\n\t\t\t\tsortable.positionAbs = draggable.positionAbs;\n\t\t\t\tsortable.helperProportions = draggable.helperProportions;\n\t\t\t\tsortable.offset.click = draggable.offset.click;\n\n\t\t\t\tif (sortable._intersectsWith(sortable.containerCache)) {\n\t\t\t\t\tinnermostIntersecting = true;\n\n\t\t\t\t\t$.each(draggable.sortables, function () {\n\t\t\t\t\t\t// Copy over variables that sortable's _intersectsWith uses\n\t\t\t\t\t\tthis.positionAbs = draggable.positionAbs;\n\t\t\t\t\t\tthis.helperProportions = draggable.helperProportions;\n\t\t\t\t\t\tthis.offset.click = draggable.offset.click;\n\n\t\t\t\t\t\tif (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {\n\t\t\t\t\t\t\tinnermostIntersecting = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn innermostIntersecting;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (innermostIntersecting) {\n\t\t\t\t\t// If it intersects, we use a little isOver variable and set it once,\n\t\t\t\t\t// so that the move-in stuff gets fired only once.\n\t\t\t\t\tif (!sortable.isOver) {\n\t\t\t\t\t\tsortable.isOver = 1;\n\n\t\t\t\t\t\t// Store draggable's parent in case we need to reappend to it later.\n\t\t\t\t\t\tdraggable._parent = ui.helper.parent();\n\n\t\t\t\t\t\tsortable.currentItem = ui.helper.appendTo(sortable.element).data(\"ui-sortable-item\", true);\n\n\t\t\t\t\t\t// Store helper option to later restore it\n\t\t\t\t\t\tsortable.options._helper = sortable.options.helper;\n\n\t\t\t\t\t\tsortable.options.helper = function () {\n\t\t\t\t\t\t\treturn ui.helper[0];\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Fire the start events of the sortable with our passed browser event,\n\t\t\t\t\t\t// and our own helper (so it doesn't create a new one)\n\t\t\t\t\t\tevent.target = sortable.currentItem[0];\n\t\t\t\t\t\tsortable._mouseCapture(event, true);\n\t\t\t\t\t\tsortable._mouseStart(event, true, true);\n\n\t\t\t\t\t\t// Because the browser event is way off the new appended portlet,\n\t\t\t\t\t\t// modify necessary variables to reflect the changes\n\t\t\t\t\t\tsortable.offset.click.top = draggable.offset.click.top;\n\t\t\t\t\t\tsortable.offset.click.left = draggable.offset.click.left;\n\t\t\t\t\t\tsortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;\n\t\t\t\t\t\tsortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;\n\n\t\t\t\t\t\tdraggable._trigger(\"toSortable\", event);\n\n\t\t\t\t\t\t// Inform draggable that the helper is in a valid drop zone,\n\t\t\t\t\t\t// used solely in the revert option to handle \"valid/invalid\".\n\t\t\t\t\t\tdraggable.dropped = sortable.element;\n\n\t\t\t\t\t\t// Need to refreshPositions of all sortables in the case that\n\t\t\t\t\t\t// adding to one sortable changes the location of the other sortables (#9675)\n\t\t\t\t\t\t$.each(draggable.sortables, function () {\n\t\t\t\t\t\t\tthis.refreshPositions();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// hack so receive/update callbacks work (mostly)\n\t\t\t\t\t\tdraggable.currentItem = draggable.element;\n\t\t\t\t\t\tsortable.fromOutside = draggable;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sortable.currentItem) {\n\t\t\t\t\t\tsortable._mouseDrag(event);\n\t\t\t\t\t\t// Copy the sortable's position because the draggable's can potentially reflect\n\t\t\t\t\t\t// a relative position, while sortable is always absolute, which the dragged\n\t\t\t\t\t\t// element has now become. (#8809)\n\t\t\t\t\t\tui.position = sortable.position;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If it doesn't intersect with the sortable, and it intersected before,\n\t\t\t\t\t// we fake the drag stop of the sortable, but make sure it doesn't remove\n\t\t\t\t\t// the helper by using cancelHelperRemoval.\n\t\t\t\t\tif (sortable.isOver) {\n\n\t\t\t\t\t\tsortable.isOver = 0;\n\t\t\t\t\t\tsortable.cancelHelperRemoval = true;\n\n\t\t\t\t\t\t// Calling sortable's mouseStop would trigger a revert,\n\t\t\t\t\t\t// so revert must be temporarily false until after mouseStop is called.\n\t\t\t\t\t\tsortable.options._revert = sortable.options.revert;\n\t\t\t\t\t\tsortable.options.revert = false;\n\n\t\t\t\t\t\tsortable._trigger(\"out\", event, sortable._uiHash(sortable));\n\t\t\t\t\t\tsortable._mouseStop(event, true);\n\n\t\t\t\t\t\t// restore sortable behaviors that were modfied\n\t\t\t\t\t\t// when the draggable entered the sortable area (#9481)\n\t\t\t\t\t\tsortable.options.revert = sortable.options._revert;\n\t\t\t\t\t\tsortable.options.helper = sortable.options._helper;\n\n\t\t\t\t\t\tif (sortable.placeholder) {\n\t\t\t\t\t\t\tsortable.placeholder.remove();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Restore and recalculate the draggable's offset considering the sortable\n\t\t\t\t\t\t// may have modified them in unexpected ways. (#8809, #10669)\n\t\t\t\t\t\tui.helper.appendTo(draggable._parent);\n\t\t\t\t\t\tdraggable._refreshOffsets(event);\n\t\t\t\t\t\tui.position = draggable._generatePosition(event, true);\n\n\t\t\t\t\t\tdraggable._trigger(\"fromSortable\", event);\n\n\t\t\t\t\t\t// Inform draggable that the helper is no longer in a valid drop zone\n\t\t\t\t\t\tdraggable.dropped = false;\n\n\t\t\t\t\t\t// Need to refreshPositions of all sortables just in case removing\n\t\t\t\t\t\t// from one sortable changes the location of other sortables (#9675)\n\t\t\t\t\t\t$.each(draggable.sortables, function () {\n\t\t\t\t\t\t\tthis.refreshPositions();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"draggable\", \"cursor\", {\n\t\tstart: function start(event, ui, instance) {\n\t\t\tvar t = $(\"body\"),\n\t\t\t    o = instance.options;\n\n\t\t\tif (t.css(\"cursor\")) {\n\t\t\t\to._cursor = t.css(\"cursor\");\n\t\t\t}\n\t\t\tt.css(\"cursor\", o.cursor);\n\t\t},\n\t\tstop: function stop(event, ui, instance) {\n\t\t\tvar o = instance.options;\n\t\t\tif (o._cursor) {\n\t\t\t\t$(\"body\").css(\"cursor\", o._cursor);\n\t\t\t}\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"draggable\", \"opacity\", {\n\t\tstart: function start(event, ui, instance) {\n\t\t\tvar t = $(ui.helper),\n\t\t\t    o = instance.options;\n\t\t\tif (t.css(\"opacity\")) {\n\t\t\t\to._opacity = t.css(\"opacity\");\n\t\t\t}\n\t\t\tt.css(\"opacity\", o.opacity);\n\t\t},\n\t\tstop: function stop(event, ui, instance) {\n\t\t\tvar o = instance.options;\n\t\t\tif (o._opacity) {\n\t\t\t\t$(ui.helper).css(\"opacity\", o._opacity);\n\t\t\t}\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"draggable\", \"scroll\", {\n\t\tstart: function start(event, ui, i) {\n\t\t\tif (!i.scrollParentNotHidden) {\n\t\t\t\ti.scrollParentNotHidden = i.helper.scrollParent(false);\n\t\t\t}\n\n\t\t\tif (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== \"HTML\") {\n\t\t\t\ti.overflowOffset = i.scrollParentNotHidden.offset();\n\t\t\t}\n\t\t},\n\t\tdrag: function drag(event, ui, i) {\n\n\t\t\tvar o = i.options,\n\t\t\t    scrolled = false,\n\t\t\t    scrollParent = i.scrollParentNotHidden[0],\n\t\t\t    document = i.document[0];\n\n\t\t\tif (scrollParent !== document && scrollParent.tagName !== \"HTML\") {\n\t\t\t\tif (!o.axis || o.axis !== \"x\") {\n\t\t\t\t\tif (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {\n\t\t\t\t\t\tscrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;\n\t\t\t\t\t} else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {\n\t\t\t\t\t\tscrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!o.axis || o.axis !== \"y\") {\n\t\t\t\t\tif (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {\n\t\t\t\t\t\tscrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;\n\t\t\t\t\t} else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {\n\t\t\t\t\t\tscrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (!o.axis || o.axis !== \"x\") {\n\t\t\t\t\tif (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\n\t\t\t\t\t} else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!o.axis || o.axis !== \"y\") {\n\t\t\t\t\tif (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\n\t\t\t\t\t} else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n\t\t\t\t$.ui.ddmanager.prepareOffsets(i, event);\n\t\t\t}\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"draggable\", \"snap\", {\n\t\tstart: function start(event, ui, i) {\n\n\t\t\tvar o = i.options;\n\n\t\t\ti.snapElements = [];\n\n\t\t\t$(o.snap.constructor !== String ? o.snap.items || \":data(ui-draggable)\" : o.snap).each(function () {\n\t\t\t\tvar $t = $(this),\n\t\t\t\t    $o = $t.offset();\n\t\t\t\tif (this !== i.element[0]) {\n\t\t\t\t\ti.snapElements.push({\n\t\t\t\t\t\titem: this,\n\t\t\t\t\t\twidth: $t.outerWidth(), height: $t.outerHeight(),\n\t\t\t\t\t\ttop: $o.top, left: $o.left\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdrag: function drag(event, ui, inst) {\n\n\t\t\tvar ts,\n\t\t\t    bs,\n\t\t\t    ls,\n\t\t\t    rs,\n\t\t\t    l,\n\t\t\t    r,\n\t\t\t    t,\n\t\t\t    b,\n\t\t\t    i,\n\t\t\t    first,\n\t\t\t    o = inst.options,\n\t\t\t    d = o.snapTolerance,\n\t\t\t    x1 = ui.offset.left,\n\t\t\t    x2 = x1 + inst.helperProportions.width,\n\t\t\t    y1 = ui.offset.top,\n\t\t\t    y2 = y1 + inst.helperProportions.height;\n\n\t\t\tfor (i = inst.snapElements.length - 1; i >= 0; i--) {\n\n\t\t\t\tl = inst.snapElements[i].left - inst.margins.left;\n\t\t\t\tr = l + inst.snapElements[i].width;\n\t\t\t\tt = inst.snapElements[i].top - inst.margins.top;\n\t\t\t\tb = t + inst.snapElements[i].height;\n\n\t\t\t\tif (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {\n\t\t\t\t\tif (inst.snapElements[i].snapping) {\n\t\t\t\t\t\tinst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }));\n\t\t\t\t\t}\n\t\t\t\t\tinst.snapElements[i].snapping = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (o.snapMode !== \"inner\") {\n\t\t\t\t\tts = Math.abs(t - y2) <= d;\n\t\t\t\t\tbs = Math.abs(b - y1) <= d;\n\t\t\t\t\tls = Math.abs(l - x2) <= d;\n\t\t\t\t\trs = Math.abs(r - x1) <= d;\n\t\t\t\t\tif (ts) {\n\t\t\t\t\t\tui.position.top = inst._convertPositionTo(\"relative\", { top: t - inst.helperProportions.height, left: 0 }).top;\n\t\t\t\t\t}\n\t\t\t\t\tif (bs) {\n\t\t\t\t\t\tui.position.top = inst._convertPositionTo(\"relative\", { top: b, left: 0 }).top;\n\t\t\t\t\t}\n\t\t\t\t\tif (ls) {\n\t\t\t\t\t\tui.position.left = inst._convertPositionTo(\"relative\", { top: 0, left: l - inst.helperProportions.width }).left;\n\t\t\t\t\t}\n\t\t\t\t\tif (rs) {\n\t\t\t\t\t\tui.position.left = inst._convertPositionTo(\"relative\", { top: 0, left: r }).left;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfirst = ts || bs || ls || rs;\n\n\t\t\t\tif (o.snapMode !== \"outer\") {\n\t\t\t\t\tts = Math.abs(t - y1) <= d;\n\t\t\t\t\tbs = Math.abs(b - y2) <= d;\n\t\t\t\t\tls = Math.abs(l - x1) <= d;\n\t\t\t\t\trs = Math.abs(r - x2) <= d;\n\t\t\t\t\tif (ts) {\n\t\t\t\t\t\tui.position.top = inst._convertPositionTo(\"relative\", { top: t, left: 0 }).top;\n\t\t\t\t\t}\n\t\t\t\t\tif (bs) {\n\t\t\t\t\t\tui.position.top = inst._convertPositionTo(\"relative\", { top: b - inst.helperProportions.height, left: 0 }).top;\n\t\t\t\t\t}\n\t\t\t\t\tif (ls) {\n\t\t\t\t\t\tui.position.left = inst._convertPositionTo(\"relative\", { top: 0, left: l }).left;\n\t\t\t\t\t}\n\t\t\t\t\tif (rs) {\n\t\t\t\t\t\tui.position.left = inst._convertPositionTo(\"relative\", { top: 0, left: r - inst.helperProportions.width }).left;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {\n\t\t\t\t\tinst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }));\n\t\t\t\t}\n\t\t\t\tinst.snapElements[i].snapping = ts || bs || ls || rs || first;\n\t\t\t}\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"draggable\", \"stack\", {\n\t\tstart: function start(event, ui, instance) {\n\t\t\tvar min,\n\t\t\t    o = instance.options,\n\t\t\t    group = $.makeArray($(o.stack)).sort(function (a, b) {\n\t\t\t\treturn (parseInt($(a).css(\"zIndex\"), 10) || 0) - (parseInt($(b).css(\"zIndex\"), 10) || 0);\n\t\t\t});\n\n\t\t\tif (!group.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmin = parseInt($(group[0]).css(\"zIndex\"), 10) || 0;\n\t\t\t$(group).each(function (i) {\n\t\t\t\t$(this).css(\"zIndex\", min + i);\n\t\t\t});\n\t\t\tthis.css(\"zIndex\", min + group.length);\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"draggable\", \"zIndex\", {\n\t\tstart: function start(event, ui, instance) {\n\t\t\tvar t = $(ui.helper),\n\t\t\t    o = instance.options;\n\n\t\t\tif (t.css(\"zIndex\")) {\n\t\t\t\to._zIndex = t.css(\"zIndex\");\n\t\t\t}\n\t\t\tt.css(\"zIndex\", o.zIndex);\n\t\t},\n\t\tstop: function stop(event, ui, instance) {\n\t\t\tvar o = instance.options;\n\n\t\t\tif (o._zIndex) {\n\t\t\t\t$(ui.helper).css(\"zIndex\", o._zIndex);\n\t\t\t}\n\t\t}\n\t});\n\n\tvar draggable = $.ui.draggable;\n\n\t/*!\n  * jQuery UI Resizable 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/resizable/\n  */\n\n\t$.widget(\"ui.resizable\", $.ui.mouse, {\n\t\tversion: \"1.11.4\",\n\t\twidgetEventPrefix: \"resize\",\n\t\toptions: {\n\t\t\talsoResize: false,\n\t\t\tanimate: false,\n\t\t\tanimateDuration: \"slow\",\n\t\t\tanimateEasing: \"swing\",\n\t\t\taspectRatio: false,\n\t\t\tautoHide: false,\n\t\t\tcontainment: false,\n\t\t\tghost: false,\n\t\t\tgrid: false,\n\t\t\thandles: \"e,s,se\",\n\t\t\thelper: false,\n\t\t\tmaxHeight: null,\n\t\t\tmaxWidth: null,\n\t\t\tminHeight: 10,\n\t\t\tminWidth: 10,\n\t\t\t// See #7960\n\t\t\tzIndex: 90,\n\n\t\t\t// callbacks\n\t\t\tresize: null,\n\t\t\tstart: null,\n\t\t\tstop: null\n\t\t},\n\n\t\t_num: function _num(value) {\n\t\t\treturn parseInt(value, 10) || 0;\n\t\t},\n\n\t\t_isNumber: function _isNumber(value) {\n\t\t\treturn !isNaN(parseInt(value, 10));\n\t\t},\n\n\t\t_hasScroll: function _hasScroll(el, a) {\n\n\t\t\tif ($(el).css(\"overflow\") === \"hidden\") {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar scroll = a && a === \"left\" ? \"scrollLeft\" : \"scrollTop\",\n\t\t\t    has = false;\n\n\t\t\tif (el[scroll] > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// TODO: determine which cases actually cause this to happen\n\t\t\t// if the element doesn't have the scroll set, see if it's possible to\n\t\t\t// set the scroll\n\t\t\tel[scroll] = 1;\n\t\t\thas = el[scroll] > 0;\n\t\t\tel[scroll] = 0;\n\t\t\treturn has;\n\t\t},\n\n\t\t_create: function _create() {\n\n\t\t\tvar n,\n\t\t\t    i,\n\t\t\t    handle,\n\t\t\t    axis,\n\t\t\t    hname,\n\t\t\t    that = this,\n\t\t\t    o = this.options;\n\t\t\tthis.element.addClass(\"ui-resizable\");\n\n\t\t\t$.extend(this, {\n\t\t\t\t_aspectRatio: !!o.aspectRatio,\n\t\t\t\taspectRatio: o.aspectRatio,\n\t\t\t\toriginalElement: this.element,\n\t\t\t\t_proportionallyResizeElements: [],\n\t\t\t\t_helper: o.helper || o.ghost || o.animate ? o.helper || \"ui-resizable-helper\" : null\n\t\t\t});\n\n\t\t\t// Wrap the element if it cannot hold child nodes\n\t\t\tif (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {\n\n\t\t\t\tthis.element.wrap($(\"<div class='ui-wrapper' style='overflow: hidden;'></div>\").css({\n\t\t\t\t\tposition: this.element.css(\"position\"),\n\t\t\t\t\twidth: this.element.outerWidth(),\n\t\t\t\t\theight: this.element.outerHeight(),\n\t\t\t\t\ttop: this.element.css(\"top\"),\n\t\t\t\t\tleft: this.element.css(\"left\")\n\t\t\t\t}));\n\n\t\t\t\tthis.element = this.element.parent().data(\"ui-resizable\", this.element.resizable(\"instance\"));\n\n\t\t\t\tthis.elementIsWrapper = true;\n\n\t\t\t\tthis.element.css({\n\t\t\t\t\tmarginLeft: this.originalElement.css(\"marginLeft\"),\n\t\t\t\t\tmarginTop: this.originalElement.css(\"marginTop\"),\n\t\t\t\t\tmarginRight: this.originalElement.css(\"marginRight\"),\n\t\t\t\t\tmarginBottom: this.originalElement.css(\"marginBottom\")\n\t\t\t\t});\n\t\t\t\tthis.originalElement.css({\n\t\t\t\t\tmarginLeft: 0,\n\t\t\t\t\tmarginTop: 0,\n\t\t\t\t\tmarginRight: 0,\n\t\t\t\t\tmarginBottom: 0\n\t\t\t\t});\n\t\t\t\t// support: Safari\n\t\t\t\t// Prevent Safari textarea resize\n\t\t\t\tthis.originalResizeStyle = this.originalElement.css(\"resize\");\n\t\t\t\tthis.originalElement.css(\"resize\", \"none\");\n\n\t\t\t\tthis._proportionallyResizeElements.push(this.originalElement.css({\n\t\t\t\t\tposition: \"static\",\n\t\t\t\t\tzoom: 1,\n\t\t\t\t\tdisplay: \"block\"\n\t\t\t\t}));\n\n\t\t\t\t// support: IE9\n\t\t\t\t// avoid IE jump (hard set the margin)\n\t\t\t\tthis.originalElement.css({ margin: this.originalElement.css(\"margin\") });\n\n\t\t\t\tthis._proportionallyResize();\n\t\t\t}\n\n\t\t\tthis.handles = o.handles || (!$(\".ui-resizable-handle\", this.element).length ? \"e,s,se\" : {\n\t\t\t\tn: \".ui-resizable-n\",\n\t\t\t\te: \".ui-resizable-e\",\n\t\t\t\ts: \".ui-resizable-s\",\n\t\t\t\tw: \".ui-resizable-w\",\n\t\t\t\tse: \".ui-resizable-se\",\n\t\t\t\tsw: \".ui-resizable-sw\",\n\t\t\t\tne: \".ui-resizable-ne\",\n\t\t\t\tnw: \".ui-resizable-nw\"\n\t\t\t});\n\n\t\t\tthis._handles = $();\n\t\t\tif (this.handles.constructor === String) {\n\n\t\t\t\tif (this.handles === \"all\") {\n\t\t\t\t\tthis.handles = \"n,e,s,w,se,sw,ne,nw\";\n\t\t\t\t}\n\n\t\t\t\tn = this.handles.split(\",\");\n\t\t\t\tthis.handles = {};\n\n\t\t\t\tfor (i = 0; i < n.length; i++) {\n\n\t\t\t\t\thandle = $.trim(n[i]);\n\t\t\t\t\thname = \"ui-resizable-\" + handle;\n\t\t\t\t\taxis = $(\"<div class='ui-resizable-handle \" + hname + \"'></div>\");\n\n\t\t\t\t\taxis.css({ zIndex: o.zIndex });\n\n\t\t\t\t\t// TODO : What's going on here?\n\t\t\t\t\tif (\"se\" === handle) {\n\t\t\t\t\t\taxis.addClass(\"ui-icon ui-icon-gripsmall-diagonal-se\");\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.handles[handle] = \".ui-resizable-\" + handle;\n\t\t\t\t\tthis.element.append(axis);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._renderAxis = function (target) {\n\n\t\t\t\tvar i, axis, padPos, padWrapper;\n\n\t\t\t\ttarget = target || this.element;\n\n\t\t\t\tfor (i in this.handles) {\n\n\t\t\t\t\tif (this.handles[i].constructor === String) {\n\t\t\t\t\t\tthis.handles[i] = this.element.children(this.handles[i]).first().show();\n\t\t\t\t\t} else if (this.handles[i].jquery || this.handles[i].nodeType) {\n\t\t\t\t\t\tthis.handles[i] = $(this.handles[i]);\n\t\t\t\t\t\tthis._on(this.handles[i], { \"mousedown\": that._mouseDown });\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {\n\n\t\t\t\t\t\taxis = $(this.handles[i], this.element);\n\n\t\t\t\t\t\tpadWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();\n\n\t\t\t\t\t\tpadPos = [\"padding\", /ne|nw|n/.test(i) ? \"Top\" : /se|sw|s/.test(i) ? \"Bottom\" : /^e$/.test(i) ? \"Right\" : \"Left\"].join(\"\");\n\n\t\t\t\t\t\ttarget.css(padPos, padWrapper);\n\n\t\t\t\t\t\tthis._proportionallyResize();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._handles = this._handles.add(this.handles[i]);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// TODO: make renderAxis a prototype function\n\t\t\tthis._renderAxis(this.element);\n\n\t\t\tthis._handles = this._handles.add(this.element.find(\".ui-resizable-handle\"));\n\t\t\tthis._handles.disableSelection();\n\n\t\t\tthis._handles.mouseover(function () {\n\t\t\t\tif (!that.resizing) {\n\t\t\t\t\tif (this.className) {\n\t\t\t\t\t\taxis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);\n\t\t\t\t\t}\n\t\t\t\t\tthat.axis = axis && axis[1] ? axis[1] : \"se\";\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (o.autoHide) {\n\t\t\t\tthis._handles.hide();\n\t\t\t\t$(this.element).addClass(\"ui-resizable-autohide\").mouseenter(function () {\n\t\t\t\t\tif (o.disabled) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t$(this).removeClass(\"ui-resizable-autohide\");\n\t\t\t\t\tthat._handles.show();\n\t\t\t\t}).mouseleave(function () {\n\t\t\t\t\tif (o.disabled) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!that.resizing) {\n\t\t\t\t\t\t$(this).addClass(\"ui-resizable-autohide\");\n\t\t\t\t\t\tthat._handles.hide();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._mouseInit();\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\n\t\t\tthis._mouseDestroy();\n\n\t\t\tvar wrapper,\n\t\t\t    _destroy = function _destroy(exp) {\n\t\t\t\t$(exp).removeClass(\"ui-resizable ui-resizable-disabled ui-resizable-resizing\").removeData(\"resizable\").removeData(\"ui-resizable\").unbind(\".resizable\").find(\".ui-resizable-handle\").remove();\n\t\t\t};\n\n\t\t\t// TODO: Unwrap at same DOM position\n\t\t\tif (this.elementIsWrapper) {\n\t\t\t\t_destroy(this.element);\n\t\t\t\twrapper = this.element;\n\t\t\t\tthis.originalElement.css({\n\t\t\t\t\tposition: wrapper.css(\"position\"),\n\t\t\t\t\twidth: wrapper.outerWidth(),\n\t\t\t\t\theight: wrapper.outerHeight(),\n\t\t\t\t\ttop: wrapper.css(\"top\"),\n\t\t\t\t\tleft: wrapper.css(\"left\")\n\t\t\t\t}).insertAfter(wrapper);\n\t\t\t\twrapper.remove();\n\t\t\t}\n\n\t\t\tthis.originalElement.css(\"resize\", this.originalResizeStyle);\n\t\t\t_destroy(this.originalElement);\n\n\t\t\treturn this;\n\t\t},\n\n\t\t_mouseCapture: function _mouseCapture(event) {\n\t\t\tvar i,\n\t\t\t    handle,\n\t\t\t    capture = false;\n\n\t\t\tfor (i in this.handles) {\n\t\t\t\thandle = $(this.handles[i])[0];\n\t\t\t\tif (handle === event.target || $.contains(handle, event.target)) {\n\t\t\t\t\tcapture = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn !this.options.disabled && capture;\n\t\t},\n\n\t\t_mouseStart: function _mouseStart(event) {\n\n\t\t\tvar curleft,\n\t\t\t    curtop,\n\t\t\t    cursor,\n\t\t\t    o = this.options,\n\t\t\t    el = this.element;\n\n\t\t\tthis.resizing = true;\n\n\t\t\tthis._renderProxy();\n\n\t\t\tcurleft = this._num(this.helper.css(\"left\"));\n\t\t\tcurtop = this._num(this.helper.css(\"top\"));\n\n\t\t\tif (o.containment) {\n\t\t\t\tcurleft += $(o.containment).scrollLeft() || 0;\n\t\t\t\tcurtop += $(o.containment).scrollTop() || 0;\n\t\t\t}\n\n\t\t\tthis.offset = this.helper.offset();\n\t\t\tthis.position = { left: curleft, top: curtop };\n\n\t\t\tthis.size = this._helper ? {\n\t\t\t\twidth: this.helper.width(),\n\t\t\t\theight: this.helper.height()\n\t\t\t} : {\n\t\t\t\twidth: el.width(),\n\t\t\t\theight: el.height()\n\t\t\t};\n\n\t\t\tthis.originalSize = this._helper ? {\n\t\t\t\twidth: el.outerWidth(),\n\t\t\t\theight: el.outerHeight()\n\t\t\t} : {\n\t\t\t\twidth: el.width(),\n\t\t\t\theight: el.height()\n\t\t\t};\n\n\t\t\tthis.sizeDiff = {\n\t\t\t\twidth: el.outerWidth() - el.width(),\n\t\t\t\theight: el.outerHeight() - el.height()\n\t\t\t};\n\n\t\t\tthis.originalPosition = { left: curleft, top: curtop };\n\t\t\tthis.originalMousePosition = { left: event.pageX, top: event.pageY };\n\n\t\t\tthis.aspectRatio = typeof o.aspectRatio === \"number\" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;\n\n\t\t\tcursor = $(\".ui-resizable-\" + this.axis).css(\"cursor\");\n\t\t\t$(\"body\").css(\"cursor\", cursor === \"auto\" ? this.axis + \"-resize\" : cursor);\n\n\t\t\tel.addClass(\"ui-resizable-resizing\");\n\t\t\tthis._propagate(\"start\", event);\n\t\t\treturn true;\n\t\t},\n\n\t\t_mouseDrag: function _mouseDrag(event) {\n\n\t\t\tvar data,\n\t\t\t    props,\n\t\t\t    smp = this.originalMousePosition,\n\t\t\t    a = this.axis,\n\t\t\t    dx = event.pageX - smp.left || 0,\n\t\t\t    dy = event.pageY - smp.top || 0,\n\t\t\t    trigger = this._change[a];\n\n\t\t\tthis._updatePrevProperties();\n\n\t\t\tif (!trigger) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tdata = trigger.apply(this, [event, dx, dy]);\n\n\t\t\tthis._updateVirtualBoundaries(event.shiftKey);\n\t\t\tif (this._aspectRatio || event.shiftKey) {\n\t\t\t\tdata = this._updateRatio(data, event);\n\t\t\t}\n\n\t\t\tdata = this._respectSize(data, event);\n\n\t\t\tthis._updateCache(data);\n\n\t\t\tthis._propagate(\"resize\", event);\n\n\t\t\tprops = this._applyChanges();\n\n\t\t\tif (!this._helper && this._proportionallyResizeElements.length) {\n\t\t\t\tthis._proportionallyResize();\n\t\t\t}\n\n\t\t\tif (!$.isEmptyObject(props)) {\n\t\t\t\tthis._updatePrevProperties();\n\t\t\t\tthis._trigger(\"resize\", event, this.ui());\n\t\t\t\tthis._applyChanges();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_mouseStop: function _mouseStop(event) {\n\n\t\t\tthis.resizing = false;\n\t\t\tvar pr,\n\t\t\t    ista,\n\t\t\t    soffseth,\n\t\t\t    soffsetw,\n\t\t\t    s,\n\t\t\t    left,\n\t\t\t    top,\n\t\t\t    o = this.options,\n\t\t\t    that = this;\n\n\t\t\tif (this._helper) {\n\n\t\t\t\tpr = this._proportionallyResizeElements;\n\t\t\t\tista = pr.length && /textarea/i.test(pr[0].nodeName);\n\t\t\t\tsoffseth = ista && this._hasScroll(pr[0], \"left\") ? 0 : that.sizeDiff.height;\n\t\t\t\tsoffsetw = ista ? 0 : that.sizeDiff.width;\n\n\t\t\t\ts = {\n\t\t\t\t\twidth: that.helper.width() - soffsetw,\n\t\t\t\t\theight: that.helper.height() - soffseth\n\t\t\t\t};\n\t\t\t\tleft = parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left) || null;\n\t\t\t\ttop = parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top) || null;\n\n\t\t\t\tif (!o.animate) {\n\t\t\t\t\tthis.element.css($.extend(s, { top: top, left: left }));\n\t\t\t\t}\n\n\t\t\t\tthat.helper.height(that.size.height);\n\t\t\t\tthat.helper.width(that.size.width);\n\n\t\t\t\tif (this._helper && !o.animate) {\n\t\t\t\t\tthis._proportionallyResize();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$(\"body\").css(\"cursor\", \"auto\");\n\n\t\t\tthis.element.removeClass(\"ui-resizable-resizing\");\n\n\t\t\tthis._propagate(\"stop\", event);\n\n\t\t\tif (this._helper) {\n\t\t\t\tthis.helper.remove();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_updatePrevProperties: function _updatePrevProperties() {\n\t\t\tthis.prevPosition = {\n\t\t\t\ttop: this.position.top,\n\t\t\t\tleft: this.position.left\n\t\t\t};\n\t\t\tthis.prevSize = {\n\t\t\t\twidth: this.size.width,\n\t\t\t\theight: this.size.height\n\t\t\t};\n\t\t},\n\n\t\t_applyChanges: function _applyChanges() {\n\t\t\tvar props = {};\n\n\t\t\tif (this.position.top !== this.prevPosition.top) {\n\t\t\t\tprops.top = this.position.top + \"px\";\n\t\t\t}\n\t\t\tif (this.position.left !== this.prevPosition.left) {\n\t\t\t\tprops.left = this.position.left + \"px\";\n\t\t\t}\n\t\t\tif (this.size.width !== this.prevSize.width) {\n\t\t\t\tprops.width = this.size.width + \"px\";\n\t\t\t}\n\t\t\tif (this.size.height !== this.prevSize.height) {\n\t\t\t\tprops.height = this.size.height + \"px\";\n\t\t\t}\n\n\t\t\tthis.helper.css(props);\n\n\t\t\treturn props;\n\t\t},\n\n\t\t_updateVirtualBoundaries: function _updateVirtualBoundaries(forceAspectRatio) {\n\t\t\tvar pMinWidth,\n\t\t\t    pMaxWidth,\n\t\t\t    pMinHeight,\n\t\t\t    pMaxHeight,\n\t\t\t    b,\n\t\t\t    o = this.options;\n\n\t\t\tb = {\n\t\t\t\tminWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,\n\t\t\t\tmaxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,\n\t\t\t\tminHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,\n\t\t\t\tmaxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity\n\t\t\t};\n\n\t\t\tif (this._aspectRatio || forceAspectRatio) {\n\t\t\t\tpMinWidth = b.minHeight * this.aspectRatio;\n\t\t\t\tpMinHeight = b.minWidth / this.aspectRatio;\n\t\t\t\tpMaxWidth = b.maxHeight * this.aspectRatio;\n\t\t\t\tpMaxHeight = b.maxWidth / this.aspectRatio;\n\n\t\t\t\tif (pMinWidth > b.minWidth) {\n\t\t\t\t\tb.minWidth = pMinWidth;\n\t\t\t\t}\n\t\t\t\tif (pMinHeight > b.minHeight) {\n\t\t\t\t\tb.minHeight = pMinHeight;\n\t\t\t\t}\n\t\t\t\tif (pMaxWidth < b.maxWidth) {\n\t\t\t\t\tb.maxWidth = pMaxWidth;\n\t\t\t\t}\n\t\t\t\tif (pMaxHeight < b.maxHeight) {\n\t\t\t\t\tb.maxHeight = pMaxHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._vBoundaries = b;\n\t\t},\n\n\t\t_updateCache: function _updateCache(data) {\n\t\t\tthis.offset = this.helper.offset();\n\t\t\tif (this._isNumber(data.left)) {\n\t\t\t\tthis.position.left = data.left;\n\t\t\t}\n\t\t\tif (this._isNumber(data.top)) {\n\t\t\t\tthis.position.top = data.top;\n\t\t\t}\n\t\t\tif (this._isNumber(data.height)) {\n\t\t\t\tthis.size.height = data.height;\n\t\t\t}\n\t\t\tif (this._isNumber(data.width)) {\n\t\t\t\tthis.size.width = data.width;\n\t\t\t}\n\t\t},\n\n\t\t_updateRatio: function _updateRatio(data) {\n\n\t\t\tvar cpos = this.position,\n\t\t\t    csize = this.size,\n\t\t\t    a = this.axis;\n\n\t\t\tif (this._isNumber(data.height)) {\n\t\t\t\tdata.width = data.height * this.aspectRatio;\n\t\t\t} else if (this._isNumber(data.width)) {\n\t\t\t\tdata.height = data.width / this.aspectRatio;\n\t\t\t}\n\n\t\t\tif (a === \"sw\") {\n\t\t\t\tdata.left = cpos.left + (csize.width - data.width);\n\t\t\t\tdata.top = null;\n\t\t\t}\n\t\t\tif (a === \"nw\") {\n\t\t\t\tdata.top = cpos.top + (csize.height - data.height);\n\t\t\t\tdata.left = cpos.left + (csize.width - data.width);\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\n\t\t_respectSize: function _respectSize(data) {\n\n\t\t\tvar o = this._vBoundaries,\n\t\t\t    a = this.axis,\n\t\t\t    ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width,\n\t\t\t    ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height,\n\t\t\t    isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width,\n\t\t\t    isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height,\n\t\t\t    dw = this.originalPosition.left + this.originalSize.width,\n\t\t\t    dh = this.position.top + this.size.height,\n\t\t\t    cw = /sw|nw|w/.test(a),\n\t\t\t    ch = /nw|ne|n/.test(a);\n\t\t\tif (isminw) {\n\t\t\t\tdata.width = o.minWidth;\n\t\t\t}\n\t\t\tif (isminh) {\n\t\t\t\tdata.height = o.minHeight;\n\t\t\t}\n\t\t\tif (ismaxw) {\n\t\t\t\tdata.width = o.maxWidth;\n\t\t\t}\n\t\t\tif (ismaxh) {\n\t\t\t\tdata.height = o.maxHeight;\n\t\t\t}\n\n\t\t\tif (isminw && cw) {\n\t\t\t\tdata.left = dw - o.minWidth;\n\t\t\t}\n\t\t\tif (ismaxw && cw) {\n\t\t\t\tdata.left = dw - o.maxWidth;\n\t\t\t}\n\t\t\tif (isminh && ch) {\n\t\t\t\tdata.top = dh - o.minHeight;\n\t\t\t}\n\t\t\tif (ismaxh && ch) {\n\t\t\t\tdata.top = dh - o.maxHeight;\n\t\t\t}\n\n\t\t\t// Fixing jump error on top/left - bug #2330\n\t\t\tif (!data.width && !data.height && !data.left && data.top) {\n\t\t\t\tdata.top = null;\n\t\t\t} else if (!data.width && !data.height && !data.top && data.left) {\n\t\t\t\tdata.left = null;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\n\t\t_getPaddingPlusBorderDimensions: function _getPaddingPlusBorderDimensions(element) {\n\t\t\tvar i = 0,\n\t\t\t    widths = [],\n\t\t\t    borders = [element.css(\"borderTopWidth\"), element.css(\"borderRightWidth\"), element.css(\"borderBottomWidth\"), element.css(\"borderLeftWidth\")],\n\t\t\t    paddings = [element.css(\"paddingTop\"), element.css(\"paddingRight\"), element.css(\"paddingBottom\"), element.css(\"paddingLeft\")];\n\n\t\t\tfor (; i < 4; i++) {\n\t\t\t\twidths[i] = parseInt(borders[i], 10) || 0;\n\t\t\t\twidths[i] += parseInt(paddings[i], 10) || 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\theight: widths[0] + widths[2],\n\t\t\t\twidth: widths[1] + widths[3]\n\t\t\t};\n\t\t},\n\n\t\t_proportionallyResize: function _proportionallyResize() {\n\n\t\t\tif (!this._proportionallyResizeElements.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar prel,\n\t\t\t    i = 0,\n\t\t\t    element = this.helper || this.element;\n\n\t\t\tfor (; i < this._proportionallyResizeElements.length; i++) {\n\n\t\t\t\tprel = this._proportionallyResizeElements[i];\n\n\t\t\t\t// TODO: Seems like a bug to cache this.outerDimensions\n\t\t\t\t// considering that we are in a loop.\n\t\t\t\tif (!this.outerDimensions) {\n\t\t\t\t\tthis.outerDimensions = this._getPaddingPlusBorderDimensions(prel);\n\t\t\t\t}\n\n\t\t\t\tprel.css({\n\t\t\t\t\theight: element.height() - this.outerDimensions.height || 0,\n\t\t\t\t\twidth: element.width() - this.outerDimensions.width || 0\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t_renderProxy: function _renderProxy() {\n\n\t\t\tvar el = this.element,\n\t\t\t    o = this.options;\n\t\t\tthis.elementOffset = el.offset();\n\n\t\t\tif (this._helper) {\n\n\t\t\t\tthis.helper = this.helper || $(\"<div style='overflow:hidden;'></div>\");\n\n\t\t\t\tthis.helper.addClass(this._helper).css({\n\t\t\t\t\twidth: this.element.outerWidth() - 1,\n\t\t\t\t\theight: this.element.outerHeight() - 1,\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\tleft: this.elementOffset.left + \"px\",\n\t\t\t\t\ttop: this.elementOffset.top + \"px\",\n\t\t\t\t\tzIndex: ++o.zIndex //TODO: Don't modify option\n\t\t\t\t});\n\n\t\t\t\tthis.helper.appendTo(\"body\").disableSelection();\n\t\t\t} else {\n\t\t\t\tthis.helper = this.element;\n\t\t\t}\n\t\t},\n\n\t\t_change: {\n\t\t\te: function e(event, dx) {\n\t\t\t\treturn { width: this.originalSize.width + dx };\n\t\t\t},\n\t\t\tw: function w(event, dx) {\n\t\t\t\tvar cs = this.originalSize,\n\t\t\t\t    sp = this.originalPosition;\n\t\t\t\treturn { left: sp.left + dx, width: cs.width - dx };\n\t\t\t},\n\t\t\tn: function n(event, dx, dy) {\n\t\t\t\tvar cs = this.originalSize,\n\t\t\t\t    sp = this.originalPosition;\n\t\t\t\treturn { top: sp.top + dy, height: cs.height - dy };\n\t\t\t},\n\t\t\ts: function s(event, dx, dy) {\n\t\t\t\treturn { height: this.originalSize.height + dy };\n\t\t\t},\n\t\t\tse: function se(event, dx, dy) {\n\t\t\t\treturn $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n\t\t\t},\n\t\t\tsw: function sw(event, dx, dy) {\n\t\t\t\treturn $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n\t\t\t},\n\t\t\tne: function ne(event, dx, dy) {\n\t\t\t\treturn $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n\t\t\t},\n\t\t\tnw: function nw(event, dx, dy) {\n\t\t\t\treturn $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n\t\t\t}\n\t\t},\n\n\t\t_propagate: function _propagate(n, event) {\n\t\t\t$.ui.plugin.call(this, n, [event, this.ui()]);\n\t\t\tn !== \"resize\" && this._trigger(n, event, this.ui());\n\t\t},\n\n\t\tplugins: {},\n\n\t\tui: function ui() {\n\t\t\treturn {\n\t\t\t\toriginalElement: this.originalElement,\n\t\t\t\telement: this.element,\n\t\t\t\thelper: this.helper,\n\t\t\t\tposition: this.position,\n\t\t\t\tsize: this.size,\n\t\t\t\toriginalSize: this.originalSize,\n\t\t\t\toriginalPosition: this.originalPosition\n\t\t\t};\n\t\t}\n\n\t});\n\n\t/*\n  * Resizable Extensions\n  */\n\n\t$.ui.plugin.add(\"resizable\", \"animate\", {\n\n\t\tstop: function stop(event) {\n\t\t\tvar that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options,\n\t\t\t    pr = that._proportionallyResizeElements,\n\t\t\t    ista = pr.length && /textarea/i.test(pr[0].nodeName),\n\t\t\t    soffseth = ista && that._hasScroll(pr[0], \"left\") ? 0 : that.sizeDiff.height,\n\t\t\t    soffsetw = ista ? 0 : that.sizeDiff.width,\n\t\t\t    style = { width: that.size.width - soffsetw, height: that.size.height - soffseth },\n\t\t\t    left = parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left) || null,\n\t\t\t    top = parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top) || null;\n\n\t\t\tthat.element.animate($.extend(style, top && left ? { top: top, left: left } : {}), {\n\t\t\t\tduration: o.animateDuration,\n\t\t\t\teasing: o.animateEasing,\n\t\t\t\tstep: function step() {\n\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\twidth: parseInt(that.element.css(\"width\"), 10),\n\t\t\t\t\t\theight: parseInt(that.element.css(\"height\"), 10),\n\t\t\t\t\t\ttop: parseInt(that.element.css(\"top\"), 10),\n\t\t\t\t\t\tleft: parseInt(that.element.css(\"left\"), 10)\n\t\t\t\t\t};\n\n\t\t\t\t\tif (pr && pr.length) {\n\t\t\t\t\t\t$(pr[0]).css({ width: data.width, height: data.height });\n\t\t\t\t\t}\n\n\t\t\t\t\t// propagating resize, and updating values for each animation step\n\t\t\t\t\tthat._updateCache(data);\n\t\t\t\t\tthat._propagate(\"resize\", event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t});\n\n\t$.ui.plugin.add(\"resizable\", \"containment\", {\n\n\t\tstart: function start() {\n\t\t\tvar element,\n\t\t\t    p,\n\t\t\t    co,\n\t\t\t    ch,\n\t\t\t    cw,\n\t\t\t    width,\n\t\t\t    height,\n\t\t\t    that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options,\n\t\t\t    el = that.element,\n\t\t\t    oc = o.containment,\n\t\t\t    ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;\n\n\t\t\tif (!ce) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthat.containerElement = $(ce);\n\n\t\t\tif (/document/.test(oc) || oc === document) {\n\t\t\t\tthat.containerOffset = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0\n\t\t\t\t};\n\t\t\t\tthat.containerPosition = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0\n\t\t\t\t};\n\n\t\t\t\tthat.parentData = {\n\t\t\t\t\telement: $(document),\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: $(document).width(),\n\t\t\t\t\theight: $(document).height() || document.body.parentNode.scrollHeight\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\telement = $(ce);\n\t\t\t\tp = [];\n\t\t\t\t$([\"Top\", \"Right\", \"Left\", \"Bottom\"]).each(function (i, name) {\n\t\t\t\t\tp[i] = that._num(element.css(\"padding\" + name));\n\t\t\t\t});\n\n\t\t\t\tthat.containerOffset = element.offset();\n\t\t\t\tthat.containerPosition = element.position();\n\t\t\t\tthat.containerSize = {\n\t\t\t\t\theight: element.innerHeight() - p[3],\n\t\t\t\t\twidth: element.innerWidth() - p[1]\n\t\t\t\t};\n\n\t\t\t\tco = that.containerOffset;\n\t\t\t\tch = that.containerSize.height;\n\t\t\t\tcw = that.containerSize.width;\n\t\t\t\twidth = that._hasScroll(ce, \"left\") ? ce.scrollWidth : cw;\n\t\t\t\theight = that._hasScroll(ce) ? ce.scrollHeight : ch;\n\n\t\t\t\tthat.parentData = {\n\t\t\t\t\telement: ce,\n\t\t\t\t\tleft: co.left,\n\t\t\t\t\ttop: co.top,\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: height\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\tresize: function resize(event) {\n\t\t\tvar woset,\n\t\t\t    hoset,\n\t\t\t    isParent,\n\t\t\t    isOffsetRelative,\n\t\t\t    that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options,\n\t\t\t    co = that.containerOffset,\n\t\t\t    cp = that.position,\n\t\t\t    pRatio = that._aspectRatio || event.shiftKey,\n\t\t\t    cop = {\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0\n\t\t\t},\n\t\t\t    ce = that.containerElement,\n\t\t\t    continueResize = true;\n\n\t\t\tif (ce[0] !== document && /static/.test(ce.css(\"position\"))) {\n\t\t\t\tcop = co;\n\t\t\t}\n\n\t\t\tif (cp.left < (that._helper ? co.left : 0)) {\n\t\t\t\tthat.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);\n\n\t\t\t\tif (pRatio) {\n\t\t\t\t\tthat.size.height = that.size.width / that.aspectRatio;\n\t\t\t\t\tcontinueResize = false;\n\t\t\t\t}\n\t\t\t\tthat.position.left = o.helper ? co.left : 0;\n\t\t\t}\n\n\t\t\tif (cp.top < (that._helper ? co.top : 0)) {\n\t\t\t\tthat.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);\n\n\t\t\t\tif (pRatio) {\n\t\t\t\t\tthat.size.width = that.size.height * that.aspectRatio;\n\t\t\t\t\tcontinueResize = false;\n\t\t\t\t}\n\t\t\t\tthat.position.top = that._helper ? co.top : 0;\n\t\t\t}\n\n\t\t\tisParent = that.containerElement.get(0) === that.element.parent().get(0);\n\t\t\tisOffsetRelative = /relative|absolute/.test(that.containerElement.css(\"position\"));\n\n\t\t\tif (isParent && isOffsetRelative) {\n\t\t\t\tthat.offset.left = that.parentData.left + that.position.left;\n\t\t\t\tthat.offset.top = that.parentData.top + that.position.top;\n\t\t\t} else {\n\t\t\t\tthat.offset.left = that.element.offset().left;\n\t\t\t\tthat.offset.top = that.element.offset().top;\n\t\t\t}\n\n\t\t\twoset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));\n\n\t\t\thoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));\n\n\t\t\tif (woset + that.size.width >= that.parentData.width) {\n\t\t\t\tthat.size.width = that.parentData.width - woset;\n\t\t\t\tif (pRatio) {\n\t\t\t\t\tthat.size.height = that.size.width / that.aspectRatio;\n\t\t\t\t\tcontinueResize = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hoset + that.size.height >= that.parentData.height) {\n\t\t\t\tthat.size.height = that.parentData.height - hoset;\n\t\t\t\tif (pRatio) {\n\t\t\t\t\tthat.size.width = that.size.height * that.aspectRatio;\n\t\t\t\t\tcontinueResize = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!continueResize) {\n\t\t\t\tthat.position.left = that.prevPosition.left;\n\t\t\t\tthat.position.top = that.prevPosition.top;\n\t\t\t\tthat.size.width = that.prevSize.width;\n\t\t\t\tthat.size.height = that.prevSize.height;\n\t\t\t}\n\t\t},\n\n\t\tstop: function stop() {\n\t\t\tvar that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options,\n\t\t\t    co = that.containerOffset,\n\t\t\t    cop = that.containerPosition,\n\t\t\t    ce = that.containerElement,\n\t\t\t    helper = $(that.helper),\n\t\t\t    ho = helper.offset(),\n\t\t\t    w = helper.outerWidth() - that.sizeDiff.width,\n\t\t\t    h = helper.outerHeight() - that.sizeDiff.height;\n\n\t\t\tif (that._helper && !o.animate && /relative/.test(ce.css(\"position\"))) {\n\t\t\t\t$(this).css({\n\t\t\t\t\tleft: ho.left - cop.left - co.left,\n\t\t\t\t\twidth: w,\n\t\t\t\t\theight: h\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (that._helper && !o.animate && /static/.test(ce.css(\"position\"))) {\n\t\t\t\t$(this).css({\n\t\t\t\t\tleft: ho.left - cop.left - co.left,\n\t\t\t\t\twidth: w,\n\t\t\t\t\theight: h\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"resizable\", \"alsoResize\", {\n\n\t\tstart: function start() {\n\t\t\tvar that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options;\n\n\t\t\t$(o.alsoResize).each(function () {\n\t\t\t\tvar el = $(this);\n\t\t\t\tel.data(\"ui-resizable-alsoresize\", {\n\t\t\t\t\twidth: parseInt(el.width(), 10), height: parseInt(el.height(), 10),\n\t\t\t\t\tleft: parseInt(el.css(\"left\"), 10), top: parseInt(el.css(\"top\"), 10)\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tresize: function resize(event, ui) {\n\t\t\tvar that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options,\n\t\t\t    os = that.originalSize,\n\t\t\t    op = that.originalPosition,\n\t\t\t    delta = {\n\t\t\t\theight: that.size.height - os.height || 0,\n\t\t\t\twidth: that.size.width - os.width || 0,\n\t\t\t\ttop: that.position.top - op.top || 0,\n\t\t\t\tleft: that.position.left - op.left || 0\n\t\t\t};\n\n\t\t\t$(o.alsoResize).each(function () {\n\t\t\t\tvar el = $(this),\n\t\t\t\t    start = $(this).data(\"ui-resizable-alsoresize\"),\n\t\t\t\t    style = {},\n\t\t\t\t    css = el.parents(ui.originalElement[0]).length ? [\"width\", \"height\"] : [\"width\", \"height\", \"top\", \"left\"];\n\n\t\t\t\t$.each(css, function (i, prop) {\n\t\t\t\t\tvar sum = (start[prop] || 0) + (delta[prop] || 0);\n\t\t\t\t\tif (sum && sum >= 0) {\n\t\t\t\t\t\tstyle[prop] = sum || null;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tel.css(style);\n\t\t\t});\n\t\t},\n\n\t\tstop: function stop() {\n\t\t\t$(this).removeData(\"resizable-alsoresize\");\n\t\t}\n\t});\n\n\t$.ui.plugin.add(\"resizable\", \"ghost\", {\n\n\t\tstart: function start() {\n\n\t\t\tvar that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options,\n\t\t\t    cs = that.size;\n\n\t\t\tthat.ghost = that.originalElement.clone();\n\t\t\tthat.ghost.css({\n\t\t\t\topacity: 0.25,\n\t\t\t\tdisplay: \"block\",\n\t\t\t\tposition: \"relative\",\n\t\t\t\theight: cs.height,\n\t\t\t\twidth: cs.width,\n\t\t\t\tmargin: 0,\n\t\t\t\tleft: 0,\n\t\t\t\ttop: 0\n\t\t\t}).addClass(\"ui-resizable-ghost\").addClass(typeof o.ghost === \"string\" ? o.ghost : \"\");\n\n\t\t\tthat.ghost.appendTo(that.helper);\n\t\t},\n\n\t\tresize: function resize() {\n\t\t\tvar that = $(this).resizable(\"instance\");\n\t\t\tif (that.ghost) {\n\t\t\t\tthat.ghost.css({\n\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\theight: that.size.height,\n\t\t\t\t\twidth: that.size.width\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\tstop: function stop() {\n\t\t\tvar that = $(this).resizable(\"instance\");\n\t\t\tif (that.ghost && that.helper) {\n\t\t\t\tthat.helper.get(0).removeChild(that.ghost.get(0));\n\t\t\t}\n\t\t}\n\n\t});\n\n\t$.ui.plugin.add(\"resizable\", \"grid\", {\n\n\t\tresize: function resize() {\n\t\t\tvar outerDimensions,\n\t\t\t    that = $(this).resizable(\"instance\"),\n\t\t\t    o = that.options,\n\t\t\t    cs = that.size,\n\t\t\t    os = that.originalSize,\n\t\t\t    op = that.originalPosition,\n\t\t\t    a = that.axis,\n\t\t\t    grid = typeof o.grid === \"number\" ? [o.grid, o.grid] : o.grid,\n\t\t\t    gridX = grid[0] || 1,\n\t\t\t    gridY = grid[1] || 1,\n\t\t\t    ox = Math.round((cs.width - os.width) / gridX) * gridX,\n\t\t\t    oy = Math.round((cs.height - os.height) / gridY) * gridY,\n\t\t\t    newWidth = os.width + ox,\n\t\t\t    newHeight = os.height + oy,\n\t\t\t    isMaxWidth = o.maxWidth && o.maxWidth < newWidth,\n\t\t\t    isMaxHeight = o.maxHeight && o.maxHeight < newHeight,\n\t\t\t    isMinWidth = o.minWidth && o.minWidth > newWidth,\n\t\t\t    isMinHeight = o.minHeight && o.minHeight > newHeight;\n\n\t\t\to.grid = grid;\n\n\t\t\tif (isMinWidth) {\n\t\t\t\tnewWidth += gridX;\n\t\t\t}\n\t\t\tif (isMinHeight) {\n\t\t\t\tnewHeight += gridY;\n\t\t\t}\n\t\t\tif (isMaxWidth) {\n\t\t\t\tnewWidth -= gridX;\n\t\t\t}\n\t\t\tif (isMaxHeight) {\n\t\t\t\tnewHeight -= gridY;\n\t\t\t}\n\n\t\t\tif (/^(se|s|e)$/.test(a)) {\n\t\t\t\tthat.size.width = newWidth;\n\t\t\t\tthat.size.height = newHeight;\n\t\t\t} else if (/^(ne)$/.test(a)) {\n\t\t\t\tthat.size.width = newWidth;\n\t\t\t\tthat.size.height = newHeight;\n\t\t\t\tthat.position.top = op.top - oy;\n\t\t\t} else if (/^(sw)$/.test(a)) {\n\t\t\t\tthat.size.width = newWidth;\n\t\t\t\tthat.size.height = newHeight;\n\t\t\t\tthat.position.left = op.left - ox;\n\t\t\t} else {\n\t\t\t\tif (newHeight - gridY <= 0 || newWidth - gridX <= 0) {\n\t\t\t\t\touterDimensions = that._getPaddingPlusBorderDimensions(this);\n\t\t\t\t}\n\n\t\t\t\tif (newHeight - gridY > 0) {\n\t\t\t\t\tthat.size.height = newHeight;\n\t\t\t\t\tthat.position.top = op.top - oy;\n\t\t\t\t} else {\n\t\t\t\t\tnewHeight = gridY - outerDimensions.height;\n\t\t\t\t\tthat.size.height = newHeight;\n\t\t\t\t\tthat.position.top = op.top + os.height - newHeight;\n\t\t\t\t}\n\t\t\t\tif (newWidth - gridX > 0) {\n\t\t\t\t\tthat.size.width = newWidth;\n\t\t\t\t\tthat.position.left = op.left - ox;\n\t\t\t\t} else {\n\t\t\t\t\tnewWidth = gridX - outerDimensions.width;\n\t\t\t\t\tthat.size.width = newWidth;\n\t\t\t\t\tthat.position.left = op.left + os.width - newWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\tvar resizable = $.ui.resizable;\n\n\t/*!\n  * jQuery UI Dialog 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/dialog/\n  */\n\n\tvar dialog = $.widget(\"ui.dialog\", {\n\t\tversion: \"1.11.4\",\n\t\toptions: {\n\t\t\tappendTo: \"body\",\n\t\t\tautoOpen: true,\n\t\t\tbuttons: [],\n\t\t\tcloseOnEscape: true,\n\t\t\tcloseText: \"Close\",\n\t\t\tdialogClass: \"\",\n\t\t\tdraggable: true,\n\t\t\thide: null,\n\t\t\theight: \"auto\",\n\t\t\tmaxHeight: null,\n\t\t\tmaxWidth: null,\n\t\t\tminHeight: 150,\n\t\t\tminWidth: 150,\n\t\t\tmodal: false,\n\t\t\tposition: {\n\t\t\t\tmy: \"center\",\n\t\t\t\tat: \"center\",\n\t\t\t\tof: window,\n\t\t\t\tcollision: \"fit\",\n\t\t\t\t// Ensure the titlebar is always visible\n\t\t\t\tusing: function using(pos) {\n\t\t\t\t\tvar topOffset = $(this).css(pos).offset().top;\n\t\t\t\t\tif (topOffset < 0) {\n\t\t\t\t\t\t$(this).css(\"top\", pos.top - topOffset);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresizable: true,\n\t\t\tshow: null,\n\t\t\ttitle: null,\n\t\t\twidth: 300,\n\n\t\t\t// callbacks\n\t\t\tbeforeClose: null,\n\t\t\tclose: null,\n\t\t\tdrag: null,\n\t\t\tdragStart: null,\n\t\t\tdragStop: null,\n\t\t\tfocus: null,\n\t\t\topen: null,\n\t\t\tresize: null,\n\t\t\tresizeStart: null,\n\t\t\tresizeStop: null\n\t\t},\n\n\t\tsizeRelatedOptions: {\n\t\t\tbuttons: true,\n\t\t\theight: true,\n\t\t\tmaxHeight: true,\n\t\t\tmaxWidth: true,\n\t\t\tminHeight: true,\n\t\t\tminWidth: true,\n\t\t\twidth: true\n\t\t},\n\n\t\tresizableRelatedOptions: {\n\t\t\tmaxHeight: true,\n\t\t\tmaxWidth: true,\n\t\t\tminHeight: true,\n\t\t\tminWidth: true\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\tthis.originalCss = {\n\t\t\t\tdisplay: this.element[0].style.display,\n\t\t\t\twidth: this.element[0].style.width,\n\t\t\t\tminHeight: this.element[0].style.minHeight,\n\t\t\t\tmaxHeight: this.element[0].style.maxHeight,\n\t\t\t\theight: this.element[0].style.height\n\t\t\t};\n\t\t\tthis.originalPosition = {\n\t\t\t\tparent: this.element.parent(),\n\t\t\t\tindex: this.element.parent().children().index(this.element)\n\t\t\t};\n\t\t\tthis.originalTitle = this.element.attr(\"title\");\n\t\t\tthis.options.title = this.options.title || this.originalTitle;\n\n\t\t\tthis._createWrapper();\n\n\t\t\tthis.element.show().removeAttr(\"title\").addClass(\"ui-dialog-content ui-widget-content\").appendTo(this.uiDialog);\n\n\t\t\tthis._createTitlebar();\n\t\t\tthis._createButtonPane();\n\n\t\t\tif (this.options.draggable && $.fn.draggable) {\n\t\t\t\tthis._makeDraggable();\n\t\t\t}\n\t\t\tif (this.options.resizable && $.fn.resizable) {\n\t\t\t\tthis._makeResizable();\n\t\t\t}\n\n\t\t\tthis._isOpen = false;\n\n\t\t\tthis._trackFocus();\n\t\t},\n\n\t\t_init: function _init() {\n\t\t\tif (this.options.autoOpen) {\n\t\t\t\tthis.open();\n\t\t\t}\n\t\t},\n\n\t\t_appendTo: function _appendTo() {\n\t\t\tvar element = this.options.appendTo;\n\t\t\tif (element && (element.jquery || element.nodeType)) {\n\t\t\t\treturn $(element);\n\t\t\t}\n\t\t\treturn this.document.find(element || \"body\").eq(0);\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tvar next,\n\t\t\t    originalPosition = this.originalPosition;\n\n\t\t\tthis._untrackInstance();\n\t\t\tthis._destroyOverlay();\n\n\t\t\tthis.element.removeUniqueId().removeClass(\"ui-dialog-content ui-widget-content\").css(this.originalCss)\n\t\t\t// Without detaching first, the following becomes really slow\n\t\t\t.detach();\n\n\t\t\tthis.uiDialog.stop(true, true).remove();\n\n\t\t\tif (this.originalTitle) {\n\t\t\t\tthis.element.attr(\"title\", this.originalTitle);\n\t\t\t}\n\n\t\t\tnext = originalPosition.parent.children().eq(originalPosition.index);\n\t\t\t// Don't try to place the dialog next to itself (#8613)\n\t\t\tif (next.length && next[0] !== this.element[0]) {\n\t\t\t\tnext.before(this.element);\n\t\t\t} else {\n\t\t\t\toriginalPosition.parent.append(this.element);\n\t\t\t}\n\t\t},\n\n\t\twidget: function widget() {\n\t\t\treturn this.uiDialog;\n\t\t},\n\n\t\tdisable: $.noop,\n\t\tenable: $.noop,\n\n\t\tclose: function close(event) {\n\t\t\tvar activeElement,\n\t\t\t    that = this;\n\n\t\t\tif (!this._isOpen || this._trigger(\"beforeClose\", event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._isOpen = false;\n\t\t\tthis._focusedElement = null;\n\t\t\tthis._destroyOverlay();\n\t\t\tthis._untrackInstance();\n\n\t\t\tif (!this.opener.filter(\":focusable\").focus().length) {\n\n\t\t\t\t// support: IE9\n\t\t\t\t// IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n\t\t\t\ttry {\n\t\t\t\t\tactiveElement = this.document[0].activeElement;\n\n\t\t\t\t\t// Support: IE9, IE10\n\t\t\t\t\t// If the <body> is blurred, IE will switch windows, see #4520\n\t\t\t\t\tif (activeElement && activeElement.nodeName.toLowerCase() !== \"body\") {\n\n\t\t\t\t\t\t// Hiding a focused element doesn't trigger blur in WebKit\n\t\t\t\t\t\t// so in case we have nothing to focus on, explicitly blur the active element\n\t\t\t\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=47182\n\t\t\t\t\t\t$(activeElement).blur();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {}\n\t\t\t}\n\n\t\t\tthis._hide(this.uiDialog, this.options.hide, function () {\n\t\t\t\tthat._trigger(\"close\", event);\n\t\t\t});\n\t\t},\n\n\t\tisOpen: function isOpen() {\n\t\t\treturn this._isOpen;\n\t\t},\n\n\t\tmoveToTop: function moveToTop() {\n\t\t\tthis._moveToTop();\n\t\t},\n\n\t\t_moveToTop: function _moveToTop(event, silent) {\n\t\t\tvar moved = false,\n\t\t\t    zIndices = this.uiDialog.siblings(\".ui-front:visible\").map(function () {\n\t\t\t\treturn +$(this).css(\"z-index\");\n\t\t\t}).get(),\n\t\t\t    zIndexMax = Math.max.apply(null, zIndices);\n\n\t\t\tif (zIndexMax >= +this.uiDialog.css(\"z-index\")) {\n\t\t\t\tthis.uiDialog.css(\"z-index\", zIndexMax + 1);\n\t\t\t\tmoved = true;\n\t\t\t}\n\n\t\t\tif (moved && !silent) {\n\t\t\t\tthis._trigger(\"focus\", event);\n\t\t\t}\n\t\t\treturn moved;\n\t\t},\n\n\t\topen: function open() {\n\t\t\tvar that = this;\n\t\t\tif (this._isOpen) {\n\t\t\t\tif (this._moveToTop()) {\n\t\t\t\t\tthis._focusTabbable();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._isOpen = true;\n\t\t\tthis.opener = $(this.document[0].activeElement);\n\n\t\t\tthis._size();\n\t\t\tthis._position();\n\t\t\tthis._createOverlay();\n\t\t\tthis._moveToTop(null, true);\n\n\t\t\t// Ensure the overlay is moved to the top with the dialog, but only when\n\t\t\t// opening. The overlay shouldn't move after the dialog is open so that\n\t\t\t// modeless dialogs opened after the modal dialog stack properly.\n\t\t\tif (this.overlay) {\n\t\t\t\tthis.overlay.css(\"z-index\", this.uiDialog.css(\"z-index\") - 1);\n\t\t\t}\n\n\t\t\tthis._show(this.uiDialog, this.options.show, function () {\n\t\t\t\tthat._focusTabbable();\n\t\t\t\tthat._trigger(\"focus\");\n\t\t\t});\n\n\t\t\t// Track the dialog immediately upon openening in case a focus event\n\t\t\t// somehow occurs outside of the dialog before an element inside the\n\t\t\t// dialog is focused (#10152)\n\t\t\tthis._makeFocusTarget();\n\n\t\t\tthis._trigger(\"open\");\n\t\t},\n\n\t\t_focusTabbable: function _focusTabbable() {\n\t\t\t// Set focus to the first match:\n\t\t\t// 1. An element that was focused previously\n\t\t\t// 2. First element inside the dialog matching [autofocus]\n\t\t\t// 3. Tabbable element inside the content element\n\t\t\t// 4. Tabbable element inside the buttonpane\n\t\t\t// 5. The close button\n\t\t\t// 6. The dialog itself\n\t\t\tvar hasFocus = this._focusedElement;\n\t\t\tif (!hasFocus) {\n\t\t\t\thasFocus = this.element.find(\"[autofocus]\");\n\t\t\t}\n\t\t\tif (!hasFocus.length) {\n\t\t\t\thasFocus = this.element.find(\":tabbable\");\n\t\t\t}\n\t\t\tif (!hasFocus.length) {\n\t\t\t\thasFocus = this.uiDialogButtonPane.find(\":tabbable\");\n\t\t\t}\n\t\t\tif (!hasFocus.length) {\n\t\t\t\thasFocus = this.uiDialogTitlebarClose.filter(\":tabbable\");\n\t\t\t}\n\t\t\tif (!hasFocus.length) {\n\t\t\t\thasFocus = this.uiDialog;\n\t\t\t}\n\t\t\thasFocus.eq(0).focus();\n\t\t},\n\n\t\t_keepFocus: function _keepFocus(event) {\n\t\t\tfunction checkFocus() {\n\t\t\t\tvar activeElement = this.document[0].activeElement,\n\t\t\t\t    isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);\n\t\t\t\tif (!isActive) {\n\t\t\t\t\tthis._focusTabbable();\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.preventDefault();\n\t\t\tcheckFocus.call(this);\n\t\t\t// support: IE\n\t\t\t// IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n\t\t\t// so we check again later\n\t\t\tthis._delay(checkFocus);\n\t\t},\n\n\t\t_createWrapper: function _createWrapper() {\n\t\t\tthis.uiDialog = $(\"<div>\").addClass(\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front \" + this.options.dialogClass).hide().attr({\n\t\t\t\t// Setting tabIndex makes the div focusable\n\t\t\t\ttabIndex: -1,\n\t\t\t\trole: \"dialog\"\n\t\t\t}).appendTo(this._appendTo());\n\n\t\t\tthis._on(this.uiDialog, {\n\t\t\t\tkeydown: function keydown(event) {\n\t\t\t\t\tif (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tthis.close(event);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// prevent tabbing out of dialogs\n\t\t\t\t\tif (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar tabbables = this.uiDialog.find(\":tabbable\"),\n\t\t\t\t\t    first = tabbables.filter(\":first\"),\n\t\t\t\t\t    last = tabbables.filter(\":last\");\n\n\t\t\t\t\tif ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {\n\t\t\t\t\t\tthis._delay(function () {\n\t\t\t\t\t\t\tfirst.focus();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t} else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {\n\t\t\t\t\t\tthis._delay(function () {\n\t\t\t\t\t\t\tlast.focus();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmousedown: function mousedown(event) {\n\t\t\t\t\tif (this._moveToTop(event)) {\n\t\t\t\t\t\tthis._focusTabbable();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// We assume that any existing aria-describedby attribute means\n\t\t\t// that the dialog content is marked up properly\n\t\t\t// otherwise we brute force the content as the description\n\t\t\tif (!this.element.find(\"[aria-describedby]\").length) {\n\t\t\t\tthis.uiDialog.attr({\n\t\t\t\t\t\"aria-describedby\": this.element.uniqueId().attr(\"id\")\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t_createTitlebar: function _createTitlebar() {\n\t\t\tvar uiDialogTitle;\n\n\t\t\tthis.uiDialogTitlebar = $(\"<div>\").addClass(\"ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix\").prependTo(this.uiDialog);\n\t\t\tthis._on(this.uiDialogTitlebar, {\n\t\t\t\tmousedown: function mousedown(event) {\n\t\t\t\t\t// Don't prevent click on close button (#8838)\n\t\t\t\t\t// Focusing a dialog that is partially scrolled out of view\n\t\t\t\t\t// causes the browser to scroll it into view, preventing the click event\n\t\t\t\t\tif (!$(event.target).closest(\".ui-dialog-titlebar-close\")) {\n\t\t\t\t\t\t// Dialog isn't getting focus when dragging (#8063)\n\t\t\t\t\t\tthis.uiDialog.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// support: IE\n\t\t\t// Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n\t\t\t// dialog in IE (#9312)\n\t\t\tthis.uiDialogTitlebarClose = $(\"<button type='button'></button>\").button({\n\t\t\t\tlabel: this.options.closeText,\n\t\t\t\ticons: {\n\t\t\t\t\tprimary: \"ui-icon-closethick\"\n\t\t\t\t},\n\t\t\t\ttext: false\n\t\t\t}).addClass(\"ui-dialog-titlebar-close\").appendTo(this.uiDialogTitlebar);\n\t\t\tthis._on(this.uiDialogTitlebarClose, {\n\t\t\t\tclick: function click(event) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tthis.close(event);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tuiDialogTitle = $(\"<span>\").uniqueId().addClass(\"ui-dialog-title\").prependTo(this.uiDialogTitlebar);\n\t\t\tthis._title(uiDialogTitle);\n\n\t\t\tthis.uiDialog.attr({\n\t\t\t\t\"aria-labelledby\": uiDialogTitle.attr(\"id\")\n\t\t\t});\n\t\t},\n\n\t\t_title: function _title(title) {\n\t\t\tif (!this.options.title) {\n\t\t\t\ttitle.html(\"&#160;\");\n\t\t\t}\n\t\t\ttitle.text(this.options.title);\n\t\t},\n\n\t\t_createButtonPane: function _createButtonPane() {\n\t\t\tthis.uiDialogButtonPane = $(\"<div>\").addClass(\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\");\n\n\t\t\tthis.uiButtonSet = $(\"<div>\").addClass(\"ui-dialog-buttonset\").appendTo(this.uiDialogButtonPane);\n\n\t\t\tthis._createButtons();\n\t\t},\n\n\t\t_createButtons: function _createButtons() {\n\t\t\tvar that = this,\n\t\t\t    buttons = this.options.buttons;\n\n\t\t\t// if we already have a button pane, remove it\n\t\t\tthis.uiDialogButtonPane.remove();\n\t\t\tthis.uiButtonSet.empty();\n\n\t\t\tif ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {\n\t\t\t\tthis.uiDialog.removeClass(\"ui-dialog-buttons\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$.each(buttons, function (name, props) {\n\t\t\t\tvar click, buttonOptions;\n\t\t\t\tprops = $.isFunction(props) ? { click: props, text: name } : props;\n\t\t\t\t// Default to a non-submitting button\n\t\t\t\tprops = $.extend({ type: \"button\" }, props);\n\t\t\t\t// Change the context for the click callback to be the main element\n\t\t\t\tclick = props.click;\n\t\t\t\tprops.click = function () {\n\t\t\t\t\tclick.apply(that.element[0], arguments);\n\t\t\t\t};\n\t\t\t\tbuttonOptions = {\n\t\t\t\t\ticons: props.icons,\n\t\t\t\t\ttext: props.showText\n\t\t\t\t};\n\t\t\t\tdelete props.icons;\n\t\t\t\tdelete props.showText;\n\t\t\t\t$(\"<button></button>\", props).button(buttonOptions).appendTo(that.uiButtonSet);\n\t\t\t});\n\t\t\tthis.uiDialog.addClass(\"ui-dialog-buttons\");\n\t\t\tthis.uiDialogButtonPane.appendTo(this.uiDialog);\n\t\t},\n\n\t\t_makeDraggable: function _makeDraggable() {\n\t\t\tvar that = this,\n\t\t\t    options = this.options;\n\n\t\t\tfunction filteredUi(ui) {\n\t\t\t\treturn {\n\t\t\t\t\tposition: ui.position,\n\t\t\t\t\toffset: ui.offset\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.uiDialog.draggable({\n\t\t\t\tcancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n\t\t\t\thandle: \".ui-dialog-titlebar\",\n\t\t\t\tcontainment: \"document\",\n\t\t\t\tstart: function start(event, ui) {\n\t\t\t\t\t$(this).addClass(\"ui-dialog-dragging\");\n\t\t\t\t\tthat._blockFrames();\n\t\t\t\t\tthat._trigger(\"dragStart\", event, filteredUi(ui));\n\t\t\t\t},\n\t\t\t\tdrag: function drag(event, ui) {\n\t\t\t\t\tthat._trigger(\"drag\", event, filteredUi(ui));\n\t\t\t\t},\n\t\t\t\tstop: function stop(event, ui) {\n\t\t\t\t\tvar left = ui.offset.left - that.document.scrollLeft(),\n\t\t\t\t\t    top = ui.offset.top - that.document.scrollTop();\n\n\t\t\t\t\toptions.position = {\n\t\t\t\t\t\tmy: \"left top\",\n\t\t\t\t\t\tat: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n\t\t\t\t\t\tof: that.window\n\t\t\t\t\t};\n\t\t\t\t\t$(this).removeClass(\"ui-dialog-dragging\");\n\t\t\t\t\tthat._unblockFrames();\n\t\t\t\t\tthat._trigger(\"dragStop\", event, filteredUi(ui));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_makeResizable: function _makeResizable() {\n\t\t\tvar that = this,\n\t\t\t    options = this.options,\n\t\t\t    handles = options.resizable,\n\n\t\t\t// .ui-resizable has position: relative defined in the stylesheet\n\t\t\t// but dialogs have to use absolute or fixed positioning\n\t\t\tposition = this.uiDialog.css(\"position\"),\n\t\t\t    resizeHandles = typeof handles === \"string\" ? handles : \"n,e,s,w,se,sw,ne,nw\";\n\n\t\t\tfunction filteredUi(ui) {\n\t\t\t\treturn {\n\t\t\t\t\toriginalPosition: ui.originalPosition,\n\t\t\t\t\toriginalSize: ui.originalSize,\n\t\t\t\t\tposition: ui.position,\n\t\t\t\t\tsize: ui.size\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.uiDialog.resizable({\n\t\t\t\tcancel: \".ui-dialog-content\",\n\t\t\t\tcontainment: \"document\",\n\t\t\t\talsoResize: this.element,\n\t\t\t\tmaxWidth: options.maxWidth,\n\t\t\t\tmaxHeight: options.maxHeight,\n\t\t\t\tminWidth: options.minWidth,\n\t\t\t\tminHeight: this._minHeight(),\n\t\t\t\thandles: resizeHandles,\n\t\t\t\tstart: function start(event, ui) {\n\t\t\t\t\t$(this).addClass(\"ui-dialog-resizing\");\n\t\t\t\t\tthat._blockFrames();\n\t\t\t\t\tthat._trigger(\"resizeStart\", event, filteredUi(ui));\n\t\t\t\t},\n\t\t\t\tresize: function resize(event, ui) {\n\t\t\t\t\tthat._trigger(\"resize\", event, filteredUi(ui));\n\t\t\t\t},\n\t\t\t\tstop: function stop(event, ui) {\n\t\t\t\t\tvar offset = that.uiDialog.offset(),\n\t\t\t\t\t    left = offset.left - that.document.scrollLeft(),\n\t\t\t\t\t    top = offset.top - that.document.scrollTop();\n\n\t\t\t\t\toptions.height = that.uiDialog.height();\n\t\t\t\t\toptions.width = that.uiDialog.width();\n\t\t\t\t\toptions.position = {\n\t\t\t\t\t\tmy: \"left top\",\n\t\t\t\t\t\tat: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n\t\t\t\t\t\tof: that.window\n\t\t\t\t\t};\n\t\t\t\t\t$(this).removeClass(\"ui-dialog-resizing\");\n\t\t\t\t\tthat._unblockFrames();\n\t\t\t\t\tthat._trigger(\"resizeStop\", event, filteredUi(ui));\n\t\t\t\t}\n\t\t\t}).css(\"position\", position);\n\t\t},\n\n\t\t_trackFocus: function _trackFocus() {\n\t\t\tthis._on(this.widget(), {\n\t\t\t\tfocusin: function focusin(event) {\n\t\t\t\t\tthis._makeFocusTarget();\n\t\t\t\t\tthis._focusedElement = $(event.target);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_makeFocusTarget: function _makeFocusTarget() {\n\t\t\tthis._untrackInstance();\n\t\t\tthis._trackingInstances().unshift(this);\n\t\t},\n\n\t\t_untrackInstance: function _untrackInstance() {\n\t\t\tvar instances = this._trackingInstances(),\n\t\t\t    exists = $.inArray(this, instances);\n\t\t\tif (exists !== -1) {\n\t\t\t\tinstances.splice(exists, 1);\n\t\t\t}\n\t\t},\n\n\t\t_trackingInstances: function _trackingInstances() {\n\t\t\tvar instances = this.document.data(\"ui-dialog-instances\");\n\t\t\tif (!instances) {\n\t\t\t\tinstances = [];\n\t\t\t\tthis.document.data(\"ui-dialog-instances\", instances);\n\t\t\t}\n\t\t\treturn instances;\n\t\t},\n\n\t\t_minHeight: function _minHeight() {\n\t\t\tvar options = this.options;\n\n\t\t\treturn options.height === \"auto\" ? options.minHeight : Math.min(options.minHeight, options.height);\n\t\t},\n\n\t\t_position: function _position() {\n\t\t\t// Need to show the dialog to get the actual offset in the position plugin\n\t\t\tvar isVisible = this.uiDialog.is(\":visible\");\n\t\t\tif (!isVisible) {\n\t\t\t\tthis.uiDialog.show();\n\t\t\t}\n\t\t\tthis.uiDialog.position(this.options.position);\n\t\t\tif (!isVisible) {\n\t\t\t\tthis.uiDialog.hide();\n\t\t\t}\n\t\t},\n\n\t\t_setOptions: function _setOptions(options) {\n\t\t\tvar that = this,\n\t\t\t    resize = false,\n\t\t\t    resizableOptions = {};\n\n\t\t\t$.each(options, function (key, value) {\n\t\t\t\tthat._setOption(key, value);\n\n\t\t\t\tif (key in that.sizeRelatedOptions) {\n\t\t\t\t\tresize = true;\n\t\t\t\t}\n\t\t\t\tif (key in that.resizableRelatedOptions) {\n\t\t\t\t\tresizableOptions[key] = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (resize) {\n\t\t\t\tthis._size();\n\t\t\t\tthis._position();\n\t\t\t}\n\t\t\tif (this.uiDialog.is(\":data(ui-resizable)\")) {\n\t\t\t\tthis.uiDialog.resizable(\"option\", resizableOptions);\n\t\t\t}\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tvar isDraggable,\n\t\t\t    isResizable,\n\t\t\t    uiDialog = this.uiDialog;\n\n\t\t\tif (key === \"dialogClass\") {\n\t\t\t\tuiDialog.removeClass(this.options.dialogClass).addClass(value);\n\t\t\t}\n\n\t\t\tif (key === \"disabled\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\n\t\t\tif (key === \"appendTo\") {\n\t\t\t\tthis.uiDialog.appendTo(this._appendTo());\n\t\t\t}\n\n\t\t\tif (key === \"buttons\") {\n\t\t\t\tthis._createButtons();\n\t\t\t}\n\n\t\t\tif (key === \"closeText\") {\n\t\t\t\tthis.uiDialogTitlebarClose.button({\n\t\t\t\t\t// Ensure that we always pass a string\n\t\t\t\t\tlabel: \"\" + value\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (key === \"draggable\") {\n\t\t\t\tisDraggable = uiDialog.is(\":data(ui-draggable)\");\n\t\t\t\tif (isDraggable && !value) {\n\t\t\t\t\tuiDialog.draggable(\"destroy\");\n\t\t\t\t}\n\n\t\t\t\tif (!isDraggable && value) {\n\t\t\t\t\tthis._makeDraggable();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (key === \"position\") {\n\t\t\t\tthis._position();\n\t\t\t}\n\n\t\t\tif (key === \"resizable\") {\n\t\t\t\t// currently resizable, becoming non-resizable\n\t\t\t\tisResizable = uiDialog.is(\":data(ui-resizable)\");\n\t\t\t\tif (isResizable && !value) {\n\t\t\t\t\tuiDialog.resizable(\"destroy\");\n\t\t\t\t}\n\n\t\t\t\t// currently resizable, changing handles\n\t\t\t\tif (isResizable && typeof value === \"string\") {\n\t\t\t\t\tuiDialog.resizable(\"option\", \"handles\", value);\n\t\t\t\t}\n\n\t\t\t\t// currently non-resizable, becoming resizable\n\t\t\t\tif (!isResizable && value !== false) {\n\t\t\t\t\tthis._makeResizable();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (key === \"title\") {\n\t\t\t\tthis._title(this.uiDialogTitlebar.find(\".ui-dialog-title\"));\n\t\t\t}\n\t\t},\n\n\t\t_size: function _size() {\n\t\t\t// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n\t\t\t// divs will both have width and height set, so we need to reset them\n\t\t\tvar nonContentHeight,\n\t\t\t    minContentHeight,\n\t\t\t    maxContentHeight,\n\t\t\t    options = this.options;\n\n\t\t\t// Reset content sizing\n\t\t\tthis.element.show().css({\n\t\t\t\twidth: \"auto\",\n\t\t\t\tminHeight: 0,\n\t\t\t\tmaxHeight: \"none\",\n\t\t\t\theight: 0\n\t\t\t});\n\n\t\t\tif (options.minWidth > options.width) {\n\t\t\t\toptions.width = options.minWidth;\n\t\t\t}\n\n\t\t\t// reset wrapper sizing\n\t\t\t// determine the height of all the non-content elements\n\t\t\tnonContentHeight = this.uiDialog.css({\n\t\t\t\theight: \"auto\",\n\t\t\t\twidth: options.width\n\t\t\t}).outerHeight();\n\t\t\tminContentHeight = Math.max(0, options.minHeight - nonContentHeight);\n\t\t\tmaxContentHeight = typeof options.maxHeight === \"number\" ? Math.max(0, options.maxHeight - nonContentHeight) : \"none\";\n\n\t\t\tif (options.height === \"auto\") {\n\t\t\t\tthis.element.css({\n\t\t\t\t\tminHeight: minContentHeight,\n\t\t\t\t\tmaxHeight: maxContentHeight,\n\t\t\t\t\theight: \"auto\"\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.element.height(Math.max(0, options.height - nonContentHeight));\n\t\t\t}\n\n\t\t\tif (this.uiDialog.is(\":data(ui-resizable)\")) {\n\t\t\t\tthis.uiDialog.resizable(\"option\", \"minHeight\", this._minHeight());\n\t\t\t}\n\t\t},\n\n\t\t_blockFrames: function _blockFrames() {\n\t\t\tthis.iframeBlocks = this.document.find(\"iframe\").map(function () {\n\t\t\t\tvar iframe = $(this);\n\n\t\t\t\treturn $(\"<div>\").css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\twidth: iframe.outerWidth(),\n\t\t\t\t\theight: iframe.outerHeight()\n\t\t\t\t}).appendTo(iframe.parent()).offset(iframe.offset())[0];\n\t\t\t});\n\t\t},\n\n\t\t_unblockFrames: function _unblockFrames() {\n\t\t\tif (this.iframeBlocks) {\n\t\t\t\tthis.iframeBlocks.remove();\n\t\t\t\tdelete this.iframeBlocks;\n\t\t\t}\n\t\t},\n\n\t\t_allowInteraction: function _allowInteraction(event) {\n\t\t\tif ($(event.target).closest(\".ui-dialog\").length) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// TODO: Remove hack when datepicker implements\n\t\t\t// the .ui-front logic (#8989)\n\t\t\treturn !!$(event.target).closest(\".ui-datepicker\").length;\n\t\t},\n\n\t\t_createOverlay: function _createOverlay() {\n\t\t\tif (!this.options.modal) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We use a delay in case the overlay is created from an\n\t\t\t// event that we're going to be cancelling (#2804)\n\t\t\tvar isOpening = true;\n\t\t\tthis._delay(function () {\n\t\t\t\tisOpening = false;\n\t\t\t});\n\n\t\t\tif (!this.document.data(\"ui-dialog-overlays\")) {\n\n\t\t\t\t// Prevent use of anchors and inputs\n\t\t\t\t// Using _on() for an event handler shared across many instances is\n\t\t\t\t// safe because the dialogs stack and must be closed in reverse order\n\t\t\t\tthis._on(this.document, {\n\t\t\t\t\tfocusin: function focusin(event) {\n\t\t\t\t\t\tif (isOpening) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this._allowInteraction(event)) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tthis._trackingInstances()[0]._focusTabbable();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.overlay = $(\"<div>\").addClass(\"ui-widget-overlay ui-front\").appendTo(this._appendTo());\n\t\t\tthis._on(this.overlay, {\n\t\t\t\tmousedown: \"_keepFocus\"\n\t\t\t});\n\t\t\tthis.document.data(\"ui-dialog-overlays\", (this.document.data(\"ui-dialog-overlays\") || 0) + 1);\n\t\t},\n\n\t\t_destroyOverlay: function _destroyOverlay() {\n\t\t\tif (!this.options.modal) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.overlay) {\n\t\t\t\tvar overlays = this.document.data(\"ui-dialog-overlays\") - 1;\n\n\t\t\t\tif (!overlays) {\n\t\t\t\t\tthis.document.unbind(\"focusin\").removeData(\"ui-dialog-overlays\");\n\t\t\t\t} else {\n\t\t\t\t\tthis.document.data(\"ui-dialog-overlays\", overlays);\n\t\t\t\t}\n\n\t\t\t\tthis.overlay.remove();\n\t\t\t\tthis.overlay = null;\n\t\t\t}\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Droppable 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/droppable/\n  */\n\n\t$.widget(\"ui.droppable\", {\n\t\tversion: \"1.11.4\",\n\t\twidgetEventPrefix: \"drop\",\n\t\toptions: {\n\t\t\taccept: \"*\",\n\t\t\tactiveClass: false,\n\t\t\taddClasses: true,\n\t\t\tgreedy: false,\n\t\t\thoverClass: false,\n\t\t\tscope: \"default\",\n\t\t\ttolerance: \"intersect\",\n\n\t\t\t// callbacks\n\t\t\tactivate: null,\n\t\t\tdeactivate: null,\n\t\t\tdrop: null,\n\t\t\tout: null,\n\t\t\tover: null\n\t\t},\n\t\t_create: function _create() {\n\n\t\t\tvar proportions,\n\t\t\t    o = this.options,\n\t\t\t    accept = o.accept;\n\n\t\t\tthis.isover = false;\n\t\t\tthis.isout = true;\n\n\t\t\tthis.accept = $.isFunction(accept) ? accept : function (d) {\n\t\t\t\treturn d.is(accept);\n\t\t\t};\n\n\t\t\tthis.proportions = function () /* valueToWrite */{\n\t\t\t\tif (arguments.length) {\n\t\t\t\t\t// Store the droppable's proportions\n\t\t\t\t\tproportions = arguments[0];\n\t\t\t\t} else {\n\t\t\t\t\t// Retrieve or derive the droppable's proportions\n\t\t\t\t\treturn proportions ? proportions : proportions = {\n\t\t\t\t\t\twidth: this.element[0].offsetWidth,\n\t\t\t\t\t\theight: this.element[0].offsetHeight\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis._addToManager(o.scope);\n\n\t\t\to.addClasses && this.element.addClass(\"ui-droppable\");\n\t\t},\n\n\t\t_addToManager: function _addToManager(scope) {\n\t\t\t// Add the reference and positions to the manager\n\t\t\t$.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];\n\t\t\t$.ui.ddmanager.droppables[scope].push(this);\n\t\t},\n\n\t\t_splice: function _splice(drop) {\n\t\t\tvar i = 0;\n\t\t\tfor (; i < drop.length; i++) {\n\t\t\t\tif (drop[i] === this) {\n\t\t\t\t\tdrop.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tvar drop = $.ui.ddmanager.droppables[this.options.scope];\n\n\t\t\tthis._splice(drop);\n\n\t\t\tthis.element.removeClass(\"ui-droppable ui-droppable-disabled\");\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\n\t\t\tif (key === \"accept\") {\n\t\t\t\tthis.accept = $.isFunction(value) ? value : function (d) {\n\t\t\t\t\treturn d.is(value);\n\t\t\t\t};\n\t\t\t} else if (key === \"scope\") {\n\t\t\t\tvar drop = $.ui.ddmanager.droppables[this.options.scope];\n\n\t\t\t\tthis._splice(drop);\n\t\t\t\tthis._addToManager(value);\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\t\t},\n\n\t\t_activate: function _activate(event) {\n\t\t\tvar draggable = $.ui.ddmanager.current;\n\t\t\tif (this.options.activeClass) {\n\t\t\t\tthis.element.addClass(this.options.activeClass);\n\t\t\t}\n\t\t\tif (draggable) {\n\t\t\t\tthis._trigger(\"activate\", event, this.ui(draggable));\n\t\t\t}\n\t\t},\n\n\t\t_deactivate: function _deactivate(event) {\n\t\t\tvar draggable = $.ui.ddmanager.current;\n\t\t\tif (this.options.activeClass) {\n\t\t\t\tthis.element.removeClass(this.options.activeClass);\n\t\t\t}\n\t\t\tif (draggable) {\n\t\t\t\tthis._trigger(\"deactivate\", event, this.ui(draggable));\n\t\t\t}\n\t\t},\n\n\t\t_over: function _over(event) {\n\n\t\t\tvar draggable = $.ui.ddmanager.current;\n\n\t\t\t// Bail if draggable and droppable are same element\n\t\t\tif (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n\t\t\t\tif (this.options.hoverClass) {\n\t\t\t\t\tthis.element.addClass(this.options.hoverClass);\n\t\t\t\t}\n\t\t\t\tthis._trigger(\"over\", event, this.ui(draggable));\n\t\t\t}\n\t\t},\n\n\t\t_out: function _out(event) {\n\n\t\t\tvar draggable = $.ui.ddmanager.current;\n\n\t\t\t// Bail if draggable and droppable are same element\n\t\t\tif (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n\t\t\t\tif (this.options.hoverClass) {\n\t\t\t\t\tthis.element.removeClass(this.options.hoverClass);\n\t\t\t\t}\n\t\t\t\tthis._trigger(\"out\", event, this.ui(draggable));\n\t\t\t}\n\t\t},\n\n\t\t_drop: function _drop(event, custom) {\n\n\t\t\tvar draggable = custom || $.ui.ddmanager.current,\n\t\t\t    childrenIntersection = false;\n\n\t\t\t// Bail if draggable and droppable are same element\n\t\t\tif (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.element.find(\":data(ui-droppable)\").not(\".ui-draggable-dragging\").each(function () {\n\t\t\t\tvar inst = $(this).droppable(\"instance\");\n\t\t\t\tif (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance, event)) {\n\t\t\t\t\tchildrenIntersection = true;return false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (childrenIntersection) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n\t\t\t\tif (this.options.activeClass) {\n\t\t\t\t\tthis.element.removeClass(this.options.activeClass);\n\t\t\t\t}\n\t\t\t\tif (this.options.hoverClass) {\n\t\t\t\t\tthis.element.removeClass(this.options.hoverClass);\n\t\t\t\t}\n\t\t\t\tthis._trigger(\"drop\", event, this.ui(draggable));\n\t\t\t\treturn this.element;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\tui: function ui(c) {\n\t\t\treturn {\n\t\t\t\tdraggable: c.currentItem || c.element,\n\t\t\t\thelper: c.helper,\n\t\t\t\tposition: c.position,\n\t\t\t\toffset: c.positionAbs\n\t\t\t};\n\t\t}\n\n\t});\n\n\t$.ui.intersect = function () {\n\t\tfunction isOverAxis(x, reference, size) {\n\t\t\treturn x >= reference && x < reference + size;\n\t\t}\n\n\t\treturn function (draggable, droppable, toleranceMode, event) {\n\n\t\t\tif (!droppable.offset) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left,\n\t\t\t    y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top,\n\t\t\t    x2 = x1 + draggable.helperProportions.width,\n\t\t\t    y2 = y1 + draggable.helperProportions.height,\n\t\t\t    l = droppable.offset.left,\n\t\t\t    t = droppable.offset.top,\n\t\t\t    r = l + droppable.proportions().width,\n\t\t\t    b = t + droppable.proportions().height;\n\n\t\t\tswitch (toleranceMode) {\n\t\t\t\tcase \"fit\":\n\t\t\t\t\treturn l <= x1 && x2 <= r && t <= y1 && y2 <= b;\n\t\t\t\tcase \"intersect\":\n\t\t\t\t\treturn l < x1 + draggable.helperProportions.width / 2 && // Right Half\n\t\t\t\t\tx2 - draggable.helperProportions.width / 2 < r && // Left Half\n\t\t\t\t\tt < y1 + draggable.helperProportions.height / 2 && // Bottom Half\n\t\t\t\t\ty2 - draggable.helperProportions.height / 2 < b; // Top Half\n\t\t\t\tcase \"pointer\":\n\t\t\t\t\treturn isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);\n\t\t\t\tcase \"touch\":\n\t\t\t\t\treturn (y1 >= t && y1 <= b || // Top edge touching\n\t\t\t\t\ty2 >= t && y2 <= b || // Bottom edge touching\n\t\t\t\t\ty1 < t && y2 > b // Surrounded vertically\n\t\t\t\t\t) && (x1 >= l && x1 <= r || // Left edge touching\n\t\t\t\t\tx2 >= l && x2 <= r || // Right edge touching\n\t\t\t\t\tx1 < l && x2 > r // Surrounded horizontally\n\t\t\t\t\t);\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}();\n\n\t/*\n \tThis manager tracks offsets of draggables and droppables\n */\n\t$.ui.ddmanager = {\n\t\tcurrent: null,\n\t\tdroppables: { \"default\": [] },\n\t\tprepareOffsets: function prepareOffsets(t, event) {\n\n\t\t\tvar i,\n\t\t\t    j,\n\t\t\t    m = $.ui.ddmanager.droppables[t.options.scope] || [],\n\t\t\t    type = event ? event.type : null,\n\t\t\t    // workaround for #2317\n\t\t\tlist = (t.currentItem || t.element).find(\":data(ui-droppable)\").addBack();\n\n\t\t\tdroppablesLoop: for (i = 0; i < m.length; i++) {\n\n\t\t\t\t// No disabled and non-accepted\n\t\t\t\tif (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Filter out elements in the current dragged item\n\t\t\t\tfor (j = 0; j < list.length; j++) {\n\t\t\t\t\tif (list[j] === m[i].element[0]) {\n\t\t\t\t\t\tm[i].proportions().height = 0;\n\t\t\t\t\t\tcontinue droppablesLoop;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tm[i].visible = m[i].element.css(\"display\") !== \"none\";\n\t\t\t\tif (!m[i].visible) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Activate the droppable if used directly from draggables\n\t\t\t\tif (type === \"mousedown\") {\n\t\t\t\t\tm[i]._activate.call(m[i], event);\n\t\t\t\t}\n\n\t\t\t\tm[i].offset = m[i].element.offset();\n\t\t\t\tm[i].proportions({ width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight });\n\t\t\t}\n\t\t},\n\t\tdrop: function drop(draggable, event) {\n\n\t\t\tvar dropped = false;\n\t\t\t// Create a copy of the droppables in case the list changes during the drop (#9116)\n\t\t\t$.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {\n\n\t\t\t\tif (!this.options) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event)) {\n\t\t\t\t\tdropped = this._drop.call(this, event) || dropped;\n\t\t\t\t}\n\n\t\t\t\tif (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n\t\t\t\t\tthis.isout = true;\n\t\t\t\t\tthis.isover = false;\n\t\t\t\t\tthis._deactivate.call(this, event);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn dropped;\n\t\t},\n\t\tdragStart: function dragStart(draggable, event) {\n\t\t\t// Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)\n\t\t\tdraggable.element.parentsUntil(\"body\").bind(\"scroll.droppable\", function () {\n\t\t\t\tif (!draggable.options.refreshPositions) {\n\t\t\t\t\t$.ui.ddmanager.prepareOffsets(draggable, event);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdrag: function drag(draggable, event) {\n\n\t\t\t// If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.\n\t\t\tif (draggable.options.refreshPositions) {\n\t\t\t\t$.ui.ddmanager.prepareOffsets(draggable, event);\n\t\t\t}\n\n\t\t\t// Run through all droppables and check their positions based on specific tolerance options\n\t\t\t$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {\n\n\t\t\t\tif (this.options.disabled || this.greedyChild || !this.visible) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar parentInstance,\n\t\t\t\t    scope,\n\t\t\t\t    parent,\n\t\t\t\t    intersects = $.ui.intersect(draggable, this, this.options.tolerance, event),\n\t\t\t\t    c = !intersects && this.isover ? \"isout\" : intersects && !this.isover ? \"isover\" : null;\n\t\t\t\tif (!c) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.options.greedy) {\n\t\t\t\t\t// find droppable parents with same scope\n\t\t\t\t\tscope = this.options.scope;\n\t\t\t\t\tparent = this.element.parents(\":data(ui-droppable)\").filter(function () {\n\t\t\t\t\t\treturn $(this).droppable(\"instance\").options.scope === scope;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (parent.length) {\n\t\t\t\t\t\tparentInstance = $(parent[0]).droppable(\"instance\");\n\t\t\t\t\t\tparentInstance.greedyChild = c === \"isover\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// we just moved into a greedy child\n\t\t\t\tif (parentInstance && c === \"isover\") {\n\t\t\t\t\tparentInstance.isover = false;\n\t\t\t\t\tparentInstance.isout = true;\n\t\t\t\t\tparentInstance._out.call(parentInstance, event);\n\t\t\t\t}\n\n\t\t\t\tthis[c] = true;\n\t\t\t\tthis[c === \"isout\" ? \"isover\" : \"isout\"] = false;\n\t\t\t\tthis[c === \"isover\" ? \"_over\" : \"_out\"].call(this, event);\n\n\t\t\t\t// we just moved out of a greedy child\n\t\t\t\tif (parentInstance && c === \"isout\") {\n\t\t\t\t\tparentInstance.isout = false;\n\t\t\t\t\tparentInstance.isover = true;\n\t\t\t\t\tparentInstance._over.call(parentInstance, event);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdragStop: function dragStop(draggable, event) {\n\t\t\tdraggable.element.parentsUntil(\"body\").unbind(\"scroll.droppable\");\n\t\t\t// Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)\n\t\t\tif (!draggable.options.refreshPositions) {\n\t\t\t\t$.ui.ddmanager.prepareOffsets(draggable, event);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar droppable = $.ui.droppable;\n\n\t/*!\n  * jQuery UI Effects 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/category/effects-core/\n  */\n\n\tvar dataSpace = \"ui-effects-\",\n\n\n\t// Create a local jQuery because jQuery Color relies on it and the\n\t// global may not exist with AMD and a custom build (#10199)\n\tjQuery = $;\n\n\t$.effects = {\n\t\teffect: {}\n\t};\n\n\t/*!\n  * jQuery Color Animations v2.1.2\n  * https://github.com/jquery/jquery-color\n  *\n  * Copyright 2014 jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * Date: Wed Jan 16 08:47:09 2013 -0600\n  */\n\t(function (jQuery, undefined) {\n\n\t\tvar stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n\n\n\t\t// plusequals test for += 100 -= 100\n\t\trplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n\n\t\t// a set of RE's that can match strings and generate color tuples.\n\t\tstringParsers = [{\n\t\t\tre: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n\t\t\tparse: function parse(execResult) {\n\t\t\t\treturn [execResult[1], execResult[2], execResult[3], execResult[4]];\n\t\t\t}\n\t\t}, {\n\t\t\tre: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n\t\t\tparse: function parse(execResult) {\n\t\t\t\treturn [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];\n\t\t\t}\n\t\t}, {\n\t\t\t// this regex ignores A-F because it's compared against an already lowercased string\n\t\t\tre: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,\n\t\t\tparse: function parse(execResult) {\n\t\t\t\treturn [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)];\n\t\t\t}\n\t\t}, {\n\t\t\t// this regex ignores A-F because it's compared against an already lowercased string\n\t\t\tre: /#([a-f0-9])([a-f0-9])([a-f0-9])/,\n\t\t\tparse: function parse(execResult) {\n\t\t\t\treturn [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)];\n\t\t\t}\n\t\t}, {\n\t\t\tre: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n\t\t\tspace: \"hsla\",\n\t\t\tparse: function parse(execResult) {\n\t\t\t\treturn [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];\n\t\t\t}\n\t\t}],\n\n\n\t\t// jQuery.Color( )\n\t\tcolor = jQuery.Color = function (color, green, blue, alpha) {\n\t\t\treturn new jQuery.Color.fn.parse(color, green, blue, alpha);\n\t\t},\n\t\t    spaces = {\n\t\t\trgba: {\n\t\t\t\tprops: {\n\t\t\t\t\tred: {\n\t\t\t\t\t\tidx: 0,\n\t\t\t\t\t\ttype: \"byte\"\n\t\t\t\t\t},\n\t\t\t\t\tgreen: {\n\t\t\t\t\t\tidx: 1,\n\t\t\t\t\t\ttype: \"byte\"\n\t\t\t\t\t},\n\t\t\t\t\tblue: {\n\t\t\t\t\t\tidx: 2,\n\t\t\t\t\t\ttype: \"byte\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thsla: {\n\t\t\t\tprops: {\n\t\t\t\t\thue: {\n\t\t\t\t\t\tidx: 0,\n\t\t\t\t\t\ttype: \"degrees\"\n\t\t\t\t\t},\n\t\t\t\t\tsaturation: {\n\t\t\t\t\t\tidx: 1,\n\t\t\t\t\t\ttype: \"percent\"\n\t\t\t\t\t},\n\t\t\t\t\tlightness: {\n\t\t\t\t\t\tidx: 2,\n\t\t\t\t\t\ttype: \"percent\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t    propTypes = {\n\t\t\t\"byte\": {\n\t\t\t\tfloor: true,\n\t\t\t\tmax: 255\n\t\t\t},\n\t\t\t\"percent\": {\n\t\t\t\tmax: 1\n\t\t\t},\n\t\t\t\"degrees\": {\n\t\t\t\tmod: 360,\n\t\t\t\tfloor: true\n\t\t\t}\n\t\t},\n\t\t    support = color.support = {},\n\n\n\t\t// element for support tests\n\t\tsupportElem = jQuery(\"<p>\")[0],\n\n\n\t\t// colors = jQuery.Color.names\n\t\tcolors,\n\n\n\t\t// local aliases of functions called often\n\t\teach = jQuery.each;\n\n\t\t// determine rgba support immediately\n\t\tsupportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\n\t\tsupport.rgba = supportElem.style.backgroundColor.indexOf(\"rgba\") > -1;\n\n\t\t// define cache name and alpha properties\n\t\t// for rgba and hsla spaces\n\t\teach(spaces, function (spaceName, space) {\n\t\t\tspace.cache = \"_\" + spaceName;\n\t\t\tspace.props.alpha = {\n\t\t\t\tidx: 3,\n\t\t\t\ttype: \"percent\",\n\t\t\t\tdef: 1\n\t\t\t};\n\t\t});\n\n\t\tfunction clamp(value, prop, allowEmpty) {\n\t\t\tvar type = propTypes[prop.type] || {};\n\n\t\t\tif (value == null) {\n\t\t\t\treturn allowEmpty || !prop.def ? null : prop.def;\n\t\t\t}\n\n\t\t\t// ~~ is an short way of doing floor for positive numbers\n\t\t\tvalue = type.floor ? ~~value : parseFloat(value);\n\n\t\t\t// IE will pass in empty strings as value for alpha,\n\t\t\t// which will hit this case\n\t\t\tif (isNaN(value)) {\n\t\t\t\treturn prop.def;\n\t\t\t}\n\n\t\t\tif (type.mod) {\n\t\t\t\t// we add mod before modding to make sure that negatives values\n\t\t\t\t// get converted properly: -10 -> 350\n\t\t\t\treturn (value + type.mod) % type.mod;\n\t\t\t}\n\n\t\t\t// for now all property types without mod have min and max\n\t\t\treturn 0 > value ? 0 : type.max < value ? type.max : value;\n\t\t}\n\n\t\tfunction stringParse(string) {\n\t\t\tvar inst = color(),\n\t\t\t    rgba = inst._rgba = [];\n\n\t\t\tstring = string.toLowerCase();\n\n\t\t\teach(stringParsers, function (i, parser) {\n\t\t\t\tvar parsed,\n\t\t\t\t    match = parser.re.exec(string),\n\t\t\t\t    values = match && parser.parse(match),\n\t\t\t\t    spaceName = parser.space || \"rgba\";\n\n\t\t\t\tif (values) {\n\t\t\t\t\tparsed = inst[spaceName](values);\n\n\t\t\t\t\t// if this was an rgba parse the assignment might happen twice\n\t\t\t\t\t// oh well....\n\t\t\t\t\tinst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];\n\t\t\t\t\trgba = inst._rgba = parsed._rgba;\n\n\t\t\t\t\t// exit each( stringParsers ) here because we matched\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Found a stringParser that handled it\n\t\t\tif (rgba.length) {\n\n\t\t\t\t// if this came from a parsed string, force \"transparent\" when alpha is 0\n\t\t\t\t// chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n\t\t\t\tif (rgba.join() === \"0,0,0,0\") {\n\t\t\t\t\tjQuery.extend(rgba, colors.transparent);\n\t\t\t\t}\n\t\t\t\treturn inst;\n\t\t\t}\n\n\t\t\t// named colors\n\t\t\treturn colors[string];\n\t\t}\n\n\t\tcolor.fn = jQuery.extend(color.prototype, {\n\t\t\tparse: function parse(red, green, blue, alpha) {\n\t\t\t\tif (red === undefined) {\n\t\t\t\t\tthis._rgba = [null, null, null, null];\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tif (red.jquery || red.nodeType) {\n\t\t\t\t\tred = jQuery(red).css(green);\n\t\t\t\t\tgreen = undefined;\n\t\t\t\t}\n\n\t\t\t\tvar inst = this,\n\t\t\t\t    type = jQuery.type(red),\n\t\t\t\t    rgba = this._rgba = [];\n\n\t\t\t\t// more than 1 argument specified - assume ( red, green, blue, alpha )\n\t\t\t\tif (green !== undefined) {\n\t\t\t\t\tred = [red, green, blue, alpha];\n\t\t\t\t\ttype = \"array\";\n\t\t\t\t}\n\n\t\t\t\tif (type === \"string\") {\n\t\t\t\t\treturn this.parse(stringParse(red) || colors._default);\n\t\t\t\t}\n\n\t\t\t\tif (type === \"array\") {\n\t\t\t\t\teach(spaces.rgba.props, function (key, prop) {\n\t\t\t\t\t\trgba[prop.idx] = clamp(red[prop.idx], prop);\n\t\t\t\t\t});\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tif (type === \"object\") {\n\t\t\t\t\tif (red instanceof color) {\n\t\t\t\t\t\teach(spaces, function (spaceName, space) {\n\t\t\t\t\t\t\tif (red[space.cache]) {\n\t\t\t\t\t\t\t\tinst[space.cache] = red[space.cache].slice();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\teach(spaces, function (spaceName, space) {\n\t\t\t\t\t\t\tvar cache = space.cache;\n\t\t\t\t\t\t\teach(space.props, function (key, prop) {\n\n\t\t\t\t\t\t\t\t// if the cache doesn't exist, and we know how to convert\n\t\t\t\t\t\t\t\tif (!inst[cache] && space.to) {\n\n\t\t\t\t\t\t\t\t\t// if the value was null, we don't need to copy it\n\t\t\t\t\t\t\t\t\t// if the key was alpha, we don't need to copy it either\n\t\t\t\t\t\t\t\t\tif (key === \"alpha\" || red[key] == null) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tinst[cache] = space.to(inst._rgba);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// this is the only case where we allow nulls for ALL properties.\n\t\t\t\t\t\t\t\t// call clamp with alwaysAllowEmpty\n\t\t\t\t\t\t\t\tinst[cache][prop.idx] = clamp(red[key], prop, true);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// everything defined but alpha?\n\t\t\t\t\t\t\tif (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {\n\t\t\t\t\t\t\t\t// use the default of 1\n\t\t\t\t\t\t\t\tinst[cache][3] = 1;\n\t\t\t\t\t\t\t\tif (space.from) {\n\t\t\t\t\t\t\t\t\tinst._rgba = space.from(inst[cache]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t},\n\t\t\tis: function is(compare) {\n\t\t\t\tvar is = color(compare),\n\t\t\t\t    same = true,\n\t\t\t\t    inst = this;\n\n\t\t\t\teach(spaces, function (_, space) {\n\t\t\t\t\tvar localCache,\n\t\t\t\t\t    isCache = is[space.cache];\n\t\t\t\t\tif (isCache) {\n\t\t\t\t\t\tlocalCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];\n\t\t\t\t\t\teach(space.props, function (_, prop) {\n\t\t\t\t\t\t\tif (isCache[prop.idx] != null) {\n\t\t\t\t\t\t\t\tsame = isCache[prop.idx] === localCache[prop.idx];\n\t\t\t\t\t\t\t\treturn same;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn same;\n\t\t\t\t});\n\t\t\t\treturn same;\n\t\t\t},\n\t\t\t_space: function _space() {\n\t\t\t\tvar used = [],\n\t\t\t\t    inst = this;\n\t\t\t\teach(spaces, function (spaceName, space) {\n\t\t\t\t\tif (inst[space.cache]) {\n\t\t\t\t\t\tused.push(spaceName);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn used.pop();\n\t\t\t},\n\t\t\ttransition: function transition(other, distance) {\n\t\t\t\tvar end = color(other),\n\t\t\t\t    spaceName = end._space(),\n\t\t\t\t    space = spaces[spaceName],\n\t\t\t\t    startColor = this.alpha() === 0 ? color(\"transparent\") : this,\n\t\t\t\t    start = startColor[space.cache] || space.to(startColor._rgba),\n\t\t\t\t    result = start.slice();\n\n\t\t\t\tend = end[space.cache];\n\t\t\t\teach(space.props, function (key, prop) {\n\t\t\t\t\tvar index = prop.idx,\n\t\t\t\t\t    startValue = start[index],\n\t\t\t\t\t    endValue = end[index],\n\t\t\t\t\t    type = propTypes[prop.type] || {};\n\n\t\t\t\t\t// if null, don't override start value\n\t\t\t\t\tif (endValue === null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// if null - use end\n\t\t\t\t\tif (startValue === null) {\n\t\t\t\t\t\tresult[index] = endValue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (type.mod) {\n\t\t\t\t\t\t\tif (endValue - startValue > type.mod / 2) {\n\t\t\t\t\t\t\t\tstartValue += type.mod;\n\t\t\t\t\t\t\t} else if (startValue - endValue > type.mod / 2) {\n\t\t\t\t\t\t\t\tstartValue -= type.mod;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult[index] = clamp((endValue - startValue) * distance + startValue, prop);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn this[spaceName](result);\n\t\t\t},\n\t\t\tblend: function blend(opaque) {\n\t\t\t\t// if we are already opaque - return ourself\n\t\t\t\tif (this._rgba[3] === 1) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tvar rgb = this._rgba.slice(),\n\t\t\t\t    a = rgb.pop(),\n\t\t\t\t    blend = color(opaque)._rgba;\n\n\t\t\t\treturn color(jQuery.map(rgb, function (v, i) {\n\t\t\t\t\treturn (1 - a) * blend[i] + a * v;\n\t\t\t\t}));\n\t\t\t},\n\t\t\ttoRgbaString: function toRgbaString() {\n\t\t\t\tvar prefix = \"rgba(\",\n\t\t\t\t    rgba = jQuery.map(this._rgba, function (v, i) {\n\t\t\t\t\treturn v == null ? i > 2 ? 1 : 0 : v;\n\t\t\t\t});\n\n\t\t\t\tif (rgba[3] === 1) {\n\t\t\t\t\trgba.pop();\n\t\t\t\t\tprefix = \"rgb(\";\n\t\t\t\t}\n\n\t\t\t\treturn prefix + rgba.join() + \")\";\n\t\t\t},\n\t\t\ttoHslaString: function toHslaString() {\n\t\t\t\tvar prefix = \"hsla(\",\n\t\t\t\t    hsla = jQuery.map(this.hsla(), function (v, i) {\n\t\t\t\t\tif (v == null) {\n\t\t\t\t\t\tv = i > 2 ? 1 : 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// catch 1 and 2\n\t\t\t\t\tif (i && i < 3) {\n\t\t\t\t\t\tv = Math.round(v * 100) + \"%\";\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t});\n\n\t\t\t\tif (hsla[3] === 1) {\n\t\t\t\t\thsla.pop();\n\t\t\t\t\tprefix = \"hsl(\";\n\t\t\t\t}\n\t\t\t\treturn prefix + hsla.join() + \")\";\n\t\t\t},\n\t\t\ttoHexString: function toHexString(includeAlpha) {\n\t\t\t\tvar rgba = this._rgba.slice(),\n\t\t\t\t    alpha = rgba.pop();\n\n\t\t\t\tif (includeAlpha) {\n\t\t\t\t\trgba.push(~~(alpha * 255));\n\t\t\t\t}\n\n\t\t\t\treturn \"#\" + jQuery.map(rgba, function (v) {\n\n\t\t\t\t\t// default to 0 when nulls exist\n\t\t\t\t\tv = (v || 0).toString(16);\n\t\t\t\t\treturn v.length === 1 ? \"0\" + v : v;\n\t\t\t\t}).join(\"\");\n\t\t\t},\n\t\t\ttoString: function toString() {\n\t\t\t\treturn this._rgba[3] === 0 ? \"transparent\" : this.toRgbaString();\n\t\t\t}\n\t\t});\n\t\tcolor.fn.parse.prototype = color.fn;\n\n\t\t// hsla conversions adapted from:\n\t\t// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\n\t\tfunction hue2rgb(p, q, h) {\n\t\t\th = (h + 1) % 1;\n\t\t\tif (h * 6 < 1) {\n\t\t\t\treturn p + (q - p) * h * 6;\n\t\t\t}\n\t\t\tif (h * 2 < 1) {\n\t\t\t\treturn q;\n\t\t\t}\n\t\t\tif (h * 3 < 2) {\n\t\t\t\treturn p + (q - p) * (2 / 3 - h) * 6;\n\t\t\t}\n\t\t\treturn p;\n\t\t}\n\n\t\tspaces.hsla.to = function (rgba) {\n\t\t\tif (rgba[0] == null || rgba[1] == null || rgba[2] == null) {\n\t\t\t\treturn [null, null, null, rgba[3]];\n\t\t\t}\n\t\t\tvar r = rgba[0] / 255,\n\t\t\t    g = rgba[1] / 255,\n\t\t\t    b = rgba[2] / 255,\n\t\t\t    a = rgba[3],\n\t\t\t    max = Math.max(r, g, b),\n\t\t\t    min = Math.min(r, g, b),\n\t\t\t    diff = max - min,\n\t\t\t    add = max + min,\n\t\t\t    l = add * 0.5,\n\t\t\t    h,\n\t\t\t    s;\n\n\t\t\tif (min === max) {\n\t\t\t\th = 0;\n\t\t\t} else if (r === max) {\n\t\t\t\th = 60 * (g - b) / diff + 360;\n\t\t\t} else if (g === max) {\n\t\t\t\th = 60 * (b - r) / diff + 120;\n\t\t\t} else {\n\t\t\t\th = 60 * (r - g) / diff + 240;\n\t\t\t}\n\n\t\t\t// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n\t\t\t// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n\t\t\tif (diff === 0) {\n\t\t\t\ts = 0;\n\t\t\t} else if (l <= 0.5) {\n\t\t\t\ts = diff / add;\n\t\t\t} else {\n\t\t\t\ts = diff / (2 - add);\n\t\t\t}\n\t\t\treturn [Math.round(h) % 360, s, l, a == null ? 1 : a];\n\t\t};\n\n\t\tspaces.hsla.from = function (hsla) {\n\t\t\tif (hsla[0] == null || hsla[1] == null || hsla[2] == null) {\n\t\t\t\treturn [null, null, null, hsla[3]];\n\t\t\t}\n\t\t\tvar h = hsla[0] / 360,\n\t\t\t    s = hsla[1],\n\t\t\t    l = hsla[2],\n\t\t\t    a = hsla[3],\n\t\t\t    q = l <= 0.5 ? l * (1 + s) : l + s - l * s,\n\t\t\t    p = 2 * l - q;\n\n\t\t\treturn [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a];\n\t\t};\n\n\t\teach(spaces, function (spaceName, space) {\n\t\t\tvar props = space.props,\n\t\t\t    cache = space.cache,\n\t\t\t    to = space.to,\n\t\t\t    from = space.from;\n\n\t\t\t// makes rgba() and hsla()\n\t\t\tcolor.fn[spaceName] = function (value) {\n\n\t\t\t\t// generate a cache for this space if it doesn't exist\n\t\t\t\tif (to && !this[cache]) {\n\t\t\t\t\tthis[cache] = to(this._rgba);\n\t\t\t\t}\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn this[cache].slice();\n\t\t\t\t}\n\n\t\t\t\tvar ret,\n\t\t\t\t    type = jQuery.type(value),\n\t\t\t\t    arr = type === \"array\" || type === \"object\" ? value : arguments,\n\t\t\t\t    local = this[cache].slice();\n\n\t\t\t\teach(props, function (key, prop) {\n\t\t\t\t\tvar val = arr[type === \"object\" ? key : prop.idx];\n\t\t\t\t\tif (val == null) {\n\t\t\t\t\t\tval = local[prop.idx];\n\t\t\t\t\t}\n\t\t\t\t\tlocal[prop.idx] = clamp(val, prop);\n\t\t\t\t});\n\n\t\t\t\tif (from) {\n\t\t\t\t\tret = color(from(local));\n\t\t\t\t\tret[cache] = local;\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\treturn color(local);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// makes red() green() blue() alpha() hue() saturation() lightness()\n\t\t\teach(props, function (key, prop) {\n\t\t\t\t// alpha is included in more than one space\n\t\t\t\tif (color.fn[key]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcolor.fn[key] = function (value) {\n\t\t\t\t\tvar vtype = jQuery.type(value),\n\t\t\t\t\t    fn = key === \"alpha\" ? this._hsla ? \"hsla\" : \"rgba\" : spaceName,\n\t\t\t\t\t    local = this[fn](),\n\t\t\t\t\t    cur = local[prop.idx],\n\t\t\t\t\t    match;\n\n\t\t\t\t\tif (vtype === \"undefined\") {\n\t\t\t\t\t\treturn cur;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (vtype === \"function\") {\n\t\t\t\t\t\tvalue = value.call(this, cur);\n\t\t\t\t\t\tvtype = jQuery.type(value);\n\t\t\t\t\t}\n\t\t\t\t\tif (value == null && prop.empty) {\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t}\n\t\t\t\t\tif (vtype === \"string\") {\n\t\t\t\t\t\tmatch = rplusequals.exec(value);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tvalue = cur + parseFloat(match[2]) * (match[1] === \"+\" ? 1 : -1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlocal[prop.idx] = value;\n\t\t\t\t\treturn this[fn](local);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\n\t\t// add cssHook and .fx.step function for each named hook.\n\t\t// accept a space separated string of properties\n\t\tcolor.hook = function (hook) {\n\t\t\tvar hooks = hook.split(\" \");\n\t\t\teach(hooks, function (i, hook) {\n\t\t\t\tjQuery.cssHooks[hook] = {\n\t\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\t\tvar parsed,\n\t\t\t\t\t\t    curElem,\n\t\t\t\t\t\t    backgroundColor = \"\";\n\n\t\t\t\t\t\tif (value !== \"transparent\" && (jQuery.type(value) !== \"string\" || (parsed = stringParse(value)))) {\n\t\t\t\t\t\t\tvalue = color(parsed || value);\n\t\t\t\t\t\t\tif (!support.rgba && value._rgba[3] !== 1) {\n\t\t\t\t\t\t\t\tcurElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n\t\t\t\t\t\t\t\twhile ((backgroundColor === \"\" || backgroundColor === \"transparent\") && curElem && curElem.style) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tbackgroundColor = jQuery.css(curElem, \"backgroundColor\");\n\t\t\t\t\t\t\t\t\t\tcurElem = curElem.parentNode;\n\t\t\t\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvalue = value.blend(backgroundColor && backgroundColor !== \"transparent\" ? backgroundColor : \"_default\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvalue = value.toRgbaString();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\telem.style[hook] = value;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// wrapped to prevent IE from throwing errors on \"invalid\" values like 'auto' or 'inherit'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tjQuery.fx.step[hook] = function (fx) {\n\t\t\t\t\tif (!fx.colorInit) {\n\t\t\t\t\t\tfx.start = color(fx.elem, hook);\n\t\t\t\t\t\tfx.end = color(fx.end);\n\t\t\t\t\t\tfx.colorInit = true;\n\t\t\t\t\t}\n\t\t\t\t\tjQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\n\t\tcolor.hook(stepHooks);\n\n\t\tjQuery.cssHooks.borderColor = {\n\t\t\texpand: function expand(value) {\n\t\t\t\tvar expanded = {};\n\n\t\t\t\teach([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (i, part) {\n\t\t\t\t\texpanded[\"border\" + part + \"Color\"] = value;\n\t\t\t\t});\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t};\n\n\t\t// Basic color names only.\n\t\t// Usage of any of the other color names requires adding yourself or including\n\t\t// jquery.color.svg-names.js.\n\t\tcolors = jQuery.Color.names = {\n\t\t\t// 4.1. Basic color keywords\n\t\t\taqua: \"#00ffff\",\n\t\t\tblack: \"#000000\",\n\t\t\tblue: \"#0000ff\",\n\t\t\tfuchsia: \"#ff00ff\",\n\t\t\tgray: \"#808080\",\n\t\t\tgreen: \"#008000\",\n\t\t\tlime: \"#00ff00\",\n\t\t\tmaroon: \"#800000\",\n\t\t\tnavy: \"#000080\",\n\t\t\tolive: \"#808000\",\n\t\t\tpurple: \"#800080\",\n\t\t\tred: \"#ff0000\",\n\t\t\tsilver: \"#c0c0c0\",\n\t\t\tteal: \"#008080\",\n\t\t\twhite: \"#ffffff\",\n\t\t\tyellow: \"#ffff00\",\n\n\t\t\t// 4.2.3. \"transparent\" color keyword\n\t\t\ttransparent: [null, null, null, 0],\n\n\t\t\t_default: \"#ffffff\"\n\t\t};\n\t})(jQuery);\n\n\t/******************************************************************************/\n\t/****************************** CLASS ANIMATIONS ******************************/\n\t/******************************************************************************/\n\t(function () {\n\n\t\tvar classAnimationActions = [\"add\", \"remove\", \"toggle\"],\n\t\t    shorthandStyles = {\n\t\t\tborder: 1,\n\t\t\tborderBottom: 1,\n\t\t\tborderColor: 1,\n\t\t\tborderLeft: 1,\n\t\t\tborderRight: 1,\n\t\t\tborderTop: 1,\n\t\t\tborderWidth: 1,\n\t\t\tmargin: 1,\n\t\t\tpadding: 1\n\t\t};\n\n\t\t$.each([\"borderLeftStyle\", \"borderRightStyle\", \"borderBottomStyle\", \"borderTopStyle\"], function (_, prop) {\n\t\t\t$.fx.step[prop] = function (fx) {\n\t\t\t\tif (fx.end !== \"none\" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {\n\t\t\t\t\tjQuery.style(fx.elem, prop, fx.end);\n\t\t\t\t\tfx.setAttr = true;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\tfunction getElementStyles(elem) {\n\t\t\tvar key,\n\t\t\t    len,\n\t\t\t    style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle,\n\t\t\t    styles = {};\n\n\t\t\tif (style && style.length && style[0] && style[style[0]]) {\n\t\t\t\tlen = style.length;\n\t\t\t\twhile (len--) {\n\t\t\t\t\tkey = style[len];\n\t\t\t\t\tif (typeof style[key] === \"string\") {\n\t\t\t\t\t\tstyles[$.camelCase(key)] = style[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// support: Opera, IE <9\n\t\t\t} else {\n\t\t\t\tfor (key in style) {\n\t\t\t\t\tif (typeof style[key] === \"string\") {\n\t\t\t\t\t\tstyles[key] = style[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn styles;\n\t\t}\n\n\t\tfunction styleDifference(oldStyle, newStyle) {\n\t\t\tvar diff = {},\n\t\t\t    name,\n\t\t\t    value;\n\n\t\t\tfor (name in newStyle) {\n\t\t\t\tvalue = newStyle[name];\n\t\t\t\tif (oldStyle[name] !== value) {\n\t\t\t\t\tif (!shorthandStyles[name]) {\n\t\t\t\t\t\tif ($.fx.step[name] || !isNaN(parseFloat(value))) {\n\t\t\t\t\t\t\tdiff[name] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t\t// support: jQuery <1.8\n\t\tif (!$.fn.addBack) {\n\t\t\t$.fn.addBack = function (selector) {\n\t\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t\t};\n\t\t}\n\n\t\t$.effects.animateClass = function (value, duration, easing, callback) {\n\t\t\tvar o = $.speed(duration, easing, callback);\n\n\t\t\treturn this.queue(function () {\n\t\t\t\tvar animated = $(this),\n\t\t\t\t    baseClass = animated.attr(\"class\") || \"\",\n\t\t\t\t    applyClassChange,\n\t\t\t\t    allAnimations = o.children ? animated.find(\"*\").addBack() : animated;\n\n\t\t\t\t// map the animated objects to store the original styles.\n\t\t\t\tallAnimations = allAnimations.map(function () {\n\t\t\t\t\tvar el = $(this);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tel: el,\n\t\t\t\t\t\tstart: getElementStyles(this)\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\t// apply class change\n\t\t\t\tapplyClassChange = function applyClassChange() {\n\t\t\t\t\t$.each(classAnimationActions, function (i, action) {\n\t\t\t\t\t\tif (value[action]) {\n\t\t\t\t\t\t\tanimated[action + \"Class\"](value[action]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tapplyClassChange();\n\n\t\t\t\t// map all animated objects again - calculate new styles and diff\n\t\t\t\tallAnimations = allAnimations.map(function () {\n\t\t\t\t\tthis.end = getElementStyles(this.el[0]);\n\t\t\t\t\tthis.diff = styleDifference(this.start, this.end);\n\t\t\t\t\treturn this;\n\t\t\t\t});\n\n\t\t\t\t// apply original class\n\t\t\t\tanimated.attr(\"class\", baseClass);\n\n\t\t\t\t// map all animated objects again - this time collecting a promise\n\t\t\t\tallAnimations = allAnimations.map(function () {\n\t\t\t\t\tvar styleInfo = this,\n\t\t\t\t\t    dfd = $.Deferred(),\n\t\t\t\t\t    opts = $.extend({}, o, {\n\t\t\t\t\t\tqueue: false,\n\t\t\t\t\t\tcomplete: function complete() {\n\t\t\t\t\t\t\tdfd.resolve(styleInfo);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.el.animate(this.diff, opts);\n\t\t\t\t\treturn dfd.promise();\n\t\t\t\t});\n\n\t\t\t\t// once all animations have completed:\n\t\t\t\t$.when.apply($, allAnimations.get()).done(function () {\n\n\t\t\t\t\t// set the final class\n\t\t\t\t\tapplyClassChange();\n\n\t\t\t\t\t// for each animated element,\n\t\t\t\t\t// clear all css properties that were animated\n\t\t\t\t\t$.each(arguments, function () {\n\t\t\t\t\t\tvar el = this.el;\n\t\t\t\t\t\t$.each(this.diff, function (key) {\n\t\t\t\t\t\t\tel.css(key, \"\");\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t// this is guarnteed to be there if you use jQuery.speed()\n\t\t\t\t\t// it also handles dequeuing the next anim...\n\t\t\t\t\to.complete.call(animated[0]);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\t$.fn.extend({\n\t\t\taddClass: function (orig) {\n\t\t\t\treturn function (classNames, speed, easing, callback) {\n\t\t\t\t\treturn speed ? $.effects.animateClass.call(this, { add: classNames }, speed, easing, callback) : orig.apply(this, arguments);\n\t\t\t\t};\n\t\t\t}($.fn.addClass),\n\n\t\t\tremoveClass: function (orig) {\n\t\t\t\treturn function (classNames, speed, easing, callback) {\n\t\t\t\t\treturn arguments.length > 1 ? $.effects.animateClass.call(this, { remove: classNames }, speed, easing, callback) : orig.apply(this, arguments);\n\t\t\t\t};\n\t\t\t}($.fn.removeClass),\n\n\t\t\ttoggleClass: function (orig) {\n\t\t\t\treturn function (classNames, force, speed, easing, callback) {\n\t\t\t\t\tif (typeof force === \"boolean\" || force === undefined) {\n\t\t\t\t\t\tif (!speed) {\n\t\t\t\t\t\t\t// without speed parameter\n\t\t\t\t\t\t\treturn orig.apply(this, arguments);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn $.effects.animateClass.call(this, force ? { add: classNames } : { remove: classNames }, speed, easing, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// without force parameter\n\t\t\t\t\t\treturn $.effects.animateClass.call(this, { toggle: classNames }, force, speed, easing);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}($.fn.toggleClass),\n\n\t\t\tswitchClass: function switchClass(remove, add, speed, easing, callback) {\n\t\t\t\treturn $.effects.animateClass.call(this, {\n\t\t\t\t\tadd: add,\n\t\t\t\t\tremove: remove\n\t\t\t\t}, speed, easing, callback);\n\t\t\t}\n\t\t});\n\t})();\n\n\t/******************************************************************************/\n\t/*********************************** EFFECTS **********************************/\n\t/******************************************************************************/\n\n\t(function () {\n\n\t\t$.extend($.effects, {\n\t\t\tversion: \"1.11.4\",\n\n\t\t\t// Saves a set of properties in a data storage\n\t\t\tsave: function save(element, set) {\n\t\t\t\tfor (var i = 0; i < set.length; i++) {\n\t\t\t\t\tif (set[i] !== null) {\n\t\t\t\t\t\telement.data(dataSpace + set[i], element[0].style[set[i]]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Restores a set of previously saved properties from a data storage\n\t\t\trestore: function restore(element, set) {\n\t\t\t\tvar val, i;\n\t\t\t\tfor (i = 0; i < set.length; i++) {\n\t\t\t\t\tif (set[i] !== null) {\n\t\t\t\t\t\tval = element.data(dataSpace + set[i]);\n\t\t\t\t\t\t// support: jQuery 1.6.2\n\t\t\t\t\t\t// http://bugs.jquery.com/ticket/9917\n\t\t\t\t\t\t// jQuery 1.6.2 incorrectly returns undefined for any falsy value.\n\t\t\t\t\t\t// We can't differentiate between \"\" and 0 here, so we just assume\n\t\t\t\t\t\t// empty string since it's likely to be a more common value...\n\t\t\t\t\t\tif (val === undefined) {\n\t\t\t\t\t\t\tval = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telement.css(set[i], val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsetMode: function setMode(el, mode) {\n\t\t\t\tif (mode === \"toggle\") {\n\t\t\t\t\tmode = el.is(\":hidden\") ? \"show\" : \"hide\";\n\t\t\t\t}\n\t\t\t\treturn mode;\n\t\t\t},\n\n\t\t\t// Translates a [top,left] array into a baseline value\n\t\t\t// this should be a little more flexible in the future to handle a string & hash\n\t\t\tgetBaseline: function getBaseline(origin, original) {\n\t\t\t\tvar y, x;\n\t\t\t\tswitch (origin[0]) {\n\t\t\t\t\tcase \"top\":\n\t\t\t\t\t\ty = 0;break;\n\t\t\t\t\tcase \"middle\":\n\t\t\t\t\t\ty = 0.5;break;\n\t\t\t\t\tcase \"bottom\":\n\t\t\t\t\t\ty = 1;break;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ty = origin[0] / original.height;\n\t\t\t\t}\n\t\t\t\tswitch (origin[1]) {\n\t\t\t\t\tcase \"left\":\n\t\t\t\t\t\tx = 0;break;\n\t\t\t\t\tcase \"center\":\n\t\t\t\t\t\tx = 0.5;break;\n\t\t\t\t\tcase \"right\":\n\t\t\t\t\t\tx = 1;break;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tx = origin[1] / original.width;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tx: x,\n\t\t\t\t\ty: y\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t// Wraps the element around a wrapper that copies position properties\n\t\t\tcreateWrapper: function createWrapper(element) {\n\n\t\t\t\t// if the element is already wrapped, return it\n\t\t\t\tif (element.parent().is(\".ui-effects-wrapper\")) {\n\t\t\t\t\treturn element.parent();\n\t\t\t\t}\n\n\t\t\t\t// wrap the element\n\t\t\t\tvar props = {\n\t\t\t\t\twidth: element.outerWidth(true),\n\t\t\t\t\theight: element.outerHeight(true),\n\t\t\t\t\t\"float\": element.css(\"float\")\n\t\t\t\t},\n\t\t\t\t    wrapper = $(\"<div></div>\").addClass(\"ui-effects-wrapper\").css({\n\t\t\t\t\tfontSize: \"100%\",\n\t\t\t\t\tbackground: \"transparent\",\n\t\t\t\t\tborder: \"none\",\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\tpadding: 0\n\t\t\t\t}),\n\n\t\t\t\t// Store the size in case width/height are defined in % - Fixes #5245\n\t\t\t\tsize = {\n\t\t\t\t\twidth: element.width(),\n\t\t\t\t\theight: element.height()\n\t\t\t\t},\n\t\t\t\t    active = document.activeElement;\n\n\t\t\t\t// support: Firefox\n\t\t\t\t// Firefox incorrectly exposes anonymous content\n\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=561664\n\t\t\t\ttry {\n\t\t\t\t\tactive.id;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tactive = document.body;\n\t\t\t\t}\n\n\t\t\t\telement.wrap(wrapper);\n\n\t\t\t\t// Fixes #7595 - Elements lose focus when wrapped.\n\t\t\t\tif (element[0] === active || $.contains(element[0], active)) {\n\t\t\t\t\t$(active).focus();\n\t\t\t\t}\n\n\t\t\t\twrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element\n\n\t\t\t\t// transfer positioning properties to the wrapper\n\t\t\t\tif (element.css(\"position\") === \"static\") {\n\t\t\t\t\twrapper.css({ position: \"relative\" });\n\t\t\t\t\telement.css({ position: \"relative\" });\n\t\t\t\t} else {\n\t\t\t\t\t$.extend(props, {\n\t\t\t\t\t\tposition: element.css(\"position\"),\n\t\t\t\t\t\tzIndex: element.css(\"z-index\")\n\t\t\t\t\t});\n\t\t\t\t\t$.each([\"top\", \"left\", \"bottom\", \"right\"], function (i, pos) {\n\t\t\t\t\t\tprops[pos] = element.css(pos);\n\t\t\t\t\t\tif (isNaN(parseInt(props[pos], 10))) {\n\t\t\t\t\t\t\tprops[pos] = \"auto\";\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\telement.css({\n\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tright: \"auto\",\n\t\t\t\t\t\tbottom: \"auto\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telement.css(size);\n\n\t\t\t\treturn wrapper.css(props).show();\n\t\t\t},\n\n\t\t\tremoveWrapper: function removeWrapper(element) {\n\t\t\t\tvar active = document.activeElement;\n\n\t\t\t\tif (element.parent().is(\".ui-effects-wrapper\")) {\n\t\t\t\t\telement.parent().replaceWith(element);\n\n\t\t\t\t\t// Fixes #7595 - Elements lose focus when wrapped.\n\t\t\t\t\tif (element[0] === active || $.contains(element[0], active)) {\n\t\t\t\t\t\t$(active).focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\t\t\t},\n\n\t\t\tsetTransition: function setTransition(element, list, factor, value) {\n\t\t\t\tvalue = value || {};\n\t\t\t\t$.each(list, function (i, x) {\n\t\t\t\t\tvar unit = element.cssUnit(x);\n\t\t\t\t\tif (unit[0] > 0) {\n\t\t\t\t\t\tvalue[x] = unit[0] * factor + unit[1];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn value;\n\t\t\t}\n\t\t});\n\n\t\t// return an effect options object for the given parameters:\n\t\tfunction _normalizeArguments(effect, options, speed, callback) {\n\n\t\t\t// allow passing all options as the first parameter\n\t\t\tif ($.isPlainObject(effect)) {\n\t\t\t\toptions = effect;\n\t\t\t\teffect = effect.effect;\n\t\t\t}\n\n\t\t\t// convert to an object\n\t\t\teffect = { effect: effect };\n\n\t\t\t// catch (effect, null, ...)\n\t\t\tif (options == null) {\n\t\t\t\toptions = {};\n\t\t\t}\n\n\t\t\t// catch (effect, callback)\n\t\t\tif ($.isFunction(options)) {\n\t\t\t\tcallback = options;\n\t\t\t\tspeed = null;\n\t\t\t\toptions = {};\n\t\t\t}\n\n\t\t\t// catch (effect, speed, ?)\n\t\t\tif (typeof options === \"number\" || $.fx.speeds[options]) {\n\t\t\t\tcallback = speed;\n\t\t\t\tspeed = options;\n\t\t\t\toptions = {};\n\t\t\t}\n\n\t\t\t// catch (effect, options, callback)\n\t\t\tif ($.isFunction(speed)) {\n\t\t\t\tcallback = speed;\n\t\t\t\tspeed = null;\n\t\t\t}\n\n\t\t\t// add options to effect\n\t\t\tif (options) {\n\t\t\t\t$.extend(effect, options);\n\t\t\t}\n\n\t\t\tspeed = speed || options.duration;\n\t\t\teffect.duration = $.fx.off ? 0 : typeof speed === \"number\" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;\n\n\t\t\teffect.complete = callback || options.complete;\n\n\t\t\treturn effect;\n\t\t}\n\n\t\tfunction standardAnimationOption(option) {\n\t\t\t// Valid standard speeds (nothing, number, named speed)\n\t\t\tif (!option || typeof option === \"number\" || $.fx.speeds[option]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Invalid strings - treat as \"normal\" speed\n\t\t\tif (typeof option === \"string\" && !$.effects.effect[option]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Complete callback\n\t\t\tif ($.isFunction(option)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Options hash (but not naming an effect)\n\t\t\tif ((typeof option === \"undefined\" ? \"undefined\" : _typeof(option)) === \"object\" && !option.effect) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Didn't match any standard API\n\t\t\treturn false;\n\t\t}\n\n\t\t$.fn.extend({\n\t\t\teffect: function effect() /* effect, options, speed, callback */{\n\t\t\t\tvar args = _normalizeArguments.apply(this, arguments),\n\t\t\t\t    mode = args.mode,\n\t\t\t\t    queue = args.queue,\n\t\t\t\t    effectMethod = $.effects.effect[args.effect];\n\n\t\t\t\tif ($.fx.off || !effectMethod) {\n\t\t\t\t\t// delegate to the original method (e.g., .show()) if possible\n\t\t\t\t\tif (mode) {\n\t\t\t\t\t\treturn this[mode](args.duration, args.complete);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.each(function () {\n\t\t\t\t\t\t\tif (args.complete) {\n\t\t\t\t\t\t\t\targs.complete.call(this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction run(next) {\n\t\t\t\t\tvar elem = $(this),\n\t\t\t\t\t    complete = args.complete,\n\t\t\t\t\t    mode = args.mode;\n\n\t\t\t\t\tfunction done() {\n\t\t\t\t\t\tif ($.isFunction(complete)) {\n\t\t\t\t\t\t\tcomplete.call(elem[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($.isFunction(next)) {\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the element already has the correct final state, delegate to\n\t\t\t\t\t// the core methods so the internal tracking of \"olddisplay\" works.\n\t\t\t\t\tif (elem.is(\":hidden\") ? mode === \"hide\" : mode === \"show\") {\n\t\t\t\t\t\telem[mode]();\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\teffectMethod.call(elem[0], args, done);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn queue === false ? this.each(run) : this.queue(queue || \"fx\", run);\n\t\t\t},\n\n\t\t\tshow: function (orig) {\n\t\t\t\treturn function (option) {\n\t\t\t\t\tif (standardAnimationOption(option)) {\n\t\t\t\t\t\treturn orig.apply(this, arguments);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar args = _normalizeArguments.apply(this, arguments);\n\t\t\t\t\t\targs.mode = \"show\";\n\t\t\t\t\t\treturn this.effect.call(this, args);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}($.fn.show),\n\n\t\t\thide: function (orig) {\n\t\t\t\treturn function (option) {\n\t\t\t\t\tif (standardAnimationOption(option)) {\n\t\t\t\t\t\treturn orig.apply(this, arguments);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar args = _normalizeArguments.apply(this, arguments);\n\t\t\t\t\t\targs.mode = \"hide\";\n\t\t\t\t\t\treturn this.effect.call(this, args);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}($.fn.hide),\n\n\t\t\ttoggle: function (orig) {\n\t\t\t\treturn function (option) {\n\t\t\t\t\tif (standardAnimationOption(option) || typeof option === \"boolean\") {\n\t\t\t\t\t\treturn orig.apply(this, arguments);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar args = _normalizeArguments.apply(this, arguments);\n\t\t\t\t\t\targs.mode = \"toggle\";\n\t\t\t\t\t\treturn this.effect.call(this, args);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}($.fn.toggle),\n\n\t\t\t// helper functions\n\t\t\tcssUnit: function cssUnit(key) {\n\t\t\t\tvar style = this.css(key),\n\t\t\t\t    val = [];\n\n\t\t\t\t$.each([\"em\", \"px\", \"%\", \"pt\"], function (i, unit) {\n\t\t\t\t\tif (style.indexOf(unit) > 0) {\n\t\t\t\t\t\tval = [parseFloat(style), unit];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn val;\n\t\t\t}\n\t\t});\n\t})();\n\n\t/******************************************************************************/\n\t/*********************************** EASING ***********************************/\n\t/******************************************************************************/\n\n\t(function () {\n\n\t\t// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\n\n\t\tvar baseEasings = {};\n\n\t\t$.each([\"Quad\", \"Cubic\", \"Quart\", \"Quint\", \"Expo\"], function (i, name) {\n\t\t\tbaseEasings[name] = function (p) {\n\t\t\t\treturn Math.pow(p, i + 2);\n\t\t\t};\n\t\t});\n\n\t\t$.extend(baseEasings, {\n\t\t\tSine: function Sine(p) {\n\t\t\t\treturn 1 - Math.cos(p * Math.PI / 2);\n\t\t\t},\n\t\t\tCirc: function Circ(p) {\n\t\t\t\treturn 1 - Math.sqrt(1 - p * p);\n\t\t\t},\n\t\t\tElastic: function Elastic(p) {\n\t\t\t\treturn p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);\n\t\t\t},\n\t\t\tBack: function Back(p) {\n\t\t\t\treturn p * p * (3 * p - 2);\n\t\t\t},\n\t\t\tBounce: function Bounce(p) {\n\t\t\t\tvar pow2,\n\t\t\t\t    bounce = 4;\n\n\t\t\t\twhile (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}\n\t\t\t\treturn 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);\n\t\t\t}\n\t\t});\n\n\t\t$.each(baseEasings, function (name, easeIn) {\n\t\t\t$.easing[\"easeIn\" + name] = easeIn;\n\t\t\t$.easing[\"easeOut\" + name] = function (p) {\n\t\t\t\treturn 1 - easeIn(1 - p);\n\t\t\t};\n\t\t\t$.easing[\"easeInOut\" + name] = function (p) {\n\t\t\t\treturn p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;\n\t\t\t};\n\t\t});\n\t})();\n\n\tvar effect = $.effects;\n\n\t/*!\n  * jQuery UI Effects Blind 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/blind-effect/\n  */\n\n\tvar effectBlind = $.effects.effect.blind = function (o, done) {\n\t\t// Create element\n\t\tvar el = $(this),\n\t\t    rvertical = /up|down|vertical/,\n\t\t    rpositivemotion = /up|left|vertical|horizontal/,\n\t\t    props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n\t\t    mode = $.effects.setMode(el, o.mode || \"hide\"),\n\t\t    direction = o.direction || \"up\",\n\t\t    vertical = rvertical.test(direction),\n\t\t    ref = vertical ? \"height\" : \"width\",\n\t\t    ref2 = vertical ? \"top\" : \"left\",\n\t\t    motion = rpositivemotion.test(direction),\n\t\t    animation = {},\n\t\t    show = mode === \"show\",\n\t\t    wrapper,\n\t\t    distance,\n\t\t    margin;\n\n\t\t// if already wrapped, the wrapper's properties are my property. #6245\n\t\tif (el.parent().is(\".ui-effects-wrapper\")) {\n\t\t\t$.effects.save(el.parent(), props);\n\t\t} else {\n\t\t\t$.effects.save(el, props);\n\t\t}\n\t\tel.show();\n\t\twrapper = $.effects.createWrapper(el).css({\n\t\t\toverflow: \"hidden\"\n\t\t});\n\n\t\tdistance = wrapper[ref]();\n\t\tmargin = parseFloat(wrapper.css(ref2)) || 0;\n\n\t\tanimation[ref] = show ? distance : 0;\n\t\tif (!motion) {\n\t\t\tel.css(vertical ? \"bottom\" : \"right\", 0).css(vertical ? \"top\" : \"left\", \"auto\").css({ position: \"absolute\" });\n\n\t\t\tanimation[ref2] = show ? margin : distance + margin;\n\t\t}\n\n\t\t// start at 0 if we are showing\n\t\tif (show) {\n\t\t\twrapper.css(ref, 0);\n\t\t\tif (!motion) {\n\t\t\t\twrapper.css(ref2, margin + distance);\n\t\t\t}\n\t\t}\n\n\t\t// Animate\n\t\twrapper.animate(animation, {\n\t\t\tduration: o.duration,\n\t\t\teasing: o.easing,\n\t\t\tqueue: false,\n\t\t\tcomplete: function complete() {\n\t\t\t\tif (mode === \"hide\") {\n\t\t\t\t\tel.hide();\n\t\t\t\t}\n\t\t\t\t$.effects.restore(el, props);\n\t\t\t\t$.effects.removeWrapper(el);\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Bounce 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/bounce-effect/\n  */\n\n\tvar effectBounce = $.effects.effect.bounce = function (o, done) {\n\t\tvar el = $(this),\n\t\t    props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n\n\n\t\t// defaults:\n\t\tmode = $.effects.setMode(el, o.mode || \"effect\"),\n\t\t    hide = mode === \"hide\",\n\t\t    show = mode === \"show\",\n\t\t    direction = o.direction || \"up\",\n\t\t    distance = o.distance,\n\t\t    times = o.times || 5,\n\n\n\t\t// number of internal animations\n\t\tanims = times * 2 + (show || hide ? 1 : 0),\n\t\t    speed = o.duration / anims,\n\t\t    easing = o.easing,\n\n\n\t\t// utility:\n\t\tref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n\t\t    motion = direction === \"up\" || direction === \"left\",\n\t\t    i,\n\t\t    upAnim,\n\t\t    downAnim,\n\n\n\t\t// we will need to re-assemble the queue to stack our animations in place\n\t\tqueue = el.queue(),\n\t\t    queuelen = queue.length;\n\n\t\t// Avoid touching opacity to prevent clearType and PNG issues in IE\n\t\tif (show || hide) {\n\t\t\tprops.push(\"opacity\");\n\t\t}\n\n\t\t$.effects.save(el, props);\n\t\tel.show();\n\t\t$.effects.createWrapper(el); // Create Wrapper\n\n\t\t// default distance for the BIGGEST bounce is the outer Distance / 3\n\t\tif (!distance) {\n\t\t\tdistance = el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"]() / 3;\n\t\t}\n\n\t\tif (show) {\n\t\t\tdownAnim = { opacity: 1 };\n\t\t\tdownAnim[ref] = 0;\n\n\t\t\t// if we are showing, force opacity 0 and set the initial position\n\t\t\t// then do the \"first\" animation\n\t\t\tel.css(\"opacity\", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);\n\t\t}\n\n\t\t// start at the smallest distance if we are hiding\n\t\tif (hide) {\n\t\t\tdistance = distance / Math.pow(2, times - 1);\n\t\t}\n\n\t\tdownAnim = {};\n\t\tdownAnim[ref] = 0;\n\t\t// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\n\t\tfor (i = 0; i < times; i++) {\n\t\t\tupAnim = {};\n\t\t\tupAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n\n\t\t\tel.animate(upAnim, speed, easing).animate(downAnim, speed, easing);\n\n\t\t\tdistance = hide ? distance * 2 : distance / 2;\n\t\t}\n\n\t\t// Last Bounce when Hiding\n\t\tif (hide) {\n\t\t\tupAnim = { opacity: 0 };\n\t\t\tupAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n\n\t\t\tel.animate(upAnim, speed, easing);\n\t\t}\n\n\t\tel.queue(function () {\n\t\t\tif (hide) {\n\t\t\t\tel.hide();\n\t\t\t}\n\t\t\t$.effects.restore(el, props);\n\t\t\t$.effects.removeWrapper(el);\n\t\t\tdone();\n\t\t});\n\n\t\t// inject all the animations we just queued to be first in line (after \"inprogress\")\n\t\tif (queuelen > 1) {\n\t\t\tqueue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n\t\t}\n\t\tel.dequeue();\n\t};\n\n\t/*!\n  * jQuery UI Effects Clip 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/clip-effect/\n  */\n\n\tvar effectClip = $.effects.effect.clip = function (o, done) {\n\t\t// Create element\n\t\tvar el = $(this),\n\t\t    props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n\t\t    mode = $.effects.setMode(el, o.mode || \"hide\"),\n\t\t    show = mode === \"show\",\n\t\t    direction = o.direction || \"vertical\",\n\t\t    vert = direction === \"vertical\",\n\t\t    size = vert ? \"height\" : \"width\",\n\t\t    position = vert ? \"top\" : \"left\",\n\t\t    animation = {},\n\t\t    wrapper,\n\t\t    animate,\n\t\t    distance;\n\n\t\t// Save & Show\n\t\t$.effects.save(el, props);\n\t\tel.show();\n\n\t\t// Create Wrapper\n\t\twrapper = $.effects.createWrapper(el).css({\n\t\t\toverflow: \"hidden\"\n\t\t});\n\t\tanimate = el[0].tagName === \"IMG\" ? wrapper : el;\n\t\tdistance = animate[size]();\n\n\t\t// Shift\n\t\tif (show) {\n\t\t\tanimate.css(size, 0);\n\t\t\tanimate.css(position, distance / 2);\n\t\t}\n\n\t\t// Create Animation Object:\n\t\tanimation[size] = show ? distance : 0;\n\t\tanimation[position] = show ? 0 : distance / 2;\n\n\t\t// Animate\n\t\tanimate.animate(animation, {\n\t\t\tqueue: false,\n\t\t\tduration: o.duration,\n\t\t\teasing: o.easing,\n\t\t\tcomplete: function complete() {\n\t\t\t\tif (!show) {\n\t\t\t\t\tel.hide();\n\t\t\t\t}\n\t\t\t\t$.effects.restore(el, props);\n\t\t\t\t$.effects.removeWrapper(el);\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Drop 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/drop-effect/\n  */\n\n\tvar effectDrop = $.effects.effect.drop = function (o, done) {\n\n\t\tvar el = $(this),\n\t\t    props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"opacity\", \"height\", \"width\"],\n\t\t    mode = $.effects.setMode(el, o.mode || \"hide\"),\n\t\t    show = mode === \"show\",\n\t\t    direction = o.direction || \"left\",\n\t\t    ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n\t\t    motion = direction === \"up\" || direction === \"left\" ? \"pos\" : \"neg\",\n\t\t    animation = {\n\t\t\topacity: show ? 1 : 0\n\t\t},\n\t\t    distance;\n\n\t\t// Adjust\n\t\t$.effects.save(el, props);\n\t\tel.show();\n\t\t$.effects.createWrapper(el);\n\n\t\tdistance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true) / 2;\n\n\t\tif (show) {\n\t\t\tel.css(\"opacity\", 0).css(ref, motion === \"pos\" ? -distance : distance);\n\t\t}\n\n\t\t// Animation\n\t\tanimation[ref] = (show ? motion === \"pos\" ? \"+=\" : \"-=\" : motion === \"pos\" ? \"-=\" : \"+=\") + distance;\n\n\t\t// Animate\n\t\tel.animate(animation, {\n\t\t\tqueue: false,\n\t\t\tduration: o.duration,\n\t\t\teasing: o.easing,\n\t\t\tcomplete: function complete() {\n\t\t\t\tif (mode === \"hide\") {\n\t\t\t\t\tel.hide();\n\t\t\t\t}\n\t\t\t\t$.effects.restore(el, props);\n\t\t\t\t$.effects.removeWrapper(el);\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Explode 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/explode-effect/\n  */\n\n\tvar effectExplode = $.effects.effect.explode = function (o, done) {\n\n\t\tvar rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3,\n\t\t    cells = rows,\n\t\t    el = $(this),\n\t\t    mode = $.effects.setMode(el, o.mode || \"hide\"),\n\t\t    show = mode === \"show\",\n\n\n\t\t// show and then visibility:hidden the element before calculating offset\n\t\toffset = el.show().css(\"visibility\", \"hidden\").offset(),\n\n\n\t\t// width and height of a piece\n\t\twidth = Math.ceil(el.outerWidth() / cells),\n\t\t    height = Math.ceil(el.outerHeight() / rows),\n\t\t    pieces = [],\n\n\n\t\t// loop\n\t\ti,\n\t\t    j,\n\t\t    left,\n\t\t    top,\n\t\t    mx,\n\t\t    my;\n\n\t\t// children animate complete:\n\t\tfunction childComplete() {\n\t\t\tpieces.push(this);\n\t\t\tif (pieces.length === rows * cells) {\n\t\t\t\tanimComplete();\n\t\t\t}\n\t\t}\n\n\t\t// clone the element for each row and cell.\n\t\tfor (i = 0; i < rows; i++) {\n\t\t\t// ===>\n\t\t\ttop = offset.top + i * height;\n\t\t\tmy = i - (rows - 1) / 2;\n\n\t\t\tfor (j = 0; j < cells; j++) {\n\t\t\t\t// |||\n\t\t\t\tleft = offset.left + j * width;\n\t\t\t\tmx = j - (cells - 1) / 2;\n\n\t\t\t\t// Create a clone of the now hidden main element that will be absolute positioned\n\t\t\t\t// within a wrapper div off the -left and -top equal to size of our pieces\n\t\t\t\tel.clone().appendTo(\"body\").wrap(\"<div></div>\").css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\tvisibility: \"visible\",\n\t\t\t\t\tleft: -j * width,\n\t\t\t\t\ttop: -i * height\n\t\t\t\t})\n\n\t\t\t\t// select the wrapper - make it overflow: hidden and absolute positioned based on\n\t\t\t\t// where the original was located +left and +top equal to the size of pieces\n\t\t\t\t.parent().addClass(\"ui-effects-explode\").css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\toverflow: \"hidden\",\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: height,\n\t\t\t\t\tleft: left + (show ? mx * width : 0),\n\t\t\t\t\ttop: top + (show ? my * height : 0),\n\t\t\t\t\topacity: show ? 0 : 1\n\t\t\t\t}).animate({\n\t\t\t\t\tleft: left + (show ? 0 : mx * width),\n\t\t\t\t\ttop: top + (show ? 0 : my * height),\n\t\t\t\t\topacity: show ? 1 : 0\n\t\t\t\t}, o.duration || 500, o.easing, childComplete);\n\t\t\t}\n\t\t}\n\n\t\tfunction animComplete() {\n\t\t\tel.css({\n\t\t\t\tvisibility: \"visible\"\n\t\t\t});\n\t\t\t$(pieces).remove();\n\t\t\tif (!show) {\n\t\t\t\tel.hide();\n\t\t\t}\n\t\t\tdone();\n\t\t}\n\t};\n\n\t/*!\n  * jQuery UI Effects Fade 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/fade-effect/\n  */\n\n\tvar effectFade = $.effects.effect.fade = function (o, done) {\n\t\tvar el = $(this),\n\t\t    mode = $.effects.setMode(el, o.mode || \"toggle\");\n\n\t\tel.animate({\n\t\t\topacity: mode\n\t\t}, {\n\t\t\tqueue: false,\n\t\t\tduration: o.duration,\n\t\t\teasing: o.easing,\n\t\t\tcomplete: done\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Fold 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/fold-effect/\n  */\n\n\tvar effectFold = $.effects.effect.fold = function (o, done) {\n\n\t\t// Create element\n\t\tvar el = $(this),\n\t\t    props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n\t\t    mode = $.effects.setMode(el, o.mode || \"hide\"),\n\t\t    show = mode === \"show\",\n\t\t    hide = mode === \"hide\",\n\t\t    size = o.size || 15,\n\t\t    percent = /([0-9]+)%/.exec(size),\n\t\t    horizFirst = !!o.horizFirst,\n\t\t    widthFirst = show !== horizFirst,\n\t\t    ref = widthFirst ? [\"width\", \"height\"] : [\"height\", \"width\"],\n\t\t    duration = o.duration / 2,\n\t\t    wrapper,\n\t\t    distance,\n\t\t    animation1 = {},\n\t\t    animation2 = {};\n\n\t\t$.effects.save(el, props);\n\t\tel.show();\n\n\t\t// Create Wrapper\n\t\twrapper = $.effects.createWrapper(el).css({\n\t\t\toverflow: \"hidden\"\n\t\t});\n\t\tdistance = widthFirst ? [wrapper.width(), wrapper.height()] : [wrapper.height(), wrapper.width()];\n\n\t\tif (percent) {\n\t\t\tsize = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];\n\t\t}\n\t\tif (show) {\n\t\t\twrapper.css(horizFirst ? {\n\t\t\t\theight: 0,\n\t\t\t\twidth: size\n\t\t\t} : {\n\t\t\t\theight: size,\n\t\t\t\twidth: 0\n\t\t\t});\n\t\t}\n\n\t\t// Animation\n\t\tanimation1[ref[0]] = show ? distance[0] : size;\n\t\tanimation2[ref[1]] = show ? distance[1] : 0;\n\n\t\t// Animate\n\t\twrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function () {\n\t\t\tif (hide) {\n\t\t\t\tel.hide();\n\t\t\t}\n\t\t\t$.effects.restore(el, props);\n\t\t\t$.effects.removeWrapper(el);\n\t\t\tdone();\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Highlight 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/highlight-effect/\n  */\n\n\tvar effectHighlight = $.effects.effect.highlight = function (o, done) {\n\t\tvar elem = $(this),\n\t\t    props = [\"backgroundImage\", \"backgroundColor\", \"opacity\"],\n\t\t    mode = $.effects.setMode(elem, o.mode || \"show\"),\n\t\t    animation = {\n\t\t\tbackgroundColor: elem.css(\"backgroundColor\")\n\t\t};\n\n\t\tif (mode === \"hide\") {\n\t\t\tanimation.opacity = 0;\n\t\t}\n\n\t\t$.effects.save(elem, props);\n\n\t\telem.show().css({\n\t\t\tbackgroundImage: \"none\",\n\t\t\tbackgroundColor: o.color || \"#ffff99\"\n\t\t}).animate(animation, {\n\t\t\tqueue: false,\n\t\t\tduration: o.duration,\n\t\t\teasing: o.easing,\n\t\t\tcomplete: function complete() {\n\t\t\t\tif (mode === \"hide\") {\n\t\t\t\t\telem.hide();\n\t\t\t\t}\n\t\t\t\t$.effects.restore(elem, props);\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Size 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/size-effect/\n  */\n\n\tvar effectSize = $.effects.effect.size = function (o, done) {\n\n\t\t// Create element\n\t\tvar original,\n\t\t    baseline,\n\t\t    factor,\n\t\t    el = $(this),\n\t\t    props0 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\", \"overflow\", \"opacity\"],\n\n\n\t\t// Always restore\n\t\tprops1 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"overflow\", \"opacity\"],\n\n\n\t\t// Copy for children\n\t\tprops2 = [\"width\", \"height\", \"overflow\"],\n\t\t    cProps = [\"fontSize\"],\n\t\t    vProps = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"],\n\t\t    hProps = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"],\n\n\n\t\t// Set options\n\t\tmode = $.effects.setMode(el, o.mode || \"effect\"),\n\t\t    restore = o.restore || mode !== \"effect\",\n\t\t    scale = o.scale || \"both\",\n\t\t    origin = o.origin || [\"middle\", \"center\"],\n\t\t    position = el.css(\"position\"),\n\t\t    props = restore ? props0 : props1,\n\t\t    zero = {\n\t\t\theight: 0,\n\t\t\twidth: 0,\n\t\t\touterHeight: 0,\n\t\t\touterWidth: 0\n\t\t};\n\n\t\tif (mode === \"show\") {\n\t\t\tel.show();\n\t\t}\n\t\toriginal = {\n\t\t\theight: el.height(),\n\t\t\twidth: el.width(),\n\t\t\touterHeight: el.outerHeight(),\n\t\t\touterWidth: el.outerWidth()\n\t\t};\n\n\t\tif (o.mode === \"toggle\" && mode === \"show\") {\n\t\t\tel.from = o.to || zero;\n\t\t\tel.to = o.from || original;\n\t\t} else {\n\t\t\tel.from = o.from || (mode === \"show\" ? zero : original);\n\t\t\tel.to = o.to || (mode === \"hide\" ? zero : original);\n\t\t}\n\n\t\t// Set scaling factor\n\t\tfactor = {\n\t\t\tfrom: {\n\t\t\t\ty: el.from.height / original.height,\n\t\t\t\tx: el.from.width / original.width\n\t\t\t},\n\t\t\tto: {\n\t\t\t\ty: el.to.height / original.height,\n\t\t\t\tx: el.to.width / original.width\n\t\t\t}\n\t\t};\n\n\t\t// Scale the css box\n\t\tif (scale === \"box\" || scale === \"both\") {\n\n\t\t\t// Vertical props scaling\n\t\t\tif (factor.from.y !== factor.to.y) {\n\t\t\t\tprops = props.concat(vProps);\n\t\t\t\tel.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);\n\t\t\t\tel.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);\n\t\t\t}\n\n\t\t\t// Horizontal props scaling\n\t\t\tif (factor.from.x !== factor.to.x) {\n\t\t\t\tprops = props.concat(hProps);\n\t\t\t\tel.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);\n\t\t\t\tel.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);\n\t\t\t}\n\t\t}\n\n\t\t// Scale the content\n\t\tif (scale === \"content\" || scale === \"both\") {\n\n\t\t\t// Vertical props scaling\n\t\t\tif (factor.from.y !== factor.to.y) {\n\t\t\t\tprops = props.concat(cProps).concat(props2);\n\t\t\t\tel.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);\n\t\t\t\tel.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);\n\t\t\t}\n\t\t}\n\n\t\t$.effects.save(el, props);\n\t\tel.show();\n\t\t$.effects.createWrapper(el);\n\t\tel.css(\"overflow\", \"hidden\").css(el.from);\n\n\t\t// Adjust\n\t\tif (origin) {\n\t\t\t// Calculate baseline shifts\n\t\t\tbaseline = $.effects.getBaseline(origin, original);\n\t\t\tel.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;\n\t\t\tel.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;\n\t\t\tel.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;\n\t\t\tel.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;\n\t\t}\n\t\tel.css(el.from); // set top & left\n\n\t\t// Animate\n\t\tif (scale === \"content\" || scale === \"both\") {\n\t\t\t// Scale the children\n\n\t\t\t// Add margins/font-size\n\t\t\tvProps = vProps.concat([\"marginTop\", \"marginBottom\"]).concat(cProps);\n\t\t\thProps = hProps.concat([\"marginLeft\", \"marginRight\"]);\n\t\t\tprops2 = props0.concat(vProps).concat(hProps);\n\n\t\t\tel.find(\"*[width]\").each(function () {\n\t\t\t\tvar child = $(this),\n\t\t\t\t    c_original = {\n\t\t\t\t\theight: child.height(),\n\t\t\t\t\twidth: child.width(),\n\t\t\t\t\touterHeight: child.outerHeight(),\n\t\t\t\t\touterWidth: child.outerWidth()\n\t\t\t\t};\n\t\t\t\tif (restore) {\n\t\t\t\t\t$.effects.save(child, props2);\n\t\t\t\t}\n\n\t\t\t\tchild.from = {\n\t\t\t\t\theight: c_original.height * factor.from.y,\n\t\t\t\t\twidth: c_original.width * factor.from.x,\n\t\t\t\t\touterHeight: c_original.outerHeight * factor.from.y,\n\t\t\t\t\touterWidth: c_original.outerWidth * factor.from.x\n\t\t\t\t};\n\t\t\t\tchild.to = {\n\t\t\t\t\theight: c_original.height * factor.to.y,\n\t\t\t\t\twidth: c_original.width * factor.to.x,\n\t\t\t\t\touterHeight: c_original.height * factor.to.y,\n\t\t\t\t\touterWidth: c_original.width * factor.to.x\n\t\t\t\t};\n\n\t\t\t\t// Vertical props scaling\n\t\t\t\tif (factor.from.y !== factor.to.y) {\n\t\t\t\t\tchild.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);\n\t\t\t\t\tchild.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);\n\t\t\t\t}\n\n\t\t\t\t// Horizontal props scaling\n\t\t\t\tif (factor.from.x !== factor.to.x) {\n\t\t\t\t\tchild.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);\n\t\t\t\t\tchild.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);\n\t\t\t\t}\n\n\t\t\t\t// Animate children\n\t\t\t\tchild.css(child.from);\n\t\t\t\tchild.animate(child.to, o.duration, o.easing, function () {\n\n\t\t\t\t\t// Restore children\n\t\t\t\t\tif (restore) {\n\t\t\t\t\t\t$.effects.restore(child, props2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Animate\n\t\tel.animate(el.to, {\n\t\t\tqueue: false,\n\t\t\tduration: o.duration,\n\t\t\teasing: o.easing,\n\t\t\tcomplete: function complete() {\n\t\t\t\tif (el.to.opacity === 0) {\n\t\t\t\t\tel.css(\"opacity\", el.from.opacity);\n\t\t\t\t}\n\t\t\t\tif (mode === \"hide\") {\n\t\t\t\t\tel.hide();\n\t\t\t\t}\n\t\t\t\t$.effects.restore(el, props);\n\t\t\t\tif (!restore) {\n\n\t\t\t\t\t// we need to calculate our new positioning based on the scaling\n\t\t\t\t\tif (position === \"static\") {\n\t\t\t\t\t\tel.css({\n\t\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\t\ttop: el.to.top,\n\t\t\t\t\t\t\tleft: el.to.left\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$.each([\"top\", \"left\"], function (idx, pos) {\n\t\t\t\t\t\t\tel.css(pos, function (_, str) {\n\t\t\t\t\t\t\t\tvar val = parseInt(str, 10),\n\t\t\t\t\t\t\t\t    toRef = idx ? el.to.left : el.to.top;\n\n\t\t\t\t\t\t\t\t// if original was \"auto\", recalculate the new value from wrapper\n\t\t\t\t\t\t\t\tif (str === \"auto\") {\n\t\t\t\t\t\t\t\t\treturn toRef + \"px\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn val + toRef + \"px\";\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$.effects.removeWrapper(el);\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Scale 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/scale-effect/\n  */\n\n\tvar effectScale = $.effects.effect.scale = function (o, done) {\n\n\t\t// Create element\n\t\tvar el = $(this),\n\t\t    options = $.extend(true, {}, o),\n\t\t    mode = $.effects.setMode(el, o.mode || \"effect\"),\n\t\t    percent = parseInt(o.percent, 10) || (parseInt(o.percent, 10) === 0 ? 0 : mode === \"hide\" ? 0 : 100),\n\t\t    direction = o.direction || \"both\",\n\t\t    origin = o.origin,\n\t\t    original = {\n\t\t\theight: el.height(),\n\t\t\twidth: el.width(),\n\t\t\touterHeight: el.outerHeight(),\n\t\t\touterWidth: el.outerWidth()\n\t\t},\n\t\t    factor = {\n\t\t\ty: direction !== \"horizontal\" ? percent / 100 : 1,\n\t\t\tx: direction !== \"vertical\" ? percent / 100 : 1\n\t\t};\n\n\t\t// We are going to pass this effect to the size effect:\n\t\toptions.effect = \"size\";\n\t\toptions.queue = false;\n\t\toptions.complete = done;\n\n\t\t// Set default origin and restore for show/hide\n\t\tif (mode !== \"effect\") {\n\t\t\toptions.origin = origin || [\"middle\", \"center\"];\n\t\t\toptions.restore = true;\n\t\t}\n\n\t\toptions.from = o.from || (mode === \"show\" ? {\n\t\t\theight: 0,\n\t\t\twidth: 0,\n\t\t\touterHeight: 0,\n\t\t\touterWidth: 0\n\t\t} : original);\n\t\toptions.to = {\n\t\t\theight: original.height * factor.y,\n\t\t\twidth: original.width * factor.x,\n\t\t\touterHeight: original.outerHeight * factor.y,\n\t\t\touterWidth: original.outerWidth * factor.x\n\t\t};\n\n\t\t// Fade option to support puff\n\t\tif (options.fade) {\n\t\t\tif (mode === \"show\") {\n\t\t\t\toptions.from.opacity = 0;\n\t\t\t\toptions.to.opacity = 1;\n\t\t\t}\n\t\t\tif (mode === \"hide\") {\n\t\t\t\toptions.from.opacity = 1;\n\t\t\t\toptions.to.opacity = 0;\n\t\t\t}\n\t\t}\n\n\t\t// Animate\n\t\tel.effect(options);\n\t};\n\n\t/*!\n  * jQuery UI Effects Puff 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/puff-effect/\n  */\n\n\tvar effectPuff = $.effects.effect.puff = function (o, done) {\n\t\tvar elem = $(this),\n\t\t    mode = $.effects.setMode(elem, o.mode || \"hide\"),\n\t\t    hide = mode === \"hide\",\n\t\t    percent = parseInt(o.percent, 10) || 150,\n\t\t    factor = percent / 100,\n\t\t    original = {\n\t\t\theight: elem.height(),\n\t\t\twidth: elem.width(),\n\t\t\touterHeight: elem.outerHeight(),\n\t\t\touterWidth: elem.outerWidth()\n\t\t};\n\n\t\t$.extend(o, {\n\t\t\teffect: \"scale\",\n\t\t\tqueue: false,\n\t\t\tfade: true,\n\t\t\tmode: mode,\n\t\t\tcomplete: done,\n\t\t\tpercent: hide ? percent : 100,\n\t\t\tfrom: hide ? original : {\n\t\t\t\theight: original.height * factor,\n\t\t\t\twidth: original.width * factor,\n\t\t\t\touterHeight: original.outerHeight * factor,\n\t\t\t\touterWidth: original.outerWidth * factor\n\t\t\t}\n\t\t});\n\n\t\telem.effect(o);\n\t};\n\n\t/*!\n  * jQuery UI Effects Pulsate 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/pulsate-effect/\n  */\n\n\tvar effectPulsate = $.effects.effect.pulsate = function (o, done) {\n\t\tvar elem = $(this),\n\t\t    mode = $.effects.setMode(elem, o.mode || \"show\"),\n\t\t    show = mode === \"show\",\n\t\t    hide = mode === \"hide\",\n\t\t    showhide = show || mode === \"hide\",\n\n\n\t\t// showing or hiding leaves of the \"last\" animation\n\t\tanims = (o.times || 5) * 2 + (showhide ? 1 : 0),\n\t\t    duration = o.duration / anims,\n\t\t    animateTo = 0,\n\t\t    queue = elem.queue(),\n\t\t    queuelen = queue.length,\n\t\t    i;\n\n\t\tif (show || !elem.is(\":visible\")) {\n\t\t\telem.css(\"opacity\", 0).show();\n\t\t\tanimateTo = 1;\n\t\t}\n\n\t\t// anims - 1 opacity \"toggles\"\n\t\tfor (i = 1; i < anims; i++) {\n\t\t\telem.animate({\n\t\t\t\topacity: animateTo\n\t\t\t}, duration, o.easing);\n\t\t\tanimateTo = 1 - animateTo;\n\t\t}\n\n\t\telem.animate({\n\t\t\topacity: animateTo\n\t\t}, duration, o.easing);\n\n\t\telem.queue(function () {\n\t\t\tif (hide) {\n\t\t\t\telem.hide();\n\t\t\t}\n\t\t\tdone();\n\t\t});\n\n\t\t// We just queued up \"anims\" animations, we need to put them next in the queue\n\t\tif (queuelen > 1) {\n\t\t\tqueue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n\t\t}\n\t\telem.dequeue();\n\t};\n\n\t/*!\n  * jQuery UI Effects Shake 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/shake-effect/\n  */\n\n\tvar effectShake = $.effects.effect.shake = function (o, done) {\n\n\t\tvar el = $(this),\n\t\t    props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n\t\t    mode = $.effects.setMode(el, o.mode || \"effect\"),\n\t\t    direction = o.direction || \"left\",\n\t\t    distance = o.distance || 20,\n\t\t    times = o.times || 3,\n\t\t    anims = times * 2 + 1,\n\t\t    speed = Math.round(o.duration / anims),\n\t\t    ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n\t\t    positiveMotion = direction === \"up\" || direction === \"left\",\n\t\t    animation = {},\n\t\t    animation1 = {},\n\t\t    animation2 = {},\n\t\t    i,\n\n\n\t\t// we will need to re-assemble the queue to stack our animations in place\n\t\tqueue = el.queue(),\n\t\t    queuelen = queue.length;\n\n\t\t$.effects.save(el, props);\n\t\tel.show();\n\t\t$.effects.createWrapper(el);\n\n\t\t// Animation\n\t\tanimation[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance;\n\t\tanimation1[ref] = (positiveMotion ? \"+=\" : \"-=\") + distance * 2;\n\t\tanimation2[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance * 2;\n\n\t\t// Animate\n\t\tel.animate(animation, speed, o.easing);\n\n\t\t// Shakes\n\t\tfor (i = 1; i < times; i++) {\n\t\t\tel.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);\n\t\t}\n\t\tel.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function () {\n\t\t\tif (mode === \"hide\") {\n\t\t\t\tel.hide();\n\t\t\t}\n\t\t\t$.effects.restore(el, props);\n\t\t\t$.effects.removeWrapper(el);\n\t\t\tdone();\n\t\t});\n\n\t\t// inject all the animations we just queued to be first in line (after \"inprogress\")\n\t\tif (queuelen > 1) {\n\t\t\tqueue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n\t\t}\n\t\tel.dequeue();\n\t};\n\n\t/*!\n  * jQuery UI Effects Slide 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/slide-effect/\n  */\n\n\tvar effectSlide = $.effects.effect.slide = function (o, done) {\n\n\t\t// Create element\n\t\tvar el = $(this),\n\t\t    props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\"],\n\t\t    mode = $.effects.setMode(el, o.mode || \"show\"),\n\t\t    show = mode === \"show\",\n\t\t    direction = o.direction || \"left\",\n\t\t    ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n\t\t    positiveMotion = direction === \"up\" || direction === \"left\",\n\t\t    distance,\n\t\t    animation = {};\n\n\t\t// Adjust\n\t\t$.effects.save(el, props);\n\t\tel.show();\n\t\tdistance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true);\n\n\t\t$.effects.createWrapper(el).css({\n\t\t\toverflow: \"hidden\"\n\t\t});\n\n\t\tif (show) {\n\t\t\tel.css(ref, positiveMotion ? isNaN(distance) ? \"-\" + distance : -distance : distance);\n\t\t}\n\n\t\t// Animation\n\t\tanimation[ref] = (show ? positiveMotion ? \"+=\" : \"-=\" : positiveMotion ? \"-=\" : \"+=\") + distance;\n\n\t\t// Animate\n\t\tel.animate(animation, {\n\t\t\tqueue: false,\n\t\t\tduration: o.duration,\n\t\t\teasing: o.easing,\n\t\t\tcomplete: function complete() {\n\t\t\t\tif (mode === \"hide\") {\n\t\t\t\t\tel.hide();\n\t\t\t\t}\n\t\t\t\t$.effects.restore(el, props);\n\t\t\t\t$.effects.removeWrapper(el);\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Effects Transfer 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/transfer-effect/\n  */\n\n\tvar effectTransfer = $.effects.effect.transfer = function (o, done) {\n\t\tvar elem = $(this),\n\t\t    target = $(o.to),\n\t\t    targetFixed = target.css(\"position\") === \"fixed\",\n\t\t    body = $(\"body\"),\n\t\t    fixTop = targetFixed ? body.scrollTop() : 0,\n\t\t    fixLeft = targetFixed ? body.scrollLeft() : 0,\n\t\t    endPosition = target.offset(),\n\t\t    animation = {\n\t\t\ttop: endPosition.top - fixTop,\n\t\t\tleft: endPosition.left - fixLeft,\n\t\t\theight: target.innerHeight(),\n\t\t\twidth: target.innerWidth()\n\t\t},\n\t\t    startPosition = elem.offset(),\n\t\t    transfer = $(\"<div class='ui-effects-transfer'></div>\").appendTo(document.body).addClass(o.className).css({\n\t\t\ttop: startPosition.top - fixTop,\n\t\t\tleft: startPosition.left - fixLeft,\n\t\t\theight: elem.innerHeight(),\n\t\t\twidth: elem.innerWidth(),\n\t\t\tposition: targetFixed ? \"fixed\" : \"absolute\"\n\t\t}).animate(animation, o.duration, o.easing, function () {\n\t\t\ttransfer.remove();\n\t\t\tdone();\n\t\t});\n\t};\n\n\t/*!\n  * jQuery UI Progressbar 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/progressbar/\n  */\n\n\tvar progressbar = $.widget(\"ui.progressbar\", {\n\t\tversion: \"1.11.4\",\n\t\toptions: {\n\t\t\tmax: 100,\n\t\t\tvalue: 0,\n\n\t\t\tchange: null,\n\t\t\tcomplete: null\n\t\t},\n\n\t\tmin: 0,\n\n\t\t_create: function _create() {\n\t\t\t// Constrain initial value\n\t\t\tthis.oldValue = this.options.value = this._constrainedValue();\n\n\t\t\tthis.element.addClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\").attr({\n\t\t\t\t// Only set static values, aria-valuenow and aria-valuemax are\n\t\t\t\t// set inside _refreshValue()\n\t\t\t\trole: \"progressbar\",\n\t\t\t\t\"aria-valuemin\": this.min\n\t\t\t});\n\n\t\t\tthis.valueDiv = $(\"<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>\").appendTo(this.element);\n\n\t\t\tthis._refreshValue();\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.element.removeClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\").removeAttr(\"role\").removeAttr(\"aria-valuemin\").removeAttr(\"aria-valuemax\").removeAttr(\"aria-valuenow\");\n\n\t\t\tthis.valueDiv.remove();\n\t\t},\n\n\t\tvalue: function value(newValue) {\n\t\t\tif (newValue === undefined) {\n\t\t\t\treturn this.options.value;\n\t\t\t}\n\n\t\t\tthis.options.value = this._constrainedValue(newValue);\n\t\t\tthis._refreshValue();\n\t\t},\n\n\t\t_constrainedValue: function _constrainedValue(newValue) {\n\t\t\tif (newValue === undefined) {\n\t\t\t\tnewValue = this.options.value;\n\t\t\t}\n\n\t\t\tthis.indeterminate = newValue === false;\n\n\t\t\t// sanitize value\n\t\t\tif (typeof newValue !== \"number\") {\n\t\t\t\tnewValue = 0;\n\t\t\t}\n\n\t\t\treturn this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));\n\t\t},\n\n\t\t_setOptions: function _setOptions(options) {\n\t\t\t// Ensure \"value\" option is set after other values (like max)\n\t\t\tvar value = options.value;\n\t\t\tdelete options.value;\n\n\t\t\tthis._super(options);\n\n\t\t\tthis.options.value = this._constrainedValue(value);\n\t\t\tthis._refreshValue();\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tif (key === \"max\") {\n\t\t\t\t// Don't allow a max less than min\n\t\t\t\tvalue = Math.max(this.min, value);\n\t\t\t}\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.element.toggleClass(\"ui-state-disabled\", !!value).attr(\"aria-disabled\", value);\n\t\t\t}\n\t\t\tthis._super(key, value);\n\t\t},\n\n\t\t_percentage: function _percentage() {\n\t\t\treturn this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);\n\t\t},\n\n\t\t_refreshValue: function _refreshValue() {\n\t\t\tvar value = this.options.value,\n\t\t\t    percentage = this._percentage();\n\n\t\t\tthis.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass(\"ui-corner-right\", value === this.options.max).width(percentage.toFixed(0) + \"%\");\n\n\t\t\tthis.element.toggleClass(\"ui-progressbar-indeterminate\", this.indeterminate);\n\n\t\t\tif (this.indeterminate) {\n\t\t\t\tthis.element.removeAttr(\"aria-valuenow\");\n\t\t\t\tif (!this.overlayDiv) {\n\t\t\t\t\tthis.overlayDiv = $(\"<div class='ui-progressbar-overlay'></div>\").appendTo(this.valueDiv);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.element.attr({\n\t\t\t\t\t\"aria-valuemax\": this.options.max,\n\t\t\t\t\t\"aria-valuenow\": value\n\t\t\t\t});\n\t\t\t\tif (this.overlayDiv) {\n\t\t\t\t\tthis.overlayDiv.remove();\n\t\t\t\t\tthis.overlayDiv = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.oldValue !== value) {\n\t\t\t\tthis.oldValue = value;\n\t\t\t\tthis._trigger(\"change\");\n\t\t\t}\n\t\t\tif (value === this.options.max) {\n\t\t\t\tthis._trigger(\"complete\");\n\t\t\t}\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Selectable 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/selectable/\n  */\n\n\tvar selectable = $.widget(\"ui.selectable\", $.ui.mouse, {\n\t\tversion: \"1.11.4\",\n\t\toptions: {\n\t\t\tappendTo: \"body\",\n\t\t\tautoRefresh: true,\n\t\t\tdistance: 0,\n\t\t\tfilter: \"*\",\n\t\t\ttolerance: \"touch\",\n\n\t\t\t// callbacks\n\t\t\tselected: null,\n\t\t\tselecting: null,\n\t\t\tstart: null,\n\t\t\tstop: null,\n\t\t\tunselected: null,\n\t\t\tunselecting: null\n\t\t},\n\t\t_create: function _create() {\n\t\t\tvar selectees,\n\t\t\t    that = this;\n\n\t\t\tthis.element.addClass(\"ui-selectable\");\n\n\t\t\tthis.dragged = false;\n\n\t\t\t// cache selectee children based on filter\n\t\t\tthis.refresh = function () {\n\t\t\t\tselectees = $(that.options.filter, that.element[0]);\n\t\t\t\tselectees.addClass(\"ui-selectee\");\n\t\t\t\tselectees.each(function () {\n\t\t\t\t\tvar $this = $(this),\n\t\t\t\t\t    pos = $this.offset();\n\t\t\t\t\t$.data(this, \"selectable-item\", {\n\t\t\t\t\t\telement: this,\n\t\t\t\t\t\t$element: $this,\n\t\t\t\t\t\tleft: pos.left,\n\t\t\t\t\t\ttop: pos.top,\n\t\t\t\t\t\tright: pos.left + $this.outerWidth(),\n\t\t\t\t\t\tbottom: pos.top + $this.outerHeight(),\n\t\t\t\t\t\tstartselected: false,\n\t\t\t\t\t\tselected: $this.hasClass(\"ui-selected\"),\n\t\t\t\t\t\tselecting: $this.hasClass(\"ui-selecting\"),\n\t\t\t\t\t\tunselecting: $this.hasClass(\"ui-unselecting\")\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\tthis.refresh();\n\n\t\t\tthis.selectees = selectees.addClass(\"ui-selectee\");\n\n\t\t\tthis._mouseInit();\n\n\t\t\tthis.helper = $(\"<div class='ui-selectable-helper'></div>\");\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.selectees.removeClass(\"ui-selectee\").removeData(\"selectable-item\");\n\t\t\tthis.element.removeClass(\"ui-selectable ui-selectable-disabled\");\n\t\t\tthis._mouseDestroy();\n\t\t},\n\n\t\t_mouseStart: function _mouseStart(event) {\n\t\t\tvar that = this,\n\t\t\t    options = this.options;\n\n\t\t\tthis.opos = [event.pageX, event.pageY];\n\n\t\t\tif (this.options.disabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.selectees = $(options.filter, this.element[0]);\n\n\t\t\tthis._trigger(\"start\", event);\n\n\t\t\t$(options.appendTo).append(this.helper);\n\t\t\t// position helper (lasso)\n\t\t\tthis.helper.css({\n\t\t\t\t\"left\": event.pageX,\n\t\t\t\t\"top\": event.pageY,\n\t\t\t\t\"width\": 0,\n\t\t\t\t\"height\": 0\n\t\t\t});\n\n\t\t\tif (options.autoRefresh) {\n\t\t\t\tthis.refresh();\n\t\t\t}\n\n\t\t\tthis.selectees.filter(\".ui-selected\").each(function () {\n\t\t\t\tvar selectee = $.data(this, \"selectable-item\");\n\t\t\t\tselectee.startselected = true;\n\t\t\t\tif (!event.metaKey && !event.ctrlKey) {\n\t\t\t\t\tselectee.$element.removeClass(\"ui-selected\");\n\t\t\t\t\tselectee.selected = false;\n\t\t\t\t\tselectee.$element.addClass(\"ui-unselecting\");\n\t\t\t\t\tselectee.unselecting = true;\n\t\t\t\t\t// selectable UNSELECTING callback\n\t\t\t\t\tthat._trigger(\"unselecting\", event, {\n\t\t\t\t\t\tunselecting: selectee.element\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$(event.target).parents().addBack().each(function () {\n\t\t\t\tvar doSelect,\n\t\t\t\t    selectee = $.data(this, \"selectable-item\");\n\t\t\t\tif (selectee) {\n\t\t\t\t\tdoSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass(\"ui-selected\");\n\t\t\t\t\tselectee.$element.removeClass(doSelect ? \"ui-unselecting\" : \"ui-selected\").addClass(doSelect ? \"ui-selecting\" : \"ui-unselecting\");\n\t\t\t\t\tselectee.unselecting = !doSelect;\n\t\t\t\t\tselectee.selecting = doSelect;\n\t\t\t\t\tselectee.selected = doSelect;\n\t\t\t\t\t// selectable (UN)SELECTING callback\n\t\t\t\t\tif (doSelect) {\n\t\t\t\t\t\tthat._trigger(\"selecting\", event, {\n\t\t\t\t\t\t\tselecting: selectee.element\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthat._trigger(\"unselecting\", event, {\n\t\t\t\t\t\t\tunselecting: selectee.element\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_mouseDrag: function _mouseDrag(event) {\n\n\t\t\tthis.dragged = true;\n\n\t\t\tif (this.options.disabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar tmp,\n\t\t\t    that = this,\n\t\t\t    options = this.options,\n\t\t\t    x1 = this.opos[0],\n\t\t\t    y1 = this.opos[1],\n\t\t\t    x2 = event.pageX,\n\t\t\t    y2 = event.pageY;\n\n\t\t\tif (x1 > x2) {\n\t\t\t\ttmp = x2;x2 = x1;x1 = tmp;\n\t\t\t}\n\t\t\tif (y1 > y2) {\n\t\t\t\ttmp = y2;y2 = y1;y1 = tmp;\n\t\t\t}\n\t\t\tthis.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });\n\n\t\t\tthis.selectees.each(function () {\n\t\t\t\tvar selectee = $.data(this, \"selectable-item\"),\n\t\t\t\t    hit = false;\n\n\t\t\t\t//prevent helper from being selected if appendTo: selectable\n\t\t\t\tif (!selectee || selectee.element === that.element[0]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (options.tolerance === \"touch\") {\n\t\t\t\t\thit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1);\n\t\t\t\t} else if (options.tolerance === \"fit\") {\n\t\t\t\t\thit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2;\n\t\t\t\t}\n\n\t\t\t\tif (hit) {\n\t\t\t\t\t// SELECT\n\t\t\t\t\tif (selectee.selected) {\n\t\t\t\t\t\tselectee.$element.removeClass(\"ui-selected\");\n\t\t\t\t\t\tselectee.selected = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (selectee.unselecting) {\n\t\t\t\t\t\tselectee.$element.removeClass(\"ui-unselecting\");\n\t\t\t\t\t\tselectee.unselecting = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (!selectee.selecting) {\n\t\t\t\t\t\tselectee.$element.addClass(\"ui-selecting\");\n\t\t\t\t\t\tselectee.selecting = true;\n\t\t\t\t\t\t// selectable SELECTING callback\n\t\t\t\t\t\tthat._trigger(\"selecting\", event, {\n\t\t\t\t\t\t\tselecting: selectee.element\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// UNSELECT\n\t\t\t\t\tif (selectee.selecting) {\n\t\t\t\t\t\tif ((event.metaKey || event.ctrlKey) && selectee.startselected) {\n\t\t\t\t\t\t\tselectee.$element.removeClass(\"ui-selecting\");\n\t\t\t\t\t\t\tselectee.selecting = false;\n\t\t\t\t\t\t\tselectee.$element.addClass(\"ui-selected\");\n\t\t\t\t\t\t\tselectee.selected = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tselectee.$element.removeClass(\"ui-selecting\");\n\t\t\t\t\t\t\tselectee.selecting = false;\n\t\t\t\t\t\t\tif (selectee.startselected) {\n\t\t\t\t\t\t\t\tselectee.$element.addClass(\"ui-unselecting\");\n\t\t\t\t\t\t\t\tselectee.unselecting = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// selectable UNSELECTING callback\n\t\t\t\t\t\t\tthat._trigger(\"unselecting\", event, {\n\t\t\t\t\t\t\t\tunselecting: selectee.element\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (selectee.selected) {\n\t\t\t\t\t\tif (!event.metaKey && !event.ctrlKey && !selectee.startselected) {\n\t\t\t\t\t\t\tselectee.$element.removeClass(\"ui-selected\");\n\t\t\t\t\t\t\tselectee.selected = false;\n\n\t\t\t\t\t\t\tselectee.$element.addClass(\"ui-unselecting\");\n\t\t\t\t\t\t\tselectee.unselecting = true;\n\t\t\t\t\t\t\t// selectable UNSELECTING callback\n\t\t\t\t\t\t\tthat._trigger(\"unselecting\", event, {\n\t\t\t\t\t\t\t\tunselecting: selectee.element\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_mouseStop: function _mouseStop(event) {\n\t\t\tvar that = this;\n\n\t\t\tthis.dragged = false;\n\n\t\t\t$(\".ui-unselecting\", this.element[0]).each(function () {\n\t\t\t\tvar selectee = $.data(this, \"selectable-item\");\n\t\t\t\tselectee.$element.removeClass(\"ui-unselecting\");\n\t\t\t\tselectee.unselecting = false;\n\t\t\t\tselectee.startselected = false;\n\t\t\t\tthat._trigger(\"unselected\", event, {\n\t\t\t\t\tunselected: selectee.element\n\t\t\t\t});\n\t\t\t});\n\t\t\t$(\".ui-selecting\", this.element[0]).each(function () {\n\t\t\t\tvar selectee = $.data(this, \"selectable-item\");\n\t\t\t\tselectee.$element.removeClass(\"ui-selecting\").addClass(\"ui-selected\");\n\t\t\t\tselectee.selecting = false;\n\t\t\t\tselectee.selected = true;\n\t\t\t\tselectee.startselected = true;\n\t\t\t\tthat._trigger(\"selected\", event, {\n\t\t\t\t\tselected: selectee.element\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis._trigger(\"stop\", event);\n\n\t\t\tthis.helper.remove();\n\n\t\t\treturn false;\n\t\t}\n\n\t});\n\n\t/*!\n  * jQuery UI Selectmenu 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/selectmenu\n  */\n\n\tvar selectmenu = $.widget(\"ui.selectmenu\", {\n\t\tversion: \"1.11.4\",\n\t\tdefaultElement: \"<select>\",\n\t\toptions: {\n\t\t\tappendTo: null,\n\t\t\tdisabled: null,\n\t\t\ticons: {\n\t\t\t\tbutton: \"ui-icon-triangle-1-s\"\n\t\t\t},\n\t\t\tposition: {\n\t\t\t\tmy: \"left top\",\n\t\t\t\tat: \"left bottom\",\n\t\t\t\tcollision: \"none\"\n\t\t\t},\n\t\t\twidth: null,\n\n\t\t\t// callbacks\n\t\t\tchange: null,\n\t\t\tclose: null,\n\t\t\tfocus: null,\n\t\t\topen: null,\n\t\t\tselect: null\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\tvar selectmenuId = this.element.uniqueId().attr(\"id\");\n\t\t\tthis.ids = {\n\t\t\t\telement: selectmenuId,\n\t\t\t\tbutton: selectmenuId + \"-button\",\n\t\t\t\tmenu: selectmenuId + \"-menu\"\n\t\t\t};\n\n\t\t\tthis._drawButton();\n\t\t\tthis._drawMenu();\n\n\t\t\tif (this.options.disabled) {\n\t\t\t\tthis.disable();\n\t\t\t}\n\t\t},\n\n\t\t_drawButton: function _drawButton() {\n\t\t\tvar that = this;\n\n\t\t\t// Associate existing label with the new button\n\t\t\tthis.label = $(\"label[for='\" + this.ids.element + \"']\").attr(\"for\", this.ids.button);\n\t\t\tthis._on(this.label, {\n\t\t\t\tclick: function click(event) {\n\t\t\t\t\tthis.button.focus();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Hide original select element\n\t\t\tthis.element.hide();\n\n\t\t\t// Create button\n\t\t\tthis.button = $(\"<span>\", {\n\t\t\t\t\"class\": \"ui-selectmenu-button ui-widget ui-state-default ui-corner-all\",\n\t\t\t\ttabindex: this.options.disabled ? -1 : 0,\n\t\t\t\tid: this.ids.button,\n\t\t\t\trole: \"combobox\",\n\t\t\t\t\"aria-expanded\": \"false\",\n\t\t\t\t\"aria-autocomplete\": \"list\",\n\t\t\t\t\"aria-owns\": this.ids.menu,\n\t\t\t\t\"aria-haspopup\": \"true\"\n\t\t\t}).insertAfter(this.element);\n\n\t\t\t$(\"<span>\", {\n\t\t\t\t\"class\": \"ui-icon \" + this.options.icons.button\n\t\t\t}).prependTo(this.button);\n\n\t\t\tthis.buttonText = $(\"<span>\", {\n\t\t\t\t\"class\": \"ui-selectmenu-text\"\n\t\t\t}).appendTo(this.button);\n\n\t\t\tthis._setText(this.buttonText, this.element.find(\"option:selected\").text());\n\t\t\tthis._resizeButton();\n\n\t\t\tthis._on(this.button, this._buttonEvents);\n\t\t\tthis.button.one(\"focusin\", function () {\n\n\t\t\t\t// Delay rendering the menu items until the button receives focus.\n\t\t\t\t// The menu may have already been rendered via a programmatic open.\n\t\t\t\tif (!that.menuItems) {\n\t\t\t\t\tthat._refreshMenu();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._hoverable(this.button);\n\t\t\tthis._focusable(this.button);\n\t\t},\n\n\t\t_drawMenu: function _drawMenu() {\n\t\t\tvar that = this;\n\n\t\t\t// Create menu\n\t\t\tthis.menu = $(\"<ul>\", {\n\t\t\t\t\"aria-hidden\": \"true\",\n\t\t\t\t\"aria-labelledby\": this.ids.button,\n\t\t\t\tid: this.ids.menu\n\t\t\t});\n\n\t\t\t// Wrap menu\n\t\t\tthis.menuWrap = $(\"<div>\", {\n\t\t\t\t\"class\": \"ui-selectmenu-menu ui-front\"\n\t\t\t}).append(this.menu).appendTo(this._appendTo());\n\n\t\t\t// Initialize menu widget\n\t\t\tthis.menuInstance = this.menu.menu({\n\t\t\t\trole: \"listbox\",\n\t\t\t\tselect: function select(event, ui) {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t// support: IE8\n\t\t\t\t\t// If the item was selected via a click, the text selection\n\t\t\t\t\t// will be destroyed in IE\n\t\t\t\t\tthat._setSelection();\n\n\t\t\t\t\tthat._select(ui.item.data(\"ui-selectmenu-item\"), event);\n\t\t\t\t},\n\t\t\t\tfocus: function focus(event, ui) {\n\t\t\t\t\tvar item = ui.item.data(\"ui-selectmenu-item\");\n\n\t\t\t\t\t// Prevent inital focus from firing and check if its a newly focused item\n\t\t\t\t\tif (that.focusIndex != null && item.index !== that.focusIndex) {\n\t\t\t\t\t\tthat._trigger(\"focus\", event, { item: item });\n\t\t\t\t\t\tif (!that.isOpen) {\n\t\t\t\t\t\t\tthat._select(item, event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthat.focusIndex = item.index;\n\n\t\t\t\t\tthat.button.attr(\"aria-activedescendant\", that.menuItems.eq(item.index).attr(\"id\"));\n\t\t\t\t}\n\t\t\t}).menu(\"instance\");\n\n\t\t\t// Adjust menu styles to dropdown\n\t\t\tthis.menu.addClass(\"ui-corner-bottom\").removeClass(\"ui-corner-all\");\n\n\t\t\t// Don't close the menu on mouseleave\n\t\t\tthis.menuInstance._off(this.menu, \"mouseleave\");\n\n\t\t\t// Cancel the menu's collapseAll on document click\n\t\t\tthis.menuInstance._closeOnDocumentClick = function () {\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\t// Selects often contain empty items, but never contain dividers\n\t\t\tthis.menuInstance._isDivider = function () {\n\t\t\t\treturn false;\n\t\t\t};\n\t\t},\n\n\t\trefresh: function refresh() {\n\t\t\tthis._refreshMenu();\n\t\t\tthis._setText(this.buttonText, this._getSelectedItem().text());\n\t\t\tif (!this.options.width) {\n\t\t\t\tthis._resizeButton();\n\t\t\t}\n\t\t},\n\n\t\t_refreshMenu: function _refreshMenu() {\n\t\t\tthis.menu.empty();\n\n\t\t\tvar item,\n\t\t\t    options = this.element.find(\"option\");\n\n\t\t\tif (!options.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._parseOptions(options);\n\t\t\tthis._renderMenu(this.menu, this.items);\n\n\t\t\tthis.menuInstance.refresh();\n\t\t\tthis.menuItems = this.menu.find(\"li\").not(\".ui-selectmenu-optgroup\");\n\n\t\t\titem = this._getSelectedItem();\n\n\t\t\t// Update the menu to have the correct item focused\n\t\t\tthis.menuInstance.focus(null, item);\n\t\t\tthis._setAria(item.data(\"ui-selectmenu-item\"));\n\n\t\t\t// Set disabled state\n\t\t\tthis._setOption(\"disabled\", this.element.prop(\"disabled\"));\n\t\t},\n\n\t\topen: function open(event) {\n\t\t\tif (this.options.disabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If this is the first time the menu is being opened, render the items\n\t\t\tif (!this.menuItems) {\n\t\t\t\tthis._refreshMenu();\n\t\t\t} else {\n\n\t\t\t\t// Menu clears focus on close, reset focus to selected item\n\t\t\t\tthis.menu.find(\".ui-state-focus\").removeClass(\"ui-state-focus\");\n\t\t\t\tthis.menuInstance.focus(null, this._getSelectedItem());\n\t\t\t}\n\n\t\t\tthis.isOpen = true;\n\t\t\tthis._toggleAttr();\n\t\t\tthis._resizeMenu();\n\t\t\tthis._position();\n\n\t\t\tthis._on(this.document, this._documentClick);\n\n\t\t\tthis._trigger(\"open\", event);\n\t\t},\n\n\t\t_position: function _position() {\n\t\t\tthis.menuWrap.position($.extend({ of: this.button }, this.options.position));\n\t\t},\n\n\t\tclose: function close(event) {\n\t\t\tif (!this.isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.isOpen = false;\n\t\t\tthis._toggleAttr();\n\n\t\t\tthis.range = null;\n\t\t\tthis._off(this.document);\n\n\t\t\tthis._trigger(\"close\", event);\n\t\t},\n\n\t\twidget: function widget() {\n\t\t\treturn this.button;\n\t\t},\n\n\t\tmenuWidget: function menuWidget() {\n\t\t\treturn this.menu;\n\t\t},\n\n\t\t_renderMenu: function _renderMenu(ul, items) {\n\t\t\tvar that = this,\n\t\t\t    currentOptgroup = \"\";\n\n\t\t\t$.each(items, function (index, item) {\n\t\t\t\tif (item.optgroup !== currentOptgroup) {\n\t\t\t\t\t$(\"<li>\", {\n\t\t\t\t\t\t\"class\": \"ui-selectmenu-optgroup ui-menu-divider\" + (item.element.parent(\"optgroup\").prop(\"disabled\") ? \" ui-state-disabled\" : \"\"),\n\t\t\t\t\t\ttext: item.optgroup\n\t\t\t\t\t}).appendTo(ul);\n\n\t\t\t\t\tcurrentOptgroup = item.optgroup;\n\t\t\t\t}\n\n\t\t\t\tthat._renderItemData(ul, item);\n\t\t\t});\n\t\t},\n\n\t\t_renderItemData: function _renderItemData(ul, item) {\n\t\t\treturn this._renderItem(ul, item).data(\"ui-selectmenu-item\", item);\n\t\t},\n\n\t\t_renderItem: function _renderItem(ul, item) {\n\t\t\tvar li = $(\"<li>\");\n\n\t\t\tif (item.disabled) {\n\t\t\t\tli.addClass(\"ui-state-disabled\");\n\t\t\t}\n\t\t\tthis._setText(li, item.label);\n\n\t\t\treturn li.appendTo(ul);\n\t\t},\n\n\t\t_setText: function _setText(element, value) {\n\t\t\tif (value) {\n\t\t\t\telement.text(value);\n\t\t\t} else {\n\t\t\t\telement.html(\"&#160;\");\n\t\t\t}\n\t\t},\n\n\t\t_move: function _move(direction, event) {\n\t\t\tvar item,\n\t\t\t    next,\n\t\t\t    filter = \".ui-menu-item\";\n\n\t\t\tif (this.isOpen) {\n\t\t\t\titem = this.menuItems.eq(this.focusIndex);\n\t\t\t} else {\n\t\t\t\titem = this.menuItems.eq(this.element[0].selectedIndex);\n\t\t\t\tfilter += \":not(.ui-state-disabled)\";\n\t\t\t}\n\n\t\t\tif (direction === \"first\" || direction === \"last\") {\n\t\t\t\tnext = item[direction === \"first\" ? \"prevAll\" : \"nextAll\"](filter).eq(-1);\n\t\t\t} else {\n\t\t\t\tnext = item[direction + \"All\"](filter).eq(0);\n\t\t\t}\n\n\t\t\tif (next.length) {\n\t\t\t\tthis.menuInstance.focus(event, next);\n\t\t\t}\n\t\t},\n\n\t\t_getSelectedItem: function _getSelectedItem() {\n\t\t\treturn this.menuItems.eq(this.element[0].selectedIndex);\n\t\t},\n\n\t\t_toggle: function _toggle(event) {\n\t\t\tthis[this.isOpen ? \"close\" : \"open\"](event);\n\t\t},\n\n\t\t_setSelection: function _setSelection() {\n\t\t\tvar selection;\n\n\t\t\tif (!this.range) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (window.getSelection) {\n\t\t\t\tselection = window.getSelection();\n\t\t\t\tselection.removeAllRanges();\n\t\t\t\tselection.addRange(this.range);\n\n\t\t\t\t// support: IE8\n\t\t\t} else {\n\t\t\t\tthis.range.select();\n\t\t\t}\n\n\t\t\t// support: IE\n\t\t\t// Setting the text selection kills the button focus in IE, but\n\t\t\t// restoring the focus doesn't kill the selection.\n\t\t\tthis.button.focus();\n\t\t},\n\n\t\t_documentClick: {\n\t\t\tmousedown: function mousedown(event) {\n\t\t\t\tif (!this.isOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!$(event.target).closest(\".ui-selectmenu-menu, #\" + this.ids.button).length) {\n\t\t\t\t\tthis.close(event);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_buttonEvents: {\n\n\t\t\t// Prevent text selection from being reset when interacting with the selectmenu (#10144)\n\t\t\tmousedown: function mousedown() {\n\t\t\t\tvar selection;\n\n\t\t\t\tif (window.getSelection) {\n\t\t\t\t\tselection = window.getSelection();\n\t\t\t\t\tif (selection.rangeCount) {\n\t\t\t\t\t\tthis.range = selection.getRangeAt(0);\n\t\t\t\t\t}\n\n\t\t\t\t\t// support: IE8\n\t\t\t\t} else {\n\t\t\t\t\tthis.range = document.selection.createRange();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tclick: function click(event) {\n\t\t\t\tthis._setSelection();\n\t\t\t\tthis._toggle(event);\n\t\t\t},\n\n\t\t\tkeydown: function keydown(event) {\n\t\t\t\tvar preventDefault = true;\n\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\tcase $.ui.keyCode.TAB:\n\t\t\t\t\tcase $.ui.keyCode.ESCAPE:\n\t\t\t\t\t\tthis.close(event);\n\t\t\t\t\t\tpreventDefault = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.ENTER:\n\t\t\t\t\t\tif (this.isOpen) {\n\t\t\t\t\t\t\tthis._selectFocusedItem(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.UP:\n\t\t\t\t\t\tif (event.altKey) {\n\t\t\t\t\t\t\tthis._toggle(event);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._move(\"prev\", event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.DOWN:\n\t\t\t\t\t\tif (event.altKey) {\n\t\t\t\t\t\t\tthis._toggle(event);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._move(\"next\", event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.SPACE:\n\t\t\t\t\t\tif (this.isOpen) {\n\t\t\t\t\t\t\tthis._selectFocusedItem(event);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._toggle(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.LEFT:\n\t\t\t\t\t\tthis._move(\"prev\", event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.RIGHT:\n\t\t\t\t\t\tthis._move(\"next\", event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.HOME:\n\t\t\t\t\tcase $.ui.keyCode.PAGE_UP:\n\t\t\t\t\t\tthis._move(\"first\", event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.END:\n\t\t\t\t\tcase $.ui.keyCode.PAGE_DOWN:\n\t\t\t\t\t\tthis._move(\"last\", event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.menu.trigger(event);\n\t\t\t\t\t\tpreventDefault = false;\n\t\t\t\t}\n\n\t\t\t\tif (preventDefault) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_selectFocusedItem: function _selectFocusedItem(event) {\n\t\t\tvar item = this.menuItems.eq(this.focusIndex);\n\t\t\tif (!item.hasClass(\"ui-state-disabled\")) {\n\t\t\t\tthis._select(item.data(\"ui-selectmenu-item\"), event);\n\t\t\t}\n\t\t},\n\n\t\t_select: function _select(item, event) {\n\t\t\tvar oldIndex = this.element[0].selectedIndex;\n\n\t\t\t// Change native select element\n\t\t\tthis.element[0].selectedIndex = item.index;\n\t\t\tthis._setText(this.buttonText, item.label);\n\t\t\tthis._setAria(item);\n\t\t\tthis._trigger(\"select\", event, { item: item });\n\n\t\t\tif (item.index !== oldIndex) {\n\t\t\t\tthis._trigger(\"change\", event, { item: item });\n\t\t\t}\n\n\t\t\tthis.close(event);\n\t\t},\n\n\t\t_setAria: function _setAria(item) {\n\t\t\tvar id = this.menuItems.eq(item.index).attr(\"id\");\n\n\t\t\tthis.button.attr({\n\t\t\t\t\"aria-labelledby\": id,\n\t\t\t\t\"aria-activedescendant\": id\n\t\t\t});\n\t\t\tthis.menu.attr(\"aria-activedescendant\", id);\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tif (key === \"icons\") {\n\t\t\t\tthis.button.find(\"span.ui-icon\").removeClass(this.options.icons.button).addClass(value.button);\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\n\t\t\tif (key === \"appendTo\") {\n\t\t\t\tthis.menuWrap.appendTo(this._appendTo());\n\t\t\t}\n\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.menuInstance.option(\"disabled\", value);\n\t\t\t\tthis.button.toggleClass(\"ui-state-disabled\", value).attr(\"aria-disabled\", value);\n\n\t\t\t\tthis.element.prop(\"disabled\", value);\n\t\t\t\tif (value) {\n\t\t\t\t\tthis.button.attr(\"tabindex\", -1);\n\t\t\t\t\tthis.close();\n\t\t\t\t} else {\n\t\t\t\t\tthis.button.attr(\"tabindex\", 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (key === \"width\") {\n\t\t\t\tthis._resizeButton();\n\t\t\t}\n\t\t},\n\n\t\t_appendTo: function _appendTo() {\n\t\t\tvar element = this.options.appendTo;\n\n\t\t\tif (element) {\n\t\t\t\telement = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n\t\t\t}\n\n\t\t\tif (!element || !element[0]) {\n\t\t\t\telement = this.element.closest(\".ui-front\");\n\t\t\t}\n\n\t\t\tif (!element.length) {\n\t\t\t\telement = this.document[0].body;\n\t\t\t}\n\n\t\t\treturn element;\n\t\t},\n\n\t\t_toggleAttr: function _toggleAttr() {\n\t\t\tthis.button.toggleClass(\"ui-corner-top\", this.isOpen).toggleClass(\"ui-corner-all\", !this.isOpen).attr(\"aria-expanded\", this.isOpen);\n\t\t\tthis.menuWrap.toggleClass(\"ui-selectmenu-open\", this.isOpen);\n\t\t\tthis.menu.attr(\"aria-hidden\", !this.isOpen);\n\t\t},\n\n\t\t_resizeButton: function _resizeButton() {\n\t\t\tvar width = this.options.width;\n\n\t\t\tif (!width) {\n\t\t\t\twidth = this.element.show().outerWidth();\n\t\t\t\tthis.element.hide();\n\t\t\t}\n\n\t\t\tthis.button.outerWidth(width);\n\t\t},\n\n\t\t_resizeMenu: function _resizeMenu() {\n\t\t\tthis.menu.outerWidth(Math.max(this.button.outerWidth(),\n\n\t\t\t// support: IE10\n\t\t\t// IE10 wraps long text (possibly a rounding bug)\n\t\t\t// so we add 1px to avoid the wrapping\n\t\t\tthis.menu.width(\"\").outerWidth() + 1));\n\t\t},\n\n\t\t_getCreateOptions: function _getCreateOptions() {\n\t\t\treturn { disabled: this.element.prop(\"disabled\") };\n\t\t},\n\n\t\t_parseOptions: function _parseOptions(options) {\n\t\t\tvar data = [];\n\t\t\toptions.each(function (index, item) {\n\t\t\t\tvar option = $(item),\n\t\t\t\t    optgroup = option.parent(\"optgroup\");\n\t\t\t\tdata.push({\n\t\t\t\t\telement: option,\n\t\t\t\t\tindex: index,\n\t\t\t\t\tvalue: option.val(),\n\t\t\t\t\tlabel: option.text(),\n\t\t\t\t\toptgroup: optgroup.attr(\"label\") || \"\",\n\t\t\t\t\tdisabled: optgroup.prop(\"disabled\") || option.prop(\"disabled\")\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.items = data;\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.menuWrap.remove();\n\t\t\tthis.button.remove();\n\t\t\tthis.element.show();\n\t\t\tthis.element.removeUniqueId();\n\t\t\tthis.label.attr(\"for\", this.ids.element);\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Slider 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/slider/\n  */\n\n\tvar slider = $.widget(\"ui.slider\", $.ui.mouse, {\n\t\tversion: \"1.11.4\",\n\t\twidgetEventPrefix: \"slide\",\n\n\t\toptions: {\n\t\t\tanimate: false,\n\t\t\tdistance: 0,\n\t\t\tmax: 100,\n\t\t\tmin: 0,\n\t\t\torientation: \"horizontal\",\n\t\t\trange: false,\n\t\t\tstep: 1,\n\t\t\tvalue: 0,\n\t\t\tvalues: null,\n\n\t\t\t// callbacks\n\t\t\tchange: null,\n\t\t\tslide: null,\n\t\t\tstart: null,\n\t\t\tstop: null\n\t\t},\n\n\t\t// number of pages in a slider\n\t\t// (how many times can you page up/down to go through the whole range)\n\t\tnumPages: 5,\n\n\t\t_create: function _create() {\n\t\t\tthis._keySliding = false;\n\t\t\tthis._mouseSliding = false;\n\t\t\tthis._animateOff = true;\n\t\t\tthis._handleIndex = null;\n\t\t\tthis._detectOrientation();\n\t\t\tthis._mouseInit();\n\t\t\tthis._calculateNewMax();\n\n\t\t\tthis.element.addClass(\"ui-slider\" + \" ui-slider-\" + this.orientation + \" ui-widget\" + \" ui-widget-content\" + \" ui-corner-all\");\n\n\t\t\tthis._refresh();\n\t\t\tthis._setOption(\"disabled\", this.options.disabled);\n\n\t\t\tthis._animateOff = false;\n\t\t},\n\n\t\t_refresh: function _refresh() {\n\t\t\tthis._createRange();\n\t\t\tthis._createHandles();\n\t\t\tthis._setupEvents();\n\t\t\tthis._refreshValue();\n\t\t},\n\n\t\t_createHandles: function _createHandles() {\n\t\t\tvar i,\n\t\t\t    handleCount,\n\t\t\t    options = this.options,\n\t\t\t    existingHandles = this.element.find(\".ui-slider-handle\").addClass(\"ui-state-default ui-corner-all\"),\n\t\t\t    handle = \"<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>\",\n\t\t\t    handles = [];\n\n\t\t\thandleCount = options.values && options.values.length || 1;\n\n\t\t\tif (existingHandles.length > handleCount) {\n\t\t\t\texistingHandles.slice(handleCount).remove();\n\t\t\t\texistingHandles = existingHandles.slice(0, handleCount);\n\t\t\t}\n\n\t\t\tfor (i = existingHandles.length; i < handleCount; i++) {\n\t\t\t\thandles.push(handle);\n\t\t\t}\n\n\t\t\tthis.handles = existingHandles.add($(handles.join(\"\")).appendTo(this.element));\n\n\t\t\tthis.handle = this.handles.eq(0);\n\n\t\t\tthis.handles.each(function (i) {\n\t\t\t\t$(this).data(\"ui-slider-handle-index\", i);\n\t\t\t});\n\t\t},\n\n\t\t_createRange: function _createRange() {\n\t\t\tvar options = this.options,\n\t\t\t    classes = \"\";\n\n\t\t\tif (options.range) {\n\t\t\t\tif (options.range === true) {\n\t\t\t\t\tif (!options.values) {\n\t\t\t\t\t\toptions.values = [this._valueMin(), this._valueMin()];\n\t\t\t\t\t} else if (options.values.length && options.values.length !== 2) {\n\t\t\t\t\t\toptions.values = [options.values[0], options.values[0]];\n\t\t\t\t\t} else if ($.isArray(options.values)) {\n\t\t\t\t\t\toptions.values = options.values.slice(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!this.range || !this.range.length) {\n\t\t\t\t\tthis.range = $(\"<div></div>\").appendTo(this.element);\n\n\t\t\t\t\tclasses = \"ui-slider-range\" +\n\t\t\t\t\t// note: this isn't the most fittingly semantic framework class for this element,\n\t\t\t\t\t// but worked best visually with a variety of themes\n\t\t\t\t\t\" ui-widget-header ui-corner-all\";\n\t\t\t\t} else {\n\t\t\t\t\tthis.range.removeClass(\"ui-slider-range-min ui-slider-range-max\")\n\t\t\t\t\t// Handle range switching from true to min/max\n\t\t\t\t\t.css({\n\t\t\t\t\t\t\"left\": \"\",\n\t\t\t\t\t\t\"bottom\": \"\"\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.range.addClass(classes + (options.range === \"min\" || options.range === \"max\" ? \" ui-slider-range-\" + options.range : \"\"));\n\t\t\t} else {\n\t\t\t\tif (this.range) {\n\t\t\t\t\tthis.range.remove();\n\t\t\t\t}\n\t\t\t\tthis.range = null;\n\t\t\t}\n\t\t},\n\n\t\t_setupEvents: function _setupEvents() {\n\t\t\tthis._off(this.handles);\n\t\t\tthis._on(this.handles, this._handleEvents);\n\t\t\tthis._hoverable(this.handles);\n\t\t\tthis._focusable(this.handles);\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.handles.remove();\n\t\t\tif (this.range) {\n\t\t\t\tthis.range.remove();\n\t\t\t}\n\n\t\t\tthis.element.removeClass(\"ui-slider\" + \" ui-slider-horizontal\" + \" ui-slider-vertical\" + \" ui-widget\" + \" ui-widget-content\" + \" ui-corner-all\");\n\n\t\t\tthis._mouseDestroy();\n\t\t},\n\n\t\t_mouseCapture: function _mouseCapture(event) {\n\t\t\tvar position,\n\t\t\t    normValue,\n\t\t\t    distance,\n\t\t\t    closestHandle,\n\t\t\t    index,\n\t\t\t    allowed,\n\t\t\t    offset,\n\t\t\t    mouseOverHandle,\n\t\t\t    that = this,\n\t\t\t    o = this.options;\n\n\t\t\tif (o.disabled) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.elementSize = {\n\t\t\t\twidth: this.element.outerWidth(),\n\t\t\t\theight: this.element.outerHeight()\n\t\t\t};\n\t\t\tthis.elementOffset = this.element.offset();\n\n\t\t\tposition = { x: event.pageX, y: event.pageY };\n\t\t\tnormValue = this._normValueFromMouse(position);\n\t\t\tdistance = this._valueMax() - this._valueMin() + 1;\n\t\t\tthis.handles.each(function (i) {\n\t\t\t\tvar thisDistance = Math.abs(normValue - that.values(i));\n\t\t\t\tif (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {\n\t\t\t\t\tdistance = thisDistance;\n\t\t\t\t\tclosestHandle = $(this);\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tallowed = this._start(event, index);\n\t\t\tif (allowed === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._mouseSliding = true;\n\n\t\t\tthis._handleIndex = index;\n\n\t\t\tclosestHandle.addClass(\"ui-state-active\").focus();\n\n\t\t\toffset = closestHandle.offset();\n\t\t\tmouseOverHandle = !$(event.target).parents().addBack().is(\".ui-slider-handle\");\n\t\t\tthis._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {\n\t\t\t\tleft: event.pageX - offset.left - closestHandle.width() / 2,\n\t\t\t\ttop: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css(\"borderTopWidth\"), 10) || 0) - (parseInt(closestHandle.css(\"borderBottomWidth\"), 10) || 0) + (parseInt(closestHandle.css(\"marginTop\"), 10) || 0)\n\t\t\t};\n\n\t\t\tif (!this.handles.hasClass(\"ui-state-hover\")) {\n\t\t\t\tthis._slide(event, index, normValue);\n\t\t\t}\n\t\t\tthis._animateOff = true;\n\t\t\treturn true;\n\t\t},\n\n\t\t_mouseStart: function _mouseStart() {\n\t\t\treturn true;\n\t\t},\n\n\t\t_mouseDrag: function _mouseDrag(event) {\n\t\t\tvar position = { x: event.pageX, y: event.pageY },\n\t\t\t    normValue = this._normValueFromMouse(position);\n\n\t\t\tthis._slide(event, this._handleIndex, normValue);\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_mouseStop: function _mouseStop(event) {\n\t\t\tthis.handles.removeClass(\"ui-state-active\");\n\t\t\tthis._mouseSliding = false;\n\n\t\t\tthis._stop(event, this._handleIndex);\n\t\t\tthis._change(event, this._handleIndex);\n\n\t\t\tthis._handleIndex = null;\n\t\t\tthis._clickOffset = null;\n\t\t\tthis._animateOff = false;\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_detectOrientation: function _detectOrientation() {\n\t\t\tthis.orientation = this.options.orientation === \"vertical\" ? \"vertical\" : \"horizontal\";\n\t\t},\n\n\t\t_normValueFromMouse: function _normValueFromMouse(position) {\n\t\t\tvar pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;\n\n\t\t\tif (this.orientation === \"horizontal\") {\n\t\t\t\tpixelTotal = this.elementSize.width;\n\t\t\t\tpixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\n\t\t\t} else {\n\t\t\t\tpixelTotal = this.elementSize.height;\n\t\t\t\tpixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\n\t\t\t}\n\n\t\t\tpercentMouse = pixelMouse / pixelTotal;\n\t\t\tif (percentMouse > 1) {\n\t\t\t\tpercentMouse = 1;\n\t\t\t}\n\t\t\tif (percentMouse < 0) {\n\t\t\t\tpercentMouse = 0;\n\t\t\t}\n\t\t\tif (this.orientation === \"vertical\") {\n\t\t\t\tpercentMouse = 1 - percentMouse;\n\t\t\t}\n\n\t\t\tvalueTotal = this._valueMax() - this._valueMin();\n\t\t\tvalueMouse = this._valueMin() + percentMouse * valueTotal;\n\n\t\t\treturn this._trimAlignValue(valueMouse);\n\t\t},\n\n\t\t_start: function _start(event, index) {\n\t\t\tvar uiHash = {\n\t\t\t\thandle: this.handles[index],\n\t\t\t\tvalue: this.value()\n\t\t\t};\n\t\t\tif (this.options.values && this.options.values.length) {\n\t\t\t\tuiHash.value = this.values(index);\n\t\t\t\tuiHash.values = this.values();\n\t\t\t}\n\t\t\treturn this._trigger(\"start\", event, uiHash);\n\t\t},\n\n\t\t_slide: function _slide(event, index, newVal) {\n\t\t\tvar otherVal, newValues, allowed;\n\n\t\t\tif (this.options.values && this.options.values.length) {\n\t\t\t\totherVal = this.values(index ? 0 : 1);\n\n\t\t\t\tif (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {\n\t\t\t\t\tnewVal = otherVal;\n\t\t\t\t}\n\n\t\t\t\tif (newVal !== this.values(index)) {\n\t\t\t\t\tnewValues = this.values();\n\t\t\t\t\tnewValues[index] = newVal;\n\t\t\t\t\t// A slide can be canceled by returning false from the slide callback\n\t\t\t\t\tallowed = this._trigger(\"slide\", event, {\n\t\t\t\t\t\thandle: this.handles[index],\n\t\t\t\t\t\tvalue: newVal,\n\t\t\t\t\t\tvalues: newValues\n\t\t\t\t\t});\n\t\t\t\t\totherVal = this.values(index ? 0 : 1);\n\t\t\t\t\tif (allowed !== false) {\n\t\t\t\t\t\tthis.values(index, newVal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (newVal !== this.value()) {\n\t\t\t\t\t// A slide can be canceled by returning false from the slide callback\n\t\t\t\t\tallowed = this._trigger(\"slide\", event, {\n\t\t\t\t\t\thandle: this.handles[index],\n\t\t\t\t\t\tvalue: newVal\n\t\t\t\t\t});\n\t\t\t\t\tif (allowed !== false) {\n\t\t\t\t\t\tthis.value(newVal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_stop: function _stop(event, index) {\n\t\t\tvar uiHash = {\n\t\t\t\thandle: this.handles[index],\n\t\t\t\tvalue: this.value()\n\t\t\t};\n\t\t\tif (this.options.values && this.options.values.length) {\n\t\t\t\tuiHash.value = this.values(index);\n\t\t\t\tuiHash.values = this.values();\n\t\t\t}\n\n\t\t\tthis._trigger(\"stop\", event, uiHash);\n\t\t},\n\n\t\t_change: function _change(event, index) {\n\t\t\tif (!this._keySliding && !this._mouseSliding) {\n\t\t\t\tvar uiHash = {\n\t\t\t\t\thandle: this.handles[index],\n\t\t\t\t\tvalue: this.value()\n\t\t\t\t};\n\t\t\t\tif (this.options.values && this.options.values.length) {\n\t\t\t\t\tuiHash.value = this.values(index);\n\t\t\t\t\tuiHash.values = this.values();\n\t\t\t\t}\n\n\t\t\t\t//store the last changed value index for reference when handles overlap\n\t\t\t\tthis._lastChangedValue = index;\n\n\t\t\t\tthis._trigger(\"change\", event, uiHash);\n\t\t\t}\n\t\t},\n\n\t\tvalue: function value(newValue) {\n\t\t\tif (arguments.length) {\n\t\t\t\tthis.options.value = this._trimAlignValue(newValue);\n\t\t\t\tthis._refreshValue();\n\t\t\t\tthis._change(null, 0);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn this._value();\n\t\t},\n\n\t\tvalues: function values(index, newValue) {\n\t\t\tvar vals, newValues, i;\n\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tthis.options.values[index] = this._trimAlignValue(newValue);\n\t\t\t\tthis._refreshValue();\n\t\t\t\tthis._change(null, index);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (arguments.length) {\n\t\t\t\tif ($.isArray(arguments[0])) {\n\t\t\t\t\tvals = this.options.values;\n\t\t\t\t\tnewValues = arguments[0];\n\t\t\t\t\tfor (i = 0; i < vals.length; i += 1) {\n\t\t\t\t\t\tvals[i] = this._trimAlignValue(newValues[i]);\n\t\t\t\t\t\tthis._change(null, i);\n\t\t\t\t\t}\n\t\t\t\t\tthis._refreshValue();\n\t\t\t\t} else {\n\t\t\t\t\tif (this.options.values && this.options.values.length) {\n\t\t\t\t\t\treturn this._values(index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.value();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this._values();\n\t\t\t}\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tvar i,\n\t\t\t    valsLength = 0;\n\n\t\t\tif (key === \"range\" && this.options.range === true) {\n\t\t\t\tif (value === \"min\") {\n\t\t\t\t\tthis.options.value = this._values(0);\n\t\t\t\t\tthis.options.values = null;\n\t\t\t\t} else if (value === \"max\") {\n\t\t\t\t\tthis.options.value = this._values(this.options.values.length - 1);\n\t\t\t\t\tthis.options.values = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($.isArray(this.options.values)) {\n\t\t\t\tvalsLength = this.options.values.length;\n\t\t\t}\n\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.element.toggleClass(\"ui-state-disabled\", !!value);\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\n\t\t\tswitch (key) {\n\t\t\t\tcase \"orientation\":\n\t\t\t\t\tthis._detectOrientation();\n\t\t\t\t\tthis.element.removeClass(\"ui-slider-horizontal ui-slider-vertical\").addClass(\"ui-slider-\" + this.orientation);\n\t\t\t\t\tthis._refreshValue();\n\n\t\t\t\t\t// Reset positioning from previous orientation\n\t\t\t\t\tthis.handles.css(value === \"horizontal\" ? \"bottom\" : \"left\", \"\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"value\":\n\t\t\t\t\tthis._animateOff = true;\n\t\t\t\t\tthis._refreshValue();\n\t\t\t\t\tthis._change(null, 0);\n\t\t\t\t\tthis._animateOff = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"values\":\n\t\t\t\t\tthis._animateOff = true;\n\t\t\t\t\tthis._refreshValue();\n\t\t\t\t\tfor (i = 0; i < valsLength; i += 1) {\n\t\t\t\t\t\tthis._change(null, i);\n\t\t\t\t\t}\n\t\t\t\t\tthis._animateOff = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"step\":\n\t\t\t\tcase \"min\":\n\t\t\t\tcase \"max\":\n\t\t\t\t\tthis._animateOff = true;\n\t\t\t\t\tthis._calculateNewMax();\n\t\t\t\t\tthis._refreshValue();\n\t\t\t\t\tthis._animateOff = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"range\":\n\t\t\t\t\tthis._animateOff = true;\n\t\t\t\t\tthis._refresh();\n\t\t\t\t\tthis._animateOff = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\t//internal value getter\n\t\t// _value() returns value trimmed by min and max, aligned by step\n\t\t_value: function _value() {\n\t\t\tvar val = this.options.value;\n\t\t\tval = this._trimAlignValue(val);\n\n\t\t\treturn val;\n\t\t},\n\n\t\t//internal values getter\n\t\t// _values() returns array of values trimmed by min and max, aligned by step\n\t\t// _values( index ) returns single value trimmed by min and max, aligned by step\n\t\t_values: function _values(index) {\n\t\t\tvar val, vals, i;\n\n\t\t\tif (arguments.length) {\n\t\t\t\tval = this.options.values[index];\n\t\t\t\tval = this._trimAlignValue(val);\n\n\t\t\t\treturn val;\n\t\t\t} else if (this.options.values && this.options.values.length) {\n\t\t\t\t// .slice() creates a copy of the array\n\t\t\t\t// this copy gets trimmed by min and max and then returned\n\t\t\t\tvals = this.options.values.slice();\n\t\t\t\tfor (i = 0; i < vals.length; i += 1) {\n\t\t\t\t\tvals[i] = this._trimAlignValue(vals[i]);\n\t\t\t\t}\n\n\t\t\t\treturn vals;\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\t// returns the step-aligned value that val is closest to, between (inclusive) min and max\n\t\t_trimAlignValue: function _trimAlignValue(val) {\n\t\t\tif (val <= this._valueMin()) {\n\t\t\t\treturn this._valueMin();\n\t\t\t}\n\t\t\tif (val >= this._valueMax()) {\n\t\t\t\treturn this._valueMax();\n\t\t\t}\n\t\t\tvar step = this.options.step > 0 ? this.options.step : 1,\n\t\t\t    valModStep = (val - this._valueMin()) % step,\n\t\t\t    alignValue = val - valModStep;\n\n\t\t\tif (Math.abs(valModStep) * 2 >= step) {\n\t\t\t\talignValue += valModStep > 0 ? step : -step;\n\t\t\t}\n\n\t\t\t// Since JavaScript has problems with large floats, round\n\t\t\t// the final value to 5 digits after the decimal point (see #4124)\n\t\t\treturn parseFloat(alignValue.toFixed(5));\n\t\t},\n\n\t\t_calculateNewMax: function _calculateNewMax() {\n\t\t\tvar max = this.options.max,\n\t\t\t    min = this._valueMin(),\n\t\t\t    step = this.options.step,\n\t\t\t    aboveMin = Math.floor(+(max - min).toFixed(this._precision()) / step) * step;\n\t\t\tmax = aboveMin + min;\n\t\t\tthis.max = parseFloat(max.toFixed(this._precision()));\n\t\t},\n\n\t\t_precision: function _precision() {\n\t\t\tvar precision = this._precisionOf(this.options.step);\n\t\t\tif (this.options.min !== null) {\n\t\t\t\tprecision = Math.max(precision, this._precisionOf(this.options.min));\n\t\t\t}\n\t\t\treturn precision;\n\t\t},\n\n\t\t_precisionOf: function _precisionOf(num) {\n\t\t\tvar str = num.toString(),\n\t\t\t    decimal = str.indexOf(\".\");\n\t\t\treturn decimal === -1 ? 0 : str.length - decimal - 1;\n\t\t},\n\n\t\t_valueMin: function _valueMin() {\n\t\t\treturn this.options.min;\n\t\t},\n\n\t\t_valueMax: function _valueMax() {\n\t\t\treturn this.max;\n\t\t},\n\n\t\t_refreshValue: function _refreshValue() {\n\t\t\tvar lastValPercent,\n\t\t\t    valPercent,\n\t\t\t    value,\n\t\t\t    valueMin,\n\t\t\t    valueMax,\n\t\t\t    oRange = this.options.range,\n\t\t\t    o = this.options,\n\t\t\t    that = this,\n\t\t\t    animate = !this._animateOff ? o.animate : false,\n\t\t\t    _set = {};\n\n\t\t\tif (this.options.values && this.options.values.length) {\n\t\t\t\tthis.handles.each(function (i) {\n\t\t\t\t\tvalPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;\n\t\t\t\t\t_set[that.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n\t\t\t\t\t$(this).stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\t\t\t\t\tif (that.options.range === true) {\n\t\t\t\t\t\tif (that.orientation === \"horizontal\") {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tthat.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({ left: valPercent + \"%\" }, o.animate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (i === 1) {\n\t\t\t\t\t\t\t\tthat.range[animate ? \"animate\" : \"css\"]({ width: valPercent - lastValPercent + \"%\" }, { queue: false, duration: o.animate });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tthat.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({ bottom: valPercent + \"%\" }, o.animate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (i === 1) {\n\t\t\t\t\t\t\t\tthat.range[animate ? \"animate\" : \"css\"]({ height: valPercent - lastValPercent + \"%\" }, { queue: false, duration: o.animate });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlastValPercent = valPercent;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvalue = this.value();\n\t\t\t\tvalueMin = this._valueMin();\n\t\t\t\tvalueMax = this._valueMax();\n\t\t\t\tvalPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;\n\t\t\t\t_set[this.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n\t\t\t\tthis.handle.stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n\t\t\t\tif (oRange === \"min\" && this.orientation === \"horizontal\") {\n\t\t\t\t\tthis.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({ width: valPercent + \"%\" }, o.animate);\n\t\t\t\t}\n\t\t\t\tif (oRange === \"max\" && this.orientation === \"horizontal\") {\n\t\t\t\t\tthis.range[animate ? \"animate\" : \"css\"]({ width: 100 - valPercent + \"%\" }, { queue: false, duration: o.animate });\n\t\t\t\t}\n\t\t\t\tif (oRange === \"min\" && this.orientation === \"vertical\") {\n\t\t\t\t\tthis.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({ height: valPercent + \"%\" }, o.animate);\n\t\t\t\t}\n\t\t\t\tif (oRange === \"max\" && this.orientation === \"vertical\") {\n\t\t\t\t\tthis.range[animate ? \"animate\" : \"css\"]({ height: 100 - valPercent + \"%\" }, { queue: false, duration: o.animate });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_handleEvents: {\n\t\t\tkeydown: function keydown(event) {\n\t\t\t\tvar allowed,\n\t\t\t\t    curVal,\n\t\t\t\t    newVal,\n\t\t\t\t    step,\n\t\t\t\t    index = $(event.target).data(\"ui-slider-handle-index\");\n\n\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\tcase $.ui.keyCode.HOME:\n\t\t\t\t\tcase $.ui.keyCode.END:\n\t\t\t\t\tcase $.ui.keyCode.PAGE_UP:\n\t\t\t\t\tcase $.ui.keyCode.PAGE_DOWN:\n\t\t\t\t\tcase $.ui.keyCode.UP:\n\t\t\t\t\tcase $.ui.keyCode.RIGHT:\n\t\t\t\t\tcase $.ui.keyCode.DOWN:\n\t\t\t\t\tcase $.ui.keyCode.LEFT:\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tif (!this._keySliding) {\n\t\t\t\t\t\t\tthis._keySliding = true;\n\t\t\t\t\t\t\t$(event.target).addClass(\"ui-state-active\");\n\t\t\t\t\t\t\tallowed = this._start(event, index);\n\t\t\t\t\t\t\tif (allowed === false) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tstep = this.options.step;\n\t\t\t\tif (this.options.values && this.options.values.length) {\n\t\t\t\t\tcurVal = newVal = this.values(index);\n\t\t\t\t} else {\n\t\t\t\t\tcurVal = newVal = this.value();\n\t\t\t\t}\n\n\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\tcase $.ui.keyCode.HOME:\n\t\t\t\t\t\tnewVal = this._valueMin();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.END:\n\t\t\t\t\t\tnewVal = this._valueMax();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.PAGE_UP:\n\t\t\t\t\t\tnewVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.PAGE_DOWN:\n\t\t\t\t\t\tnewVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.UP:\n\t\t\t\t\tcase $.ui.keyCode.RIGHT:\n\t\t\t\t\t\tif (curVal === this._valueMax()) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewVal = this._trimAlignValue(curVal + step);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase $.ui.keyCode.DOWN:\n\t\t\t\t\tcase $.ui.keyCode.LEFT:\n\t\t\t\t\t\tif (curVal === this._valueMin()) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewVal = this._trimAlignValue(curVal - step);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis._slide(event, index, newVal);\n\t\t\t},\n\t\t\tkeyup: function keyup(event) {\n\t\t\t\tvar index = $(event.target).data(\"ui-slider-handle-index\");\n\n\t\t\t\tif (this._keySliding) {\n\t\t\t\t\tthis._keySliding = false;\n\t\t\t\t\tthis._stop(event, index);\n\t\t\t\t\tthis._change(event, index);\n\t\t\t\t\t$(event.target).removeClass(\"ui-state-active\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Sortable 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/sortable/\n  */\n\n\tvar sortable = $.widget(\"ui.sortable\", $.ui.mouse, {\n\t\tversion: \"1.11.4\",\n\t\twidgetEventPrefix: \"sort\",\n\t\tready: false,\n\t\toptions: {\n\t\t\tappendTo: \"parent\",\n\t\t\taxis: false,\n\t\t\tconnectWith: false,\n\t\t\tcontainment: false,\n\t\t\tcursor: \"auto\",\n\t\t\tcursorAt: false,\n\t\t\tdropOnEmpty: true,\n\t\t\tforcePlaceholderSize: false,\n\t\t\tforceHelperSize: false,\n\t\t\tgrid: false,\n\t\t\thandle: false,\n\t\t\thelper: \"original\",\n\t\t\titems: \"> *\",\n\t\t\topacity: false,\n\t\t\tplaceholder: false,\n\t\t\trevert: false,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 20,\n\t\t\tscrollSpeed: 20,\n\t\t\tscope: \"default\",\n\t\t\ttolerance: \"intersect\",\n\t\t\tzIndex: 1000,\n\n\t\t\t// callbacks\n\t\t\tactivate: null,\n\t\t\tbeforeStop: null,\n\t\t\tchange: null,\n\t\t\tdeactivate: null,\n\t\t\tout: null,\n\t\t\tover: null,\n\t\t\treceive: null,\n\t\t\tremove: null,\n\t\t\tsort: null,\n\t\t\tstart: null,\n\t\t\tstop: null,\n\t\t\tupdate: null\n\t\t},\n\n\t\t_isOverAxis: function _isOverAxis(x, reference, size) {\n\t\t\treturn x >= reference && x < reference + size;\n\t\t},\n\n\t\t_isFloating: function _isFloating(item) {\n\t\t\treturn (/left|right/.test(item.css(\"float\")) || /inline|table-cell/.test(item.css(\"display\"))\n\t\t\t);\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\tthis.containerCache = {};\n\t\t\tthis.element.addClass(\"ui-sortable\");\n\n\t\t\t//Get the items\n\t\t\tthis.refresh();\n\n\t\t\t//Let's determine the parent's offset\n\t\t\tthis.offset = this.element.offset();\n\n\t\t\t//Initialize mouse events for interaction\n\t\t\tthis._mouseInit();\n\n\t\t\tthis._setHandleClassName();\n\n\t\t\t//We're ready to go\n\t\t\tthis.ready = true;\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tthis._super(key, value);\n\n\t\t\tif (key === \"handle\") {\n\t\t\t\tthis._setHandleClassName();\n\t\t\t}\n\t\t},\n\n\t\t_setHandleClassName: function _setHandleClassName() {\n\t\t\tthis.element.find(\".ui-sortable-handle\").removeClass(\"ui-sortable-handle\");\n\t\t\t$.each(this.items, function () {\n\t\t\t\t(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass(\"ui-sortable-handle\");\n\t\t\t});\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.element.removeClass(\"ui-sortable ui-sortable-disabled\").find(\".ui-sortable-handle\").removeClass(\"ui-sortable-handle\");\n\t\t\tthis._mouseDestroy();\n\n\t\t\tfor (var i = this.items.length - 1; i >= 0; i--) {\n\t\t\t\tthis.items[i].item.removeData(this.widgetName + \"-item\");\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t_mouseCapture: function _mouseCapture(event, overrideHandle) {\n\t\t\tvar currentItem = null,\n\t\t\t    validHandle = false,\n\t\t\t    that = this;\n\n\t\t\tif (this.reverting) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.options.disabled || this.options.type === \"static\") {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t//We have to refresh the items data once first\n\t\t\tthis._refreshItems(event);\n\n\t\t\t//Find out if the clicked node (or one of its parents) is a actual item in this.items\n\t\t\t$(event.target).parents().each(function () {\n\t\t\t\tif ($.data(this, that.widgetName + \"-item\") === that) {\n\t\t\t\t\tcurrentItem = $(this);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif ($.data(event.target, that.widgetName + \"-item\") === that) {\n\t\t\t\tcurrentItem = $(event.target);\n\t\t\t}\n\n\t\t\tif (!currentItem) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.options.handle && !overrideHandle) {\n\t\t\t\t$(this.options.handle, currentItem).find(\"*\").addBack().each(function () {\n\t\t\t\t\tif (this === event.target) {\n\t\t\t\t\t\tvalidHandle = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (!validHandle) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.currentItem = currentItem;\n\t\t\tthis._removeCurrentsFromItems();\n\t\t\treturn true;\n\t\t},\n\n\t\t_mouseStart: function _mouseStart(event, overrideHandle, noActivation) {\n\n\t\t\tvar i,\n\t\t\t    body,\n\t\t\t    o = this.options;\n\n\t\t\tthis.currentContainer = this;\n\n\t\t\t//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture\n\t\t\tthis.refreshPositions();\n\n\t\t\t//Create and append the visible helper\n\t\t\tthis.helper = this._createHelper(event);\n\n\t\t\t//Cache the helper size\n\t\t\tthis._cacheHelperProportions();\n\n\t\t\t/*\n    * - Position generation -\n    * This block generates everything position related - it's the core of draggables.\n    */\n\n\t\t\t//Cache the margins of the original element\n\t\t\tthis._cacheMargins();\n\n\t\t\t//Get the next scrolling parent\n\t\t\tthis.scrollParent = this.helper.scrollParent();\n\n\t\t\t//The element's absolute position on the page minus margins\n\t\t\tthis.offset = this.currentItem.offset();\n\t\t\tthis.offset = {\n\t\t\t\ttop: this.offset.top - this.margins.top,\n\t\t\t\tleft: this.offset.left - this.margins.left\n\t\t\t};\n\n\t\t\t$.extend(this.offset, {\n\t\t\t\tclick: { //Where the click happened, relative to the element\n\t\t\t\t\tleft: event.pageX - this.offset.left,\n\t\t\t\t\ttop: event.pageY - this.offset.top\n\t\t\t\t},\n\t\t\t\tparent: this._getParentOffset(),\n\t\t\t\trelative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper\n\t\t\t});\n\n\t\t\t// Only after we got the offset, we can change the helper's position to absolute\n\t\t\t// TODO: Still need to figure out a way to make relative sorting possible\n\t\t\tthis.helper.css(\"position\", \"absolute\");\n\t\t\tthis.cssPosition = this.helper.css(\"position\");\n\n\t\t\t//Generate the original position\n\t\t\tthis.originalPosition = this._generatePosition(event);\n\t\t\tthis.originalPageX = event.pageX;\n\t\t\tthis.originalPageY = event.pageY;\n\n\t\t\t//Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\t\t\to.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);\n\n\t\t\t//Cache the former DOM position\n\t\t\tthis.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };\n\n\t\t\t//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way\n\t\t\tif (this.helper[0] !== this.currentItem[0]) {\n\t\t\t\tthis.currentItem.hide();\n\t\t\t}\n\n\t\t\t//Create the placeholder\n\t\t\tthis._createPlaceholder();\n\n\t\t\t//Set a containment if given in the options\n\t\t\tif (o.containment) {\n\t\t\t\tthis._setContainment();\n\t\t\t}\n\n\t\t\tif (o.cursor && o.cursor !== \"auto\") {\n\t\t\t\t// cursor option\n\t\t\t\tbody = this.document.find(\"body\");\n\n\t\t\t\t// support: IE\n\t\t\t\tthis.storedCursor = body.css(\"cursor\");\n\t\t\t\tbody.css(\"cursor\", o.cursor);\n\n\t\t\t\tthis.storedStylesheet = $(\"<style>*{ cursor: \" + o.cursor + \" !important; }</style>\").appendTo(body);\n\t\t\t}\n\n\t\t\tif (o.opacity) {\n\t\t\t\t// opacity option\n\t\t\t\tif (this.helper.css(\"opacity\")) {\n\t\t\t\t\tthis._storedOpacity = this.helper.css(\"opacity\");\n\t\t\t\t}\n\t\t\t\tthis.helper.css(\"opacity\", o.opacity);\n\t\t\t}\n\n\t\t\tif (o.zIndex) {\n\t\t\t\t// zIndex option\n\t\t\t\tif (this.helper.css(\"zIndex\")) {\n\t\t\t\t\tthis._storedZIndex = this.helper.css(\"zIndex\");\n\t\t\t\t}\n\t\t\t\tthis.helper.css(\"zIndex\", o.zIndex);\n\t\t\t}\n\n\t\t\t//Prepare scrolling\n\t\t\tif (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== \"HTML\") {\n\t\t\t\tthis.overflowOffset = this.scrollParent.offset();\n\t\t\t}\n\n\t\t\t//Call callbacks\n\t\t\tthis._trigger(\"start\", event, this._uiHash());\n\n\t\t\t//Recache the helper size\n\t\t\tif (!this._preserveHelperProportions) {\n\t\t\t\tthis._cacheHelperProportions();\n\t\t\t}\n\n\t\t\t//Post \"activate\" events to possible containers\n\t\t\tif (!noActivation) {\n\t\t\t\tfor (i = this.containers.length - 1; i >= 0; i--) {\n\t\t\t\t\tthis.containers[i]._trigger(\"activate\", event, this._uiHash(this));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Prepare possible droppables\n\t\t\tif ($.ui.ddmanager) {\n\t\t\t\t$.ui.ddmanager.current = this;\n\t\t\t}\n\n\t\t\tif ($.ui.ddmanager && !o.dropBehaviour) {\n\t\t\t\t$.ui.ddmanager.prepareOffsets(this, event);\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\n\t\t\tthis.helper.addClass(\"ui-sortable-helper\");\n\t\t\tthis._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position\n\t\t\treturn true;\n\t\t},\n\n\t\t_mouseDrag: function _mouseDrag(event) {\n\t\t\tvar i,\n\t\t\t    item,\n\t\t\t    itemElement,\n\t\t\t    intersection,\n\t\t\t    o = this.options,\n\t\t\t    scrolled = false;\n\n\t\t\t//Compute the helpers position\n\t\t\tthis.position = this._generatePosition(event);\n\t\t\tthis.positionAbs = this._convertPositionTo(\"absolute\");\n\n\t\t\tif (!this.lastPositionAbs) {\n\t\t\t\tthis.lastPositionAbs = this.positionAbs;\n\t\t\t}\n\n\t\t\t//Do scrolling\n\t\t\tif (this.options.scroll) {\n\t\t\t\tif (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== \"HTML\") {\n\n\t\t\t\t\tif (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {\n\t\t\t\t\t\tthis.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;\n\t\t\t\t\t} else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {\n\t\t\t\t\t\tthis.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {\n\t\t\t\t\t\tthis.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;\n\t\t\t\t\t} else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {\n\t\t\t\t\t\tthis.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tif (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);\n\t\t\t\t\t} else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);\n\t\t\t\t\t} else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {\n\t\t\t\t\t\tscrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n\t\t\t\t\t$.ui.ddmanager.prepareOffsets(this, event);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Regenerate the absolute position used for position checks\n\t\t\tthis.positionAbs = this._convertPositionTo(\"absolute\");\n\n\t\t\t//Set the helper position\n\t\t\tif (!this.options.axis || this.options.axis !== \"y\") {\n\t\t\t\tthis.helper[0].style.left = this.position.left + \"px\";\n\t\t\t}\n\t\t\tif (!this.options.axis || this.options.axis !== \"x\") {\n\t\t\t\tthis.helper[0].style.top = this.position.top + \"px\";\n\t\t\t}\n\n\t\t\t//Rearrange\n\t\t\tfor (i = this.items.length - 1; i >= 0; i--) {\n\n\t\t\t\t//Cache variables and intersection, continue if no intersection\n\t\t\t\titem = this.items[i];\n\t\t\t\titemElement = item.item[0];\n\t\t\t\tintersection = this._intersectsWithPointer(item);\n\t\t\t\tif (!intersection) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Only put the placeholder inside the current Container, skip all\n\t\t\t\t// items from other containers. This works because when moving\n\t\t\t\t// an item from one container to another the\n\t\t\t\t// currentContainer is switched before the placeholder is moved.\n\t\t\t\t//\n\t\t\t\t// Without this, moving items in \"sub-sortables\" can cause\n\t\t\t\t// the placeholder to jitter between the outer and inner container.\n\t\t\t\tif (item.instance !== this.currentContainer) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// cannot intersect with itself\n\t\t\t\t// no useless actions that have been done before\n\t\t\t\t// no action if the item moved is the parent of the item checked\n\t\t\t\tif (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? \"next\" : \"prev\"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === \"semi-dynamic\" ? !$.contains(this.element[0], itemElement) : true)) {\n\n\t\t\t\t\tthis.direction = intersection === 1 ? \"down\" : \"up\";\n\n\t\t\t\t\tif (this.options.tolerance === \"pointer\" || this._intersectsWithSides(item)) {\n\t\t\t\t\t\tthis._rearrange(event, item);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._trigger(\"change\", event, this._uiHash());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Post events to containers\n\t\t\tthis._contactContainers(event);\n\n\t\t\t//Interconnect with droppables\n\t\t\tif ($.ui.ddmanager) {\n\t\t\t\t$.ui.ddmanager.drag(this, event);\n\t\t\t}\n\n\t\t\t//Call callbacks\n\t\t\tthis._trigger(\"sort\", event, this._uiHash());\n\n\t\t\tthis.lastPositionAbs = this.positionAbs;\n\t\t\treturn false;\n\t\t},\n\n\t\t_mouseStop: function _mouseStop(event, noPropagation) {\n\n\t\t\tif (!event) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//If we are using droppables, inform the manager about the drop\n\t\t\tif ($.ui.ddmanager && !this.options.dropBehaviour) {\n\t\t\t\t$.ui.ddmanager.drop(this, event);\n\t\t\t}\n\n\t\t\tif (this.options.revert) {\n\t\t\t\tvar that = this,\n\t\t\t\t    cur = this.placeholder.offset(),\n\t\t\t\t    axis = this.options.axis,\n\t\t\t\t    animation = {};\n\n\t\t\t\tif (!axis || axis === \"x\") {\n\t\t\t\t\tanimation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);\n\t\t\t\t}\n\t\t\t\tif (!axis || axis === \"y\") {\n\t\t\t\t\tanimation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);\n\t\t\t\t}\n\t\t\t\tthis.reverting = true;\n\t\t\t\t$(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function () {\n\t\t\t\t\tthat._clear(event);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._clear(event, noPropagation);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\tcancel: function cancel() {\n\n\t\t\tif (this.dragging) {\n\n\t\t\t\tthis._mouseUp({ target: null });\n\n\t\t\t\tif (this.options.helper === \"original\") {\n\t\t\t\t\tthis.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\n\t\t\t\t} else {\n\t\t\t\t\tthis.currentItem.show();\n\t\t\t\t}\n\n\t\t\t\t//Post deactivating events to containers\n\t\t\t\tfor (var i = this.containers.length - 1; i >= 0; i--) {\n\t\t\t\t\tthis.containers[i]._trigger(\"deactivate\", null, this._uiHash(this));\n\t\t\t\t\tif (this.containers[i].containerCache.over) {\n\t\t\t\t\t\tthis.containers[i]._trigger(\"out\", null, this._uiHash(this));\n\t\t\t\t\t\tthis.containers[i].containerCache.over = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.placeholder) {\n\t\t\t\t//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\n\t\t\t\tif (this.placeholder[0].parentNode) {\n\t\t\t\t\tthis.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n\t\t\t\t}\n\t\t\t\tif (this.options.helper !== \"original\" && this.helper && this.helper[0].parentNode) {\n\t\t\t\t\tthis.helper.remove();\n\t\t\t\t}\n\n\t\t\t\t$.extend(this, {\n\t\t\t\t\thelper: null,\n\t\t\t\t\tdragging: false,\n\t\t\t\t\treverting: false,\n\t\t\t\t\t_noFinalSort: null\n\t\t\t\t});\n\n\t\t\t\tif (this.domPosition.prev) {\n\t\t\t\t\t$(this.domPosition.prev).after(this.currentItem);\n\t\t\t\t} else {\n\t\t\t\t\t$(this.domPosition.parent).prepend(this.currentItem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tserialize: function serialize(o) {\n\n\t\t\tvar items = this._getItemsAsjQuery(o && o.connected),\n\t\t\t    str = [];\n\t\t\to = o || {};\n\n\t\t\t$(items).each(function () {\n\t\t\t\tvar res = ($(o.item || this).attr(o.attribute || \"id\") || \"\").match(o.expression || /(.+)[\\-=_](.+)/);\n\t\t\t\tif (res) {\n\t\t\t\t\tstr.push((o.key || res[1] + \"[]\") + \"=\" + (o.key && o.expression ? res[1] : res[2]));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!str.length && o.key) {\n\t\t\t\tstr.push(o.key + \"=\");\n\t\t\t}\n\n\t\t\treturn str.join(\"&\");\n\t\t},\n\n\t\ttoArray: function toArray(o) {\n\n\t\t\tvar items = this._getItemsAsjQuery(o && o.connected),\n\t\t\t    ret = [];\n\n\t\t\to = o || {};\n\n\t\t\titems.each(function () {\n\t\t\t\tret.push($(o.item || this).attr(o.attribute || \"id\") || \"\");\n\t\t\t});\n\t\t\treturn ret;\n\t\t},\n\n\t\t/* Be careful with the following core functions */\n\t\t_intersectsWith: function _intersectsWith(item) {\n\n\t\t\tvar x1 = this.positionAbs.left,\n\t\t\t    x2 = x1 + this.helperProportions.width,\n\t\t\t    y1 = this.positionAbs.top,\n\t\t\t    y2 = y1 + this.helperProportions.height,\n\t\t\t    l = item.left,\n\t\t\t    r = l + item.width,\n\t\t\t    t = item.top,\n\t\t\t    b = t + item.height,\n\t\t\t    dyClick = this.offset.click.top,\n\t\t\t    dxClick = this.offset.click.left,\n\t\t\t    isOverElementHeight = this.options.axis === \"x\" || y1 + dyClick > t && y1 + dyClick < b,\n\t\t\t    isOverElementWidth = this.options.axis === \"y\" || x1 + dxClick > l && x1 + dxClick < r,\n\t\t\t    isOverElement = isOverElementHeight && isOverElementWidth;\n\n\t\t\tif (this.options.tolerance === \"pointer\" || this.options.forcePointerForContainers || this.options.tolerance !== \"pointer\" && this.helperProportions[this.floating ? \"width\" : \"height\"] > item[this.floating ? \"width\" : \"height\"]) {\n\t\t\t\treturn isOverElement;\n\t\t\t} else {\n\n\t\t\t\treturn l < x1 + this.helperProportions.width / 2 && // Right Half\n\t\t\t\tx2 - this.helperProportions.width / 2 < r && // Left Half\n\t\t\t\tt < y1 + this.helperProportions.height / 2 && // Bottom Half\n\t\t\t\ty2 - this.helperProportions.height / 2 < b; // Top Half\n\t\t\t}\n\t\t},\n\n\t\t_intersectsWithPointer: function _intersectsWithPointer(item) {\n\n\t\t\tvar isOverElementHeight = this.options.axis === \"x\" || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),\n\t\t\t    isOverElementWidth = this.options.axis === \"y\" || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),\n\t\t\t    isOverElement = isOverElementHeight && isOverElementWidth,\n\t\t\t    verticalDirection = this._getDragVerticalDirection(),\n\t\t\t    horizontalDirection = this._getDragHorizontalDirection();\n\n\t\t\tif (!isOverElement) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.floating ? horizontalDirection && horizontalDirection === \"right\" || verticalDirection === \"down\" ? 2 : 1 : verticalDirection && (verticalDirection === \"down\" ? 2 : 1);\n\t\t},\n\n\t\t_intersectsWithSides: function _intersectsWithSides(item) {\n\n\t\t\tvar isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height),\n\t\t\t    isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width),\n\t\t\t    verticalDirection = this._getDragVerticalDirection(),\n\t\t\t    horizontalDirection = this._getDragHorizontalDirection();\n\n\t\t\tif (this.floating && horizontalDirection) {\n\t\t\t\treturn horizontalDirection === \"right\" && isOverRightHalf || horizontalDirection === \"left\" && !isOverRightHalf;\n\t\t\t} else {\n\t\t\t\treturn verticalDirection && (verticalDirection === \"down\" && isOverBottomHalf || verticalDirection === \"up\" && !isOverBottomHalf);\n\t\t\t}\n\t\t},\n\n\t\t_getDragVerticalDirection: function _getDragVerticalDirection() {\n\t\t\tvar delta = this.positionAbs.top - this.lastPositionAbs.top;\n\t\t\treturn delta !== 0 && (delta > 0 ? \"down\" : \"up\");\n\t\t},\n\n\t\t_getDragHorizontalDirection: function _getDragHorizontalDirection() {\n\t\t\tvar delta = this.positionAbs.left - this.lastPositionAbs.left;\n\t\t\treturn delta !== 0 && (delta > 0 ? \"right\" : \"left\");\n\t\t},\n\n\t\trefresh: function refresh(event) {\n\t\t\tthis._refreshItems(event);\n\t\t\tthis._setHandleClassName();\n\t\t\tthis.refreshPositions();\n\t\t\treturn this;\n\t\t},\n\n\t\t_connectWith: function _connectWith() {\n\t\t\tvar options = this.options;\n\t\t\treturn options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;\n\t\t},\n\n\t\t_getItemsAsjQuery: function _getItemsAsjQuery(connected) {\n\n\t\t\tvar i,\n\t\t\t    j,\n\t\t\t    cur,\n\t\t\t    inst,\n\t\t\t    items = [],\n\t\t\t    queries = [],\n\t\t\t    connectWith = this._connectWith();\n\n\t\t\tif (connectWith && connected) {\n\t\t\t\tfor (i = connectWith.length - 1; i >= 0; i--) {\n\t\t\t\t\tcur = $(connectWith[i], this.document[0]);\n\t\t\t\t\tfor (j = cur.length - 1; j >= 0; j--) {\n\t\t\t\t\t\tinst = $.data(cur[j], this.widgetFullName);\n\t\t\t\t\t\tif (inst && inst !== this && !inst.options.disabled) {\n\t\t\t\t\t\t\tqueries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), inst]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tqueries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), this]);\n\n\t\t\tfunction addItems() {\n\t\t\t\titems.push(this);\n\t\t\t}\n\t\t\tfor (i = queries.length - 1; i >= 0; i--) {\n\t\t\t\tqueries[i][0].each(addItems);\n\t\t\t}\n\n\t\t\treturn $(items);\n\t\t},\n\n\t\t_removeCurrentsFromItems: function _removeCurrentsFromItems() {\n\n\t\t\tvar list = this.currentItem.find(\":data(\" + this.widgetName + \"-item)\");\n\n\t\t\tthis.items = $.grep(this.items, function (item) {\n\t\t\t\tfor (var j = 0; j < list.length; j++) {\n\t\t\t\t\tif (list[j] === item.item[0]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t},\n\n\t\t_refreshItems: function _refreshItems(event) {\n\n\t\t\tthis.items = [];\n\t\t\tthis.containers = [this];\n\n\t\t\tvar i,\n\t\t\t    j,\n\t\t\t    cur,\n\t\t\t    inst,\n\t\t\t    targetData,\n\t\t\t    _queries,\n\t\t\t    item,\n\t\t\t    queriesLength,\n\t\t\t    items = this.items,\n\t\t\t    queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],\n\t\t\t    connectWith = this._connectWith();\n\n\t\t\tif (connectWith && this.ready) {\n\t\t\t\t//Shouldn't be run the first time through due to massive slow-down\n\t\t\t\tfor (i = connectWith.length - 1; i >= 0; i--) {\n\t\t\t\t\tcur = $(connectWith[i], this.document[0]);\n\t\t\t\t\tfor (j = cur.length - 1; j >= 0; j--) {\n\t\t\t\t\t\tinst = $.data(cur[j], this.widgetFullName);\n\t\t\t\t\t\tif (inst && inst !== this && !inst.options.disabled) {\n\t\t\t\t\t\t\tqueries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);\n\t\t\t\t\t\t\tthis.containers.push(inst);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (i = queries.length - 1; i >= 0; i--) {\n\t\t\t\ttargetData = queries[i][1];\n\t\t\t\t_queries = queries[i][0];\n\n\t\t\t\tfor (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {\n\t\t\t\t\titem = $(_queries[j]);\n\n\t\t\t\t\titem.data(this.widgetName + \"-item\", targetData); // Data for target checking (mouse manager)\n\n\t\t\t\t\titems.push({\n\t\t\t\t\t\titem: item,\n\t\t\t\t\t\tinstance: targetData,\n\t\t\t\t\t\twidth: 0, height: 0,\n\t\t\t\t\t\tleft: 0, top: 0\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trefreshPositions: function refreshPositions(fast) {\n\n\t\t\t// Determine whether items are being displayed horizontally\n\t\t\tthis.floating = this.items.length ? this.options.axis === \"x\" || this._isFloating(this.items[0].item) : false;\n\n\t\t\t//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change\n\t\t\tif (this.offsetParent && this.helper) {\n\t\t\t\tthis.offset.parent = this._getParentOffset();\n\t\t\t}\n\n\t\t\tvar i, item, t, p;\n\n\t\t\tfor (i = this.items.length - 1; i >= 0; i--) {\n\t\t\t\titem = this.items[i];\n\n\t\t\t\t//We ignore calculating positions of all connected containers when we're not over them\n\t\t\t\tif (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tt = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;\n\n\t\t\t\tif (!fast) {\n\t\t\t\t\titem.width = t.outerWidth();\n\t\t\t\t\titem.height = t.outerHeight();\n\t\t\t\t}\n\n\t\t\t\tp = t.offset();\n\t\t\t\titem.left = p.left;\n\t\t\t\titem.top = p.top;\n\t\t\t}\n\n\t\t\tif (this.options.custom && this.options.custom.refreshContainers) {\n\t\t\t\tthis.options.custom.refreshContainers.call(this);\n\t\t\t} else {\n\t\t\t\tfor (i = this.containers.length - 1; i >= 0; i--) {\n\t\t\t\t\tp = this.containers[i].element.offset();\n\t\t\t\t\tthis.containers[i].containerCache.left = p.left;\n\t\t\t\t\tthis.containers[i].containerCache.top = p.top;\n\t\t\t\t\tthis.containers[i].containerCache.width = this.containers[i].element.outerWidth();\n\t\t\t\t\tthis.containers[i].containerCache.height = this.containers[i].element.outerHeight();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t_createPlaceholder: function _createPlaceholder(that) {\n\t\t\tthat = that || this;\n\t\t\tvar className,\n\t\t\t    o = that.options;\n\n\t\t\tif (!o.placeholder || o.placeholder.constructor === String) {\n\t\t\t\tclassName = o.placeholder;\n\t\t\t\to.placeholder = {\n\t\t\t\t\telement: function element() {\n\n\t\t\t\t\t\tvar nodeName = that.currentItem[0].nodeName.toLowerCase(),\n\t\t\t\t\t\t    element = $(\"<\" + nodeName + \">\", that.document[0]).addClass(className || that.currentItem[0].className + \" ui-sortable-placeholder\").removeClass(\"ui-sortable-helper\");\n\n\t\t\t\t\t\tif (nodeName === \"tbody\") {\n\t\t\t\t\t\t\tthat._createTrPlaceholder(that.currentItem.find(\"tr\").eq(0), $(\"<tr>\", that.document[0]).appendTo(element));\n\t\t\t\t\t\t} else if (nodeName === \"tr\") {\n\t\t\t\t\t\t\tthat._createTrPlaceholder(that.currentItem, element);\n\t\t\t\t\t\t} else if (nodeName === \"img\") {\n\t\t\t\t\t\t\telement.attr(\"src\", that.currentItem.attr(\"src\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!className) {\n\t\t\t\t\t\t\telement.css(\"visibility\", \"hidden\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t},\n\t\t\t\t\tupdate: function update(container, p) {\n\n\t\t\t\t\t\t// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that\n\t\t\t\t\t\t// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified\n\t\t\t\t\t\tif (className && !o.forcePlaceholderSize) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item\n\t\t\t\t\t\tif (!p.height()) {\n\t\t\t\t\t\t\tp.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css(\"paddingTop\") || 0, 10) - parseInt(that.currentItem.css(\"paddingBottom\") || 0, 10));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!p.width()) {\n\t\t\t\t\t\t\tp.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css(\"paddingLeft\") || 0, 10) - parseInt(that.currentItem.css(\"paddingRight\") || 0, 10));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t//Create the placeholder\n\t\t\tthat.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));\n\n\t\t\t//Append it after the actual current item\n\t\t\tthat.currentItem.after(that.placeholder);\n\n\t\t\t//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)\n\t\t\to.placeholder.update(that, that.placeholder);\n\t\t},\n\n\t\t_createTrPlaceholder: function _createTrPlaceholder(sourceTr, targetTr) {\n\t\t\tvar that = this;\n\n\t\t\tsourceTr.children().each(function () {\n\t\t\t\t$(\"<td>&#160;</td>\", that.document[0]).attr(\"colspan\", $(this).attr(\"colspan\") || 1).appendTo(targetTr);\n\t\t\t});\n\t\t},\n\n\t\t_contactContainers: function _contactContainers(event) {\n\t\t\tvar i,\n\t\t\t    j,\n\t\t\t    dist,\n\t\t\t    itemWithLeastDistance,\n\t\t\t    posProperty,\n\t\t\t    sizeProperty,\n\t\t\t    cur,\n\t\t\t    nearBottom,\n\t\t\t    floating,\n\t\t\t    axis,\n\t\t\t    innermostContainer = null,\n\t\t\t    innermostIndex = null;\n\n\t\t\t// get innermost container that intersects with item\n\t\t\tfor (i = this.containers.length - 1; i >= 0; i--) {\n\n\t\t\t\t// never consider a container that's located within the item itself\n\t\t\t\tif ($.contains(this.currentItem[0], this.containers[i].element[0])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this._intersectsWith(this.containers[i].containerCache)) {\n\n\t\t\t\t\t// if we've already found a container and it's more \"inner\" than this, then continue\n\t\t\t\t\tif (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tinnermostContainer = this.containers[i];\n\t\t\t\t\tinnermostIndex = i;\n\t\t\t\t} else {\n\t\t\t\t\t// container doesn't intersect. trigger \"out\" event if necessary\n\t\t\t\t\tif (this.containers[i].containerCache.over) {\n\t\t\t\t\t\tthis.containers[i]._trigger(\"out\", event, this._uiHash(this));\n\t\t\t\t\t\tthis.containers[i].containerCache.over = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if no intersecting containers found, return\n\t\t\tif (!innermostContainer) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// move the item into the container if it's not there already\n\t\t\tif (this.containers.length === 1) {\n\t\t\t\tif (!this.containers[innermostIndex].containerCache.over) {\n\t\t\t\t\tthis.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\t\t\t\t\tthis.containers[innermostIndex].containerCache.over = 1;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t//When entering a new container, we will find the item with the least distance and append our item near it\n\t\t\t\tdist = 10000;\n\t\t\t\titemWithLeastDistance = null;\n\t\t\t\tfloating = innermostContainer.floating || this._isFloating(this.currentItem);\n\t\t\t\tposProperty = floating ? \"left\" : \"top\";\n\t\t\t\tsizeProperty = floating ? \"width\" : \"height\";\n\t\t\t\taxis = floating ? \"clientX\" : \"clientY\";\n\n\t\t\t\tfor (j = this.items.length - 1; j >= 0; j--) {\n\t\t\t\t\tif (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.items[j].item[0] === this.currentItem[0]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tcur = this.items[j].item.offset()[posProperty];\n\t\t\t\t\tnearBottom = false;\n\t\t\t\t\tif (event[axis] - cur > this.items[j][sizeProperty] / 2) {\n\t\t\t\t\t\tnearBottom = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Math.abs(event[axis] - cur) < dist) {\n\t\t\t\t\t\tdist = Math.abs(event[axis] - cur);\n\t\t\t\t\t\titemWithLeastDistance = this.items[j];\n\t\t\t\t\t\tthis.direction = nearBottom ? \"up\" : \"down\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Check if dropOnEmpty is enabled\n\t\t\t\tif (!itemWithLeastDistance && !this.options.dropOnEmpty) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.currentContainer === this.containers[innermostIndex]) {\n\t\t\t\t\tif (!this.currentContainer.containerCache.over) {\n\t\t\t\t\t\tthis.containers[innermostIndex]._trigger(\"over\", event, this._uiHash());\n\t\t\t\t\t\tthis.currentContainer.containerCache.over = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\titemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);\n\t\t\t\tthis._trigger(\"change\", event, this._uiHash());\n\t\t\t\tthis.containers[innermostIndex]._trigger(\"change\", event, this._uiHash(this));\n\t\t\t\tthis.currentContainer = this.containers[innermostIndex];\n\n\t\t\t\t//Update the placeholder\n\t\t\t\tthis.options.placeholder.update(this.currentContainer, this.placeholder);\n\n\t\t\t\tthis.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\t\t\t\tthis.containers[innermostIndex].containerCache.over = 1;\n\t\t\t}\n\t\t},\n\n\t\t_createHelper: function _createHelper(event) {\n\n\t\t\tvar o = this.options,\n\t\t\t    helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : o.helper === \"clone\" ? this.currentItem.clone() : this.currentItem;\n\n\t\t\t//Add the helper to the DOM if that didn't happen already\n\t\t\tif (!helper.parents(\"body\").length) {\n\t\t\t\t$(o.appendTo !== \"parent\" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);\n\t\t\t}\n\n\t\t\tif (helper[0] === this.currentItem[0]) {\n\t\t\t\tthis._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css(\"position\"), top: this.currentItem.css(\"top\"), left: this.currentItem.css(\"left\") };\n\t\t\t}\n\n\t\t\tif (!helper[0].style.width || o.forceHelperSize) {\n\t\t\t\thelper.width(this.currentItem.width());\n\t\t\t}\n\t\t\tif (!helper[0].style.height || o.forceHelperSize) {\n\t\t\t\thelper.height(this.currentItem.height());\n\t\t\t}\n\n\t\t\treturn helper;\n\t\t},\n\n\t\t_adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n\t\t\tif (typeof obj === \"string\") {\n\t\t\t\tobj = obj.split(\" \");\n\t\t\t}\n\t\t\tif ($.isArray(obj)) {\n\t\t\t\tobj = { left: +obj[0], top: +obj[1] || 0 };\n\t\t\t}\n\t\t\tif (\"left\" in obj) {\n\t\t\t\tthis.offset.click.left = obj.left + this.margins.left;\n\t\t\t}\n\t\t\tif (\"right\" in obj) {\n\t\t\t\tthis.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n\t\t\t}\n\t\t\tif (\"top\" in obj) {\n\t\t\t\tthis.offset.click.top = obj.top + this.margins.top;\n\t\t\t}\n\t\t\tif (\"bottom\" in obj) {\n\t\t\t\tthis.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n\t\t\t}\n\t\t},\n\n\t\t_getParentOffset: function _getParentOffset() {\n\n\t\t\t//Get the offsetParent and cache its position\n\t\t\tthis.offsetParent = this.helper.offsetParent();\n\t\t\tvar po = this.offsetParent.offset();\n\n\t\t\t// This is a special case where we need to modify a offset calculated on start, since the following happened:\n\t\t\t// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\n\t\t\t// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\n\t\t\t//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\n\t\t\tif (this.cssPosition === \"absolute\" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n\t\t\t\tpo.left += this.scrollParent.scrollLeft();\n\t\t\t\tpo.top += this.scrollParent.scrollTop();\n\t\t\t}\n\n\t\t\t// This needs to be actually done for all browsers, since pageX/pageY includes this information\n\t\t\t// with an ugly IE fix\n\t\t\tif (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === \"html\" && $.ui.ie) {\n\t\t\t\tpo = { top: 0, left: 0 };\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttop: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n\t\t\t\tleft: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n\t\t\t};\n\t\t},\n\n\t\t_getRelativeOffset: function _getRelativeOffset() {\n\n\t\t\tif (this.cssPosition === \"relative\") {\n\t\t\t\tvar p = this.currentItem.position();\n\t\t\t\treturn {\n\t\t\t\t\ttop: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\n\t\t\t\t\tleft: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn { top: 0, left: 0 };\n\t\t\t}\n\t\t},\n\n\t\t_cacheMargins: function _cacheMargins() {\n\t\t\tthis.margins = {\n\t\t\t\tleft: parseInt(this.currentItem.css(\"marginLeft\"), 10) || 0,\n\t\t\t\ttop: parseInt(this.currentItem.css(\"marginTop\"), 10) || 0\n\t\t\t};\n\t\t},\n\n\t\t_cacheHelperProportions: function _cacheHelperProportions() {\n\t\t\tthis.helperProportions = {\n\t\t\t\twidth: this.helper.outerWidth(),\n\t\t\t\theight: this.helper.outerHeight()\n\t\t\t};\n\t\t},\n\n\t\t_setContainment: function _setContainment() {\n\n\t\t\tvar ce,\n\t\t\t    co,\n\t\t\t    over,\n\t\t\t    o = this.options;\n\t\t\tif (o.containment === \"parent\") {\n\t\t\t\to.containment = this.helper[0].parentNode;\n\t\t\t}\n\t\t\tif (o.containment === \"document\" || o.containment === \"window\") {\n\t\t\t\tthis.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, o.containment === \"document\" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (o.containment === \"document\" ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n\t\t\t}\n\n\t\t\tif (!/^(document|window|parent)$/.test(o.containment)) {\n\t\t\t\tce = $(o.containment)[0];\n\t\t\t\tco = $(o.containment).offset();\n\t\t\t\tover = $(ce).css(\"overflow\") !== \"hidden\";\n\n\t\t\t\tthis.containment = [co.left + (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingLeft\"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingTop\"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top];\n\t\t\t}\n\t\t},\n\n\t\t_convertPositionTo: function _convertPositionTo(d, pos) {\n\n\t\t\tif (!pos) {\n\t\t\t\tpos = this.position;\n\t\t\t}\n\t\t\tvar mod = d === \"absolute\" ? 1 : -1,\n\t\t\t    scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n\t\t\t    scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);\n\n\t\t\treturn {\n\t\t\t\ttop: pos.top + // The absolute mouse position\n\t\t\t\tthis.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)\n\t\t\t\t(this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,\n\t\t\t\tleft: pos.left + // The absolute mouse position\n\t\t\t\tthis.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)\n\t\t\t\t(this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod\n\t\t\t};\n\t\t},\n\n\t\t_generatePosition: function _generatePosition(event) {\n\n\t\t\tvar top,\n\t\t\t    left,\n\t\t\t    o = this.options,\n\t\t\t    pageX = event.pageX,\n\t\t\t    pageY = event.pageY,\n\t\t\t    scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n\t\t\t    scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);\n\n\t\t\t// This is another very weird special case that only happens for relative elements:\n\t\t\t// 1. If the css position is relative\n\t\t\t// 2. and the scroll parent is the document or similar to the offset parent\n\t\t\t// we have to refresh the relative offset during the scroll so there are no jumps\n\t\t\tif (this.cssPosition === \"relative\" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {\n\t\t\t\tthis.offset.relative = this._getRelativeOffset();\n\t\t\t}\n\n\t\t\t/*\n    * - Position constraining -\n    * Constrain the position to a mix of grid, containment.\n    */\n\n\t\t\tif (this.originalPosition) {\n\t\t\t\t//If we are not dragging yet, we won't check for options\n\n\t\t\t\tif (this.containment) {\n\t\t\t\t\tif (event.pageX - this.offset.click.left < this.containment[0]) {\n\t\t\t\t\t\tpageX = this.containment[0] + this.offset.click.left;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.pageY - this.offset.click.top < this.containment[1]) {\n\t\t\t\t\t\tpageY = this.containment[1] + this.offset.click.top;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.pageX - this.offset.click.left > this.containment[2]) {\n\t\t\t\t\t\tpageX = this.containment[2] + this.offset.click.left;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.pageY - this.offset.click.top > this.containment[3]) {\n\t\t\t\t\t\tpageY = this.containment[3] + this.offset.click.top;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (o.grid) {\n\t\t\t\t\ttop = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];\n\t\t\t\t\tpageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n\n\t\t\t\t\tleft = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];\n\t\t\t\t\tpageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttop: pageY - // The absolute mouse position\n\t\t\t\tthis.offset.click.top - // Click offset (relative to the element)\n\t\t\t\tthis.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)\n\t\t\t\tthis.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),\n\t\t\t\tleft: pageX - // The absolute mouse position\n\t\t\t\tthis.offset.click.left - // Click offset (relative to the element)\n\t\t\t\tthis.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n\t\t\t\tthis.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)\n\t\t\t\tthis.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())\n\t\t\t};\n\t\t},\n\n\t\t_rearrange: function _rearrange(event, i, a, hardRefresh) {\n\n\t\t\ta ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === \"down\" ? i.item[0] : i.item[0].nextSibling);\n\n\t\t\t//Various things done here to improve the performance:\n\t\t\t// 1. we create a setTimeout, that calls refreshPositions\n\t\t\t// 2. on the instance, we have a counter variable, that get's higher after every append\n\t\t\t// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same\n\t\t\t// 4. this lets only the last addition to the timeout stack through\n\t\t\tthis.counter = this.counter ? ++this.counter : 1;\n\t\t\tvar counter = this.counter;\n\n\t\t\tthis._delay(function () {\n\t\t\t\tif (counter === this.counter) {\n\t\t\t\t\tthis.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_clear: function _clear(event, noPropagation) {\n\n\t\t\tthis.reverting = false;\n\t\t\t// We delay all events that have to be triggered to after the point where the placeholder has been removed and\n\t\t\t// everything else normalized again\n\t\t\tvar i,\n\t\t\t    delayedTriggers = [];\n\n\t\t\t// We first have to update the dom position of the actual currentItem\n\t\t\t// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)\n\t\t\tif (!this._noFinalSort && this.currentItem.parent().length) {\n\t\t\t\tthis.placeholder.before(this.currentItem);\n\t\t\t}\n\t\t\tthis._noFinalSort = null;\n\n\t\t\tif (this.helper[0] === this.currentItem[0]) {\n\t\t\t\tfor (i in this._storedCSS) {\n\t\t\t\t\tif (this._storedCSS[i] === \"auto\" || this._storedCSS[i] === \"static\") {\n\t\t\t\t\t\tthis._storedCSS[i] = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\n\t\t\t} else {\n\t\t\t\tthis.currentItem.show();\n\t\t\t}\n\n\t\t\tif (this.fromOutside && !noPropagation) {\n\t\t\t\tdelayedTriggers.push(function (event) {\n\t\t\t\t\tthis._trigger(\"receive\", event, this._uiHash(this.fromOutside));\n\t\t\t\t});\n\t\t\t}\n\t\t\tif ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(\".ui-sortable-helper\")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {\n\t\t\t\tdelayedTriggers.push(function (event) {\n\t\t\t\t\tthis._trigger(\"update\", event, this._uiHash());\n\t\t\t\t}); //Trigger update callback if the DOM position has changed\n\t\t\t}\n\n\t\t\t// Check if the items Container has Changed and trigger appropriate\n\t\t\t// events.\n\t\t\tif (this !== this.currentContainer) {\n\t\t\t\tif (!noPropagation) {\n\t\t\t\t\tdelayedTriggers.push(function (event) {\n\t\t\t\t\t\tthis._trigger(\"remove\", event, this._uiHash());\n\t\t\t\t\t});\n\t\t\t\t\tdelayedTriggers.push(function (c) {\n\t\t\t\t\t\treturn function (event) {\n\t\t\t\t\t\t\tc._trigger(\"receive\", event, this._uiHash(this));\n\t\t\t\t\t\t};\n\t\t\t\t\t}.call(this, this.currentContainer));\n\t\t\t\t\tdelayedTriggers.push(function (c) {\n\t\t\t\t\t\treturn function (event) {\n\t\t\t\t\t\t\tc._trigger(\"update\", event, this._uiHash(this));\n\t\t\t\t\t\t};\n\t\t\t\t\t}.call(this, this.currentContainer));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Post events to containers\n\t\t\tfunction delayEvent(type, instance, container) {\n\t\t\t\treturn function (event) {\n\t\t\t\t\tcontainer._trigger(type, event, instance._uiHash(instance));\n\t\t\t\t};\n\t\t\t}\n\t\t\tfor (i = this.containers.length - 1; i >= 0; i--) {\n\t\t\t\tif (!noPropagation) {\n\t\t\t\t\tdelayedTriggers.push(delayEvent(\"deactivate\", this, this.containers[i]));\n\t\t\t\t}\n\t\t\t\tif (this.containers[i].containerCache.over) {\n\t\t\t\t\tdelayedTriggers.push(delayEvent(\"out\", this, this.containers[i]));\n\t\t\t\t\tthis.containers[i].containerCache.over = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Do what was originally in plugins\n\t\t\tif (this.storedCursor) {\n\t\t\t\tthis.document.find(\"body\").css(\"cursor\", this.storedCursor);\n\t\t\t\tthis.storedStylesheet.remove();\n\t\t\t}\n\t\t\tif (this._storedOpacity) {\n\t\t\t\tthis.helper.css(\"opacity\", this._storedOpacity);\n\t\t\t}\n\t\t\tif (this._storedZIndex) {\n\t\t\t\tthis.helper.css(\"zIndex\", this._storedZIndex === \"auto\" ? \"\" : this._storedZIndex);\n\t\t\t}\n\n\t\t\tthis.dragging = false;\n\n\t\t\tif (!noPropagation) {\n\t\t\t\tthis._trigger(\"beforeStop\", event, this._uiHash());\n\t\t\t}\n\n\t\t\t//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\n\t\t\tthis.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n\n\t\t\tif (!this.cancelHelperRemoval) {\n\t\t\t\tif (this.helper[0] !== this.currentItem[0]) {\n\t\t\t\t\tthis.helper.remove();\n\t\t\t\t}\n\t\t\t\tthis.helper = null;\n\t\t\t}\n\n\t\t\tif (!noPropagation) {\n\t\t\t\tfor (i = 0; i < delayedTriggers.length; i++) {\n\t\t\t\t\tdelayedTriggers[i].call(this, event);\n\t\t\t\t} //Trigger all delayed events\n\t\t\t\tthis._trigger(\"stop\", event, this._uiHash());\n\t\t\t}\n\n\t\t\tthis.fromOutside = false;\n\t\t\treturn !this.cancelHelperRemoval;\n\t\t},\n\n\t\t_trigger: function _trigger() {\n\t\t\tif ($.Widget.prototype._trigger.apply(this, arguments) === false) {\n\t\t\t\tthis.cancel();\n\t\t\t}\n\t\t},\n\n\t\t_uiHash: function _uiHash(_inst) {\n\t\t\tvar inst = _inst || this;\n\t\t\treturn {\n\t\t\t\thelper: inst.helper,\n\t\t\t\tplaceholder: inst.placeholder || $([]),\n\t\t\t\tposition: inst.position,\n\t\t\t\toriginalPosition: inst.originalPosition,\n\t\t\t\toffset: inst.positionAbs,\n\t\t\t\titem: inst.currentItem,\n\t\t\t\tsender: _inst ? _inst.element : null\n\t\t\t};\n\t\t}\n\n\t});\n\n\t/*!\n  * jQuery UI Spinner 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/spinner/\n  */\n\n\tfunction spinner_modifier(fn) {\n\t\treturn function () {\n\t\t\tvar previous = this.element.val();\n\t\t\tfn.apply(this, arguments);\n\t\t\tthis._refresh();\n\t\t\tif (previous !== this.element.val()) {\n\t\t\t\tthis._trigger(\"change\");\n\t\t\t}\n\t\t};\n\t}\n\n\tvar spinner = $.widget(\"ui.spinner\", {\n\t\tversion: \"1.11.4\",\n\t\tdefaultElement: \"<input>\",\n\t\twidgetEventPrefix: \"spin\",\n\t\toptions: {\n\t\t\tculture: null,\n\t\t\ticons: {\n\t\t\t\tdown: \"ui-icon-triangle-1-s\",\n\t\t\t\tup: \"ui-icon-triangle-1-n\"\n\t\t\t},\n\t\t\tincremental: true,\n\t\t\tmax: null,\n\t\t\tmin: null,\n\t\t\tnumberFormat: null,\n\t\t\tpage: 10,\n\t\t\tstep: 1,\n\n\t\t\tchange: null,\n\t\t\tspin: null,\n\t\t\tstart: null,\n\t\t\tstop: null\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\t// handle string values that need to be parsed\n\t\t\tthis._setOption(\"max\", this.options.max);\n\t\t\tthis._setOption(\"min\", this.options.min);\n\t\t\tthis._setOption(\"step\", this.options.step);\n\n\t\t\t// Only format if there is a value, prevents the field from being marked\n\t\t\t// as invalid in Firefox, see #9573.\n\t\t\tif (this.value() !== \"\") {\n\t\t\t\t// Format the value, but don't constrain.\n\t\t\t\tthis._value(this.element.val(), true);\n\t\t\t}\n\n\t\t\tthis._draw();\n\t\t\tthis._on(this._events);\n\t\t\tthis._refresh();\n\n\t\t\t// turning off autocomplete prevents the browser from remembering the\n\t\t\t// value when navigating through history, so we re-enable autocomplete\n\t\t\t// if the page is unloaded before the widget is destroyed. #7790\n\t\t\tthis._on(this.window, {\n\t\t\t\tbeforeunload: function beforeunload() {\n\t\t\t\t\tthis.element.removeAttr(\"autocomplete\");\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_getCreateOptions: function _getCreateOptions() {\n\t\t\tvar options = {},\n\t\t\t    element = this.element;\n\n\t\t\t$.each([\"min\", \"max\", \"step\"], function (i, option) {\n\t\t\t\tvar value = element.attr(option);\n\t\t\t\tif (value !== undefined && value.length) {\n\t\t\t\t\toptions[option] = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn options;\n\t\t},\n\n\t\t_events: {\n\t\t\tkeydown: function keydown(event) {\n\t\t\t\tif (this._start(event) && this._keydown(event)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t},\n\t\t\tkeyup: \"_stop\",\n\t\t\tfocus: function focus() {\n\t\t\t\tthis.previous = this.element.val();\n\t\t\t},\n\t\t\tblur: function blur(event) {\n\t\t\t\tif (this.cancelBlur) {\n\t\t\t\t\tdelete this.cancelBlur;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._stop();\n\t\t\t\tthis._refresh();\n\t\t\t\tif (this.previous !== this.element.val()) {\n\t\t\t\t\tthis._trigger(\"change\", event);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmousewheel: function mousewheel(event, delta) {\n\t\t\t\tif (!delta) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!this.spinning && !this._start(event)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tthis._spin((delta > 0 ? 1 : -1) * this.options.step, event);\n\t\t\t\tclearTimeout(this.mousewheelTimer);\n\t\t\t\tthis.mousewheelTimer = this._delay(function () {\n\t\t\t\t\tif (this.spinning) {\n\t\t\t\t\t\tthis._stop(event);\n\t\t\t\t\t}\n\t\t\t\t}, 100);\n\t\t\t\tevent.preventDefault();\n\t\t\t},\n\t\t\t\"mousedown .ui-spinner-button\": function mousedownUiSpinnerButton(event) {\n\t\t\t\tvar previous;\n\n\t\t\t\t// We never want the buttons to have focus; whenever the user is\n\t\t\t\t// interacting with the spinner, the focus should be on the input.\n\t\t\t\t// If the input is focused then this.previous is properly set from\n\t\t\t\t// when the input first received focus. If the input is not focused\n\t\t\t\t// then we need to set this.previous based on the value before spinning.\n\t\t\t\tprevious = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();\n\t\t\t\tfunction checkFocus() {\n\t\t\t\t\tvar isActive = this.element[0] === this.document[0].activeElement;\n\t\t\t\t\tif (!isActive) {\n\t\t\t\t\t\tthis.element.focus();\n\t\t\t\t\t\tthis.previous = previous;\n\t\t\t\t\t\t// support: IE\n\t\t\t\t\t\t// IE sets focus asynchronously, so we need to check if focus\n\t\t\t\t\t\t// moved off of the input because the user clicked on the button.\n\t\t\t\t\t\tthis._delay(function () {\n\t\t\t\t\t\t\tthis.previous = previous;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ensure focus is on (or stays on) the text field\n\t\t\t\tevent.preventDefault();\n\t\t\t\tcheckFocus.call(this);\n\n\t\t\t\t// support: IE\n\t\t\t\t// IE doesn't prevent moving focus even with event.preventDefault()\n\t\t\t\t// so we set a flag to know when we should ignore the blur event\n\t\t\t\t// and check (again) if focus moved off of the input.\n\t\t\t\tthis.cancelBlur = true;\n\t\t\t\tthis._delay(function () {\n\t\t\t\t\tdelete this.cancelBlur;\n\t\t\t\t\tcheckFocus.call(this);\n\t\t\t\t});\n\n\t\t\t\tif (this._start(event) === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n\t\t\t},\n\t\t\t\"mouseup .ui-spinner-button\": \"_stop\",\n\t\t\t\"mouseenter .ui-spinner-button\": function mouseenterUiSpinnerButton(event) {\n\t\t\t\t// button will add ui-state-active if mouse was down while mouseleave and kept down\n\t\t\t\tif (!$(event.currentTarget).hasClass(\"ui-state-active\")) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this._start(event) === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n\t\t\t},\n\t\t\t// TODO: do we really want to consider this a stop?\n\t\t\t// shouldn't we just stop the repeater and wait until mouseup before\n\t\t\t// we trigger the stop event?\n\t\t\t\"mouseleave .ui-spinner-button\": \"_stop\"\n\t\t},\n\n\t\t_draw: function _draw() {\n\t\t\tvar uiSpinner = this.uiSpinner = this.element.addClass(\"ui-spinner-input\").attr(\"autocomplete\", \"off\").wrap(this._uiSpinnerHtml()).parent()\n\t\t\t// add buttons\n\t\t\t.append(this._buttonHtml());\n\n\t\t\tthis.element.attr(\"role\", \"spinbutton\");\n\n\t\t\t// button bindings\n\t\t\tthis.buttons = uiSpinner.find(\".ui-spinner-button\").attr(\"tabIndex\", -1).button().removeClass(\"ui-corner-all\");\n\n\t\t\t// IE 6 doesn't understand height: 50% for the buttons\n\t\t\t// unless the wrapper has an explicit height\n\t\t\tif (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) && uiSpinner.height() > 0) {\n\t\t\t\tuiSpinner.height(uiSpinner.height());\n\t\t\t}\n\n\t\t\t// disable spinner if element was already disabled\n\t\t\tif (this.options.disabled) {\n\t\t\t\tthis.disable();\n\t\t\t}\n\t\t},\n\n\t\t_keydown: function _keydown(event) {\n\t\t\tvar options = this.options,\n\t\t\t    keyCode = $.ui.keyCode;\n\n\t\t\tswitch (event.keyCode) {\n\t\t\t\tcase keyCode.UP:\n\t\t\t\t\tthis._repeat(null, 1, event);\n\t\t\t\t\treturn true;\n\t\t\t\tcase keyCode.DOWN:\n\t\t\t\t\tthis._repeat(null, -1, event);\n\t\t\t\t\treturn true;\n\t\t\t\tcase keyCode.PAGE_UP:\n\t\t\t\t\tthis._repeat(null, options.page, event);\n\t\t\t\t\treturn true;\n\t\t\t\tcase keyCode.PAGE_DOWN:\n\t\t\t\t\tthis._repeat(null, -options.page, event);\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_uiSpinnerHtml: function _uiSpinnerHtml() {\n\t\t\treturn \"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>\";\n\t\t},\n\n\t\t_buttonHtml: function _buttonHtml() {\n\t\t\treturn \"\" + \"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>\" + \"<span class='ui-icon \" + this.options.icons.up + \"'>&#9650;</span>\" + \"</a>\" + \"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>\" + \"<span class='ui-icon \" + this.options.icons.down + \"'>&#9660;</span>\" + \"</a>\";\n\t\t},\n\n\t\t_start: function _start(event) {\n\t\t\tif (!this.spinning && this._trigger(\"start\", event) === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!this.counter) {\n\t\t\t\tthis.counter = 1;\n\t\t\t}\n\t\t\tthis.spinning = true;\n\t\t\treturn true;\n\t\t},\n\n\t\t_repeat: function _repeat(i, steps, event) {\n\t\t\ti = i || 500;\n\n\t\t\tclearTimeout(this.timer);\n\t\t\tthis.timer = this._delay(function () {\n\t\t\t\tthis._repeat(40, steps, event);\n\t\t\t}, i);\n\n\t\t\tthis._spin(steps * this.options.step, event);\n\t\t},\n\n\t\t_spin: function _spin(step, event) {\n\t\t\tvar value = this.value() || 0;\n\n\t\t\tif (!this.counter) {\n\t\t\t\tthis.counter = 1;\n\t\t\t}\n\n\t\t\tvalue = this._adjustValue(value + step * this._increment(this.counter));\n\n\t\t\tif (!this.spinning || this._trigger(\"spin\", event, { value: value }) !== false) {\n\t\t\t\tthis._value(value);\n\t\t\t\tthis.counter++;\n\t\t\t}\n\t\t},\n\n\t\t_increment: function _increment(i) {\n\t\t\tvar incremental = this.options.incremental;\n\n\t\t\tif (incremental) {\n\t\t\t\treturn $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t},\n\n\t\t_precision: function _precision() {\n\t\t\tvar precision = this._precisionOf(this.options.step);\n\t\t\tif (this.options.min !== null) {\n\t\t\t\tprecision = Math.max(precision, this._precisionOf(this.options.min));\n\t\t\t}\n\t\t\treturn precision;\n\t\t},\n\n\t\t_precisionOf: function _precisionOf(num) {\n\t\t\tvar str = num.toString(),\n\t\t\t    decimal = str.indexOf(\".\");\n\t\t\treturn decimal === -1 ? 0 : str.length - decimal - 1;\n\t\t},\n\n\t\t_adjustValue: function _adjustValue(value) {\n\t\t\tvar base,\n\t\t\t    aboveMin,\n\t\t\t    options = this.options;\n\n\t\t\t// make sure we're at a valid step\n\t\t\t// - find out where we are relative to the base (min or 0)\n\t\t\tbase = options.min !== null ? options.min : 0;\n\t\t\taboveMin = value - base;\n\t\t\t// - round to the nearest step\n\t\t\taboveMin = Math.round(aboveMin / options.step) * options.step;\n\t\t\t// - rounding is based on 0, so adjust back to our base\n\t\t\tvalue = base + aboveMin;\n\n\t\t\t// fix precision from bad JS floating point math\n\t\t\tvalue = parseFloat(value.toFixed(this._precision()));\n\n\t\t\t// clamp the value\n\t\t\tif (options.max !== null && value > options.max) {\n\t\t\t\treturn options.max;\n\t\t\t}\n\t\t\tif (options.min !== null && value < options.min) {\n\t\t\t\treturn options.min;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\n\t\t_stop: function _stop(event) {\n\t\t\tif (!this.spinning) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(this.timer);\n\t\t\tclearTimeout(this.mousewheelTimer);\n\t\t\tthis.counter = 0;\n\t\t\tthis.spinning = false;\n\t\t\tthis._trigger(\"stop\", event);\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tif (key === \"culture\" || key === \"numberFormat\") {\n\t\t\t\tvar prevValue = this._parse(this.element.val());\n\t\t\t\tthis.options[key] = value;\n\t\t\t\tthis.element.val(this._format(prevValue));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (key === \"max\" || key === \"min\" || key === \"step\") {\n\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\tvalue = this._parse(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (key === \"icons\") {\n\t\t\t\tthis.buttons.first().find(\".ui-icon\").removeClass(this.options.icons.up).addClass(value.up);\n\t\t\t\tthis.buttons.last().find(\".ui-icon\").removeClass(this.options.icons.down).addClass(value.down);\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis.widget().toggleClass(\"ui-state-disabled\", !!value);\n\t\t\t\tthis.element.prop(\"disabled\", !!value);\n\t\t\t\tthis.buttons.button(value ? \"disable\" : \"enable\");\n\t\t\t}\n\t\t},\n\n\t\t_setOptions: spinner_modifier(function (options) {\n\t\t\tthis._super(options);\n\t\t}),\n\n\t\t_parse: function _parse(val) {\n\t\t\tif (typeof val === \"string\" && val !== \"\") {\n\t\t\t\tval = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;\n\t\t\t}\n\t\t\treturn val === \"\" || isNaN(val) ? null : val;\n\t\t},\n\n\t\t_format: function _format(value) {\n\t\t\tif (value === \"\") {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\treturn window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;\n\t\t},\n\n\t\t_refresh: function _refresh() {\n\t\t\tthis.element.attr({\n\t\t\t\t\"aria-valuemin\": this.options.min,\n\t\t\t\t\"aria-valuemax\": this.options.max,\n\t\t\t\t// TODO: what should we do with values that can't be parsed?\n\t\t\t\t\"aria-valuenow\": this._parse(this.element.val())\n\t\t\t});\n\t\t},\n\n\t\tisValid: function isValid() {\n\t\t\tvar value = this.value();\n\n\t\t\t// null is invalid\n\t\t\tif (value === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// if value gets adjusted, it's invalid\n\t\t\treturn value === this._adjustValue(value);\n\t\t},\n\n\t\t// update the value without triggering change\n\t\t_value: function _value(value, allowAny) {\n\t\t\tvar parsed;\n\t\t\tif (value !== \"\") {\n\t\t\t\tparsed = this._parse(value);\n\t\t\t\tif (parsed !== null) {\n\t\t\t\t\tif (!allowAny) {\n\t\t\t\t\t\tparsed = this._adjustValue(parsed);\n\t\t\t\t\t}\n\t\t\t\t\tvalue = this._format(parsed);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.element.val(value);\n\t\t\tthis._refresh();\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tthis.element.removeClass(\"ui-spinner-input\").prop(\"disabled\", false).removeAttr(\"autocomplete\").removeAttr(\"role\").removeAttr(\"aria-valuemin\").removeAttr(\"aria-valuemax\").removeAttr(\"aria-valuenow\");\n\t\t\tthis.uiSpinner.replaceWith(this.element);\n\t\t},\n\n\t\tstepUp: spinner_modifier(function (steps) {\n\t\t\tthis._stepUp(steps);\n\t\t}),\n\t\t_stepUp: function _stepUp(steps) {\n\t\t\tif (this._start()) {\n\t\t\t\tthis._spin((steps || 1) * this.options.step);\n\t\t\t\tthis._stop();\n\t\t\t}\n\t\t},\n\n\t\tstepDown: spinner_modifier(function (steps) {\n\t\t\tthis._stepDown(steps);\n\t\t}),\n\t\t_stepDown: function _stepDown(steps) {\n\t\t\tif (this._start()) {\n\t\t\t\tthis._spin((steps || 1) * -this.options.step);\n\t\t\t\tthis._stop();\n\t\t\t}\n\t\t},\n\n\t\tpageUp: spinner_modifier(function (pages) {\n\t\t\tthis._stepUp((pages || 1) * this.options.page);\n\t\t}),\n\n\t\tpageDown: spinner_modifier(function (pages) {\n\t\t\tthis._stepDown((pages || 1) * this.options.page);\n\t\t}),\n\n\t\tvalue: function value(newVal) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._parse(this.element.val());\n\t\t\t}\n\t\t\tspinner_modifier(this._value).call(this, newVal);\n\t\t},\n\n\t\twidget: function widget() {\n\t\t\treturn this.uiSpinner;\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Tabs 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/tabs/\n  */\n\n\tvar tabs = $.widget(\"ui.tabs\", {\n\t\tversion: \"1.11.4\",\n\t\tdelay: 300,\n\t\toptions: {\n\t\t\tactive: null,\n\t\t\tcollapsible: false,\n\t\t\tevent: \"click\",\n\t\t\theightStyle: \"content\",\n\t\t\thide: null,\n\t\t\tshow: null,\n\n\t\t\t// callbacks\n\t\t\tactivate: null,\n\t\t\tbeforeActivate: null,\n\t\t\tbeforeLoad: null,\n\t\t\tload: null\n\t\t},\n\n\t\t_isLocal: function () {\n\t\t\tvar rhash = /#.*$/;\n\n\t\t\treturn function (anchor) {\n\t\t\t\tvar anchorUrl, locationUrl;\n\n\t\t\t\t// support: IE7\n\t\t\t\t// IE7 doesn't normalize the href property when set via script (#9317)\n\t\t\t\tanchor = anchor.cloneNode(false);\n\n\t\t\t\tanchorUrl = anchor.href.replace(rhash, \"\");\n\t\t\t\tlocationUrl = location.href.replace(rhash, \"\");\n\n\t\t\t\t// decoding may throw an error if the URL isn't UTF-8 (#9518)\n\t\t\t\ttry {\n\t\t\t\t\tanchorUrl = decodeURIComponent(anchorUrl);\n\t\t\t\t} catch (error) {}\n\t\t\t\ttry {\n\t\t\t\t\tlocationUrl = decodeURIComponent(locationUrl);\n\t\t\t\t} catch (error) {}\n\n\t\t\t\treturn anchor.hash.length > 1 && anchorUrl === locationUrl;\n\t\t\t};\n\t\t}(),\n\n\t\t_create: function _create() {\n\t\t\tvar that = this,\n\t\t\t    options = this.options;\n\n\t\t\tthis.running = false;\n\n\t\t\tthis.element.addClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all\").toggleClass(\"ui-tabs-collapsible\", options.collapsible);\n\n\t\t\tthis._processTabs();\n\t\t\toptions.active = this._initialActive();\n\n\t\t\t// Take disabling tabs via class attribute from HTML\n\t\t\t// into account and update option properly.\n\t\t\tif ($.isArray(options.disabled)) {\n\t\t\t\toptions.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(\".ui-state-disabled\"), function (li) {\n\t\t\t\t\treturn that.tabs.index(li);\n\t\t\t\t}))).sort();\n\t\t\t}\n\n\t\t\t// check for length avoids error when initializing empty list\n\t\t\tif (this.options.active !== false && this.anchors.length) {\n\t\t\t\tthis.active = this._findActive(options.active);\n\t\t\t} else {\n\t\t\t\tthis.active = $();\n\t\t\t}\n\n\t\t\tthis._refresh();\n\n\t\t\tif (this.active.length) {\n\t\t\t\tthis.load(options.active);\n\t\t\t}\n\t\t},\n\n\t\t_initialActive: function _initialActive() {\n\t\t\tvar active = this.options.active,\n\t\t\t    collapsible = this.options.collapsible,\n\t\t\t    locationHash = location.hash.substring(1);\n\n\t\t\tif (active === null) {\n\t\t\t\t// check the fragment identifier in the URL\n\t\t\t\tif (locationHash) {\n\t\t\t\t\tthis.tabs.each(function (i, tab) {\n\t\t\t\t\t\tif ($(tab).attr(\"aria-controls\") === locationHash) {\n\t\t\t\t\t\t\tactive = i;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// check for a tab marked active via a class\n\t\t\t\tif (active === null) {\n\t\t\t\t\tactive = this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));\n\t\t\t\t}\n\n\t\t\t\t// no active tab, set to false\n\t\t\t\tif (active === null || active === -1) {\n\t\t\t\t\tactive = this.tabs.length ? 0 : false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// handle numbers: negative, out of range\n\t\t\tif (active !== false) {\n\t\t\t\tactive = this.tabs.index(this.tabs.eq(active));\n\t\t\t\tif (active === -1) {\n\t\t\t\t\tactive = collapsible ? false : 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// don't allow collapsible: false and active: false\n\t\t\tif (!collapsible && active === false && this.anchors.length) {\n\t\t\t\tactive = 0;\n\t\t\t}\n\n\t\t\treturn active;\n\t\t},\n\n\t\t_getCreateEventData: function _getCreateEventData() {\n\t\t\treturn {\n\t\t\t\ttab: this.active,\n\t\t\t\tpanel: !this.active.length ? $() : this._getPanelForTab(this.active)\n\t\t\t};\n\t\t},\n\n\t\t_tabKeydown: function _tabKeydown(event) {\n\t\t\tvar focusedTab = $(this.document[0].activeElement).closest(\"li\"),\n\t\t\t    selectedIndex = this.tabs.index(focusedTab),\n\t\t\t    goingForward = true;\n\n\t\t\tif (this._handlePageNav(event)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (event.keyCode) {\n\t\t\t\tcase $.ui.keyCode.RIGHT:\n\t\t\t\tcase $.ui.keyCode.DOWN:\n\t\t\t\t\tselectedIndex++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.UP:\n\t\t\t\tcase $.ui.keyCode.LEFT:\n\t\t\t\t\tgoingForward = false;\n\t\t\t\t\tselectedIndex--;\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.END:\n\t\t\t\t\tselectedIndex = this.anchors.length - 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.HOME:\n\t\t\t\t\tselectedIndex = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase $.ui.keyCode.SPACE:\n\t\t\t\t\t// Activate only, no collapsing\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tclearTimeout(this.activating);\n\t\t\t\t\tthis._activate(selectedIndex);\n\t\t\t\t\treturn;\n\t\t\t\tcase $.ui.keyCode.ENTER:\n\t\t\t\t\t// Toggle (cancel delayed activation, allow collapsing)\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tclearTimeout(this.activating);\n\t\t\t\t\t// Determine if we should collapse or activate\n\t\t\t\t\tthis._activate(selectedIndex === this.options.active ? false : selectedIndex);\n\t\t\t\t\treturn;\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Focus the appropriate tab, based on which key was pressed\n\t\t\tevent.preventDefault();\n\t\t\tclearTimeout(this.activating);\n\t\t\tselectedIndex = this._focusNextTab(selectedIndex, goingForward);\n\n\t\t\t// Navigating with control/command key will prevent automatic activation\n\t\t\tif (!event.ctrlKey && !event.metaKey) {\n\n\t\t\t\t// Update aria-selected immediately so that AT think the tab is already selected.\n\t\t\t\t// Otherwise AT may confuse the user by stating that they need to activate the tab,\n\t\t\t\t// but the tab will already be activated by the time the announcement finishes.\n\t\t\t\tfocusedTab.attr(\"aria-selected\", \"false\");\n\t\t\t\tthis.tabs.eq(selectedIndex).attr(\"aria-selected\", \"true\");\n\n\t\t\t\tthis.activating = this._delay(function () {\n\t\t\t\t\tthis.option(\"active\", selectedIndex);\n\t\t\t\t}, this.delay);\n\t\t\t}\n\t\t},\n\n\t\t_panelKeydown: function _panelKeydown(event) {\n\t\t\tif (this._handlePageNav(event)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ctrl+up moves focus to the current tab\n\t\t\tif (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tthis.active.focus();\n\t\t\t}\n\t\t},\n\n\t\t// Alt+page up/down moves focus to the previous/next tab (and activates)\n\t\t_handlePageNav: function _handlePageNav(event) {\n\t\t\tif (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {\n\t\t\t\tthis._activate(this._focusNextTab(this.options.active - 1, false));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {\n\t\t\t\tthis._activate(this._focusNextTab(this.options.active + 1, true));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\t\t_findNextTab: function _findNextTab(index, goingForward) {\n\t\t\tvar lastTabIndex = this.tabs.length - 1;\n\n\t\t\tfunction constrain() {\n\t\t\t\tif (index > lastTabIndex) {\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t\tif (index < 0) {\n\t\t\t\t\tindex = lastTabIndex;\n\t\t\t\t}\n\t\t\t\treturn index;\n\t\t\t}\n\n\t\t\twhile ($.inArray(constrain(), this.options.disabled) !== -1) {\n\t\t\t\tindex = goingForward ? index + 1 : index - 1;\n\t\t\t}\n\n\t\t\treturn index;\n\t\t},\n\n\t\t_focusNextTab: function _focusNextTab(index, goingForward) {\n\t\t\tindex = this._findNextTab(index, goingForward);\n\t\t\tthis.tabs.eq(index).focus();\n\t\t\treturn index;\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tif (key === \"active\") {\n\t\t\t\t// _activate() will handle invalid values and update this.options\n\t\t\t\tthis._activate(value);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (key === \"disabled\") {\n\t\t\t\t// don't use the widget factory's disabled handling\n\t\t\t\tthis._setupDisabled(value);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\n\t\t\tif (key === \"collapsible\") {\n\t\t\t\tthis.element.toggleClass(\"ui-tabs-collapsible\", value);\n\t\t\t\t// Setting collapsible: false while collapsed; open first panel\n\t\t\t\tif (!value && this.options.active === false) {\n\t\t\t\t\tthis._activate(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (key === \"event\") {\n\t\t\t\tthis._setupEvents(value);\n\t\t\t}\n\n\t\t\tif (key === \"heightStyle\") {\n\t\t\t\tthis._setupHeightStyle(value);\n\t\t\t}\n\t\t},\n\n\t\t_sanitizeSelector: function _sanitizeSelector(hash) {\n\t\t\treturn hash ? hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\") : \"\";\n\t\t},\n\n\t\trefresh: function refresh() {\n\t\t\tvar options = this.options,\n\t\t\t    lis = this.tablist.children(\":has(a[href])\");\n\n\t\t\t// get disabled tabs from class attribute from HTML\n\t\t\t// this will get converted to a boolean if needed in _refresh()\n\t\t\toptions.disabled = $.map(lis.filter(\".ui-state-disabled\"), function (tab) {\n\t\t\t\treturn lis.index(tab);\n\t\t\t});\n\n\t\t\tthis._processTabs();\n\n\t\t\t// was collapsed or no tabs\n\t\t\tif (options.active === false || !this.anchors.length) {\n\t\t\t\toptions.active = false;\n\t\t\t\tthis.active = $();\n\t\t\t\t// was active, but active tab is gone\n\t\t\t} else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {\n\t\t\t\t// all remaining tabs are disabled\n\t\t\t\tif (this.tabs.length === options.disabled.length) {\n\t\t\t\t\toptions.active = false;\n\t\t\t\t\tthis.active = $();\n\t\t\t\t\t// activate previous tab\n\t\t\t\t} else {\n\t\t\t\t\tthis._activate(this._findNextTab(Math.max(0, options.active - 1), false));\n\t\t\t\t}\n\t\t\t\t// was active, active tab still exists\n\t\t\t} else {\n\t\t\t\t// make sure active index is correct\n\t\t\t\toptions.active = this.tabs.index(this.active);\n\t\t\t}\n\n\t\t\tthis._refresh();\n\t\t},\n\n\t\t_refresh: function _refresh() {\n\t\t\tthis._setupDisabled(this.options.disabled);\n\t\t\tthis._setupEvents(this.options.event);\n\t\t\tthis._setupHeightStyle(this.options.heightStyle);\n\n\t\t\tthis.tabs.not(this.active).attr({\n\t\t\t\t\"aria-selected\": \"false\",\n\t\t\t\t\"aria-expanded\": \"false\",\n\t\t\t\ttabIndex: -1\n\t\t\t});\n\t\t\tthis.panels.not(this._getPanelForTab(this.active)).hide().attr({\n\t\t\t\t\"aria-hidden\": \"true\"\n\t\t\t});\n\n\t\t\t// Make sure one tab is in the tab order\n\t\t\tif (!this.active.length) {\n\t\t\t\tthis.tabs.eq(0).attr(\"tabIndex\", 0);\n\t\t\t} else {\n\t\t\t\tthis.active.addClass(\"ui-tabs-active ui-state-active\").attr({\n\t\t\t\t\t\"aria-selected\": \"true\",\n\t\t\t\t\t\"aria-expanded\": \"true\",\n\t\t\t\t\ttabIndex: 0\n\t\t\t\t});\n\t\t\t\tthis._getPanelForTab(this.active).show().attr({\n\t\t\t\t\t\"aria-hidden\": \"false\"\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t_processTabs: function _processTabs() {\n\t\t\tvar that = this,\n\t\t\t    prevTabs = this.tabs,\n\t\t\t    prevAnchors = this.anchors,\n\t\t\t    prevPanels = this.panels;\n\n\t\t\tthis.tablist = this._getList().addClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\").attr(\"role\", \"tablist\")\n\n\t\t\t// Prevent users from focusing disabled tabs via click\n\t\t\t.delegate(\"> li\", \"mousedown\" + this.eventNamespace, function (event) {\n\t\t\t\tif ($(this).is(\".ui-state-disabled\")) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// support: IE <9\n\t\t\t// Preventing the default action in mousedown doesn't prevent IE\n\t\t\t// from focusing the element, so if the anchor gets focused, blur.\n\t\t\t// We don't have to worry about focusing the previously focused\n\t\t\t// element since clicking on a non-focusable element should focus\n\t\t\t// the body anyway.\n\t\t\t.delegate(\".ui-tabs-anchor\", \"focus\" + this.eventNamespace, function () {\n\t\t\t\tif ($(this).closest(\"li\").is(\".ui-state-disabled\")) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.tabs = this.tablist.find(\"> li:has(a[href])\").addClass(\"ui-state-default ui-corner-top\").attr({\n\t\t\t\trole: \"tab\",\n\t\t\t\ttabIndex: -1\n\t\t\t});\n\n\t\t\tthis.anchors = this.tabs.map(function () {\n\t\t\t\treturn $(\"a\", this)[0];\n\t\t\t}).addClass(\"ui-tabs-anchor\").attr({\n\t\t\t\trole: \"presentation\",\n\t\t\t\ttabIndex: -1\n\t\t\t});\n\n\t\t\tthis.panels = $();\n\n\t\t\tthis.anchors.each(function (i, anchor) {\n\t\t\t\tvar selector,\n\t\t\t\t    panel,\n\t\t\t\t    panelId,\n\t\t\t\t    anchorId = $(anchor).uniqueId().attr(\"id\"),\n\t\t\t\t    tab = $(anchor).closest(\"li\"),\n\t\t\t\t    originalAriaControls = tab.attr(\"aria-controls\");\n\n\t\t\t\t// inline tab\n\t\t\t\tif (that._isLocal(anchor)) {\n\t\t\t\t\tselector = anchor.hash;\n\t\t\t\t\tpanelId = selector.substring(1);\n\t\t\t\t\tpanel = that.element.find(that._sanitizeSelector(selector));\n\t\t\t\t\t// remote tab\n\t\t\t\t} else {\n\t\t\t\t\t// If the tab doesn't already have aria-controls,\n\t\t\t\t\t// generate an id by using a throw-away element\n\t\t\t\t\tpanelId = tab.attr(\"aria-controls\") || $({}).uniqueId()[0].id;\n\t\t\t\t\tselector = \"#\" + panelId;\n\t\t\t\t\tpanel = that.element.find(selector);\n\t\t\t\t\tif (!panel.length) {\n\t\t\t\t\t\tpanel = that._createPanel(panelId);\n\t\t\t\t\t\tpanel.insertAfter(that.panels[i - 1] || that.tablist);\n\t\t\t\t\t}\n\t\t\t\t\tpanel.attr(\"aria-live\", \"polite\");\n\t\t\t\t}\n\n\t\t\t\tif (panel.length) {\n\t\t\t\t\tthat.panels = that.panels.add(panel);\n\t\t\t\t}\n\t\t\t\tif (originalAriaControls) {\n\t\t\t\t\ttab.data(\"ui-tabs-aria-controls\", originalAriaControls);\n\t\t\t\t}\n\t\t\t\ttab.attr({\n\t\t\t\t\t\"aria-controls\": panelId,\n\t\t\t\t\t\"aria-labelledby\": anchorId\n\t\t\t\t});\n\t\t\t\tpanel.attr(\"aria-labelledby\", anchorId);\n\t\t\t});\n\n\t\t\tthis.panels.addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\").attr(\"role\", \"tabpanel\");\n\n\t\t\t// Avoid memory leaks (#10056)\n\t\t\tif (prevTabs) {\n\t\t\t\tthis._off(prevTabs.not(this.tabs));\n\t\t\t\tthis._off(prevAnchors.not(this.anchors));\n\t\t\t\tthis._off(prevPanels.not(this.panels));\n\t\t\t}\n\t\t},\n\n\t\t// allow overriding how to find the list for rare usage scenarios (#7715)\n\t\t_getList: function _getList() {\n\t\t\treturn this.tablist || this.element.find(\"ol,ul\").eq(0);\n\t\t},\n\n\t\t_createPanel: function _createPanel(id) {\n\t\t\treturn $(\"<div>\").attr(\"id\", id).addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\").data(\"ui-tabs-destroy\", true);\n\t\t},\n\n\t\t_setupDisabled: function _setupDisabled(disabled) {\n\t\t\tif ($.isArray(disabled)) {\n\t\t\t\tif (!disabled.length) {\n\t\t\t\t\tdisabled = false;\n\t\t\t\t} else if (disabled.length === this.anchors.length) {\n\t\t\t\t\tdisabled = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// disable tabs\n\t\t\tfor (var i = 0, li; li = this.tabs[i]; i++) {\n\t\t\t\tif (disabled === true || $.inArray(i, disabled) !== -1) {\n\t\t\t\t\t$(li).addClass(\"ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n\t\t\t\t} else {\n\t\t\t\t\t$(li).removeClass(\"ui-state-disabled\").removeAttr(\"aria-disabled\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.options.disabled = disabled;\n\t\t},\n\n\t\t_setupEvents: function _setupEvents(event) {\n\t\t\tvar events = {};\n\t\t\tif (event) {\n\t\t\t\t$.each(event.split(\" \"), function (index, eventName) {\n\t\t\t\t\tevents[eventName] = \"_eventHandler\";\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._off(this.anchors.add(this.tabs).add(this.panels));\n\t\t\t// Always prevent the default action, even when disabled\n\t\t\tthis._on(true, this.anchors, {\n\t\t\t\tclick: function click(event) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._on(this.anchors, events);\n\t\t\tthis._on(this.tabs, { keydown: \"_tabKeydown\" });\n\t\t\tthis._on(this.panels, { keydown: \"_panelKeydown\" });\n\n\t\t\tthis._focusable(this.tabs);\n\t\t\tthis._hoverable(this.tabs);\n\t\t},\n\n\t\t_setupHeightStyle: function _setupHeightStyle(heightStyle) {\n\t\t\tvar maxHeight,\n\t\t\t    parent = this.element.parent();\n\n\t\t\tif (heightStyle === \"fill\") {\n\t\t\t\tmaxHeight = parent.height();\n\t\t\t\tmaxHeight -= this.element.outerHeight() - this.element.height();\n\n\t\t\t\tthis.element.siblings(\":visible\").each(function () {\n\t\t\t\t\tvar elem = $(this),\n\t\t\t\t\t    position = elem.css(\"position\");\n\n\t\t\t\t\tif (position === \"absolute\" || position === \"fixed\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmaxHeight -= elem.outerHeight(true);\n\t\t\t\t});\n\n\t\t\t\tthis.element.children().not(this.panels).each(function () {\n\t\t\t\t\tmaxHeight -= $(this).outerHeight(true);\n\t\t\t\t});\n\n\t\t\t\tthis.panels.each(function () {\n\t\t\t\t\t$(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n\t\t\t\t}).css(\"overflow\", \"auto\");\n\t\t\t} else if (heightStyle === \"auto\") {\n\t\t\t\tmaxHeight = 0;\n\t\t\t\tthis.panels.each(function () {\n\t\t\t\t\tmaxHeight = Math.max(maxHeight, $(this).height(\"\").height());\n\t\t\t\t}).height(maxHeight);\n\t\t\t}\n\t\t},\n\n\t\t_eventHandler: function _eventHandler(event) {\n\t\t\tvar options = this.options,\n\t\t\t    active = this.active,\n\t\t\t    anchor = $(event.currentTarget),\n\t\t\t    tab = anchor.closest(\"li\"),\n\t\t\t    clickedIsActive = tab[0] === active[0],\n\t\t\t    collapsing = clickedIsActive && options.collapsible,\n\t\t\t    toShow = collapsing ? $() : this._getPanelForTab(tab),\n\t\t\t    toHide = !active.length ? $() : this._getPanelForTab(active),\n\t\t\t    eventData = {\n\t\t\t\toldTab: active,\n\t\t\t\toldPanel: toHide,\n\t\t\t\tnewTab: collapsing ? $() : tab,\n\t\t\t\tnewPanel: toShow\n\t\t\t};\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif (tab.hasClass(\"ui-state-disabled\") ||\n\t\t\t// tab is already loading\n\t\t\ttab.hasClass(\"ui-tabs-loading\") ||\n\t\t\t// can't switch durning an animation\n\t\t\tthis.running ||\n\t\t\t// click on active header, but not collapsible\n\t\t\tclickedIsActive && !options.collapsible ||\n\t\t\t// allow canceling activation\n\t\t\tthis._trigger(\"beforeActivate\", event, eventData) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toptions.active = collapsing ? false : this.tabs.index(tab);\n\n\t\t\tthis.active = clickedIsActive ? $() : tab;\n\t\t\tif (this.xhr) {\n\t\t\t\tthis.xhr.abort();\n\t\t\t}\n\n\t\t\tif (!toHide.length && !toShow.length) {\n\t\t\t\t$.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");\n\t\t\t}\n\n\t\t\tif (toShow.length) {\n\t\t\t\tthis.load(this.tabs.index(tab), event);\n\t\t\t}\n\t\t\tthis._toggle(event, eventData);\n\t\t},\n\n\t\t// handles show/hide for selecting tabs\n\t\t_toggle: function _toggle(event, eventData) {\n\t\t\tvar that = this,\n\t\t\t    toShow = eventData.newPanel,\n\t\t\t    toHide = eventData.oldPanel;\n\n\t\t\tthis.running = true;\n\n\t\t\tfunction complete() {\n\t\t\t\tthat.running = false;\n\t\t\t\tthat._trigger(\"activate\", event, eventData);\n\t\t\t}\n\n\t\t\tfunction show() {\n\t\t\t\teventData.newTab.closest(\"li\").addClass(\"ui-tabs-active ui-state-active\");\n\n\t\t\t\tif (toShow.length && that.options.show) {\n\t\t\t\t\tthat._show(toShow, that.options.show, complete);\n\t\t\t\t} else {\n\t\t\t\t\ttoShow.show();\n\t\t\t\t\tcomplete();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// start out by hiding, then showing, then completing\n\t\t\tif (toHide.length && this.options.hide) {\n\t\t\t\tthis._hide(toHide, this.options.hide, function () {\n\t\t\t\t\teventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n\t\t\t\t\tshow();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\teventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n\t\t\t\ttoHide.hide();\n\t\t\t\tshow();\n\t\t\t}\n\n\t\t\ttoHide.attr(\"aria-hidden\", \"true\");\n\t\t\teventData.oldTab.attr({\n\t\t\t\t\"aria-selected\": \"false\",\n\t\t\t\t\"aria-expanded\": \"false\"\n\t\t\t});\n\t\t\t// If we're switching tabs, remove the old tab from the tab order.\n\t\t\t// If we're opening from collapsed state, remove the previous tab from the tab order.\n\t\t\t// If we're collapsing, then keep the collapsing tab in the tab order.\n\t\t\tif (toShow.length && toHide.length) {\n\t\t\t\teventData.oldTab.attr(\"tabIndex\", -1);\n\t\t\t} else if (toShow.length) {\n\t\t\t\tthis.tabs.filter(function () {\n\t\t\t\t\treturn $(this).attr(\"tabIndex\") === 0;\n\t\t\t\t}).attr(\"tabIndex\", -1);\n\t\t\t}\n\n\t\t\ttoShow.attr(\"aria-hidden\", \"false\");\n\t\t\teventData.newTab.attr({\n\t\t\t\t\"aria-selected\": \"true\",\n\t\t\t\t\"aria-expanded\": \"true\",\n\t\t\t\ttabIndex: 0\n\t\t\t});\n\t\t},\n\n\t\t_activate: function _activate(index) {\n\t\t\tvar anchor,\n\t\t\t    active = this._findActive(index);\n\n\t\t\t// trying to activate the already active panel\n\t\t\tif (active[0] === this.active[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// trying to collapse, simulate a click on the current active header\n\t\t\tif (!active.length) {\n\t\t\t\tactive = this.active;\n\t\t\t}\n\n\t\t\tanchor = active.find(\".ui-tabs-anchor\")[0];\n\t\t\tthis._eventHandler({\n\t\t\t\ttarget: anchor,\n\t\t\t\tcurrentTarget: anchor,\n\t\t\t\tpreventDefault: $.noop\n\t\t\t});\n\t\t},\n\n\t\t_findActive: function _findActive(index) {\n\t\t\treturn index === false ? $() : this.tabs.eq(index);\n\t\t},\n\n\t\t_getIndex: function _getIndex(index) {\n\t\t\t// meta-function to give users option to provide a href string instead of a numerical index.\n\t\t\tif (typeof index === \"string\") {\n\t\t\t\tindex = this.anchors.index(this.anchors.filter(\"[href$='\" + index + \"']\"));\n\t\t\t}\n\n\t\t\treturn index;\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tif (this.xhr) {\n\t\t\t\tthis.xhr.abort();\n\t\t\t}\n\n\t\t\tthis.element.removeClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible\");\n\n\t\t\tthis.tablist.removeClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\").removeAttr(\"role\");\n\n\t\t\tthis.anchors.removeClass(\"ui-tabs-anchor\").removeAttr(\"role\").removeAttr(\"tabIndex\").removeUniqueId();\n\n\t\t\tthis.tablist.unbind(this.eventNamespace);\n\n\t\t\tthis.tabs.add(this.panels).each(function () {\n\t\t\t\tif ($.data(this, \"ui-tabs-destroy\")) {\n\t\t\t\t\t$(this).remove();\n\t\t\t\t} else {\n\t\t\t\t\t$(this).removeClass(\"ui-state-default ui-state-active ui-state-disabled \" + \"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel\").removeAttr(\"tabIndex\").removeAttr(\"aria-live\").removeAttr(\"aria-busy\").removeAttr(\"aria-selected\").removeAttr(\"aria-labelledby\").removeAttr(\"aria-hidden\").removeAttr(\"aria-expanded\").removeAttr(\"role\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.tabs.each(function () {\n\t\t\t\tvar li = $(this),\n\t\t\t\t    prev = li.data(\"ui-tabs-aria-controls\");\n\t\t\t\tif (prev) {\n\t\t\t\t\tli.attr(\"aria-controls\", prev).removeData(\"ui-tabs-aria-controls\");\n\t\t\t\t} else {\n\t\t\t\t\tli.removeAttr(\"aria-controls\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.panels.show();\n\n\t\t\tif (this.options.heightStyle !== \"content\") {\n\t\t\t\tthis.panels.css(\"height\", \"\");\n\t\t\t}\n\t\t},\n\n\t\tenable: function enable(index) {\n\t\t\tvar disabled = this.options.disabled;\n\t\t\tif (disabled === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (index === undefined) {\n\t\t\t\tdisabled = false;\n\t\t\t} else {\n\t\t\t\tindex = this._getIndex(index);\n\t\t\t\tif ($.isArray(disabled)) {\n\t\t\t\t\tdisabled = $.map(disabled, function (num) {\n\t\t\t\t\t\treturn num !== index ? num : null;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdisabled = $.map(this.tabs, function (li, num) {\n\t\t\t\t\t\treturn num !== index ? num : null;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._setupDisabled(disabled);\n\t\t},\n\n\t\tdisable: function disable(index) {\n\t\t\tvar disabled = this.options.disabled;\n\t\t\tif (disabled === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (index === undefined) {\n\t\t\t\tdisabled = true;\n\t\t\t} else {\n\t\t\t\tindex = this._getIndex(index);\n\t\t\t\tif ($.inArray(index, disabled) !== -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ($.isArray(disabled)) {\n\t\t\t\t\tdisabled = $.merge([index], disabled).sort();\n\t\t\t\t} else {\n\t\t\t\t\tdisabled = [index];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._setupDisabled(disabled);\n\t\t},\n\n\t\tload: function load(index, event) {\n\t\t\tindex = this._getIndex(index);\n\t\t\tvar that = this,\n\t\t\t    tab = this.tabs.eq(index),\n\t\t\t    anchor = tab.find(\".ui-tabs-anchor\"),\n\t\t\t    panel = this._getPanelForTab(tab),\n\t\t\t    eventData = {\n\t\t\t\ttab: tab,\n\t\t\t\tpanel: panel\n\t\t\t},\n\t\t\t    complete = function complete(jqXHR, status) {\n\t\t\t\tif (status === \"abort\") {\n\t\t\t\t\tthat.panels.stop(false, true);\n\t\t\t\t}\n\n\t\t\t\ttab.removeClass(\"ui-tabs-loading\");\n\t\t\t\tpanel.removeAttr(\"aria-busy\");\n\n\t\t\t\tif (jqXHR === that.xhr) {\n\t\t\t\t\tdelete that.xhr;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// not remote\n\t\t\tif (this._isLocal(anchor[0])) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));\n\n\t\t\t// support: jQuery <1.8\n\t\t\t// jQuery <1.8 returns false if the request is canceled in beforeSend,\n\t\t\t// but as of 1.8, $.ajax() always returns a jqXHR object.\n\t\t\tif (this.xhr && this.xhr.statusText !== \"canceled\") {\n\t\t\t\ttab.addClass(\"ui-tabs-loading\");\n\t\t\t\tpanel.attr(\"aria-busy\", \"true\");\n\n\t\t\t\tthis.xhr.done(function (response, status, jqXHR) {\n\t\t\t\t\t// support: jQuery <1.8\n\t\t\t\t\t// http://bugs.jquery.com/ticket/11778\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tpanel.html(response);\n\t\t\t\t\t\tthat._trigger(\"load\", event, eventData);\n\n\t\t\t\t\t\tcomplete(jqXHR, status);\n\t\t\t\t\t}, 1);\n\t\t\t\t}).fail(function (jqXHR, status) {\n\t\t\t\t\t// support: jQuery <1.8\n\t\t\t\t\t// http://bugs.jquery.com/ticket/11778\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tcomplete(jqXHR, status);\n\t\t\t\t\t}, 1);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t_ajaxSettings: function _ajaxSettings(anchor, event, eventData) {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\turl: anchor.attr(\"href\"),\n\t\t\t\tbeforeSend: function beforeSend(jqXHR, settings) {\n\t\t\t\t\treturn that._trigger(\"beforeLoad\", event, $.extend({ jqXHR: jqXHR, ajaxSettings: settings }, eventData));\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t_getPanelForTab: function _getPanelForTab(tab) {\n\t\t\tvar id = $(tab).attr(\"aria-controls\");\n\t\t\treturn this.element.find(this._sanitizeSelector(\"#\" + id));\n\t\t}\n\t});\n\n\t/*!\n  * jQuery UI Tooltip 1.11.4\n  * http://jqueryui.com\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license.\n  * http://jquery.org/license\n  *\n  * http://api.jqueryui.com/tooltip/\n  */\n\n\tvar tooltip = $.widget(\"ui.tooltip\", {\n\t\tversion: \"1.11.4\",\n\t\toptions: {\n\t\t\tcontent: function content() {\n\t\t\t\t// support: IE<9, Opera in jQuery <1.7\n\t\t\t\t// .text() can't accept undefined, so coerce to a string\n\t\t\t\tvar title = $(this).attr(\"title\") || \"\";\n\t\t\t\t// Escape title, since we're going from an attribute to raw HTML\n\t\t\t\treturn $(\"<a>\").text(title).html();\n\t\t\t},\n\t\t\thide: true,\n\t\t\t// Disabled elements have inconsistent behavior across browsers (#8661)\n\t\t\titems: \"[title]:not([disabled])\",\n\t\t\tposition: {\n\t\t\t\tmy: \"left top+15\",\n\t\t\t\tat: \"left bottom\",\n\t\t\t\tcollision: \"flipfit flip\"\n\t\t\t},\n\t\t\tshow: true,\n\t\t\ttooltipClass: null,\n\t\t\ttrack: false,\n\n\t\t\t// callbacks\n\t\t\tclose: null,\n\t\t\topen: null\n\t\t},\n\n\t\t_addDescribedBy: function _addDescribedBy(elem, id) {\n\t\t\tvar describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/);\n\t\t\tdescribedby.push(id);\n\t\t\telem.data(\"ui-tooltip-id\", id).attr(\"aria-describedby\", $.trim(describedby.join(\" \")));\n\t\t},\n\n\t\t_removeDescribedBy: function _removeDescribedBy(elem) {\n\t\t\tvar id = elem.data(\"ui-tooltip-id\"),\n\t\t\t    describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/),\n\t\t\t    index = $.inArray(id, describedby);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tdescribedby.splice(index, 1);\n\t\t\t}\n\n\t\t\telem.removeData(\"ui-tooltip-id\");\n\t\t\tdescribedby = $.trim(describedby.join(\" \"));\n\t\t\tif (describedby) {\n\t\t\t\telem.attr(\"aria-describedby\", describedby);\n\t\t\t} else {\n\t\t\t\telem.removeAttr(\"aria-describedby\");\n\t\t\t}\n\t\t},\n\n\t\t_create: function _create() {\n\t\t\tthis._on({\n\t\t\t\tmouseover: \"open\",\n\t\t\t\tfocusin: \"open\"\n\t\t\t});\n\n\t\t\t// IDs of generated tooltips, needed for destroy\n\t\t\tthis.tooltips = {};\n\n\t\t\t// IDs of parent tooltips where we removed the title attribute\n\t\t\tthis.parents = {};\n\n\t\t\tif (this.options.disabled) {\n\t\t\t\tthis._disable();\n\t\t\t}\n\n\t\t\t// Append the aria-live region so tooltips announce correctly\n\t\t\tthis.liveRegion = $(\"<div>\").attr({\n\t\t\t\trole: \"log\",\n\t\t\t\t\"aria-live\": \"assertive\",\n\t\t\t\t\"aria-relevant\": \"additions\"\n\t\t\t}).addClass(\"ui-helper-hidden-accessible\").appendTo(this.document[0].body);\n\t\t},\n\n\t\t_setOption: function _setOption(key, value) {\n\t\t\tvar that = this;\n\n\t\t\tif (key === \"disabled\") {\n\t\t\t\tthis[value ? \"_disable\" : \"_enable\"]();\n\t\t\t\tthis.options[key] = value;\n\t\t\t\t// disable element style changes\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._super(key, value);\n\n\t\t\tif (key === \"content\") {\n\t\t\t\t$.each(this.tooltips, function (id, tooltipData) {\n\t\t\t\t\tthat._updateContent(tooltipData.element);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t_disable: function _disable() {\n\t\t\tvar that = this;\n\n\t\t\t// close open tooltips\n\t\t\t$.each(this.tooltips, function (id, tooltipData) {\n\t\t\t\tvar event = $.Event(\"blur\");\n\t\t\t\tevent.target = event.currentTarget = tooltipData.element[0];\n\t\t\t\tthat.close(event, true);\n\t\t\t});\n\n\t\t\t// remove title attributes to prevent native tooltips\n\t\t\tthis.element.find(this.options.items).addBack().each(function () {\n\t\t\t\tvar element = $(this);\n\t\t\t\tif (element.is(\"[title]\")) {\n\t\t\t\t\telement.data(\"ui-tooltip-title\", element.attr(\"title\")).removeAttr(\"title\");\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_enable: function _enable() {\n\t\t\t// restore title attributes\n\t\t\tthis.element.find(this.options.items).addBack().each(function () {\n\t\t\t\tvar element = $(this);\n\t\t\t\tif (element.data(\"ui-tooltip-title\")) {\n\t\t\t\t\telement.attr(\"title\", element.data(\"ui-tooltip-title\"));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\topen: function open(event) {\n\t\t\tvar that = this,\n\t\t\t    target = $(event ? event.target : this.element)\n\t\t\t// we need closest here due to mouseover bubbling,\n\t\t\t// but always pointing at the same event target\n\t\t\t.closest(this.options.items);\n\n\t\t\t// No element to show a tooltip for or the tooltip is already open\n\t\t\tif (!target.length || target.data(\"ui-tooltip-id\")) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (target.attr(\"title\")) {\n\t\t\t\ttarget.data(\"ui-tooltip-title\", target.attr(\"title\"));\n\t\t\t}\n\n\t\t\ttarget.data(\"ui-tooltip-open\", true);\n\n\t\t\t// kill parent tooltips, custom or native, for hover\n\t\t\tif (event && event.type === \"mouseover\") {\n\t\t\t\ttarget.parents().each(function () {\n\t\t\t\t\tvar parent = $(this),\n\t\t\t\t\t    blurEvent;\n\t\t\t\t\tif (parent.data(\"ui-tooltip-open\")) {\n\t\t\t\t\t\tblurEvent = $.Event(\"blur\");\n\t\t\t\t\t\tblurEvent.target = blurEvent.currentTarget = this;\n\t\t\t\t\t\tthat.close(blurEvent, true);\n\t\t\t\t\t}\n\t\t\t\t\tif (parent.attr(\"title\")) {\n\t\t\t\t\t\tparent.uniqueId();\n\t\t\t\t\t\tthat.parents[this.id] = {\n\t\t\t\t\t\t\telement: this,\n\t\t\t\t\t\t\ttitle: parent.attr(\"title\")\n\t\t\t\t\t\t};\n\t\t\t\t\t\tparent.attr(\"title\", \"\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._registerCloseHandlers(event, target);\n\t\t\tthis._updateContent(target, event);\n\t\t},\n\n\t\t_updateContent: function _updateContent(target, event) {\n\t\t\tvar content,\n\t\t\t    contentOption = this.options.content,\n\t\t\t    that = this,\n\t\t\t    eventType = event ? event.type : null;\n\n\t\t\tif (typeof contentOption === \"string\") {\n\t\t\t\treturn this._open(event, target, contentOption);\n\t\t\t}\n\n\t\t\tcontent = contentOption.call(target[0], function (response) {\n\n\t\t\t\t// IE may instantly serve a cached response for ajax requests\n\t\t\t\t// delay this call to _open so the other call to _open runs first\n\t\t\t\tthat._delay(function () {\n\n\t\t\t\t\t// Ignore async response if tooltip was closed already\n\t\t\t\t\tif (!target.data(\"ui-tooltip-open\")) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// jQuery creates a special event for focusin when it doesn't\n\t\t\t\t\t// exist natively. To improve performance, the native event\n\t\t\t\t\t// object is reused and the type is changed. Therefore, we can't\n\t\t\t\t\t// rely on the type being correct after the event finished\n\t\t\t\t\t// bubbling, so we set it back to the previous value. (#8740)\n\t\t\t\t\tif (event) {\n\t\t\t\t\t\tevent.type = eventType;\n\t\t\t\t\t}\n\t\t\t\t\tthis._open(event, target, response);\n\t\t\t\t});\n\t\t\t});\n\t\t\tif (content) {\n\t\t\t\tthis._open(event, target, content);\n\t\t\t}\n\t\t},\n\n\t\t_open: function _open(event, target, content) {\n\t\t\tvar tooltipData,\n\t\t\t    tooltip,\n\t\t\t    delayedShow,\n\t\t\t    a11yContent,\n\t\t\t    positionOption = $.extend({}, this.options.position);\n\n\t\t\tif (!content) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Content can be updated multiple times. If the tooltip already\n\t\t\t// exists, then just update the content and bail.\n\t\t\ttooltipData = this._find(target);\n\t\t\tif (tooltipData) {\n\t\t\t\ttooltipData.tooltip.find(\".ui-tooltip-content\").html(content);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// if we have a title, clear it to prevent the native tooltip\n\t\t\t// we have to check first to avoid defining a title if none exists\n\t\t\t// (we don't want to cause an element to start matching [title])\n\t\t\t//\n\t\t\t// We use removeAttr only for key events, to allow IE to export the correct\n\t\t\t// accessible attributes. For mouse events, set to empty string to avoid\n\t\t\t// native tooltip showing up (happens only when removing inside mouseover).\n\t\t\tif (target.is(\"[title]\")) {\n\t\t\t\tif (event && event.type === \"mouseover\") {\n\t\t\t\t\ttarget.attr(\"title\", \"\");\n\t\t\t\t} else {\n\t\t\t\t\ttarget.removeAttr(\"title\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttooltipData = this._tooltip(target);\n\t\t\ttooltip = tooltipData.tooltip;\n\t\t\tthis._addDescribedBy(target, tooltip.attr(\"id\"));\n\t\t\ttooltip.find(\".ui-tooltip-content\").html(content);\n\n\t\t\t// Support: Voiceover on OS X, JAWS on IE <= 9\n\t\t\t// JAWS announces deletions even when aria-relevant=\"additions\"\n\t\t\t// Voiceover will sometimes re-read the entire log region's contents from the beginning\n\t\t\tthis.liveRegion.children().hide();\n\t\t\tif (content.clone) {\n\t\t\t\ta11yContent = content.clone();\n\t\t\t\ta11yContent.removeAttr(\"id\").find(\"[id]\").removeAttr(\"id\");\n\t\t\t} else {\n\t\t\t\ta11yContent = content;\n\t\t\t}\n\t\t\t$(\"<div>\").html(a11yContent).appendTo(this.liveRegion);\n\n\t\t\tfunction position(event) {\n\t\t\t\tpositionOption.of = event;\n\t\t\t\tif (tooltip.is(\":hidden\")) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttooltip.position(positionOption);\n\t\t\t}\n\t\t\tif (this.options.track && event && /^mouse/.test(event.type)) {\n\t\t\t\tthis._on(this.document, {\n\t\t\t\t\tmousemove: position\n\t\t\t\t});\n\t\t\t\t// trigger once to override element-relative positioning\n\t\t\t\tposition(event);\n\t\t\t} else {\n\t\t\t\ttooltip.position($.extend({\n\t\t\t\t\tof: target\n\t\t\t\t}, this.options.position));\n\t\t\t}\n\n\t\t\ttooltip.hide();\n\n\t\t\tthis._show(tooltip, this.options.show);\n\t\t\t// Handle tracking tooltips that are shown with a delay (#8644). As soon\n\t\t\t// as the tooltip is visible, position the tooltip using the most recent\n\t\t\t// event.\n\t\t\tif (this.options.show && this.options.show.delay) {\n\t\t\t\tdelayedShow = this.delayedShow = setInterval(function () {\n\t\t\t\t\tif (tooltip.is(\":visible\")) {\n\t\t\t\t\t\tposition(positionOption.of);\n\t\t\t\t\t\tclearInterval(delayedShow);\n\t\t\t\t\t}\n\t\t\t\t}, $.fx.interval);\n\t\t\t}\n\n\t\t\tthis._trigger(\"open\", event, { tooltip: tooltip });\n\t\t},\n\n\t\t_registerCloseHandlers: function _registerCloseHandlers(event, target) {\n\t\t\tvar events = {\n\t\t\t\tkeyup: function keyup(event) {\n\t\t\t\t\tif (event.keyCode === $.ui.keyCode.ESCAPE) {\n\t\t\t\t\t\tvar fakeEvent = $.Event(event);\n\t\t\t\t\t\tfakeEvent.currentTarget = target[0];\n\t\t\t\t\t\tthis.close(fakeEvent, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Only bind remove handler for delegated targets. Non-delegated\n\t\t\t// tooltips will handle this in destroy.\n\t\t\tif (target[0] !== this.element[0]) {\n\t\t\t\tevents.remove = function () {\n\t\t\t\t\tthis._removeTooltip(this._find(target).tooltip);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!event || event.type === \"mouseover\") {\n\t\t\t\tevents.mouseleave = \"close\";\n\t\t\t}\n\t\t\tif (!event || event.type === \"focusin\") {\n\t\t\t\tevents.focusout = \"close\";\n\t\t\t}\n\t\t\tthis._on(true, target, events);\n\t\t},\n\n\t\tclose: function close(event) {\n\t\t\tvar tooltip,\n\t\t\t    that = this,\n\t\t\t    target = $(event ? event.currentTarget : this.element),\n\t\t\t    tooltipData = this._find(target);\n\n\t\t\t// The tooltip may already be closed\n\t\t\tif (!tooltipData) {\n\n\t\t\t\t// We set ui-tooltip-open immediately upon open (in open()), but only set the\n\t\t\t\t// additional data once there's actually content to show (in _open()). So even if the\n\t\t\t\t// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in\n\t\t\t\t// the period between open() and _open().\n\t\t\t\ttarget.removeData(\"ui-tooltip-open\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttooltip = tooltipData.tooltip;\n\n\t\t\t// disabling closes the tooltip, so we need to track when we're closing\n\t\t\t// to avoid an infinite loop in case the tooltip becomes disabled on close\n\t\t\tif (tooltipData.closing) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear the interval for delayed tracking tooltips\n\t\t\tclearInterval(this.delayedShow);\n\n\t\t\t// only set title if we had one before (see comment in _open())\n\t\t\t// If the title attribute has changed since open(), don't restore\n\t\t\tif (target.data(\"ui-tooltip-title\") && !target.attr(\"title\")) {\n\t\t\t\ttarget.attr(\"title\", target.data(\"ui-tooltip-title\"));\n\t\t\t}\n\n\t\t\tthis._removeDescribedBy(target);\n\n\t\t\ttooltipData.hiding = true;\n\t\t\ttooltip.stop(true);\n\t\t\tthis._hide(tooltip, this.options.hide, function () {\n\t\t\t\tthat._removeTooltip($(this));\n\t\t\t});\n\n\t\t\ttarget.removeData(\"ui-tooltip-open\");\n\t\t\tthis._off(target, \"mouseleave focusout keyup\");\n\n\t\t\t// Remove 'remove' binding only on delegated targets\n\t\t\tif (target[0] !== this.element[0]) {\n\t\t\t\tthis._off(target, \"remove\");\n\t\t\t}\n\t\t\tthis._off(this.document, \"mousemove\");\n\n\t\t\tif (event && event.type === \"mouseleave\") {\n\t\t\t\t$.each(this.parents, function (id, parent) {\n\t\t\t\t\t$(parent.element).attr(\"title\", parent.title);\n\t\t\t\t\tdelete that.parents[id];\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttooltipData.closing = true;\n\t\t\tthis._trigger(\"close\", event, { tooltip: tooltip });\n\t\t\tif (!tooltipData.hiding) {\n\t\t\t\ttooltipData.closing = false;\n\t\t\t}\n\t\t},\n\n\t\t_tooltip: function _tooltip(element) {\n\t\t\tvar tooltip = $(\"<div>\").attr(\"role\", \"tooltip\").addClass(\"ui-tooltip ui-widget ui-corner-all ui-widget-content \" + (this.options.tooltipClass || \"\")),\n\t\t\t    id = tooltip.uniqueId().attr(\"id\");\n\n\t\t\t$(\"<div>\").addClass(\"ui-tooltip-content\").appendTo(tooltip);\n\n\t\t\ttooltip.appendTo(this.document[0].body);\n\n\t\t\treturn this.tooltips[id] = {\n\t\t\t\telement: element,\n\t\t\t\ttooltip: tooltip\n\t\t\t};\n\t\t},\n\n\t\t_find: function _find(target) {\n\t\t\tvar id = target.data(\"ui-tooltip-id\");\n\t\t\treturn id ? this.tooltips[id] : null;\n\t\t},\n\n\t\t_removeTooltip: function _removeTooltip(tooltip) {\n\t\t\ttooltip.remove();\n\t\t\tdelete this.tooltips[tooltip.attr(\"id\")];\n\t\t},\n\n\t\t_destroy: function _destroy() {\n\t\t\tvar that = this;\n\n\t\t\t// close open tooltips\n\t\t\t$.each(this.tooltips, function (id, tooltipData) {\n\t\t\t\t// Delegate to close method to handle common cleanup\n\t\t\t\tvar event = $.Event(\"blur\"),\n\t\t\t\t    element = tooltipData.element;\n\t\t\t\tevent.target = event.currentTarget = element[0];\n\t\t\t\tthat.close(event, true);\n\n\t\t\t\t// Remove immediately; destroying an open tooltip doesn't use the\n\t\t\t\t// hide animation\n\t\t\t\t$(\"#\" + id).remove();\n\n\t\t\t\t// Restore the title\n\t\t\t\tif (element.data(\"ui-tooltip-title\")) {\n\t\t\t\t\t// If the title attribute has changed since open(), don't restore\n\t\t\t\t\tif (!element.attr(\"title\")) {\n\t\t\t\t\t\telement.attr(\"title\", element.data(\"ui-tooltip-title\"));\n\t\t\t\t\t}\n\t\t\t\t\telement.removeData(\"ui-tooltip-title\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.liveRegion.remove();\n\t\t}\n\t});\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.uploadfile-4.0.11.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.uploadfile-4.0.11.js ***!
  \*******************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "/*!\n * jQuery Upload File Plugin\n * version: 4.0.11\n * @requires jQuery v1.5 or later & form plugin\n * Copyright (c) 2013 Ravishanker Kusuma\n * http://hayageek.com/\n */\n(function ($) {\n    if ($.fn.ajaxForm == undefined) {\n        $.getScript((\"https:\" == document.location.protocol ? \"https://\" : \"http://\") + \"malsup.github.io/jquery.form.js\");\n    }\n    var feature = {};\n    feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined;\n    feature.formdata = window.FormData !== undefined;\n    $.fn.uploadFile = function (options) {\n        // This is the easiest way to have default options.\n        var s = $.extend({\n            // These are the defaults.\n            url: \"\",\n            method: \"POST\",\n            enctype: \"multipart/form-data\",\n            returnType: null,\n            allowDuplicates: true,\n            duplicateStrict: false,\n            allowedTypes: \"*\",\n            //For list of acceptFiles\n            // http://stackoverflow.com/questions/11832930/html-input-file-accept-attribute-file-type-csv\n            acceptFiles: \"*\",\n            fileName: \"file\",\n            formData: false,\n            dynamicFormData: false,\n            maxFileSize: -1,\n            maxFileCount: -1,\n            multiple: true,\n            dragDrop: true,\n            autoSubmit: true,\n            showCancel: true,\n            showAbort: true,\n            showDone: false,\n            showDelete: false,\n            showError: true,\n            showStatusAfterSuccess: true,\n            showStatusAfterError: true,\n            showFileCounter: true,\n            fileCounterStyle: \"). \",\n            showFileSize: true,\n            showProgress: false,\n            nestedForms: true,\n            showDownload: false,\n            onLoad: function onLoad(obj) {},\n            onSelect: function onSelect(files) {\n                return true;\n            },\n            onSubmit: function onSubmit(files, xhr) {},\n            onSuccess: function onSuccess(files, response, xhr, pd) {},\n            onError: function onError(files, status, message, pd) {},\n            onCancel: function onCancel(files, pd) {},\n            onAbort: function onAbort(files, pd) {},\n            downloadCallback: false,\n            deleteCallback: false,\n            afterUploadAll: false,\n            serialize: true,\n            sequential: false,\n            sequentialCount: 2,\n            customProgressBar: false,\n            abortButtonClass: \"ajax-file-upload-abort\",\n            cancelButtonClass: \"ajax-file-upload-cancel\",\n            dragDropContainerClass: \"ajax-upload-dragdrop\",\n            dragDropHoverClass: \"state-hover\",\n            errorClass: \"ajax-file-upload-error\",\n            uploadButtonClass: \"ajax-file-upload\",\n            dragDropStr: \"<span><b>Drag &amp; Drop Files</b></span>\",\n            uploadStr: \"Upload\",\n            abortStr: \"Abort\",\n            cancelStr: \"Cancel\",\n            deleteStr: \"Delete\",\n            doneStr: \"Done\",\n            multiDragErrorStr: \"Multiple File Drag &amp; Drop is not allowed.\",\n            extErrorStr: \"is not allowed. Allowed extensions: \",\n            duplicateErrorStr: \"is not allowed. File already exists.\",\n            sizeErrorStr: \"is not allowed. Allowed Max size: \",\n            uploadErrorStr: \"Upload is not allowed\",\n            maxFileCountErrorStr: \" is not allowed. Maximum allowed files are:\",\n            downloadStr: \"Download\",\n            customErrorKeyStr: \"jquery-upload-file-error\",\n            showQueueDiv: false,\n            statusBarWidth: 400,\n            dragdropWidth: 400,\n            showPreview: false,\n            previewHeight: \"auto\",\n            previewWidth: \"100%\",\n            extraHTML: false,\n            uploadQueueOrder: 'top',\n            headers: {}\n        }, options);\n\n        this.fileCounter = 1;\n        this.selectedFiles = 0;\n        var formGroup = \"ajax-file-upload-\" + new Date().getTime();\n        this.formGroup = formGroup;\n        this.errorLog = $(\"<div></div>\"); //Writing errors\n        this.responses = [];\n        this.existingFileNames = [];\n        if (!feature.formdata) //check drag drop enabled.\n            {\n                s.dragDrop = false;\n            }\n        if (!feature.formdata || s.maxFileCount === 1) {\n            s.multiple = false;\n        }\n\n        $(this).html(\"\");\n\n        var obj = this;\n\n        var uploadLabel = $('<div>' + s.uploadStr + '</div>');\n\n        $(uploadLabel).addClass(s.uploadButtonClass);\n\n        // wait form ajax Form plugin and initialize\n        (function checkAjaxFormLoaded() {\n            if ($.fn.ajaxForm) {\n\n                if (s.dragDrop) {\n                    var dragDrop = $('<div class=\"' + s.dragDropContainerClass + '\" style=\"vertical-align:top;\"></div>').width(s.dragdropWidth);\n                    $(obj).append(dragDrop);\n                    $(dragDrop).append(uploadLabel);\n                    $(dragDrop).append($(s.dragDropStr));\n                    setDragDropHandlers(obj, s, dragDrop);\n                } else {\n                    $(obj).append(uploadLabel);\n                }\n                $(obj).append(obj.errorLog);\n\n                if (s.showQueueDiv) obj.container = $(\"#\" + s.showQueueDiv);else obj.container = $(\"<div class='ajax-file-upload-container'></div>\").insertAfter($(obj));\n\n                s.onLoad.call(this, obj);\n                createCustomInputFile(obj, formGroup, s, uploadLabel);\n            } else window.setTimeout(checkAjaxFormLoaded, 10);\n        })();\n\n        this.startUpload = function () {\n            $(\"form\").each(function (i, items) {\n                if ($(this).hasClass(obj.formGroup)) {\n                    mainQ.push($(this));\n                }\n            });\n\n            if (mainQ.length >= 1) submitPendingUploads();\n        };\n\n        this.getFileCount = function () {\n            return obj.selectedFiles;\n        };\n        this.stopUpload = function () {\n            $(\".\" + s.abortButtonClass).each(function (i, items) {\n                if ($(this).hasClass(obj.formGroup)) $(this).click();\n            });\n            $(\".\" + s.cancelButtonClass).each(function (i, items) {\n                if ($(this).hasClass(obj.formGroup)) $(this).click();\n            });\n        };\n        this.cancelAll = function () {\n            $(\".\" + s.cancelButtonClass).each(function (i, items) {\n                if ($(this).hasClass(obj.formGroup)) $(this).click();\n            });\n        };\n        this.update = function (settings) {\n            //update new settings\n            s = $.extend(s, settings);\n\n            //We need to update action for already created Form.            \n            if (settings.hasOwnProperty('url')) {\n                $(\"form\").each(function (i, items) {\n                    $(this).attr('action', settings['url']);\n                });\n            }\n        };\n\n        this.enqueueFile = function (file) {\n            if (!(file instanceof File)) return;\n            var files = [file];\n            serializeAndUploadFiles(s, obj, files);\n        };\n\n        this.reset = function (removeStatusBars) {\n            obj.fileCounter = 1;\n            obj.selectedFiles = 0;\n            obj.errorLog.html(\"\");\n            //remove all the status bars.\n            if (removeStatusBars != false) {\n                obj.container.html(\"\");\n            }\n        };\n        this.remove = function () {\n            obj.container.html(\"\");\n            $(obj).remove();\n        };\n        //This is for showing Old files to user.\n        this.createProgress = function (filename, filepath, filesize) {\n            var pd = new createProgressDiv(this, s);\n            pd.progressDiv.show();\n            pd.progressbar.width('100%');\n\n            var fileNameStr = \"\";\n            if (s.showFileCounter) fileNameStr = obj.fileCounter + s.fileCounterStyle + filename;else fileNameStr = filename;\n\n            if (s.showFileSize) fileNameStr += \" (\" + getSizeStr(filesize) + \")\";\n\n            pd.filename.html(fileNameStr);\n            obj.fileCounter++;\n            obj.selectedFiles++;\n            if (s.showPreview) {\n                pd.preview.attr('src', filepath);\n                pd.preview.show();\n            }\n\n            if (s.showDownload) {\n                pd.download.show();\n                pd.download.click(function () {\n                    if (s.downloadCallback) s.downloadCallback.call(obj, [filename], pd);\n                });\n            }\n            if (s.showDelete) {\n                pd.del.show();\n                pd.del.click(function () {\n                    pd.statusbar.hide().remove();\n                    var arr = [filename];\n                    if (s.deleteCallback) s.deleteCallback.call(this, arr, pd);\n                    obj.selectedFiles -= 1;\n                    updateFileCounter(s, obj);\n                });\n            }\n\n            return pd;\n        };\n\n        this.getResponses = function () {\n            return this.responses;\n        };\n        var mainQ = [];\n        var progressQ = [];\n        var running = false;\n        function submitPendingUploads() {\n            if (running) return;\n            running = true;\n            (function checkPendingForms() {\n\n                //if not sequential upload all files\n                if (!s.sequential) s.sequentialCount = 99999;\n\n                if (mainQ.length == 0 && progressQ.length == 0) {\n                    if (s.afterUploadAll) s.afterUploadAll(obj);\n                    running = false;\n                } else {\n                    if (progressQ.length < s.sequentialCount) {\n                        var frm = mainQ.shift();\n                        if (frm != undefined) {\n                            progressQ.push(frm);\n                            //Remove the class group.\n                            frm.removeClass(obj.formGroup);\n                            frm.submit();\n                        }\n                    }\n                    window.setTimeout(checkPendingForms, 100);\n                }\n            })();\n        }\n\n        function setDragDropHandlers(obj, s, ddObj) {\n            ddObj.on('dragenter', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                $(this).addClass(s.dragDropHoverClass);\n            });\n            ddObj.on('dragover', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                var that = $(this);\n                if (that.hasClass(s.dragDropContainerClass) && !that.hasClass(s.dragDropHoverClass)) {\n                    that.addClass(s.dragDropHoverClass);\n                }\n            });\n            ddObj.on('drop', function (e) {\n                e.preventDefault();\n                $(this).removeClass(s.dragDropHoverClass);\n                obj.errorLog.html(\"\");\n                var files = e.originalEvent.dataTransfer.files;\n                if (!s.multiple && files.length > 1) {\n                    if (s.showError) $(\"<div class='\" + s.errorClass + \"'>\" + s.multiDragErrorStr + \"</div>\").appendTo(obj.errorLog);\n                    return;\n                }\n                if (s.onSelect(files) == false) return;\n                serializeAndUploadFiles(s, obj, files);\n            });\n            ddObj.on('dragleave', function (e) {\n                $(this).removeClass(s.dragDropHoverClass);\n            });\n\n            $(document).on('dragenter', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n            });\n            $(document).on('dragover', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                var that = $(this);\n                if (!that.hasClass(s.dragDropContainerClass)) {\n                    that.removeClass(s.dragDropHoverClass);\n                }\n            });\n            $(document).on('drop', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                $(this).removeClass(s.dragDropHoverClass);\n            });\n        }\n\n        function getSizeStr(size) {\n            var sizeStr = \"\";\n            var sizeKB = size / 1024;\n            if (parseInt(sizeKB) > 1024) {\n                var sizeMB = sizeKB / 1024;\n                sizeStr = sizeMB.toFixed(2) + \" MB\";\n            } else {\n                sizeStr = sizeKB.toFixed(2) + \" KB\";\n            }\n            return sizeStr;\n        }\n\n        function serializeData(extraData) {\n            var serialized = [];\n            if (jQuery.type(extraData) == \"string\") {\n                serialized = extraData.split('&');\n            } else {\n                serialized = $.param(extraData).split('&');\n            }\n            var len = serialized.length;\n            var result = [];\n            var i, part;\n            for (i = 0; i < len; i++) {\n                serialized[i] = serialized[i].replace(/\\+/g, ' ');\n                part = serialized[i].split('=');\n                result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\n            }\n            return result;\n        }\n        function noserializeAndUploadFiles(s, obj, files) {\n            var ts = $.extend({}, s);\n            var fd = new FormData();\n            var fileArray = [];\n            var fileName = s.fileName.replace(\"[]\", \"\");\n            var fileListStr = \"\";\n\n            for (var i = 0; i < files.length; i++) {\n                if (!isFileTypeAllowed(obj, s, files[i].name)) {\n                    if (s.showError) $(\"<div><font color='red'><b>\" + files[i].name + \"</b> \" + s.extErrorStr + s.allowedTypes + \"</font></div>\").appendTo(obj.errorLog);\n                    continue;\n                }\n                if (s.maxFileSize != -1 && files[i].size > s.maxFileSize) {\n                    if (s.showError) $(\"<div><font color='red'><b>\" + files[i].name + \"</b> \" + s.sizeErrorStr + getSizeStr(s.maxFileSize) + \"</font></div>\").appendTo(obj.errorLog);\n                    continue;\n                }\n                fd.append(fileName + \"[]\", files[i]);\n                fileArray.push(files[i].name);\n                fileListStr += obj.fileCounter + \"). \" + files[i].name + \"<br>\";\n                obj.fileCounter++;\n            }\n            if (fileArray.length == 0) return;\n\n            var extraData = s.formData;\n            if (extraData) {\n                var sData = serializeData(extraData);\n                for (var j = 0; j < sData.length; j++) {\n                    if (sData[j]) {\n                        fd.append(sData[j][0], sData[j][1]);\n                    }\n                }\n            }\n\n            ts.fileData = fd;\n            var pd = new createProgressDiv(obj, s);\n            pd.filename.html(fileListStr);\n            var form = $(\"<form style='display:block; position:absolute;left: 150px;' class='\" + obj.formGroup + \"' method='\" + s.method + \"' action='\" + s.url + \"' enctype='\" + s.enctype + \"'></form>\");\n            form.appendTo('body');\n            ajaxFormSubmit(form, ts, pd, fileArray, obj);\n        }\n\n        function serializeAndUploadFiles(s, obj, files) {\n            for (var i = 0; i < files.length; i++) {\n                if (!isFileTypeAllowed(obj, s, files[i].name)) {\n                    if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.extErrorStr + s.allowedTypes + \"</div>\").appendTo(obj.errorLog);\n                    continue;\n                }\n                if (!s.allowDuplicates && isFileDuplicate(obj, files[i].name)) {\n                    if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.duplicateErrorStr + \"</div>\").appendTo(obj.errorLog);\n                    continue;\n                }\n                if (s.maxFileSize != -1 && files[i].size > s.maxFileSize) {\n                    if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.sizeErrorStr + getSizeStr(s.maxFileSize) + \"</div>\").appendTo(obj.errorLog);\n                    continue;\n                }\n                if (s.maxFileCount != -1 && obj.selectedFiles >= s.maxFileCount) {\n                    if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.maxFileCountErrorStr + s.maxFileCount + \"</div>\").appendTo(obj.errorLog);\n                    continue;\n                }\n                obj.selectedFiles++;\n                obj.existingFileNames.push(files[i].name);\n                // Make object immutable\n                var ts = $.extend({}, s);\n                var fd = new FormData();\n                var fileName = s.fileName.replace(\"[]\", \"\");\n                fd.append(fileName, files[i]);\n                var extraData = s.formData;\n                if (extraData) {\n                    var sData = serializeData(extraData);\n                    for (var j = 0; j < sData.length; j++) {\n                        if (sData[j]) {\n                            fd.append(sData[j][0], sData[j][1]);\n                        }\n                    }\n                }\n                ts.fileData = fd;\n\n                var pd = new createProgressDiv(obj, s);\n                var fileNameStr = \"\";\n                if (s.showFileCounter) fileNameStr = obj.fileCounter + s.fileCounterStyle + files[i].name;else fileNameStr = files[i].name;\n\n                if (s.showFileSize) fileNameStr += \" (\" + getSizeStr(files[i].size) + \")\";\n\n                pd.filename.html(fileNameStr);\n                var form = $(\"<form style='display:block; position:absolute;left: 150px;' class='\" + obj.formGroup + \"' method='\" + s.method + \"' action='\" + s.url + \"' enctype='\" + s.enctype + \"'></form>\");\n                form.appendTo('body');\n                var fileArray = [];\n                fileArray.push(files[i].name);\n\n                ajaxFormSubmit(form, ts, pd, fileArray, obj, files[i]);\n                obj.fileCounter++;\n            }\n        }\n\n        function isFileTypeAllowed(obj, s, fileName) {\n            var fileExtensions = s.allowedTypes.toLowerCase().split(/[\\s,]+/g);\n            var ext = fileName.split('.').pop().toLowerCase();\n            if (s.allowedTypes != \"*\" && jQuery.inArray(ext, fileExtensions) < 0) {\n                return false;\n            }\n            return true;\n        }\n\n        function isFileDuplicate(obj, filename) {\n            var duplicate = false;\n            if (obj.existingFileNames.length) {\n                for (var x = 0; x < obj.existingFileNames.length; x++) {\n                    if (obj.existingFileNames[x] == filename || s.duplicateStrict && obj.existingFileNames[x].toLowerCase() == filename.toLowerCase()) {\n                        duplicate = true;\n                    }\n                }\n            }\n            return duplicate;\n        }\n\n        function removeExistingFileName(obj, fileArr) {\n            if (obj.existingFileNames.length) {\n                for (var x = 0; x < fileArr.length; x++) {\n                    var pos = obj.existingFileNames.indexOf(fileArr[x]);\n                    if (pos != -1) {\n                        obj.existingFileNames.splice(pos, 1);\n                    }\n                }\n            }\n        }\n\n        function getSrcToPreview(file, obj) {\n            if (file) {\n                obj.show();\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    obj.attr('src', e.target.result);\n                };\n                reader.readAsDataURL(file);\n            }\n        }\n\n        function updateFileCounter(s, obj) {\n            if (s.showFileCounter) {\n                var count = $(obj.container).find(\".ajax-file-upload-filename\").length;\n                obj.fileCounter = count + 1;\n                $(obj.container).find(\".ajax-file-upload-filename\").each(function (i, items) {\n                    var arr = $(this).html().split(s.fileCounterStyle);\n                    var fileNum = parseInt(arr[0]) - 1; //decrement;\n                    var name = count + s.fileCounterStyle + arr[1];\n                    $(this).html(name);\n                    count--;\n                });\n            }\n        }\n\n        function createCustomInputFile(obj, group, s, uploadLabel) {\n\n            var fileUploadId = \"ajax-upload-id-\" + new Date().getTime();\n\n            var form = $(\"<form method='\" + s.method + \"' action='\" + s.url + \"' enctype='\" + s.enctype + \"'></form>\");\n            var fileInputStr = \"<input type='file' id='\" + fileUploadId + \"' name='\" + s.fileName + \"' accept='\" + s.acceptFiles + \"'/>\";\n            if (s.multiple) {\n                if (s.fileName.indexOf(\"[]\") != s.fileName.length - 2) // if it does not endwith\n                    {\n                        s.fileName += \"[]\";\n                    }\n                fileInputStr = \"<input type='file' id='\" + fileUploadId + \"' name='\" + s.fileName + \"' accept='\" + s.acceptFiles + \"' multiple/>\";\n            }\n            var fileInput = $(fileInputStr).appendTo(form);\n\n            fileInput.change(function () {\n\n                obj.errorLog.html(\"\");\n                var fileExtensions = s.allowedTypes.toLowerCase().split(\",\");\n                var fileArray = [];\n                if (this.files) //support reading files\n                    {\n                        for (i = 0; i < this.files.length; i++) {\n                            fileArray.push(this.files[i].name);\n                        }\n\n                        if (s.onSelect(this.files) == false) return;\n                    } else {\n                    var filenameStr = $(this).val();\n                    var flist = [];\n                    fileArray.push(filenameStr);\n                    if (!isFileTypeAllowed(obj, s, filenameStr)) {\n                        if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + filenameStr + \"</b> \" + s.extErrorStr + s.allowedTypes + \"</div>\").appendTo(obj.errorLog);\n                        return;\n                    }\n                    //fallback for browser without FileAPI\n                    flist.push({\n                        name: filenameStr,\n                        size: 'NA'\n                    });\n                    if (s.onSelect(flist) == false) return;\n                }\n                updateFileCounter(s, obj);\n\n                uploadLabel.unbind(\"click\");\n                form.hide();\n                createCustomInputFile(obj, group, s, uploadLabel);\n                form.addClass(group);\n                if (s.serialize && feature.fileapi && feature.formdata) //use HTML5 support and split file submission\n                    {\n                        form.removeClass(group); //Stop Submitting when.\n                        var files = this.files;\n                        form.remove();\n                        serializeAndUploadFiles(s, obj, files);\n                    } else {\n                    var fileList = \"\";\n                    for (var i = 0; i < fileArray.length; i++) {\n                        if (s.showFileCounter) fileList += obj.fileCounter + s.fileCounterStyle + fileArray[i] + \"<br>\";else fileList += fileArray[i] + \"<br>\";;\n                        obj.fileCounter++;\n                    }\n                    if (s.maxFileCount != -1 && obj.selectedFiles + fileArray.length > s.maxFileCount) {\n                        if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + fileList + \"</b> \" + s.maxFileCountErrorStr + s.maxFileCount + \"</div>\").appendTo(obj.errorLog);\n                        return;\n                    }\n                    obj.selectedFiles += fileArray.length;\n\n                    var pd = new createProgressDiv(obj, s);\n                    pd.filename.html(fileList);\n                    ajaxFormSubmit(form, s, pd, fileArray, obj, null);\n                }\n            });\n\n            if (s.nestedForms) {\n                form.css({\n                    'margin': 0,\n                    'padding': 0\n                });\n                uploadLabel.css({\n                    position: 'relative',\n                    overflow: 'hidden',\n                    cursor: 'default'\n                });\n                fileInput.css({\n                    position: 'absolute',\n                    'cursor': 'pointer',\n                    'top': '0px',\n                    'width': '100%',\n                    'height': '100%',\n                    'left': '0px',\n                    'z-index': '100',\n                    'opacity': '0.0',\n                    'filter': 'alpha(opacity=0)',\n                    '-ms-filter': \"alpha(opacity=0)\",\n                    '-khtml-opacity': '0.0',\n                    '-moz-opacity': '0.0'\n                });\n                form.appendTo(uploadLabel);\n            } else {\n                form.appendTo($('body'));\n                form.css({\n                    margin: 0,\n                    padding: 0,\n                    display: 'block',\n                    position: 'absolute',\n                    left: '-250px'\n                });\n                if (navigator.appVersion.indexOf(\"MSIE \") != -1) //IE Browser\n                    {\n                        uploadLabel.attr('for', fileUploadId);\n                    } else {\n                    uploadLabel.click(function () {\n                        fileInput.click();\n                    });\n                }\n            }\n        }\n\n        function defaultProgressBar(obj, s) {\n\n            this.statusbar = $(\"<div class='ajax-file-upload-statusbar'></div>\").width(s.statusBarWidth);\n            this.preview = $(\"<img class='ajax-file-upload-preview' />\").width(s.previewWidth).height(s.previewHeight).appendTo(this.statusbar).hide();\n            this.filename = $(\"<div class='ajax-file-upload-filename'></div>\").appendTo(this.statusbar);\n            this.progressDiv = $(\"<div class='ajax-file-upload-progress'>\").appendTo(this.statusbar).hide();\n            this.progressbar = $(\"<div class='ajax-file-upload-bar'></div>\").appendTo(this.progressDiv);\n            this.abort = $(\"<div>\" + s.abortStr + \"</div>\").appendTo(this.statusbar).hide();\n            this.cancel = $(\"<div>\" + s.cancelStr + \"</div>\").appendTo(this.statusbar).hide();\n            this.done = $(\"<div>\" + s.doneStr + \"</div>\").appendTo(this.statusbar).hide();\n            this.download = $(\"<div>\" + s.downloadStr + \"</div>\").appendTo(this.statusbar).hide();\n            this.del = $(\"<div>\" + s.deleteStr + \"</div>\").appendTo(this.statusbar).hide();\n\n            this.abort.addClass(\"ajax-file-upload-red\");\n            this.done.addClass(\"ajax-file-upload-green\");\n            this.download.addClass(\"ajax-file-upload-green\");\n            this.cancel.addClass(\"ajax-file-upload-red\");\n            this.del.addClass(\"ajax-file-upload-red\");\n\n            return this;\n        }\n        function createProgressDiv(obj, s) {\n            var bar = null;\n            if (s.customProgressBar) bar = new s.customProgressBar(obj, s);else bar = new defaultProgressBar(obj, s);\n\n            bar.abort.addClass(obj.formGroup);\n            bar.abort.addClass(s.abortButtonClass);\n\n            bar.cancel.addClass(obj.formGroup);\n            bar.cancel.addClass(s.cancelButtonClass);\n\n            if (s.extraHTML) bar.extraHTML = $(\"<div class='extrahtml'>\" + s.extraHTML() + \"</div>\").insertAfter(bar.filename);\n\n            if (s.uploadQueueOrder == 'bottom') $(obj.container).append(bar.statusbar);else $(obj.container).prepend(bar.statusbar);\n            return bar;\n        }\n\n        function ajaxFormSubmit(form, s, pd, fileArray, obj, file) {\n            var currentXHR = null;\n            var options = {\n                cache: false,\n                contentType: false,\n                processData: false,\n                forceSync: false,\n                type: s.method,\n                data: s.formData,\n                formData: s.fileData,\n                dataType: s.returnType,\n                headers: s.headers,\n                beforeSubmit: function beforeSubmit(formData, $form, options) {\n                    if (s.onSubmit.call(this, fileArray) != false) {\n                        if (s.dynamicFormData) {\n                            var sData = serializeData(s.dynamicFormData());\n                            if (sData) {\n                                for (var j = 0; j < sData.length; j++) {\n                                    if (sData[j]) {\n                                        if (s.serialize && s.fileData != undefined) options.formData.append(sData[j][0], sData[j][1]);else options.data[sData[j][0]] = sData[j][1];\n                                    }\n                                }\n                            }\n                        }\n\n                        if (s.extraHTML) {\n                            $(pd.extraHTML).find(\"input,select,textarea\").each(function (i, items) {\n                                if (s.serialize && s.fileData != undefined) options.formData.append($(this).attr('name'), $(this).val());else options.data[$(this).attr('name')] = $(this).val();\n                            });\n                        }\n                        return true;\n                    }\n                    pd.statusbar.append(\"<div class='\" + s.errorClass + \"'>\" + s.uploadErrorStr + \"</div>\");\n                    pd.cancel.show();\n                    form.remove();\n                    pd.cancel.click(function () {\n                        mainQ.splice(mainQ.indexOf(form), 1);\n                        removeExistingFileName(obj, fileArray);\n                        pd.statusbar.remove();\n                        s.onCancel.call(obj, fileArray, pd);\n                        obj.selectedFiles -= fileArray.length; //reduce selected File count\n                        updateFileCounter(s, obj);\n                    });\n                    return false;\n                },\n                beforeSend: function beforeSend(xhr, o) {\n                    for (var key in o.headers) {\n                        xhr.setRequestHeader(key, o.headers[key]);\n                    }\n\n                    pd.progressDiv.show();\n                    pd.cancel.hide();\n                    pd.done.hide();\n                    if (s.showAbort) {\n                        pd.abort.show();\n                        pd.abort.click(function () {\n                            removeExistingFileName(obj, fileArray);\n                            xhr.abort();\n                            obj.selectedFiles -= fileArray.length; //reduce selected File count\n                            s.onAbort.call(obj, fileArray, pd);\n                        });\n                    }\n                    if (!feature.formdata) //For iframe based push\n                        {\n                            pd.progressbar.width('5%');\n                        } else pd.progressbar.width('1%'); //Fix for small files\n                },\n                uploadProgress: function uploadProgress(event, position, total, percentComplete) {\n                    //Fix for smaller file uploads in MAC\n                    if (percentComplete > 98) percentComplete = 98;\n\n                    var percentVal = percentComplete + '%';\n                    if (percentComplete > 1) pd.progressbar.width(percentVal);\n                    if (s.showProgress) {\n                        pd.progressbar.html(percentVal);\n                        pd.progressbar.css('text-align', 'center');\n                    }\n                },\n                success: function success(data, message, xhr) {\n                    pd.cancel.remove();\n                    progressQ.pop();\n                    //For custom errors.\n                    if (s.returnType == \"json\" && $.type(data) == \"object\" && data.hasOwnProperty(s.customErrorKeyStr)) {\n                        pd.abort.hide();\n                        var msg = data[s.customErrorKeyStr];\n                        s.onError.call(this, fileArray, 200, msg, pd);\n                        if (s.showStatusAfterError) {\n                            pd.progressDiv.hide();\n                            pd.statusbar.append(\"<span class='\" + s.errorClass + \"'>ERROR: \" + msg + \"</span>\");\n                        } else {\n                            pd.statusbar.hide();\n                            pd.statusbar.remove();\n                        }\n                        obj.selectedFiles -= fileArray.length; //reduce selected File count\n                        form.remove();\n                        return;\n                    }\n                    obj.responses.push(data);\n                    pd.progressbar.width('100%');\n                    if (s.showProgress) {\n                        pd.progressbar.html('100%');\n                        pd.progressbar.css('text-align', 'center');\n                    }\n\n                    pd.abort.hide();\n                    s.onSuccess.call(this, fileArray, data, xhr, pd);\n                    if (s.showStatusAfterSuccess) {\n                        if (s.showDone) {\n                            pd.done.show();\n                            pd.done.click(function () {\n                                pd.statusbar.hide(\"slow\");\n                                pd.statusbar.remove();\n                            });\n                        } else {\n                            pd.done.hide();\n                        }\n                        if (s.showDelete) {\n                            pd.del.show();\n                            pd.del.click(function () {\n                                removeExistingFileName(obj, fileArray);\n                                pd.statusbar.hide().remove();\n                                if (s.deleteCallback) s.deleteCallback.call(this, data, pd);\n                                obj.selectedFiles -= fileArray.length; //reduce selected File count\n                                updateFileCounter(s, obj);\n                            });\n                        } else {\n                            pd.del.hide();\n                        }\n                    } else {\n                        pd.statusbar.hide(\"slow\");\n                        pd.statusbar.remove();\n                    }\n                    if (s.showDownload) {\n                        pd.download.show();\n                        pd.download.click(function () {\n                            if (s.downloadCallback) s.downloadCallback(data, pd);\n                        });\n                    }\n                    form.remove();\n                },\n                error: function error(xhr, status, errMsg) {\n                    pd.cancel.remove();\n                    progressQ.pop();\n                    pd.abort.hide();\n                    if (xhr.statusText == \"abort\") //we aborted it\n                        {\n                            pd.statusbar.hide(\"slow\").remove();\n                            updateFileCounter(s, obj);\n                        } else {\n                        s.onError.call(this, fileArray, status, errMsg, pd);\n                        if (s.showStatusAfterError) {\n                            pd.progressDiv.hide();\n                            pd.statusbar.append(\"<span class='\" + s.errorClass + \"'>ERROR: \" + errMsg + \"</span>\");\n                        } else {\n                            pd.statusbar.hide();\n                            pd.statusbar.remove();\n                        }\n                        obj.selectedFiles -= fileArray.length; //reduce selected File count\n                    }\n\n                    form.remove();\n                }\n            };\n\n            if (s.showPreview && file != null) {\n                if (file.type.toLowerCase().split(\"/\").shift() == \"image\") getSrcToPreview(file, pd.preview);\n            }\n\n            if (s.autoSubmit) {\n                form.ajaxForm(options);\n                mainQ.push(form);\n                submitPendingUploads();\n            } else {\n                if (s.showCancel) {\n                    pd.cancel.show();\n                    pd.cancel.click(function () {\n                        mainQ.splice(mainQ.indexOf(form), 1);\n                        removeExistingFileName(obj, fileArray);\n                        form.remove();\n                        pd.statusbar.remove();\n                        s.onCancel.call(obj, fileArray, pd);\n                        obj.selectedFiles -= fileArray.length; //reduce selected File count\n                        updateFileCounter(s, obj);\n                    });\n                }\n                form.ajaxForm(options);\n            }\n        }\n        return this;\n    };\n})(jQuery);"

/***/ }),

/***/ "./node_modules/script-loader/addScript.js":
/*!*************************************************!*\
  !*** ./node_modules/script-loader/addScript.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	function log(error) {
		(typeof console !== "undefined")
		&& (console.error || console.log)("[Script Loader]", error);
	}

	// Check for IE =< 8
	function isIE() {
		return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
	}

	try {
		if (typeof execScript !== "undefined" && isIE()) {
			execScript(src);
		} else if (typeof eval !== "undefined") {
			eval.call(null, src);
		} else {
			log("EvalError: No eval function available");
		}
	} catch (error) {
		log(error);
	}
}


/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/bowser.js":
/*!**********************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/bowser.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/bowser.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/bowser.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/konstantin/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--0-0!/home/konstantin/workspace/mlab.local.test/assets/js/bowser.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery-2.1.4.js":
/*!****************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery-2.1.4.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery-2.1.4.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery-2.1.4.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/konstantin/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--0-0!/home/konstantin/workspace/mlab.local.test/assets/js/jquery-2.1.4.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.form.js":
/*!***************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.form.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.form.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.form.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/konstantin/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--0-0!/home/konstantin/workspace/mlab.local.test/assets/js/jquery.form.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.qtip.nightly.js":
/*!***********************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.qtip.nightly.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.qtip.nightly.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.qtip.nightly.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/konstantin/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--0-0!/home/konstantin/workspace/mlab.local.test/assets/js/jquery.qtip.nightly.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.ui-1.11.4.js":
/*!********************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.ui-1.11.4.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.ui-1.11.4.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.ui-1.11.4.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/konstantin/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--0-0!/home/konstantin/workspace/mlab.local.test/assets/js/jquery.ui-1.11.4.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.uploadfile-4.0.11.js":
/*!****************************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.uploadfile-4.0.11.js ***!
  \****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--0-0!./assets/js/jquery.uploadfile-4.0.11.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js??ref--0-0!./assets/js/jquery.uploadfile-4.0.11.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/konstantin/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--0-0!/home/konstantin/workspace/mlab.local.test/assets/js/jquery.uploadfile-4.0.11.js")

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,