/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/mlab.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/mlab.js":
/*!***************************!*\
  !*** ./assets/js/mlab.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// require jQuery normally
var $ = __webpack_require__(/*! script-loader!./jquery-2.1.4.js */ "./node_modules/script-loader/index.js!./assets/js/jquery-2.1.4.js"); // if/when use NPM version, need to create global $ and jQuery variables
// global.$ = global.jQuery = $;


__webpack_require__(/*! script-loader!./jquery.ui-1.11.4.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.ui-1.11.4.js");

__webpack_require__(/*! script-loader!./jquery.form.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.form.js");

__webpack_require__(/*! script-loader!./jquery.uploadfile-4.0.11.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.uploadfile-4.0.11.js"); // require('script-loader!./jquery.qtip-3.0.3.js');


__webpack_require__(/*! script-loader!./jquery.qtip.nightly.js */ "./node_modules/script-loader/index.js!./assets/js/jquery.qtip.nightly.js");

__webpack_require__(/*! script-loader!./bowser.js */ "./node_modules/script-loader/index.js!./assets/js/bowser.js");

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/bowser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/bowser.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*!\n  * Bowser - a browser detector\n  * https://github.com/ded/bowser\n  * MIT License | (c) Dustin Diaz 2014\n  */\n!function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports['browser'] = definition();else if (typeof define == 'function' && define.amd) define(definition);else this[name] = definition();\n}('bowser', function () {\n  /**\n    * See useragents.js for examples of navigator.userAgent\n    */\n  var t = true;\n\n  function detect(ua) {\n    function getFirstMatch(regex) {\n      var match = ua.match(regex);\n      return match && match.length > 1 && match[1] || '';\n    }\n\n    function getSecondMatch(regex) {\n      var match = ua.match(regex);\n      return match && match.length > 1 && match[2] || '';\n    }\n\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),\n        likeAndroid = /like android/i.test(ua),\n        android = !likeAndroid && /android/i.test(ua),\n        edgeVersion = getFirstMatch(/edge\\/(\\d+(\\.\\d+)?)/i),\n        versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i),\n        tablet = /tablet/i.test(ua),\n        mobile = !tablet && /[^-]mobi/i.test(ua),\n        result;\n\n    if (/opera|opr/i.test(ua)) {\n      result = {\n        name: 'Opera',\n        opera: t,\n        version: versionIdentifier || getFirstMatch(/(?:opera|opr)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/windows phone/i.test(ua)) {\n      result = {\n        name: 'Windows Phone',\n        windowsphone: t\n      };\n\n      if (edgeVersion) {\n        result.msedge = t;\n        result.version = edgeVersion;\n      } else {\n        result.msie = t;\n        result.version = getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i);\n      }\n    } else if (/msie|trident/i.test(ua)) {\n      result = {\n        name: 'Internet Explorer',\n        msie: t,\n        version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/chrome.+? edge/i.test(ua)) {\n      result = {\n        name: 'Microsoft Edge',\n        msedge: t,\n        version: edgeVersion\n      };\n    } else if (/chrome|crios|crmo/i.test(ua)) {\n      result = {\n        name: 'Chrome',\n        chrome: t,\n        version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (iosdevice) {\n      result = {\n        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod' // WTF: version is not part of user agent in web apps\n\n      };\n\n      if (versionIdentifier) {\n        result.version = versionIdentifier;\n      }\n    } else if (/sailfish/i.test(ua)) {\n      result = {\n        name: 'Sailfish',\n        sailfish: t,\n        version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/seamonkey\\//i.test(ua)) {\n      result = {\n        name: 'SeaMonkey',\n        seamonkey: t,\n        version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/firefox|iceweasel/i.test(ua)) {\n      result = {\n        name: 'Firefox',\n        firefox: t,\n        version: getFirstMatch(/(?:firefox|iceweasel)[ \\/](\\d+(\\.\\d+)?)/i)\n      };\n\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\n        result.firefoxos = t;\n      }\n    } else if (/silk/i.test(ua)) {\n      result = {\n        name: 'Amazon Silk',\n        silk: t,\n        version: getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (android) {\n      result = {\n        name: 'Android',\n        version: versionIdentifier\n      };\n    } else if (/phantom/i.test(ua)) {\n      result = {\n        name: 'PhantomJS',\n        phantom: t,\n        version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\n      result = {\n        name: 'BlackBerry',\n        blackberry: t,\n        version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/(web|hpw)os/i.test(ua)) {\n      result = {\n        name: 'WebOS',\n        webos: t,\n        version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\n      };\n      /touchpad\\//i.test(ua) && (result.touchpad = t);\n    } else if (/bada/i.test(ua)) {\n      result = {\n        name: 'Bada',\n        bada: t,\n        version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\n      };\n    } else if (/tizen/i.test(ua)) {\n      result = {\n        name: 'Tizen',\n        tizen: t,\n        version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      };\n    } else if (/safari/i.test(ua)) {\n      result = {\n        name: 'Safari',\n        safari: t,\n        version: versionIdentifier\n      };\n    } else {\n      result = {\n        name: getFirstMatch(/^(.*)\\/(.*) /),\n        version: getSecondMatch(/^(.*)\\/(.*) /)\n      };\n    } // set webkit or gecko flag for browsers based on these engines\n\n\n    if (!result.msedge && /(apple)?webkit/i.test(ua)) {\n      result.name = result.name || \"Webkit\";\n      result.webkit = t;\n\n      if (!result.version && versionIdentifier) {\n        result.version = versionIdentifier;\n      }\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\n      result.name = result.name || \"Gecko\";\n      result.gecko = t;\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i);\n    } // set OS flags for platforms that have multiple browsers\n\n\n    if (!result.msedge && (android || result.silk)) {\n      result.android = t;\n    } else if (iosdevice) {\n      result[iosdevice] = t;\n      result.ios = t;\n    } // OS version extraction\n\n\n    var osVersion = '';\n\n    if (result.windowsphone) {\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\n    } else if (iosdevice) {\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (android) {\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\n    } else if (result.webos) {\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.blackberry) {\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\n    } else if (result.bada) {\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.tizen) {\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\n    }\n\n    if (osVersion) {\n      result.osversion = osVersion;\n    } // device type extraction\n\n\n    var osMajorVersion = osVersion.split('.')[0];\n\n    if (tablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion == 4 && !mobile) || result.silk) {\n      result.tablet = t;\n    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || result.blackberry || result.webos || result.bada) {\n      result.mobile = t;\n    } // Graded Browser Support\n    // http://developer.yahoo.com/yui/articles/gbs\n\n\n    if (result.msedge || result.msie && result.version >= 10 || result.chrome && result.version >= 20 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6 || result.blackberry && result.version >= 10.1) {\n      result.a = t;\n    } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(\".\")[0] < 6) {\n      result.c = t;\n    } else result.x = t;\n\n    return result;\n  }\n\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent : '');\n\n  bowser.test = function (browserList) {\n    for (var i = 0; i < browserList.length; ++i) {\n      var browserItem = browserList[i];\n\n      if (typeof browserItem === 'string') {\n        if (browserItem in bowser) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /*\n   * Set our detect method to the main bowser object so we can\n   * reuse it to test other user agents.\n   * This is needed to implement future tests.\n   */\n\n\n  bowser._detect = detect;\n  return bowser;\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery-2.1.4.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery-2.1.4.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * jQuery JavaScript Library v2.1.4\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-04-28T16:01Z\n */\n(function (global, factory) {\n  if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require(\"jquery\")(window);\n    // See ticket #14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error(\"jQuery requires a window with a document\");\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  } // Pass this if window is not defined yet\n\n})(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n  // Support: Firefox 18+\n  // Can't be in strict mode, several libs including ASP.NET trace\n  // the stack via arguments.caller.callee and Firefox dies if\n  // you try to trace through \"use strict\" call chains. (#13335)\n  //\n  var arr = [];\n  var _slice = arr.slice;\n  var concat = arr.concat;\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var support = {};\n\n  var // Use the correct document accordingly with window argument (sandbox)\n  document = window.document,\n      version = \"2.1.4\",\n      // Define a local copy of jQuery\n  jQuery = function jQuery(selector, context) {\n    // The jQuery object is actually just the init constructor 'enhanced'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  },\n      // Support: Android<4.1\n  // Make sure we trim BOM and NBSP\n  rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      // Matches dashed string for camelizing\n  rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([\\da-z])/gi,\n      // Used by jQuery.camelCase as callback to replace()\n  fcamelCase = function fcamelCase(all, letter) {\n    return letter.toUpperCase();\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // Start with an empty selector\n    selector: \"\",\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function toArray() {\n      return _slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function get(num) {\n      return num != null ? // Return just the one element from the set\n      num < 0 ? this[num + this.length] : this[num] : // Return all the elements in a clean array\n      _slice.call(this);\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function pushStack(elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this;\n      ret.context = this.context; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    // (You can seed the arguments with an array of args, but this is\n    // only used internally.)\n    each: function each(callback, args) {\n      return jQuery.each(this, callback, args);\n    },\n    map: function map(callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(_slice.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor(null);\n    },\n    // For internal use only.\n    // Behaves like an Array's method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === \"boolean\") {\n      deep = target; // Skip the boolean and the target\n\n      target = arguments[i] || {};\n      i++;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (_typeof(target) !== \"object\" && !jQuery.isFunction(target)) {\n      target = {};\n    } // Extend jQuery itself if only one argument is passed\n\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          src = target[name];\n          copy = options[name]; // Prevent never-ending loop\n\n          if (target === copy) {\n            continue;\n          } // Recurse if we're merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && jQuery.isArray(src) ? src : [];\n            } else {\n              clone = src && jQuery.isPlainObject(src) ? src : {};\n            } // Never move original objects, clone them\n\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function error(msg) {\n      throw new Error(msg);\n    },\n    noop: function noop() {},\n    isFunction: function isFunction(obj) {\n      return jQuery.type(obj) === \"function\";\n    },\n    isArray: Array.isArray,\n    isWindow: function isWindow(obj) {\n      return obj != null && obj === obj.window;\n    },\n    isNumeric: function isNumeric(obj) {\n      // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n      // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n      // subtraction forces infinities to NaN\n      // adding 1 corrects loss of precision from parseFloat (#15100)\n      return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;\n    },\n    isPlainObject: function isPlainObject(obj) {\n      // Not plain objects:\n      // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n      // - DOM nodes\n      // - window\n      if (jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow(obj)) {\n        return false;\n      }\n\n      if (obj.constructor && !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n        return false;\n      } // If the function hasn't returned already, we're confident that\n      // |obj| is a plain object, created by {} or constructed with new Object\n\n\n      return true;\n    },\n    isEmptyObject: function isEmptyObject(obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    type: function type(obj) {\n      if (obj == null) {\n        return obj + \"\";\n      } // Support: Android<4.0, iOS<6 (functionish RegExp)\n\n\n      return _typeof(obj) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : _typeof(obj);\n    },\n    // Evaluates a script in a global context\n    globalEval: function globalEval(code) {\n      var script,\n          indirect = eval;\n      code = jQuery.trim(code);\n\n      if (code) {\n        // If the code includes a valid, prologue position\n        // strict mode pragma, execute code by injecting a\n        // script tag into the document.\n        if (code.indexOf(\"use strict\") === 1) {\n          script = document.createElement(\"script\");\n          script.text = code;\n          document.head.appendChild(script).parentNode.removeChild(script);\n        } else {\n          // Otherwise, avoid the DOM node creation, insertion\n          // and removal by using an indirect global eval\n          indirect(code);\n        }\n      }\n    },\n    // Convert dashed to camelCase; used by the css and data modules\n    // Support: IE9-11+\n    // Microsoft forgot to hump their vendor prefix (#9572)\n    camelCase: function camelCase(string) {\n      return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n    },\n    nodeName: function nodeName(elem, name) {\n      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n    },\n    // args is for internal usage only\n    each: function each(obj, callback, args) {\n      var value,\n          i = 0,\n          length = obj.length,\n          isArray = isArraylike(obj);\n\n      if (args) {\n        if (isArray) {\n          for (; i < length; i++) {\n            value = callback.apply(obj[i], args);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } else {\n          for (i in obj) {\n            value = callback.apply(obj[i], args);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } // A special, fast, case for the most common use of each\n\n      } else {\n        if (isArray) {\n          for (; i < length; i++) {\n            value = callback.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } else {\n          for (i in obj) {\n            value = callback.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n              break;\n            }\n          }\n        }\n      }\n\n      return obj;\n    },\n    // Support: Android<4.1\n    trim: function trim(text) {\n      return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n    },\n    // results is for internal usage only\n    makeArray: function makeArray(arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArraylike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function inArray(elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    merge: function merge(first, second) {\n      var len = +second.length,\n          j = 0,\n          i = first.length;\n\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function grep(elems, callback, invert) {\n      var callbackInverse,\n          matches = [],\n          i = 0,\n          length = elems.length,\n          callbackExpect = !invert; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function map(elems, callback, arg) {\n      var value,\n          i = 0,\n          length = elems.length,\n          isArray = isArraylike(elems),\n          ret = []; // Go through the array, translating each of the items to their new values\n\n      if (isArray) {\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return concat.apply([], ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // Bind a function to a context, optionally partially applying any\n    // arguments.\n    proxy: function proxy(fn, context) {\n      var tmp, args, proxy;\n\n      if (typeof context === \"string\") {\n        tmp = fn[context];\n        context = fn;\n        fn = tmp;\n      } // Quick check to determine if target is callable, in the spec\n      // this throws a TypeError, but we will just return undefined.\n\n\n      if (!jQuery.isFunction(fn)) {\n        return undefined;\n      } // Simulated bind\n\n\n      args = _slice.call(arguments, 2);\n\n      proxy = function proxy() {\n        return fn.apply(context || this, args.concat(_slice.call(arguments)));\n      }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n      proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n      return proxy;\n    },\n    now: Date.now,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  }); // Populate the class2type map\n\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n\n  function isArraylike(obj) {\n    // Support: iOS 8.2 (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn't used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = \"length\" in obj && obj.length,\n        type = jQuery.type(obj);\n\n    if (type === \"function\" || jQuery.isWindow(obj)) {\n      return false;\n    }\n\n    if (obj.nodeType === 1 && length) {\n      return true;\n    }\n\n    return type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n  }\n\n  var Sizzle =\n  /*!\n   * Sizzle CSS Selector Engine v2.2.0-pre\n   * http://sizzlejs.com/\n   *\n   * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors\n   * Released under the MIT license\n   * http://jquery.org/license\n   *\n   * Date: 2014-12-16\n   */\n  function (window) {\n    var i,\n        support,\n        Expr,\n        getText,\n        isXML,\n        tokenize,\n        compile,\n        select,\n        outermostContext,\n        sortInput,\n        hasDuplicate,\n        // Local document vars\n    setDocument,\n        document,\n        docElem,\n        documentIsHTML,\n        rbuggyQSA,\n        rbuggyMatches,\n        matches,\n        contains,\n        // Instance-specific data\n    expando = \"sizzle\" + 1 * new Date(),\n        preferredDoc = window.document,\n        dirruns = 0,\n        done = 0,\n        classCache = createCache(),\n        tokenCache = createCache(),\n        compilerCache = createCache(),\n        sortOrder = function sortOrder(a, b) {\n      if (a === b) {\n        hasDuplicate = true;\n      }\n\n      return 0;\n    },\n        // General-purpose constants\n    MAX_NEGATIVE = 1 << 31,\n        // Instance methods\n    hasOwn = {}.hasOwnProperty,\n        arr = [],\n        pop = arr.pop,\n        push_native = arr.push,\n        push = arr.push,\n        slice = arr.slice,\n        // Use a stripped-down indexOf as it's faster than native\n    // http://jsperf.com/thor-indexof-vs-for/5\n    indexOf = function indexOf(list, elem) {\n      var i = 0,\n          len = list.length;\n\n      for (; i < len; i++) {\n        if (list[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n        booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        // Regular expressions\n    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n    whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        // http://www.w3.org/TR/css3-syntax/#characters\n    characterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n        // Loosely modeled on CSS identifier characters\n    // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n    identifier = characterEncoding.replace(\"w\", \"w#\"),\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")(?:\" + whitespace + // Operator (capture 2)\n    \"*([*^$|!~]?=)\" + whitespace + // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n    \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n        pseudos = \":(\" + characterEncoding + \")(?:\\\\((\" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n    // 1. quoted (capture 3; capture 4 or capture 5)\n    \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" + // 2. simple (capture 6)\n    \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" + // 3. anything else (capture 2)\n    \".*\" + \")\\\\)|)\",\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n        rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n        rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n        rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n        rattributeQuotes = new RegExp(\"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\"),\n        rpseudo = new RegExp(pseudos),\n        ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n        matchExpr = {\n      \"ID\": new RegExp(\"^#(\" + characterEncoding + \")\"),\n      \"CLASS\": new RegExp(\"^\\\\.(\" + characterEncoding + \")\"),\n      \"TAG\": new RegExp(\"^(\" + characterEncoding.replace(\"w\", \"w*\") + \")\"),\n      \"ATTR\": new RegExp(\"^\" + attributes),\n      \"PSEUDO\": new RegExp(\"^\" + pseudos),\n      \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n      \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n      // For use in libraries implementing .is()\n      // We use this for POS matching in `select`\n      \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        rinputs = /^(?:input|select|textarea|button)$/i,\n        rheader = /^h\\d$/i,\n        rnative = /^[^{]+\\{\\s*\\[native \\w/,\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        rsibling = /[+~]/,\n        rescape = /'|\\\\/g,\n        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\n        funescape = function funescape(_, escaped, escapedWhitespace) {\n      var high = \"0x\" + escaped - 0x10000; // NaN means non-codepoint\n      // Support: Firefox<24\n      // Workaround erroneous numeric interpretation of +\"0x\"\n\n      return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n      String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n    },\n        // Used for iframes\n    // See setDocument()\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE\n    unloadHandler = function unloadHandler() {\n      setDocument();\n    }; // Optimize for push.apply( _, NodeList )\n\n\n    try {\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n      // Detect silently failing push.apply\n\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: arr.length ? // Leverage slice if possible\n        function (target, els) {\n          push_native.apply(target, slice.call(els));\n        } : // Support: IE<9\n        // Otherwise append directly\n        function (target, els) {\n          var j = target.length,\n              i = 0; // Can't trust NodeList.length\n\n          while (target[j++] = els[i++]) {}\n\n          target.length = j - 1;\n        }\n      };\n    }\n\n    function Sizzle(selector, context, results, seed) {\n      var match, elem, m, nodeType, // QSA vars\n      i, groups, old, nid, newContext, newSelector;\n\n      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n        setDocument(context);\n      }\n\n      context = context || document;\n      results = results || [];\n      nodeType = context.nodeType;\n\n      if (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      }\n\n      if (!seed && documentIsHTML) {\n        // Try to shortcut find operations when possible (e.g., not under DocumentFragment)\n        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n          // Speed-up: Sizzle(\"#ID\")\n          if (m = match[1]) {\n            if (nodeType === 9) {\n              elem = context.getElementById(m); // Check parentNode to catch when Blackberry 4.6 returns\n              // nodes that are no longer in the document (jQuery #6963)\n\n              if (elem && elem.parentNode) {\n                // Handle the case where IE, Opera, and Webkit return items\n                // by name instead of ID\n                if (elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } else {\n                return results;\n              }\n            } else {\n              // Context is not a document\n              if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                results.push(elem);\n                return results;\n              }\n            } // Speed-up: Sizzle(\"TAG\")\n\n          } else if (match[2]) {\n            push.apply(results, context.getElementsByTagName(selector));\n            return results; // Speed-up: Sizzle(\".CLASS\")\n          } else if ((m = match[3]) && support.getElementsByClassName) {\n            push.apply(results, context.getElementsByClassName(m));\n            return results;\n          }\n        } // QSA path\n\n\n        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n          nid = old = expando;\n          newContext = context;\n          newSelector = nodeType !== 1 && selector; // qSA works strangely on Element-rooted queries\n          // We can work around this by specifying an extra ID on the root\n          // and working up from there (Thanks to Andrew Dupont for the technique)\n          // IE 8 doesn't work on object elements\n\n          if (nodeType === 1 && context.nodeName.toLowerCase() !== \"object\") {\n            groups = tokenize(selector);\n\n            if (old = context.getAttribute(\"id\")) {\n              nid = old.replace(rescape, \"\\\\$&\");\n            } else {\n              context.setAttribute(\"id\", nid);\n            }\n\n            nid = \"[id='\" + nid + \"'] \";\n            i = groups.length;\n\n            while (i--) {\n              groups[i] = nid + toSelector(groups[i]);\n            }\n\n            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n            newSelector = groups.join(\",\");\n          }\n\n          if (newSelector) {\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {} finally {\n              if (!old) {\n                context.removeAttribute(\"id\");\n              }\n            }\n          }\n        }\n      } // All others\n\n\n      return select(selector.replace(rtrim, \"$1\"), context, results, seed);\n    }\n    /**\n     * Create key-value caches of limited size\n     * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n\n\n    function createCache() {\n      var keys = [];\n\n      function cache(key, value) {\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key + \" \") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n\n        return cache[key + \" \"] = value;\n      }\n\n      return cache;\n    }\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n\n\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created div and expects a boolean result\n     */\n\n\n    function assert(fn) {\n      var div = document.createElement(\"div\");\n\n      try {\n        return !!fn(div);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (div.parentNode) {\n          div.parentNode.removeChild(div);\n        } // release memory in IE\n\n\n        div = null;\n      }\n    }\n    /**\n     * Adds the same handler for all of the specified attrs\n     * @param {String} attrs Pipe-separated list of attributes\n     * @param {Function} handler The method that will be applied\n     */\n\n\n    function addHandle(attrs, handler) {\n      var arr = attrs.split(\"|\"),\n          i = attrs.length;\n\n      while (i--) {\n        Expr.attrHandle[arr[i]] = handler;\n      }\n    }\n    /**\n     * Checks document order of two siblings\n     * @param {Element} a\n     * @param {Element} b\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n     */\n\n\n    function siblingCheck(a, b) {\n      var cur = b && a,\n          diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE); // Use IE sourceIndex if available on both nodes\n\n      if (diff) {\n        return diff;\n      } // Check if b follows a\n\n\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n\n      return a ? 1 : -1;\n    }\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n\n\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === \"input\" && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n\n\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === \"input\" || name === \"button\") && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n\n\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n              matchIndexes = fn([], seed.length, argument),\n              i = matchIndexes.length; // Match elements found at the specified indexes\n\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Checks a node for validity as a Sizzle context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n\n\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n    } // Expose support vars for convenience\n\n\n    support = Sizzle.support = {};\n    /**\n     * Detects XML nodes\n     * @param {Element|Object} elem An element or a document\n     * @returns {Boolean} True iff elem is a non-HTML XML node\n     */\n\n    isXML = Sizzle.isXML = function (elem) {\n      // documentElement is verified for cases where it doesn't yet exist\n      // (such as loading iframes in IE - #4833)\n      var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n      return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n    };\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n\n\n    setDocument = Sizzle.setDocument = function (node) {\n      var hasCompare,\n          parent,\n          doc = node ? node.ownerDocument || node : preferredDoc; // If no document and documentElement is available, return\n\n      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      } // Set our document\n\n\n      document = doc;\n      docElem = doc.documentElement;\n      parent = doc.defaultView; // Support: IE>8\n      // If iframe document is assigned to \"document\" variable and if iframe has been reloaded,\n      // IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936\n      // IE6-8 do not support the defaultView property so parent will be undefined\n\n      if (parent && parent !== parent.top) {\n        // IE11 does not have attachEvent, so all must suffer\n        if (parent.addEventListener) {\n          parent.addEventListener(\"unload\", unloadHandler, false);\n        } else if (parent.attachEvent) {\n          parent.attachEvent(\"onunload\", unloadHandler);\n        }\n      }\n      /* Support tests\n      ---------------------------------------------------------------------- */\n\n\n      documentIsHTML = !isXML(doc);\n      /* Attributes\n      ---------------------------------------------------------------------- */\n      // Support: IE<8\n      // Verify that getAttribute really returns attributes and not properties\n      // (excepting IE8 booleans)\n\n      support.attributes = assert(function (div) {\n        div.className = \"i\";\n        return !div.getAttribute(\"className\");\n      });\n      /* getElement(s)By*\n      ---------------------------------------------------------------------- */\n      // Check if getElementsByTagName(\"*\") returns only elements\n\n      support.getElementsByTagName = assert(function (div) {\n        div.appendChild(doc.createComment(\"\"));\n        return !div.getElementsByTagName(\"*\").length;\n      }); // Support: IE<9\n\n      support.getElementsByClassName = rnative.test(doc.getElementsByClassName); // Support: IE<10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don't pick up programatically-set names,\n      // so use a roundabout getElementsByName test\n\n      support.getById = assert(function (div) {\n        docElem.appendChild(div).id = expando;\n        return !doc.getElementsByName || !doc.getElementsByName(expando).length;\n      }); // ID find and filter\n\n      if (support.getById) {\n        Expr.find[\"ID\"] = function (id, context) {\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n            var m = context.getElementById(id); // Check parentNode to catch when Blackberry 4.6 returns\n            // nodes that are no longer in the document #6963\n\n            return m && m.parentNode ? [m] : [];\n          }\n        };\n\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute(\"id\") === attrId;\n          };\n        };\n      } else {\n        // Support: IE6/7\n        // getElementById is not reliable as a find shortcut\n        delete Expr.find[\"ID\"];\n\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n            return node && node.value === attrId;\n          };\n        };\n      } // Tag\n\n\n      Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n        if (typeof context.getElementsByTagName !== \"undefined\") {\n          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN\n        } else if (support.qsa) {\n          return context.querySelectorAll(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n            tmp = [],\n            i = 0,\n            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n        results = context.getElementsByTagName(tag); // Filter out possible comments\n\n        if (tag === \"*\") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n\n          return tmp;\n        }\n\n        return results;\n      }; // Class\n\n      Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n        if (documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n      // QSA and matchesSelector support\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n      // We allow this because of a bug in IE8/9 that throws an error\n      // whenever `document.activeElement` is accessed on an iframe\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\n      // See http://bugs.jquery.com/ticket/13378\n\n      rbuggyQSA = [];\n\n      if (support.qsa = rnative.test(doc.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (div) {\n          // Select is set to empty string on purpose\n          // This is to test IE's treatment of not explicitly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // http://bugs.jquery.com/ticket/12359\n          docElem.appendChild(div).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\f]' msallowcapture=''>\" + \"<option selected=''></option></select>\"; // Support: IE8, Opera 11-12.16\n          // Nothing should be selected when empty strings follow ^= or $= or *=\n          // The test attribute must be unknown in Opera but \"safe\" for WinRT\n          // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n          if (div.querySelectorAll(\"[msallowcapture^='']\").length) {\n            rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n          } // Support: IE8\n          // Boolean attributes and \"value\" are not treated correctly\n\n\n          if (!div.querySelectorAll(\"[selected]\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n          } // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+\n\n\n          if (!div.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n            rbuggyQSA.push(\"~=\");\n          } // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n\n\n          if (!div.querySelectorAll(\":checked\").length) {\n            rbuggyQSA.push(\":checked\");\n          } // Support: Safari 8+, iOS 8+\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\n          // In-page `selector#id sibing-combinator selector` fails\n\n\n          if (!div.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n            rbuggyQSA.push(\".#.+[+~]\");\n          }\n        });\n        assert(function (div) {\n          // Support: Windows 8 Native Apps\n          // The type and name attributes are restricted during .innerHTML assignment\n          var input = doc.createElement(\"input\");\n          input.setAttribute(\"type\", \"hidden\");\n          div.appendChild(input).setAttribute(\"name\", \"D\"); // Support: IE8\n          // Enforce case-sensitivity of name attribute\n\n          if (div.querySelectorAll(\"[name=d]\").length) {\n            rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n\n\n          if (!div.querySelectorAll(\":enabled\").length) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          } // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n          div.querySelectorAll(\"*,:x\");\n          rbuggyQSA.push(\",.*:\");\n        });\n      }\n\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (div) {\n          // Check to see if it's possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(div, \"div\"); // This should fail with an exception\n          // Gecko does not error, returns false instead\n\n          matches.call(div, \"[s!='']:x\");\n          rbuggyMatches.push(\"!=\", pseudos);\n        });\n      }\n\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n      /* Contains\n      ---------------------------------------------------------------------- */\n\n      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n      // Purposefully does not implement inclusive descendent\n      // As in, an element does not contain itself\n\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n        var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n      /* Sorting\n      ---------------------------------------------------------------------- */\n      // Document order sorting\n\n      sortOrder = hasCompare ? function (a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        } // Sort on method existence if only one input has compareDocumentPosition\n\n\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n        if (compare) {\n          return compare;\n        } // Calculate position if both inputs belong to the same document\n\n\n        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n        1; // Disconnected nodes\n\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n            return -1;\n          }\n\n          if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n            return 1;\n          } // Maintain original order\n\n\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n        }\n\n        return compare & 4 ? -1 : 1;\n      } : function (a, b) {\n        // Exit early if the nodes are identical\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        var cur,\n            i = 0,\n            aup = a.parentNode,\n            bup = b.parentNode,\n            ap = [a],\n            bp = [b]; // Parentless nodes are either documents or disconnected\n\n        if (!aup || !bup) {\n          return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        } // Otherwise we need full lists of their ancestors for comparison\n\n\n        cur = a;\n\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n\n        cur = b;\n\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        } // Walk down the tree looking for a discrepancy\n\n\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n\n        return i ? // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n      };\n      return doc;\n    };\n\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n\n    Sizzle.matchesSelector = function (elem, expr) {\n      // Set document vars if needed\n      if ((elem.ownerDocument || elem) !== document) {\n        setDocument(elem);\n      } // Make sure that attribute selectors are quoted\n\n\n      expr = expr.replace(rattributeQuotes, \"='$1']\");\n\n      if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes\n\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {}\n      }\n\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      if ((context.ownerDocument || context) !== document) {\n        setDocument(context);\n      }\n\n      return contains(context, elem);\n    };\n\n    Sizzle.attr = function (elem, name) {\n      // Set document vars if needed\n      if ((elem.ownerDocument || elem) !== document) {\n        setDocument(elem);\n      }\n\n      var fn = Expr.attrHandle[name.toLowerCase()],\n          // Don't get fooled by Object.prototype properties (jQuery #13807)\n      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    };\n\n    Sizzle.error = function (msg) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n    };\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n\n\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n          duplicates = [],\n          j = 0,\n          i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n      hasDuplicate = !support.detectDuplicates;\n      sortInput = !support.sortStable && results.slice(0);\n      results.sort(sortOrder);\n\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      } // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n\n\n      sortInput = null;\n      return results;\n    };\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n\n\n    getText = Sizzle.getText = function (elem) {\n      var node,\n          ret = \"\",\n          i = 0,\n          nodeType = elem.nodeType;\n\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (jQuery #11153)\n        if (typeof elem.textContent === \"string\") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      } // Do not include comment or processing instruction nodes\n\n\n      return ret;\n    };\n\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: true\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: true\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        \"ATTR\": function ATTR(match) {\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n          match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n          if (match[2] === \"~=\") {\n            match[3] = \" \" + match[3] + \" \";\n          }\n\n          return match.slice(0, 4);\n        },\n        \"CHILD\": function CHILD(match) {\n          /* matches from matchExpr[\"CHILD\"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n\n          if (match[1].slice(0, 3) === \"nth\") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            } // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n\n\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n            match[5] = +(match[7] + match[8] || match[3] === \"odd\"); // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n\n          return match;\n        },\n        \"PSEUDO\": function PSEUDO(match) {\n          var excess,\n              unquoted = !match[6] && match[2];\n\n          if (matchExpr[\"CHILD\"].test(match[0])) {\n            return null;\n          } // Accept quoted arguments as-is\n\n\n          if (match[3]) {\n            match[2] = match[4] || match[5] || \"\"; // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n          excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        \"TAG\": function TAG(nodeNameSelector) {\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === \"*\" ? function () {\n            return true;\n          } : function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        \"CLASS\": function CLASS(className) {\n          var pattern = classCache[className + \" \"];\n          return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n          });\n        },\n        \"ATTR\": function ATTR(name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n\n            if (result == null) {\n              return operator === \"!=\";\n            }\n\n            if (!operator) {\n              return true;\n            }\n\n            result += \"\";\n            return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n          };\n        },\n        \"CHILD\": function CHILD(type, what, argument, first, last) {\n          var simple = type.slice(0, 3) !== \"nth\",\n              forward = type.slice(-4) !== \"last\",\n              ofType = what === \"of-type\";\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, context, xml) {\n            var cache,\n                outerCache,\n                node,\n                diff,\n                nodeIndex,\n                start,\n                dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                parent = elem.parentNode,\n                name = ofType && elem.nodeName.toLowerCase(),\n                useCache = !xml && !ofType;\n\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  } // Reverse direction for :only-* (if we haven't yet done so)\n\n\n                  start = dir = type === \"only\" && !start && \"nextSibling\";\n                }\n\n                return true;\n              }\n\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                outerCache = parent[expando] || (parent[expando] = {});\n                cache = outerCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = cache[0] === dirruns && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n\n                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    outerCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                } // Use previously-cached element index if available\n\n              } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {\n                diff = cache[1]; // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n              } else {\n                // Use the same loop as above to seek `elem` from the start\n                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                    // Cache the index of each encountered element\n                    if (useCache) {\n                      (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];\n                    }\n\n                    if (node === elem) {\n                      break;\n                    }\n                  }\n                }\n              } // Incorporate the offset, then check against cycle size\n\n\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        \"PSEUDO\": function PSEUDO(pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo); // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n\n          if (fn[expando]) {\n            return fn(argument);\n          } // But maintain support for old signatures\n\n\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, \"\", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                  matched = fn(seed, argument),\n                  i = matched.length;\n\n              while (i--) {\n                idx = indexOf(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        \"not\": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n              results = [],\n              matcher = compile(selector.replace(rtrim, \"$1\"));\n          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n            var elem,\n                unmatched = matcher(seed, null, xml, []),\n                i = seed.length; // Match elements unmatched by `matcher`\n\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results); // Don't keep the element (issue #299)\n\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        \"has\": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        \"contains\": markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        \"lang\": markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || \"\")) {\n            Sizzle.error(\"unsupported lang: \" + lang);\n          }\n\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n            return false;\n          };\n        }),\n        // Miscellaneous\n        \"target\": function target(elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        \"root\": function root(elem) {\n          return elem === docElem;\n        },\n        \"focus\": function focus(elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        \"enabled\": function enabled(elem) {\n          return elem.disabled === false;\n        },\n        \"disabled\": function disabled(elem) {\n          return elem.disabled === true;\n        },\n        \"checked\": function checked(elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n        },\n        \"selected\": function selected(elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            elem.parentNode.selectedIndex;\n          }\n\n          return elem.selected === true;\n        },\n        // Contents\n        \"empty\": function empty(elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        \"parent\": function parent(elem) {\n          return !Expr.pseudos[\"empty\"](elem);\n        },\n        // Element/input types\n        \"header\": function header(elem) {\n          return rheader.test(elem.nodeName);\n        },\n        \"input\": function input(elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        \"button\": function button(elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === \"input\" && elem.type === \"button\" || name === \"button\";\n        },\n        \"text\": function text(elem) {\n          var attr;\n          return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && ( // Support: IE<8\n          // New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n          (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n        },\n        // Position-in-collection\n        \"first\": createPositionalPseudo(function () {\n          return [0];\n        }),\n        \"last\": createPositionalPseudo(function (matchIndexes, length) {\n          return [length - 1];\n        }),\n        \"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        \"even\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"odd\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"]; // Add button/input type pseudos\n\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    } // Easy API for creating new setFilters\n\n\n    function setFilters() {}\n\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n      var matched,\n          match,\n          tokens,\n          type,\n          soFar,\n          groups,\n          preFilters,\n          cached = tokenCache[selector + \" \"];\n\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don't consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n\n          groups.push(tokens = []);\n        }\n\n        matched = false; // Combinators\n\n        if (match = rcombinators.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, \" \")\n          });\n          soFar = soFar.slice(matched.length);\n        } // Filters\n\n\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n\n        if (!matched) {\n          break;\n        }\n      } // Return the length of the invalid excess\n      // if we're just parsing\n      // Otherwise, throw an error or return tokens\n\n\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    };\n\n    function toSelector(tokens) {\n      var i = 0,\n          len = tokens.length,\n          selector = \"\";\n\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n\n      return selector;\n    }\n\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n          checkNonElements = base && dir === \"parentNode\",\n          doneName = done++;\n      return combinator.first ? // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n      } : // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n            outerCache,\n            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {});\n\n              if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                outerCache[dir] = newCache; // A match means we're done; a fail means we have to keep checking\n\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      };\n    }\n\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n\n        return true;\n      } : matchers[0];\n    }\n\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n          len = contexts.length;\n\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n\n      return results;\n    }\n\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n          newUnmatched = [],\n          i = 0,\n          len = unmatched.length,\n          mapped = map != null;\n\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n\n      return newUnmatched;\n    }\n\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n            i,\n            elem,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n            // Get initial elements from seed or context\n        elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n        [] : // ...otherwise use results directly\n        results : matcherIn; // Find primary matches\n\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        } // Apply postFilter\n\n\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n          i = temp.length;\n\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n\n              postFinder(null, matcherOut = [], temp, xml);\n            } // Move matched elements from seed to results to keep them synchronized\n\n\n            i = matcherOut.length;\n\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          } // Add elements to results, through postFinder if defined\n\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n\n    function matcherFromTokens(tokens) {\n      var checkContext,\n          matcher,\n          j,\n          len = tokens.length,\n          leadingRelative = Expr.relative[tokens[0].type],\n          implicitRelative = leadingRelative || Expr.relative[\" \"],\n          i = leadingRelative ? 1 : 0,\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\n      matchContext = addCombinator(function (elem) {\n        return elem === checkContext;\n      }, implicitRelative, true),\n          matchAnyContext = addCombinator(function (elem) {\n        return indexOf(checkContext, elem) > -1;\n      }, implicitRelative, true),\n          matchers = [function (elem, context, xml) {\n        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n        checkContext = null;\n        return ret;\n      }];\n\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === \" \" ? \"*\" : \"\"\n            })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n\n          matchers.push(matcher);\n        }\n      }\n\n      return elementMatcher(matchers);\n    }\n\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n          byElement = elementMatchers.length > 0,\n          superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n        var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = \"0\",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n        elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n\n        if (outermost) {\n          outermostContext = context !== document && context;\n        } // Add elements passing elementMatchers directly to results\n        // Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n        // Support: IE<9, Safari\n        // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\n\n        for (; i !== len && (elem = elems[i]) != null; i++) {\n          if (byElement && elem) {\n            j = 0;\n\n            while (matcher = elementMatchers[j++]) {\n              if (matcher(elem, context, xml)) {\n                results.push(elem);\n                break;\n              }\n            }\n\n            if (outermost) {\n              dirruns = dirrunsUnique;\n            }\n          } // Track unmatched elements for set filters\n\n\n          if (bySet) {\n            // They will have gone through all possible matchers\n            if (elem = !matcher && elem) {\n              matchedCount--;\n            } // Lengthen the array for every element, matched or not\n\n\n            if (seed) {\n              unmatched.push(elem);\n            }\n          }\n        } // Apply set filters to unmatched elements\n\n\n        matchedCount += i;\n\n        if (bySet && i !== matchedCount) {\n          j = 0;\n\n          while (matcher = setMatchers[j++]) {\n            matcher(unmatched, setMatched, context, xml);\n          }\n\n          if (seed) {\n            // Reintegrate element matches to eliminate the need for sorting\n            if (matchedCount > 0) {\n              while (i--) {\n                if (!(unmatched[i] || setMatched[i])) {\n                  setMatched[i] = pop.call(results);\n                }\n              }\n            } // Discard index placeholder values to get only actual matches\n\n\n            setMatched = condense(setMatched);\n          } // Add matches to results\n\n\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n            Sizzle.uniqueSort(results);\n          }\n        } // Override manipulation of globals by nested matchers\n\n\n        if (outermost) {\n          dirruns = dirrunsUnique;\n          outermostContext = contextBackup;\n        }\n\n        return unmatched;\n      };\n\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n\n    compile = Sizzle.compile = function (selector, match\n    /* Internal Use Only */\n    ) {\n      var i,\n          setMatchers = [],\n          elementMatchers = [],\n          cached = compilerCache[selector + \" \"];\n\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n\n        i = match.length;\n\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        } // Cache the compiled function\n\n\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n        cached.selector = selector;\n      }\n\n      return cached;\n    };\n    /**\n     * A low-level selection function that works with Sizzle's compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with Sizzle.compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n\n\n    select = Sizzle.select = function (selector, context, results, seed) {\n      var i,\n          tokens,\n          token,\n          type,\n          find,\n          compiled = typeof selector === \"function\" && selector,\n          match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || []; // Try to minimize operations if there is no seed and only one group\n\n      if (match.length === 1) {\n        // Take a shortcut and set the context if the root selector is an ID\n        tokens = match[0] = match[0].slice(0);\n\n        if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n          if (!context) {\n            return results; // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n\n          selector = selector.slice(tokens.shift().value.length);\n        } // Fetch a seed set for right-to-left matching\n\n\n        i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\n        while (i--) {\n          token = tokens[i]; // Abort if we hit a combinator\n\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n\n              break;\n            }\n          }\n        }\n      } // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n\n\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    }; // One-time assignments\n    // Sort stability\n\n\n    support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando; // Support: Chrome 14-35+\n    // Always assume duplicates if they aren't passed to the comparison function\n\n    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n    // Detached nodes confoundingly follow *each other*\n\n    support.sortDetached = assert(function (div1) {\n      // Should return 1, but returns 4 (following)\n      return div1.compareDocumentPosition(document.createElement(\"div\")) & 1;\n    }); // Support: IE<8\n    // Prevent attribute/property \"interpolation\"\n    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n    if (!assert(function (div) {\n      div.innerHTML = \"<a href='#'></a>\";\n      return div.firstChild.getAttribute(\"href\") === \"#\";\n    })) {\n      addHandle(\"type|href|height|width\", function (elem, name, isXML) {\n        if (!isXML) {\n          return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n        }\n      });\n    } // Support: IE<9\n    // Use defaultValue in place of getAttribute(\"value\")\n\n\n    if (!support.attributes || !assert(function (div) {\n      div.innerHTML = \"<input/>\";\n      div.firstChild.setAttribute(\"value\", \"\");\n      return div.firstChild.getAttribute(\"value\") === \"\";\n    })) {\n      addHandle(\"value\", function (elem, name, isXML) {\n        if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n          return elem.defaultValue;\n        }\n      });\n    } // Support: IE<9\n    // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n    if (!assert(function (div) {\n      return div.getAttribute(\"disabled\") == null;\n    })) {\n      addHandle(booleans, function (elem, name, isXML) {\n        var val;\n\n        if (!isXML) {\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n        }\n      });\n    }\n\n    return Sizzle;\n  }(window);\n\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors;\n  jQuery.expr[\":\"] = jQuery.expr.pseudos;\n  jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  var rneedsContext = jQuery.expr.match.needsContext;\n  var rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/;\n  var risSimple = /^.[^:#\\[\\.,]*$/; // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, not) {\n    if (jQuery.isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        /* jshint -W018 */\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    }\n\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    }\n\n    if (typeof qualifier === \"string\") {\n      if (risSimple.test(qualifier)) {\n        return jQuery.filter(qualifier, elements, not);\n      }\n\n      qualifier = jQuery.filter(qualifier, elements);\n    }\n\n    return jQuery.grep(elements, function (elem) {\n      return indexOf.call(qualifier, elem) >= 0 !== not;\n    });\n  }\n\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n\n    if (not) {\n      expr = \":not(\" + expr + \")\";\n    }\n\n    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n\n  jQuery.fn.extend({\n    find: function find(selector) {\n      var i,\n          len = this.length,\n          ret = [],\n          self = this;\n\n      if (typeof selector !== \"string\") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      } // Needed because $( selector, context ) becomes $( context ).find( selector )\n\n\n      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);\n      ret.selector = this.selector ? this.selector + \" \" + selector : selector;\n      return ret;\n    },\n    filter: function filter(selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function not(selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function is(selector) {\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n      // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n      typeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  }); // Initialize a jQuery object\n  // A central reference to the root jQuery(document)\n\n  var rootjQuery,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n      init = jQuery.fn.init = function (selector, context) {\n    var match, elem; // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\n    if (!selector) {\n      return this;\n    } // Handle HTML strings\n\n\n    if (typeof selector === \"string\") {\n      if (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n      } else {\n        match = rquickExpr.exec(selector);\n      } // Match html or make sure no context is specified for #id\n\n\n      if (match && (match[1] || !context)) {\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (jQuery.isFunction(this[match])) {\n                this[match](context[match]); // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this; // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]); // Support: Blackberry 4.6\n          // gEBID returns nodes no longer in the document (#6963)\n\n          if (elem && elem.parentNode) {\n            // Inject the element directly into the jQuery object\n            this.length = 1;\n            this[0] = elem;\n          }\n\n          this.context = document;\n          this.selector = selector;\n          return this;\n        } // HANDLE: $(expr, $(...))\n\n      } else if (!context || context.jquery) {\n        return (context || rootjQuery).find(selector); // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      } // HANDLE: $(DOMElement)\n\n    } else if (selector.nodeType) {\n      this.context = this[0] = selector;\n      this.length = 1;\n      return this; // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (jQuery.isFunction(selector)) {\n      return typeof rootjQuery.ready !== \"undefined\" ? rootjQuery.ready(selector) : // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    if (selector.selector !== undefined) {\n      this.selector = selector.selector;\n      this.context = selector.context;\n    }\n\n    return jQuery.makeArray(selector, this);\n  }; // Give the init function the jQuery prototype for later instantiation\n\n\n  init.prototype = jQuery.fn; // Initialize central reference\n\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      // Methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.extend({\n    dir: function dir(elem, _dir, until) {\n      var matched = [],\n          truncate = until !== undefined;\n\n      while ((elem = elem[_dir]) && elem.nodeType !== 9) {\n        if (elem.nodeType === 1) {\n          if (truncate && jQuery(elem).is(until)) {\n            break;\n          }\n\n          matched.push(elem);\n        }\n      }\n\n      return matched;\n    },\n    sibling: function sibling(n, elem) {\n      var matched = [];\n\n      for (; n; n = n.nextSibling) {\n        if (n.nodeType === 1 && n !== elem) {\n          matched.push(n);\n        }\n      }\n\n      return matched;\n    }\n  });\n  jQuery.fn.extend({\n    has: function has(target) {\n      var targets = jQuery(target, this),\n          l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function closest(selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          matched = [],\n          pos = rneedsContext.test(selectors) || typeof selectors !== \"string\" ? jQuery(selectors, context || this.context) : 0;\n\n      for (; i < l; i++) {\n        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n          // Always skip document fragments\n          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : // Don't pass non-elements to Sizzle\n          cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n            matched.push(cur);\n            break;\n          }\n        }\n      }\n\n      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function index(elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // Index in selector\n\n\n      if (typeof elem === \"string\") {\n        return indexOf.call(jQuery(elem), this[0]);\n      } // Locate the position of the desired element\n\n\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function add(selector, context) {\n      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function addBack(selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function parent(elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function parents(elem) {\n      return jQuery.dir(elem, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(elem, i, until) {\n      return jQuery.dir(elem, \"parentNode\", until);\n    },\n    next: function next(elem) {\n      return sibling(elem, \"nextSibling\");\n    },\n    prev: function prev(elem) {\n      return sibling(elem, \"previousSibling\");\n    },\n    nextAll: function nextAll(elem) {\n      return jQuery.dir(elem, \"nextSibling\");\n    },\n    prevAll: function prevAll(elem) {\n      return jQuery.dir(elem, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(elem, i, until) {\n      return jQuery.dir(elem, \"nextSibling\", until);\n    },\n    prevUntil: function prevUntil(elem, i, until) {\n      return jQuery.dir(elem, \"previousSibling\", until);\n    },\n    siblings: function siblings(elem) {\n      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function children(elem) {\n      return jQuery.sibling(elem.firstChild);\n    },\n    contents: function contents(elem) {\n      return elem.contentDocument || jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n\n      if (name.slice(-5) !== \"Until\") {\n        selector = until;\n      }\n\n      if (selector && typeof selector === \"string\") {\n        matched = jQuery.filter(selector, matched);\n      }\n\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.unique(matched);\n        } // Reverse order for parents* and prev-derivatives\n\n\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n\n      return this.pushStack(matched);\n    };\n  });\n  var rnotwhite = /\\S+/g; // String to Object options format cache\n\n  var optionsCache = {}; // Convert String-formatted options into Object-formatted ones and store in cache\n\n  function createOptions(options) {\n    var object = optionsCache[options] = {};\n    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * \"fired\" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);\n\n    var // Last fire value (for non-forgettable lists)\n    memory,\n        // Flag to know if list was already fired\n    _fired,\n        // Flag to know if list is currently firing\n    firing,\n        // First callback to fire (used internally by add and fireWith)\n    firingStart,\n        // End of the loop when firing\n    firingLength,\n        // Index of currently firing callback (modified by remove if needed)\n    firingIndex,\n        // Actual callback list\n    list = [],\n        // Stack of fire calls for repeatable lists\n    stack = !options.once && [],\n        // Fire callbacks\n    fire = function fire(data) {\n      memory = options.memory && data;\n      _fired = true;\n      firingIndex = firingStart || 0;\n      firingStart = 0;\n      firingLength = list.length;\n      firing = true;\n\n      for (; list && firingIndex < firingLength; firingIndex++) {\n        if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n          memory = false; // To prevent further calls using add\n\n          break;\n        }\n      }\n\n      firing = false;\n\n      if (list) {\n        if (stack) {\n          if (stack.length) {\n            fire(stack.shift());\n          }\n        } else if (memory) {\n          list = [];\n        } else {\n          self.disable();\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function add() {\n        if (list) {\n          // First, we save the current length\n          var start = list.length;\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              var type = jQuery.type(arg);\n\n              if (type === \"function\") {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && type !== \"string\") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments); // Do we need to add the callbacks to the\n          // current firing batch?\n\n\n          if (firing) {\n            firingLength = list.length; // With memory, if we're not firing then\n            // we should call right away\n          } else if (memory) {\n            firingStart = start;\n            fire(memory);\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function remove() {\n        if (list) {\n          jQuery.each(arguments, function (_, arg) {\n            var index;\n\n            while ((index = jQuery.inArray(arg, list, index)) > -1) {\n              list.splice(index, 1); // Handle firing indexes\n\n              if (firing) {\n                if (index <= firingLength) {\n                  firingLength--;\n                }\n\n                if (index <= firingIndex) {\n                  firingIndex--;\n                }\n              }\n            }\n          });\n        }\n\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function has(fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\n      },\n      // Remove all callbacks from the list\n      empty: function empty() {\n        list = [];\n        firingLength = 0;\n        return this;\n      },\n      // Have the list do nothing anymore\n      disable: function disable() {\n        list = stack = memory = undefined;\n        return this;\n      },\n      // Is it disabled?\n      disabled: function disabled() {\n        return !list;\n      },\n      // Lock the list in its current state\n      lock: function lock() {\n        stack = undefined;\n\n        if (!memory) {\n          self.disable();\n        }\n\n        return this;\n      },\n      // Is it locked?\n      locked: function locked() {\n        return !stack;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function fireWith(context, args) {\n        if (list && (!_fired || stack)) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n\n          if (firing) {\n            stack.push(args);\n          } else {\n            fire(args);\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function fire() {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function fired() {\n        return !!_fired;\n      }\n    };\n\n    return self;\n  };\n\n  jQuery.extend({\n    Deferred: function Deferred(func) {\n      var tuples = [// action, add listener, listener list, final state\n      [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\")]],\n          _state = \"pending\",\n          _promise = {\n        state: function state() {\n          return _state;\n        },\n        always: function always() {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        then: function then()\n        /* fnDone, fnFail, fnProgress */\n        {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (i, tuple) {\n              var fn = jQuery.isFunction(fns[i]) && fns[i]; // deferred[ done | fail | progress ] for forwarding actions to newDefer\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && jQuery.isFunction(returned.promise)) {\n                  returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n                } else {\n                  newDefer[tuple[0] + \"With\"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function promise(obj) {\n          return obj != null ? jQuery.extend(obj, _promise) : _promise;\n        }\n      },\n          deferred = {}; // Keep pipe for back-compat\n\n      _promise.pipe = _promise.then; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[3]; // promise[ done | fail | progress ] = list.add\n\n        _promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = [ resolved | rejected ]\n            _state = stateString; // [ reject_list | resolve_list ].disable; progress_list.lock\n          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n        } // deferred[ resolve | reject | notify ]\n\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + \"With\"](this === deferred ? _promise : this, arguments);\n          return this;\n        };\n\n        deferred[tuple[0] + \"With\"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      _promise.promise(deferred); // Call given func if any\n\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function when(subordinate\n    /* , ..., subordinateN */\n    ) {\n      var i = 0,\n          resolveValues = _slice.call(arguments),\n          length = resolveValues.length,\n          // the count of uncompleted subordinates\n      remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\n          // the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n      deferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n          // Update function for both resolve and progress values\n      updateFunc = function updateFunc(i, contexts, values) {\n        return function (value) {\n          contexts[i] = this;\n          values[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n\n          if (values === progressValues) {\n            deferred.notifyWith(contexts, values);\n          } else if (! --remaining) {\n            deferred.resolveWith(contexts, values);\n          }\n        };\n      },\n          progressValues,\n          progressContexts,\n          resolveContexts; // Add listeners to Deferred subordinates; treat others as resolved\n\n\n      if (length > 1) {\n        progressValues = new Array(length);\n        progressContexts = new Array(length);\n        resolveContexts = new Array(length);\n\n        for (; i < length; i++) {\n          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\n            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n          } else {\n            --remaining;\n          }\n        }\n      } // If we're not waiting on anything, resolve the master\n\n\n      if (!remaining) {\n        deferred.resolveWith(resolveContexts, resolveValues);\n      }\n\n      return deferred.promise();\n    }\n  }); // The deferred used on DOM ready\n\n  var readyList;\n\n  jQuery.fn.ready = function (fn) {\n    // Add the callback\n    jQuery.ready.promise().done(fn);\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Hold (or release) the ready event\n    holdReady: function holdReady(hold) {\n      if (hold) {\n        jQuery.readyWait++;\n      } else {\n        jQuery.ready(true);\n      }\n    },\n    // Handle when the DOM is ready\n    ready: function ready(wait) {\n      // Abort if there are pending holds or we're already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]); // Trigger any bound ready events\n\n      if (jQuery.fn.triggerHandler) {\n        jQuery(document).triggerHandler(\"ready\");\n        jQuery(document).off(\"ready\");\n      }\n    }\n  });\n  /**\n   * The ready event handler and self cleanup method\n   */\n\n  function completed() {\n    document.removeEventListener(\"DOMContentLoaded\", completed, false);\n    window.removeEventListener(\"load\", completed, false);\n    jQuery.ready();\n  }\n\n  jQuery.ready.promise = function (obj) {\n    if (!readyList) {\n      readyList = jQuery.Deferred(); // Catch cases where $(document).ready() is called after the browser event has already occurred.\n      // We once tried to use readyState \"interactive\" here, but it caused issues like the one\n      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\n      if (document.readyState === \"complete\") {\n        // Handle it asynchronously to allow scripts the opportunity to delay ready\n        setTimeout(jQuery.ready);\n      } else {\n        // Use the handy event callback\n        document.addEventListener(\"DOMContentLoaded\", completed, false); // A fallback to window.onload, that will always work\n\n        window.addEventListener(\"load\", completed, false);\n      }\n    }\n\n    return readyList.promise(obj);\n  }; // Kick off the DOM ready check even if the user does not\n\n\n  jQuery.ready.promise(); // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it's a function\n\n  var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n        len = elems.length,\n        bulk = key == null; // Sets many values\n\n    if (jQuery.type(key) === \"object\") {\n      chainable = true;\n\n      for (i in key) {\n        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);\n      } // Sets one value\n\n    } else if (value !== undefined) {\n      chainable = true;\n\n      if (!jQuery.isFunction(value)) {\n        raw = true;\n      }\n\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null; // ...except when executing function values\n        } else {\n          bulk = fn;\n\n          fn = function fn(elem, key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n\n    return chainable ? elems : // Gets\n    bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;\n  };\n  /**\n   * Determines whether an object can have data\n   */\n\n\n  jQuery.acceptData = function (owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n\n    /* jshint -W018 */\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n\n  function Data() {\n    // Support: Android<4,\n    // Old WebKit does not have Object.preventExtensions/freeze method,\n    // return new empty object instead with no [[set]] accessor\n    Object.defineProperty(this.cache = {}, 0, {\n      get: function get() {\n        return {};\n      }\n    });\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.accepts = jQuery.acceptData;\n  Data.prototype = {\n    key: function key(owner) {\n      // We can accept data for non-element nodes in modern browsers,\n      // but we should not, see #8335.\n      // Always return the key for a frozen object.\n      if (!Data.accepts(owner)) {\n        return 0;\n      }\n\n      var descriptor = {},\n          // Check if the owner object already has a cache key\n      unlock = owner[this.expando]; // If not, create one\n\n      if (!unlock) {\n        unlock = Data.uid++; // Secure it in a non-enumerable, non-writable property\n\n        try {\n          descriptor[this.expando] = {\n            value: unlock\n          };\n          Object.defineProperties(owner, descriptor); // Support: Android<4\n          // Fallback to a less secure definition\n        } catch (e) {\n          descriptor[this.expando] = unlock;\n          jQuery.extend(owner, descriptor);\n        }\n      } // Ensure the cache object\n\n\n      if (!this.cache[unlock]) {\n        this.cache[unlock] = {};\n      }\n\n      return unlock;\n    },\n    set: function set(owner, data, value) {\n      var prop,\n          // There may be an unlock assigned to this node,\n      // if there is no entry for this \"owner\", create one inline\n      // and set the unlock as though an owner entry had always existed\n      unlock = this.key(owner),\n          cache = this.cache[unlock]; // Handle: [ owner, key, value ] args\n\n      if (typeof data === \"string\") {\n        cache[data] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Fresh assignments by object are shallow copied\n        if (jQuery.isEmptyObject(cache)) {\n          jQuery.extend(this.cache[unlock], data); // Otherwise, copy the properties one-by-one to the cache object\n        } else {\n          for (prop in data) {\n            cache[prop] = data[prop];\n          }\n        }\n      }\n\n      return cache;\n    },\n    get: function get(owner, key) {\n      // Either a valid cache is found, or will be created.\n      // New caches will be created and the unlock returned,\n      // allowing direct access to the newly created\n      // empty data object. A valid owner object must be provided.\n      var cache = this.cache[this.key(owner)];\n      return key === undefined ? cache : cache[key];\n    },\n    access: function access(owner, key, value) {\n      var stored; // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the \"read\" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n\n      if (key === undefined || key && typeof key === \"string\" && value === undefined) {\n        stored = this.get(owner, key);\n        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));\n      } // [*]When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the \"set\" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function remove(owner, key) {\n      var i,\n          name,\n          camel,\n          unlock = this.key(owner),\n          cache = this.cache[unlock];\n\n      if (key === undefined) {\n        this.cache[unlock] = {};\n      } else {\n        // Support array or space separated string of keys\n        if (jQuery.isArray(key)) {\n          // If \"name\" is an array of keys...\n          // When data is initially created, via (\"key\", \"val\") signature,\n          // keys will be converted to camelCase.\n          // Since there is no way to tell _how_ a key was added, remove\n          // both plain key and camelCase key. #12786\n          // This will only penalize the array argument path.\n          name = key.concat(key.map(jQuery.camelCase));\n        } else {\n          camel = jQuery.camelCase(key); // Try the string as a key before any manipulation\n\n          if (key in cache) {\n            name = [key, camel];\n          } else {\n            // If a key with the spaces exists, use it.\n            // Otherwise, create an array by matching non-whitespace\n            name = camel;\n            name = name in cache ? [name] : name.match(rnotwhite) || [];\n          }\n        }\n\n        i = name.length;\n\n        while (i--) {\n          delete cache[name[i]];\n        }\n      }\n    },\n    hasData: function hasData(owner) {\n      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});\n    },\n    discard: function discard(owner) {\n      if (owner[this.expando]) {\n        delete this.cache[owner[this.expando]];\n      }\n    }\n  };\n  var data_priv = new Data();\n  var data_user = new Data(); //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module's maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n  //\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      rmultiDash = /([A-Z])/g;\n\n  function dataAttr(elem, key, data) {\n    var name; // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n\n    if (data === undefined && elem.nodeType === 1) {\n      name = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === \"string\") {\n        try {\n          data = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null : // Only convert to a number if it doesn't change the string\n          +data + \"\" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;\n        } catch (e) {} // Make sure we set the data so it isn't changed later\n\n\n        data_user.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  jQuery.extend({\n    hasData: function hasData(elem) {\n      return data_user.hasData(elem) || data_priv.hasData(elem);\n    },\n    data: function data(elem, name, _data) {\n      return data_user.access(elem, name, _data);\n    },\n    removeData: function removeData(elem, name) {\n      data_user.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to data_priv methods, these can be deprecated.\n    _data: function _data(elem, name, data) {\n      return data_priv.access(elem, name, data);\n    },\n    _removeData: function _removeData(elem, name) {\n      data_priv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function data(key, value) {\n      var i,\n          name,\n          data,\n          elem = this[0],\n          attrs = elem && elem.attributes; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = data_user.get(elem);\n\n          if (elem.nodeType === 1 && !data_priv.get(elem, \"hasDataAttrs\")) {\n            i = attrs.length;\n\n            while (i--) {\n              // Support: IE11+\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n\n                if (name.indexOf(\"data-\") === 0) {\n                  name = jQuery.camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n\n            data_priv.set(elem, \"hasDataAttrs\", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (_typeof(key) === \"object\") {\n        return this.each(function () {\n          data_user.set(this, key);\n        });\n      }\n\n      return access(this, function (value) {\n        var data,\n            camelKey = jQuery.camelCase(key); // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // with the key as-is\n          data = data_user.get(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to get data from the cache\n          // with the key camelized\n\n\n          data = data_user.get(elem, camelKey);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to \"discover\" the data in\n          // HTML5 custom data-* attrs\n\n\n          data = dataAttr(elem, camelKey, undefined);\n\n          if (data !== undefined) {\n            return data;\n          } // We tried really hard, but the data doesn't exist.\n\n\n          return;\n        } // Set the data...\n\n\n        this.each(function () {\n          // First, attempt to store a copy or reference of any\n          // data that might've been store with a camelCased key.\n          var data = data_user.get(this, camelKey); // For HTML5 data-* attribute interop, we have to\n          // store property names with dashes in a camelCase form.\n          // This might not apply to all properties...*\n\n          data_user.set(this, camelKey, value); // *... In the case of properties that might _actually_\n          // have dashes, we need to also store a copy of that\n          // unchanged property.\n\n          if (key.indexOf(\"-\") !== -1 && data !== undefined) {\n            data_user.set(this, key, value);\n          }\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function removeData(key) {\n      return this.each(function () {\n        data_user.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function queue(elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || \"fx\") + \"queue\";\n        queue = data_priv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || jQuery.isArray(data)) {\n            queue = data_priv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function dequeue(elem, type) {\n      type = type || \"fx\";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function next() {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === \"inprogress\") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === \"fx\") {\n          queue.unshift(\"inprogress\");\n        } // Clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function _queueHooks(elem, type) {\n      var key = type + \"queueHooks\";\n      return data_priv.get(elem, key) || data_priv.access(elem, key, {\n        empty: jQuery.Callbacks(\"once memory\").add(function () {\n          data_priv.remove(elem, [type + \"queue\", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function queue(type, data) {\n      var setter = 2;\n\n      if (typeof type !== \"string\") {\n        data = type;\n        type = \"fx\";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === \"fx\" && queue[0] !== \"inprogress\") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function dequeue(type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function clearQueue(type) {\n      return this.queue(type || \"fx\", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function promise(type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function resolve() {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== \"string\") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || \"fx\";\n\n      while (i--) {\n        tmp = data_priv.get(elements[i], type + \"queueHooks\");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n\n  var isHidden = function isHidden(elem, el) {\n    // isHidden might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem;\n    return jQuery.css(elem, \"display\") === \"none\" || !jQuery.contains(elem.ownerDocument, elem);\n  };\n\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n\n  (function () {\n    var fragment = document.createDocumentFragment(),\n        div = fragment.appendChild(document.createElement(\"div\")),\n        input = document.createElement(\"input\"); // Support: Safari<=5.1\n    // Check state lost if the name is set (#11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (#14901)\n\n    input.setAttribute(\"type\", \"radio\");\n    input.setAttribute(\"checked\", \"checked\");\n    input.setAttribute(\"name\", \"t\");\n    div.appendChild(input); // Support: Safari<=5.1, Android<4.2\n    // Older WebKit doesn't clone checked state correctly in fragments\n\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE<=11+\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n    div.innerHTML = \"<textarea>x</textarea>\";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n  })();\n\n  var strundefined = typeof undefined === \"undefined\" ? \"undefined\" : _typeof(undefined);\n  support.focusinBubbles = \"onfocusin\" in window;\n  var rkeyEvent = /^key/,\n      rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\n      rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  }\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function add(elem, types, handler, data, selector) {\n      var handleObjIn,\n          eventHandle,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = data_priv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)\n\n      if (!elemData) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element's event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = {};\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return _typeof(jQuery) !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      } // Handle multiple events separated by a space\n\n\n      types = (types || \"\").match(rnotwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n        if (!type) {\n          continue;\n        } // If event changes its type, use the special event handlers for the changed type\n\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(\".\")\n        }, handleObjIn); // Init the event handler queue if we're the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle, false);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element's handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\n      var j,\n          origCount,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = data_priv.hasData(elem) && data_priv.get(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || \"\").match(rnotwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove the expando if it's no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        delete elemData.handle;\n        data_priv.remove(elem, \"events\");\n      }\n    },\n    trigger: function trigger(event, data, elem, onlyHandlers) {\n      var i,\n          cur,\n          tmp,\n          bubbleType,\n          ontype,\n          handle,\n          special,\n          eventPath = [elem || document],\n          type = hasOwn.call(event, \"type\") ? event.type : event,\n          namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n      cur = tmp = elem = elem || document; // Don't do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we're not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(\".\") >= 0) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(\".\");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(\":\") < 0 && \"on\" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === \"object\" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(\".\");\n      event.namespace_re = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (data_priv.get(cur, \"events\") || {})[event.type] && data_priv.get(cur, \"handle\");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && handle.apply && jQuery.acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {\n          // Call a native DOM method on the target with the same name name as the event.\n          // Don't do default actions on window, that's where global variables be (#6170)\n          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {\n            // Don't re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n            elem[type]();\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    dispatch: function dispatch(event) {\n      // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(event);\n\n      var i,\n          j,\n          ret,\n          matched,\n          handleObj,\n          handlerQueue = [],\n          args = _slice.call(arguments),\n          handlers = (data_priv.get(this, \"events\") || {})[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n\n      args[0] = event;\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // Triggered event must either 1) have no namespace, or 2) have namespace(s)\n          // a subset or equal to those in the bound event (both can have no namespace).\n          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function handlers(event, _handlers) {\n      var i,\n          matches,\n          sel,\n          handleObj,\n          handlerQueue = [],\n          delegateCount = _handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n      // Black-hole SVG <use> instance trees (#13180)\n      // Avoid non-left-click bubbling in Firefox (#3861)\n\n      if (delegateCount && cur.nodeType && (!event.button || event.type !== \"click\")) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.disabled !== true || event.type !== \"click\") {\n            matches = [];\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + \" \";\n\n              if (matches[sel] === undefined) {\n                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matches[sel]) {\n                matches.push(handleObj);\n              }\n            }\n\n            if (matches.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matches\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      if (delegateCount < _handlers.length) {\n        handlerQueue.push({\n          elem: this,\n          handlers: _handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    // Includes some event props shared by KeyEvent and MouseEvent\n    props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n    fixHooks: {},\n    keyHooks: {\n      props: \"char charCode key keyCode\".split(\" \"),\n      filter: function filter(event, original) {\n        // Add which for key events\n        if (event.which == null) {\n          event.which = original.charCode != null ? original.charCode : original.keyCode;\n        }\n\n        return event;\n      }\n    },\n    mouseHooks: {\n      props: \"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n      filter: function filter(event, original) {\n        var eventDoc,\n            doc,\n            body,\n            button = original.button; // Calculate pageX/Y if missing and clientX/Y available\n\n        if (event.pageX == null && original.clientX != null) {\n          eventDoc = event.target.ownerDocument || document;\n          doc = eventDoc.documentElement;\n          body = eventDoc.body;\n          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n        } // Add which for click: 1 === left; 2 === middle; 3 === right\n        // Note: button is not normalized, so don't use it\n\n\n        if (!event.which && button !== undefined) {\n          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n        }\n\n        return event;\n      }\n    },\n    fix: function fix(event) {\n      if (event[jQuery.expando]) {\n        return event;\n      } // Create a writable copy of the event object and normalize some properties\n\n\n      var i,\n          prop,\n          copy,\n          type = event.type,\n          originalEvent = event,\n          fixHook = this.fixHooks[type];\n\n      if (!fixHook) {\n        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};\n      }\n\n      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n      event = new jQuery.Event(originalEvent);\n      i = copy.length;\n\n      while (i--) {\n        prop = copy[i];\n        event[prop] = originalEvent[prop];\n      } // Support: Cordova 2.5 (WebKit) (#13255)\n      // All events should have a target; Cordova deviceready doesn't\n\n\n      if (!event.target) {\n        event.target = document;\n      } // Support: Safari 6.0+, Chrome<28\n      // Target should not be a text node (#504, #13143)\n\n\n      if (event.target.nodeType === 3) {\n        event.target = event.target.parentNode;\n      }\n\n      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      focus: {\n        // Fire native event if possible so blur/focus sequence is correct\n        trigger: function trigger() {\n          if (this !== safeActiveElement() && this.focus) {\n            this.focus();\n            return false;\n          }\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function trigger() {\n          if (this === safeActiveElement() && this.blur) {\n            this.blur();\n            return false;\n          }\n        },\n        delegateType: \"focusout\"\n      },\n      click: {\n        // For checkbox, fire native event so checked state will be right\n        trigger: function trigger() {\n          if (this.type === \"checkbox\" && this.click && jQuery.nodeName(this, \"input\")) {\n            this.click();\n            return false;\n          }\n        },\n        // For cross-browser consistency, don't fire native .click() on links\n        _default: function _default(event) {\n          return jQuery.nodeName(event.target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(event) {\n          // Support: Firefox 20+\n          // Firefox doesn't alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    },\n    simulate: function simulate(type, elem, event, bubble) {\n      // Piggyback on a donor event to simulate a different one.\n      // Fake originalEvent to avoid donor's stopPropagation, but if the\n      // simulated event prevents default then we do the same on the donor.\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true,\n        originalEvent: {}\n      });\n\n      if (bubble) {\n        jQuery.event.trigger(e, null, elem);\n      } else {\n        jQuery.event.dispatch.call(elem, e);\n      }\n\n      if (e.isDefaultPrevented()) {\n        event.preventDefault();\n      }\n    }\n  };\n\n  jQuery.removeEvent = function (elem, type, handle) {\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle, false);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android<4.0\n      src.returnValue === false ? returnTrue : returnFalse; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn't have one\n\n\n    this.timeStamp = src && src.timeStamp || jQuery.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (e && e.preventDefault) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (e && e.stopPropagation) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && e.stopImmediatePropagation) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    }\n  }; // Create mouseenter/leave events using mouseover/out and event-time checks\n  // Support: Chrome 15+\n\n  jQuery.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function handle(event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mousenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  }); // Support: Firefox, Chrome, Safari\n  // Create \"bubbling\" focus and blur events\n\n  if (!support.focusinBubbles) {\n    jQuery.each({\n      focus: \"focusin\",\n      blur: \"focusout\"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function handler(event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function setup() {\n          var doc = this.ownerDocument || this,\n              attaches = data_priv.access(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n\n          data_priv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function teardown() {\n          var doc = this.ownerDocument || this,\n              attaches = data_priv.access(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            data_priv.remove(doc, fix);\n          } else {\n            data_priv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n\n  jQuery.fn.extend({\n    on: function on(types, selector, data, fn,\n    /*INTERNAL*/\n    one) {\n      var origFn, type; // Types can be a map of types/handlers\n\n      if (_typeof(types) === \"object\") {\n        // ( types-Object, selector, data )\n        if (typeof selector !== \"string\") {\n          // ( types-Object, data )\n          data = data || selector;\n          selector = undefined;\n        }\n\n        for (type in types) {\n          this.on(type, selector, data, types[type], one);\n        }\n\n        return this;\n      }\n\n      if (data == null && fn == null) {\n        // ( types, fn )\n        fn = selector;\n        data = selector = undefined;\n      } else if (fn == null) {\n        if (typeof selector === \"string\") {\n          // ( types, selector, fn )\n          fn = data;\n          data = undefined;\n        } else {\n          // ( types, data, fn )\n          fn = data;\n          data = selector;\n          selector = undefined;\n        }\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      } else if (!fn) {\n        return this;\n      }\n\n      if (one === 1) {\n        origFn = fn;\n\n        fn = function fn(event) {\n          // Can use an empty set, since event contains the info\n          jQuery().off(event);\n          return origFn.apply(this, arguments);\n        }; // Use same guid so caller can remove using origFn\n\n\n        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n      }\n\n      return this.each(function () {\n        jQuery.event.add(this, types, fn, data, selector);\n      });\n    },\n    one: function one(types, selector, data, fn) {\n      return this.on(types, selector, data, fn, 1);\n    },\n    off: function off(types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (_typeof(types) === \"object\") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === \"function\") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    },\n    trigger: function trigger(type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function triggerHandler(type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  });\n  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n      rtagName = /<([\\w:]+)/,\n      rhtml = /<|&#?\\w+;/,\n      rnoInnerhtml = /<(?:script|style|link)/i,\n      // checked=\"checked\" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rscriptType = /^$|\\/(?:java|ecma)script/i,\n      rscriptTypeMasked = /^true\\/(.*)/,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n      // We have to close these tags to support XHTML (#13200)\n  wrapMap = {\n    // Support: IE9\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  }; // Support: IE9\n\n  wrapMap.optgroup = wrapMap.option;\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td; // Support: 1.x compatibility\n  // Manipulating tables requires a tbody\n\n  function manipulationTarget(elem, content) {\n    return jQuery.nodeName(elem, \"table\") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\") ? elem.getElementsByTagName(\"tbody\")[0] || elem.appendChild(elem.ownerDocument.createElement(\"tbody\")) : elem;\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    var match = rscriptTypeMasked.exec(elem.type);\n\n    if (match) {\n      elem.type = match[1];\n    } else {\n      elem.removeAttribute(\"type\");\n    }\n\n    return elem;\n  } // Mark scripts as having already been evaluated\n\n\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      data_priv.set(elems[i], \"globalEval\", !refElements || data_priv.get(refElements[i], \"globalEval\"));\n    }\n  }\n\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n    if (dest.nodeType !== 1) {\n      return;\n    } // 1. Copy private data: events, handlers, etc.\n\n\n    if (data_priv.hasData(src)) {\n      pdataOld = data_priv.access(src);\n      pdataCur = data_priv.set(dest, pdataOld);\n      events = pdataOld.events;\n\n      if (events) {\n        delete pdataCur.handle;\n        pdataCur.events = {};\n\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    } // 2. Copy user data\n\n\n    if (data_user.hasData(src)) {\n      udataOld = data_user.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      data_user.set(dest, udataCur);\n    }\n  }\n\n  function getAll(context, tag) {\n    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || \"*\") : context.querySelectorAll ? context.querySelectorAll(tag || \"*\") : [];\n    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;\n  } // Fix IE bugs, see support tests\n\n\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n    if (nodeName === \"input\" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === \"input\" || nodeName === \"textarea\") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  jQuery.extend({\n    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n          l,\n          srcElements,\n          destElements,\n          clone = elem.cloneNode(true),\n          inPage = jQuery.contains(elem.ownerDocument, elem); // Fix IE cloning issues\n\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, \"script\");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n      } // Return the cloned set\n\n\n      return clone;\n    },\n    buildFragment: function buildFragment(elems, context, scripts, selection) {\n      var elem,\n          tmp,\n          tag,\n          wrap,\n          contains,\n          j,\n          fragment = context.createDocumentFragment(),\n          nodes = [],\n          i = 0,\n          l = elems.length;\n\n      for (; i < l; i++) {\n        elem = elems[i];\n\n        if (elem || elem === 0) {\n          // Add nodes directly\n          if (jQuery.type(elem) === \"object\") {\n            // Support: QtWebKit, PhantomJS\n            // push.apply(_, arraylike) throws on ancient WebKit\n            jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n          } else if (!rhtml.test(elem)) {\n            nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n          } else {\n            tmp = tmp || fragment.appendChild(context.createElement(\"div\")); // Deserialize a standard representation\n\n            tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n            wrap = wrapMap[tag] || wrapMap._default;\n            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, \"<$1></$2>\") + wrap[2]; // Descend through wrappers to the right content\n\n            j = wrap[0];\n\n            while (j--) {\n              tmp = tmp.lastChild;\n            } // Support: QtWebKit, PhantomJS\n            // push.apply(_, arraylike) throws on ancient WebKit\n\n\n            jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n            tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n            tmp.textContent = \"\";\n          }\n        }\n      } // Remove wrapper from fragment\n\n\n      fragment.textContent = \"\";\n      i = 0;\n\n      while (elem = nodes[i++]) {\n        // #4087 - If origin and destination elements are the same, and this is\n        // that element, do not do anything\n        if (selection && jQuery.inArray(elem, selection) !== -1) {\n          continue;\n        }\n\n        contains = jQuery.contains(elem.ownerDocument, elem); // Append to fragment\n\n        tmp = getAll(fragment.appendChild(elem), \"script\"); // Preserve script evaluation history\n\n        if (contains) {\n          setGlobalEval(tmp);\n        } // Capture executables\n\n\n        if (scripts) {\n          j = 0;\n\n          while (elem = tmp[j++]) {\n            if (rscriptType.test(elem.type || \"\")) {\n              scripts.push(elem);\n            }\n          }\n        }\n      }\n\n      return fragment;\n    },\n    cleanData: function cleanData(elems) {\n      var data,\n          elem,\n          type,\n          key,\n          special = jQuery.event.special,\n          i = 0;\n\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (jQuery.acceptData(elem)) {\n          key = elem[data_priv.expando];\n\n          if (key && (data = data_priv.cache[key])) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            }\n\n            if (data_priv.cache[key]) {\n              // Discard any remaining `private` data\n              delete data_priv.cache[key];\n            }\n          }\n        } // Discard any remaining `user` data\n\n\n        delete data_user.cache[elem[data_user.expando]];\n      }\n    }\n  });\n  jQuery.fn.extend({\n    text: function text(value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function append() {\n      return this.domManip(arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return this.domManip(arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return this.domManip(arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function after() {\n      return this.domManip(arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    remove: function remove(selector, keepData\n    /* Internal Use Only */\n    ) {\n      var elem,\n          elems = selector ? jQuery.filter(selector, this) : this,\n          i = 0;\n\n      for (; (elem = elems[i]) != null; i++) {\n        if (!keepData && elem.nodeType === 1) {\n          jQuery.cleanData(getAll(elem));\n        }\n\n        if (elem.parentNode) {\n          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {\n            setGlobalEval(getAll(elem, \"script\"));\n          }\n\n          elem.parentNode.removeChild(elem);\n        }\n      }\n\n      return this;\n    },\n    empty: function empty() {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n          elem.textContent = \"\";\n        }\n      }\n\n      return this;\n    },\n    clone: function clone(dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function html(value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n          value = value.replace(rxhtmlTag, \"<$1></$2>\");\n\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var arg = arguments[0]; // Make the changes, replacing each context element with the new content\n\n      this.domManip(arguments, function (elem) {\n        arg = this.parentNode;\n        jQuery.cleanData(getAll(this));\n\n        if (arg) {\n          arg.replaceChild(elem, this);\n        }\n      }); // Force removal if there was no new content (e.g., from empty arguments)\n\n      return arg && (arg.length || arg.nodeType) ? this : this.remove();\n    },\n    detach: function detach(selector) {\n      return this.remove(selector, true);\n    },\n    domManip: function domManip(args, callback) {\n      // Flatten any nested arrays\n      args = concat.apply([], args);\n      var fragment,\n          first,\n          scripts,\n          hasScripts,\n          node,\n          doc,\n          i = 0,\n          l = this.length,\n          set = this,\n          iNoClone = l - 1,\n          value = args[0],\n          isFunction = jQuery.isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit\n\n      if (isFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n        return this.each(function (index) {\n          var self = set.eq(index);\n\n          if (isFunction) {\n            args[0] = value.call(this, index, self.html());\n          }\n\n          self.domManip(args, callback);\n        });\n      }\n\n      if (l) {\n        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);\n        first = fragment.firstChild;\n\n        if (fragment.childNodes.length === 1) {\n          fragment = first;\n        }\n\n        if (first) {\n          scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n          hasScripts = scripts.length; // Use the original fragment for the last item instead of the first because it can end up\n          // being emptied incorrectly in certain situations (#8070).\n\n          for (; i < l; i++) {\n            node = fragment;\n\n            if (i !== iNoClone) {\n              node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n              if (hasScripts) {\n                // Support: QtWebKit\n                // jQuery.merge because push.apply(_, arraylike) throws\n                jQuery.merge(scripts, getAll(node, \"script\"));\n              }\n            }\n\n            callback.call(this[i], node, i);\n          }\n\n          if (hasScripts) {\n            doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n            jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n            for (i = 0; i < hasScripts; i++) {\n              node = scripts[i];\n\n              if (rscriptType.test(node.type || \"\") && !data_priv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n                if (node.src) {\n                  // Optional AJAX dependency, but won't run scripts if not present\n                  if (jQuery._evalUrl) {\n                    jQuery._evalUrl(node.src);\n                  }\n                } else {\n                  jQuery.globalEval(node.textContent.replace(rcleanScript, \"\"));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return this;\n    }\n  });\n  jQuery.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1,\n          i = 0;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Support: QtWebKit\n        // .get() because push.apply(_, arraylike) throws\n\n        push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  var iframe,\n      elemdisplay = {};\n  /**\n   * Retrieve the actual display of a element\n   * @param {String} name nodeName of the element\n   * @param {Object} doc Document object\n   */\n  // Called only from within defaultDisplay\n\n  function actualDisplay(name, doc) {\n    var style,\n        elem = jQuery(doc.createElement(name)).appendTo(doc.body),\n        // getDefaultComputedStyle might be reliably used only on attached element\n    display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? // Use of this method is a temporary fix (more like optimization) until something better comes along,\n    // since it was removed from specification and supported only in FF\n    style.display : jQuery.css(elem[0], \"display\"); // We don't have any data stored on the element,\n    // so use \"detach\" method as fast way to get rid of the element\n\n    elem.detach();\n    return display;\n  }\n  /**\n   * Try to determine the default display value of an element\n   * @param {String} nodeName\n   */\n\n\n  function defaultDisplay(nodeName) {\n    var doc = document,\n        display = elemdisplay[nodeName];\n\n    if (!display) {\n      display = actualDisplay(nodeName, doc); // If the simple way fails, read from inside an iframe\n\n      if (display === \"none\" || !display) {\n        // Use the already-created iframe if possible\n        iframe = (iframe || jQuery(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(doc.documentElement); // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\n        doc = iframe[0].contentDocument; // Support: IE\n\n        doc.write();\n        doc.close();\n        display = actualDisplay(nodeName, doc);\n        iframe.detach();\n      } // Store the correct default display\n\n\n      elemdisplay[nodeName] = display;\n    }\n\n    return display;\n  }\n\n  var rmargin = /^margin/;\n  var rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n  var getStyles = function getStyles(elem) {\n    // Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n    if (elem.ownerDocument.defaultView.opener) {\n      return elem.ownerDocument.defaultView.getComputedStyle(elem, null);\n    }\n\n    return window.getComputedStyle(elem, null);\n  };\n\n  function curCSS(elem, name, computed) {\n    var width,\n        minWidth,\n        maxWidth,\n        ret,\n        style = elem.style;\n    computed = computed || getStyles(elem); // Support: IE9\n    // getPropertyValue is only needed for .css('filter') (#12537)\n\n    if (computed) {\n      ret = computed.getPropertyValue(name) || computed[name];\n    }\n\n    if (computed) {\n      if (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n        ret = jQuery.style(elem, name);\n      } // Support: iOS < 6\n      // A tribute to the \"awesome hack by Dean Edwards\"\n      // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n      // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\n\n      if (rnumnonpx.test(ret) && rmargin.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width; // Revert the changed values\n\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n\n    return ret !== undefined ? // Support: IE\n    // IE returns zIndex value as an integer.\n    ret + \"\" : ret;\n  }\n\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we'll check on the first run if it's really needed.\n    return {\n      get: function get() {\n        if (conditionFn()) {\n          // Hook not needed (or it's not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        } // Hook needed; redefine it so that the support test is not executed again.\n\n\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n\n  (function () {\n    var pixelPositionVal,\n        boxSizingReliableVal,\n        docElem = document.documentElement,\n        container = document.createElement(\"div\"),\n        div = document.createElement(\"div\");\n\n    if (!div.style) {\n      return;\n    } // Support: IE9-11+\n    // Style of cloned element affects source element cloned (#8908)\n\n\n    div.style.backgroundClip = \"content-box\";\n    div.cloneNode(true).style.backgroundClip = \"\";\n    support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n    container.style.cssText = \"border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;\" + \"position:absolute\";\n    container.appendChild(div); // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they're executed at the same time to save the second computation.\n\n    function computePixelPositionAndBoxSizingReliable() {\n      div.style.cssText = // Support: Firefox<29, Android 2.3\n      // Vendor-prefix box-sizing\n      \"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;\" + \"box-sizing:border-box;display:block;margin-top:1%;top:1%;\" + \"border:1px;padding:1px;width:4px;position:absolute\";\n      div.innerHTML = \"\";\n      docElem.appendChild(container);\n      var divStyle = window.getComputedStyle(div, null);\n      pixelPositionVal = divStyle.top !== \"1%\";\n      boxSizingReliableVal = divStyle.width === \"4px\";\n      docElem.removeChild(container);\n    } // Support: node.js jsdom\n    // Don't assume that getComputedStyle is a property of the global object\n\n\n    if (window.getComputedStyle) {\n      jQuery.extend(support, {\n        pixelPosition: function pixelPosition() {\n          // This test is executed only once but we still do memoizing\n          // since we can use the boxSizingReliable pre-computing.\n          // No need to check if the test was already performed, though.\n          computePixelPositionAndBoxSizingReliable();\n          return pixelPositionVal;\n        },\n        boxSizingReliable: function boxSizingReliable() {\n          if (boxSizingReliableVal == null) {\n            computePixelPositionAndBoxSizingReliable();\n          }\n\n          return boxSizingReliableVal;\n        },\n        reliableMarginRight: function reliableMarginRight() {\n          // Support: Android 2.3\n          // Check if div with explicit width and no margin-right incorrectly\n          // gets computed margin-right based on width of container. (#3333)\n          // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n          // This support function is only executed once so no memoizing is needed.\n          var ret,\n              marginDiv = div.appendChild(document.createElement(\"div\")); // Reset CSS: box-sizing; display; margin; border; padding\n\n          marginDiv.style.cssText = div.style.cssText = // Support: Firefox<29, Android 2.3\n          // Vendor-prefix box-sizing\n          \"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" + \"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\n          marginDiv.style.marginRight = marginDiv.style.width = \"0\";\n          div.style.width = \"1px\";\n          docElem.appendChild(container);\n          ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);\n          docElem.removeChild(container);\n          div.removeChild(marginDiv);\n          return ret;\n        }\n      });\n    }\n  })(); // A method for quickly swapping in/out CSS properties to get correct calculations.\n\n\n  jQuery.swap = function (elem, options, callback, args) {\n    var ret,\n        name,\n        old = {}; // Remember the old values, and insert the new ones\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.apply(elem, args || []); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n\n  var // Swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rnumsplit = new RegExp(\"^(\" + pnum + \")(.*)$\", \"i\"),\n      rrelNum = new RegExp(\"^([+-])=(\" + pnum + \")\", \"i\"),\n      cssShow = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      cssNormalTransform = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  },\n      cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"]; // Return a css property mapped to a potentially vendor prefixed property\n\n  function vendorPropName(style, name) {\n    // Shortcut for names that are not vendor prefixed\n    if (name in style) {\n      return name;\n    } // Check for vendor prefixed names\n\n\n    var capName = name[0].toUpperCase() + name.slice(1),\n        origName = name,\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in style) {\n        return name;\n      }\n    }\n\n    return origName;\n  }\n\n  function setPositiveNumber(elem, value, subtract) {\n    var matches = rnumsplit.exec(value);\n    return matches ? // Guard against undefined \"subtract\", e.g., when used as in cssHooks\n    Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || \"px\") : value;\n  }\n\n  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n    var i = extra === (isBorderBox ? \"border\" : \"content\") ? // If we already have the right measurement, avoid augmentation\n    4 : // Otherwise initialize for horizontal or vertical properties\n    name === \"width\" ? 1 : 0,\n        val = 0;\n\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin, so add it if we want it\n      if (extra === \"margin\") {\n        val += jQuery.css(elem, extra + cssExpand[i], true, styles);\n      }\n\n      if (isBorderBox) {\n        // border-box includes padding, so remove it if we want content\n        if (extra === \"content\") {\n          val -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n        } // At this point, extra isn't border nor margin, so remove border\n\n\n        if (extra !== \"margin\") {\n          val -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n      } else {\n        // At this point, extra isn't content, so add padding\n        val += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles); // At this point, extra isn't content nor padding, so add border\n\n        if (extra !== \"padding\") {\n          val += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n      }\n    }\n\n    return val;\n  }\n\n  function getWidthOrHeight(elem, name, extra) {\n    // Start with offset property, which is equivalent to the border-box value\n    var valueIsBorderBox = true,\n        val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n        styles = getStyles(elem),\n        isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\"; // Some non-html elements return undefined for offsetWidth, so check for null/undefined\n    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\n    if (val <= 0 || val == null) {\n      // Fall back to computed then uncomputed css if necessary\n      val = curCSS(elem, name, styles);\n\n      if (val < 0 || val == null) {\n        val = elem.style[name];\n      } // Computed unit is not pixels. Stop here and return.\n\n\n      if (rnumnonpx.test(val)) {\n        return val;\n      } // Check for style in case a browser which returns unreliable values\n      // for getComputedStyle silently falls back to the reliable elem.style\n\n\n      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]); // Normalize \"\", auto, and prepare for extra\n\n      val = parseFloat(val) || 0;\n    } // Use the active box-sizing model to add/subtract irrelevant styles\n\n\n    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        hidden,\n        values = [],\n        index = 0,\n        length = elements.length;\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      values[index] = data_priv.get(elem, \"olddisplay\");\n      display = elem.style.display;\n\n      if (show) {\n        // Reset the inline display of this element to learn if it is\n        // being hidden by cascaded rules or not\n        if (!values[index] && display === \"none\") {\n          elem.style.display = \"\";\n        } // Set elements which have been overridden with display: none\n        // in a stylesheet to whatever the default browser style is\n        // for such an element\n\n\n        if (elem.style.display === \"\" && isHidden(elem)) {\n          values[index] = data_priv.access(elem, \"olddisplay\", defaultDisplay(elem.nodeName));\n        }\n      } else {\n        hidden = isHidden(elem);\n\n        if (display !== \"none\" || !hidden) {\n          data_priv.set(elem, \"olddisplay\", hidden ? display : jQuery.css(elem, \"display\"));\n        }\n      }\n    } // Set the display of most of the elements in a second loop\n    // to avoid the constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      if (!show || elem.style.display === \"none\" || elem.style.display === \"\") {\n        elem.style.display = show ? values[index] || \"\" : \"none\";\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function get(elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, \"opacity\");\n            return ret === \"\" ? \"1\" : ret;\n          }\n        }\n      }\n    },\n    // Don't automatically add \"px\" to these possibly-unitless properties\n    cssNumber: {\n      \"columnCount\": true,\n      \"fillOpacity\": true,\n      \"flexGrow\": true,\n      \"flexShrink\": true,\n      \"fontWeight\": true,\n      \"lineHeight\": true,\n      \"opacity\": true,\n      \"order\": true,\n      \"orphans\": true,\n      \"widows\": true,\n      \"zIndex\": true,\n      \"zoom\": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {\n      \"float\": \"cssFloat\"\n    },\n    // Get and set the style property on a DOM Node\n    style: function style(elem, name, value, extra) {\n      // Don't set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we're working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = jQuery.camelCase(name),\n          style = elem.style;\n      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName)); // Gets hook for the prefixed version, then unprefixed version\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value\n\n      if (value !== undefined) {\n        type = _typeof(value); // Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\n        if (type === \"string\" && (ret = rrelNum.exec(value))) {\n          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name)); // Fixes bug #9237\n\n          type = \"number\";\n        } // Make sure that null and NaN values aren't set (#7116)\n\n\n        if (value == null || value !== value) {\n          return;\n        } // If a number, add 'px' to the (except for certain CSS properties)\n\n\n        if (type === \"number\" && !jQuery.cssNumber[origName]) {\n          value += \"px\";\n        } // Support: IE9-11+\n        // background-* props affect original clone's values\n\n\n        if (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n          style[name] = \"inherit\";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          style[name] = value;\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function css(elem, name, extra, styles) {\n      var val,\n          num,\n          hooks,\n          origName = jQuery.camelCase(name); // Make sure that we're working with the right name\n\n      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName)); // Try prefixed name followed by the unprefixed name\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && \"get\" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } // Convert \"normal\" to computed value\n\n\n      if (val === \"normal\" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === \"\" || extra) {\n        num = parseFloat(val);\n        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;\n      }\n\n      return val;\n    }\n  });\n  jQuery.each([\"height\", \"width\"], function (i, name) {\n    jQuery.cssHooks[name] = {\n      get: function get(elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, \"display\")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, name, extra);\n          }) : getWidthOrHeight(elem, name, extra);\n        }\n      },\n      set: function set(elem, value, extra) {\n        var styles = extra && getStyles(elem);\n        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles) : 0);\n      }\n    };\n  }); // Support: Android 2.3\n\n  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {\n    if (computed) {\n      return jQuery.swap(elem, {\n        \"display\": \"inline-block\"\n      }, curCSS, [elem, \"marginRight\"]);\n    }\n  }); // These hooks are used by animate to expand properties\n\n  jQuery.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function expand(value) {\n        var i = 0,\n            expanded = {},\n            // Assumes a single number if not a string\n        parts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (!rmargin.test(prefix)) {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function css(name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n            len,\n            map = {},\n            i = 0;\n\n        if (jQuery.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    },\n    show: function show() {\n      return showHide(this, true);\n    },\n    hide: function hide() {\n      return showHide(this);\n    },\n    toggle: function toggle(state) {\n      if (typeof state === \"boolean\") {\n        return state ? this.show() : this.hide();\n      }\n\n      return this.each(function () {\n        if (isHidden(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function init(elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || \"swing\";\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function run(percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function get(tween) {\n        var result;\n\n        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\n          return tween.elem[tween.prop];\n        } // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as \"10px\" are parsed to Float;\n        // complex values such as \"rotate(1rad)\" are returned as-is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, \"\"); // Empty strings, null, undefined and \"auto\" are converted to 0.\n\n        return !result || result === \"auto\" ? 0 : result;\n      },\n      set: function set(tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Support: IE9\n  // Panic based approach to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function set(tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function linear(p) {\n      return p;\n    },\n    swing: function swing(p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    }\n  };\n  jQuery.fx = Tween.prototype.init; // Back Compat <1.8 extension point\n\n  jQuery.fx.step = {};\n  var fxNow,\n      timerId,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rfxnum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\"),\n      rrun = /queueHooks$/,\n      animationPrefilters = [defaultPrefilter],\n      tweeners = {\n    \"*\": [function (prop, value) {\n      var tween = this.createTween(prop, value),\n          target = tween.cur(),\n          parts = rfxnum.exec(value),\n          unit = parts && parts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n          // Starting value computation is required for potential unit mismatches\n      start = (jQuery.cssNumber[prop] || unit !== \"px\" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),\n          scale = 1,\n          maxIterations = 20;\n\n      if (start && start[3] !== unit) {\n        // Trust units reported by jQuery.css\n        unit = unit || start[3]; // Make sure we update the tween properties later on\n\n        parts = parts || []; // Iteratively approximate from a nonzero starting point\n\n        start = +target || 1;\n\n        do {\n          // If previous iteration zeroed out, double until we get *something*.\n          // Use string for doubling so we don't accidentally see scale as unchanged below\n          scale = scale || \".5\"; // Adjust and apply\n\n          start = start / scale;\n          jQuery.style(tween.elem, prop, start + unit); // Update scale, tolerating zero or NaN from tween.cur(),\n          // break the loop if scale is unchanged or perfect, or if we've just had enough\n        } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\n      } // Update tween properties\n\n\n      if (parts) {\n        start = tween.start = +start || +target || 0;\n        tween.unit = unit; // If a +=/-= token was provided, we're doing a relative animation\n\n        tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];\n      }\n\n      return tween;\n    }]\n  }; // Animations created synchronously will run synchronously\n\n  function createFxNow() {\n    setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = jQuery.now();\n  } // Generate parameters to create a standard animation\n\n\n  function genFx(type, includeWidth) {\n    var which,\n        i = 0,\n        attrs = {\n      height: type\n    }; // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  }\n\n  function createTween(value, prop, animation) {\n    var tween,\n        collection = (tweeners[prop] || []).concat(tweeners[\"*\"]),\n        index = 0,\n        length = collection.length;\n\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We're done with this property\n        return tween;\n      }\n    }\n  }\n\n  function defaultPrefilter(elem, props, opts) {\n    /* jshint validthis: true */\n    var prop,\n        value,\n        toggle,\n        tween,\n        hooks,\n        oldfire,\n        display,\n        checkDisplay,\n        anim = this,\n        orig = {},\n        style = elem.style,\n        hidden = elem.nodeType && isHidden(elem),\n        dataShow = data_priv.get(elem, \"fxshow\"); // Handle queue: false promises\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, \"fx\");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, \"fx\").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // Height/width overflow pass\n\n\n    if (elem.nodeType === 1 && (\"height\" in props || \"width\" in props)) {\n      // Make sure that nothing sneaks out\n      // Record all 3 overflow attributes because IE9-10 do not\n      // change the overflow attribute when overflowX and\n      // overflowY are set to the same value\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Set display property to inline-block for height/width\n      // animations on inline elements that are having width/height animated\n\n      display = jQuery.css(elem, \"display\"); // Test default display if display is currently \"none\"\n\n      checkDisplay = display === \"none\" ? data_priv.get(elem, \"olddisplay\") || defaultDisplay(elem.nodeName) : display;\n\n      if (checkDisplay === \"inline\" && jQuery.css(elem, \"float\") === \"none\") {\n        style.display = \"inline-block\";\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = \"hidden\";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    } // show/hide pass\n\n\n    for (prop in props) {\n      value = props[prop];\n\n      if (rfxtypes.exec(value)) {\n        delete props[prop];\n        toggle = toggle || value === \"toggle\";\n\n        if (value === (hidden ? \"hide\" : \"show\")) {\n          // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\n          if (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true;\n          } else {\n            continue;\n          }\n        }\n\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop); // Any non-fx value stops us from restoring the original display value\n      } else {\n        display = undefined;\n      }\n    }\n\n    if (!jQuery.isEmptyObject(orig)) {\n      if (dataShow) {\n        if (\"hidden\" in dataShow) {\n          hidden = dataShow.hidden;\n        }\n      } else {\n        dataShow = data_priv.access(elem, \"fxshow\", {});\n      } // Store state if its toggle - enables .stop().toggle() to \"reverse\"\n\n\n      if (toggle) {\n        dataShow.hidden = !hidden;\n      }\n\n      if (hidden) {\n        jQuery(elem).show();\n      } else {\n        anim.done(function () {\n          jQuery(elem).hide();\n        });\n      }\n\n      anim.done(function () {\n        var prop;\n        data_priv.remove(elem, \"fxshow\");\n\n        for (prop in orig) {\n          jQuery.style(elem, prop, orig[prop]);\n        }\n      });\n\n      for (prop in orig) {\n        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n        if (!(prop in dataShow)) {\n          dataShow[prop] = tween.start;\n\n          if (hidden) {\n            tween.end = tween.start;\n            tween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n          }\n        }\n      } // If this is a noop like .hide().hide(), restore an overwritten display value\n\n    } else if ((display === \"none\" ? defaultDisplay(elem.nodeName) : display) === \"inline\") {\n      style.display = display;\n    }\n  }\n\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = jQuery.camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (jQuery.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && \"expand\" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.\n        // Reusing 'index' because we have the correct \"name\"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = animationPrefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // Don't match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function tick() {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3\n      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]);\n\n      if (percent < 1 && length) {\n        return remaining;\n      } else {\n        deferred.resolveWith(elem, [animation]);\n        return false;\n      }\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {}\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function createTween(prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function stop(gotoEnd) {\n        var index = 0,\n            // If we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // Resolve when we played the last frame; otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = animationPrefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    jQuery.map(props, createTween, animation);\n\n    if (jQuery.isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    }\n\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    })); // attach callbacks from options\n\n    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweener: function tweener(props, callback) {\n      if (jQuery.isFunction(props)) {\n        callback = props;\n        props = [\"*\"];\n      } else {\n        props = props.split(\" \");\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        tweeners[prop] = tweeners[prop] || [];\n        tweeners[prop].unshift(callback);\n      }\n    },\n    prefilter: function prefilter(callback, prepend) {\n      if (prepend) {\n        animationPrefilters.unshift(callback);\n      } else {\n        animationPrefilters.push(callback);\n      }\n    }\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && _typeof(speed) === \"object\" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n    };\n    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default; // Normalize opt.queue - true/undefined/null -> \"fx\"\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = \"fx\";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (jQuery.isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.fn.extend({\n    fadeTo: function fadeTo(speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHidden).css(\"opacity\", 0).show() // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function animate(prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function doAnimation() {\n        // Operate on a copy of prop so per-property easing won't be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n        if (empty || data_priv.get(this, \"finish\")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function stop(type, clearQueue, gotoEnd) {\n      var stopQueue = function stopQueue(hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== \"string\") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue && type !== false) {\n        this.queue(type || \"fx\", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + \"queueHooks\",\n            timers = jQuery.timers,\n            data = data_priv.get(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // Start the next in the queue if the last step wasn't forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function finish(type) {\n      if (type !== false) {\n        type = type || \"fx\";\n      }\n\n      return this.each(function () {\n        var index,\n            data = data_priv.get(this),\n            queue = data[type + \"queue\"],\n            hooks = data[type + \"queueHooks\"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n        data.finish = true; // Empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        } // Look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // Look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // Turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  }); // Generate shortcuts for custom animations\n\n  jQuery.each({\n    slideDown: genFx(\"show\"),\n    slideUp: genFx(\"hide\"),\n    slideToggle: genFx(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n\n  jQuery.fx.tick = function () {\n    var timer,\n        i = 0,\n        timers = jQuery.timers;\n    fxNow = jQuery.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Checks the timer has not already been removed\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n\n    if (timer()) {\n      jQuery.fx.start();\n    } else {\n      jQuery.timers.pop();\n    }\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (!timerId) {\n      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);\n    }\n  };\n\n  jQuery.fx.stop = function () {\n    clearInterval(timerId);\n    timerId = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  }; // Based off of the plugin by Clint Helfers, with permission.\n  // http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || \"fx\";\n    return this.queue(type, function (next, hooks) {\n      var timeout = setTimeout(next, time);\n\n      hooks.stop = function () {\n        clearTimeout(timeout);\n      };\n    });\n  };\n\n  (function () {\n    var input = document.createElement(\"input\"),\n        select = document.createElement(\"select\"),\n        opt = select.appendChild(document.createElement(\"option\"));\n    input.type = \"checkbox\"; // Support: iOS<=5.1, Android<=4.2+\n    // Default value for a checkbox should be \"on\"\n\n    support.checkOn = input.value !== \"\"; // Support: IE<=11+\n    // Must access selectedIndex to make default options select\n\n    support.optSelected = opt.selected; // Support: Android<=2.3\n    // Options inside disabled selects are incorrectly marked as disabled\n\n    select.disabled = true;\n    support.optDisabled = !opt.disabled; // Support: IE<=11+\n    // An input loses its value after becoming a radio\n\n    input = document.createElement(\"input\");\n    input.value = \"t\";\n    input.type = \"radio\";\n    support.radioValue = input.value === \"t\";\n  })();\n\n  var nodeHook,\n      boolHook,\n      attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function attr(name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function attr(elem, name, value) {\n      var hooks,\n          ret,\n          nType = elem.nodeType; // don't get/set attributes on text, comment and attribute nodes\n\n      if (!elem || nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (_typeof(elem.getAttribute) === strundefined) {\n        return jQuery.prop(elem, name, value);\n      } // All attributes are lowercase\n      // Grab necessary hook if one is defined\n\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        name = name.toLowerCase();\n        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n        } else if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        } else {\n          elem.setAttribute(name, value + \"\");\n          return value;\n        }\n      } else if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      } else {\n        ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n        return ret == null ? undefined : ret;\n      }\n    },\n    removeAttr: function removeAttr(elem, value) {\n      var name,\n          propName,\n          i = 0,\n          attrNames = value && value.match(rnotwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          propName = jQuery.propFix[name] || name; // Boolean attributes get special treatment (#10870)\n\n          if (jQuery.expr.match.bool.test(name)) {\n            // Set corresponding property to false\n            elem[propName] = false;\n          }\n\n          elem.removeAttribute(name);\n        }\n      }\n    },\n    attrHooks: {\n      type: {\n        set: function set(elem, value) {\n          if (!support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\")) {\n            var val = elem.value;\n            elem.setAttribute(\"type\", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    }\n  }); // Hooks for boolean attributes\n\n  boolHook = {\n    set: function set(elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret, handle;\n\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[name];\n        attrHandle[name] = ret;\n        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;\n        attrHandle[name] = handle;\n      }\n\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i;\n  jQuery.fn.extend({\n    prop: function prop(name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function removeProp(name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    },\n    prop: function prop(elem, name, value) {\n      var ret,\n          hooks,\n          notxml,\n          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes\n\n      if (!elem || nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n      if (notxml) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        return hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;\n      } else {\n        return hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];\n      }\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(elem) {\n          return elem.hasAttribute(\"tabindex\") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;\n        }\n      }\n    }\n  });\n\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function get(elem) {\n        var parent = elem.parentNode;\n\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n\n        return null;\n      }\n    };\n  }\n\n  jQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  });\n  var rclass = /[\\t\\r\\n\\f]/g;\n  jQuery.fn.extend({\n    addClass: function addClass(value) {\n      var classes,\n          elem,\n          cur,\n          clazz,\n          j,\n          finalValue,\n          proceed = typeof value === \"string\" && value,\n          i = 0,\n          len = this.length;\n\n      if (jQuery.isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, this.className));\n        });\n      }\n\n      if (proceed) {\n        // The disjunction here is for better compressibility (see removeClass)\n        classes = (value || \"\").match(rnotwhite) || [];\n\n        for (; i < len; i++) {\n          elem = this[i];\n          cur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \" \");\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(\" \" + clazz + \" \") < 0) {\n                cur += clazz + \" \";\n              }\n            } // only assign if different to avoid unneeded rendering.\n\n\n            finalValue = jQuery.trim(cur);\n\n            if (elem.className !== finalValue) {\n              elem.className = finalValue;\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function removeClass(value) {\n      var classes,\n          elem,\n          cur,\n          clazz,\n          j,\n          finalValue,\n          proceed = arguments.length === 0 || typeof value === \"string\" && value,\n          i = 0,\n          len = this.length;\n\n      if (jQuery.isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, this.className));\n        });\n      }\n\n      if (proceed) {\n        classes = (value || \"\").match(rnotwhite) || [];\n\n        for (; i < len; i++) {\n          elem = this[i]; // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \"\");\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(\" \" + clazz + \" \") >= 0) {\n                cur = cur.replace(\" \" + clazz + \" \", \" \");\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = value ? jQuery.trim(cur) : \"\";\n\n            if (elem.className !== finalValue) {\n              elem.className = finalValue;\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function toggleClass(value, stateVal) {\n      var type = _typeof(value);\n\n      if (typeof stateVal === \"boolean\" && type === \"string\") {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n\n      if (jQuery.isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        if (type === \"string\") {\n          // Toggle individual class names\n          var className,\n              i = 0,\n              self = jQuery(this),\n              classNames = value.match(rnotwhite) || [];\n\n          while (className = classNames[i++]) {\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          } // Toggle whole class name\n\n        } else if (type === strundefined || type === \"boolean\") {\n          if (this.className) {\n            // store className if set\n            data_priv.set(this, \"__className__\", this.className);\n          } // If the element has a class name or if we're passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          this.className = this.className || value === false ? \"\" : data_priv.get(this, \"__className__\") || \"\";\n        }\n      });\n    },\n    hasClass: function hasClass(selector) {\n      var className = \" \" + selector + \" \",\n          i = 0,\n          l = this.length;\n\n      for (; i < l; i++) {\n        if (this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf(className) >= 0) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function val(value) {\n      var hooks,\n          ret,\n          isFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value;\n          return typeof ret === \"string\" ? // Handle most common string cases\n          ret.replace(rreturn, \"\") : // Handle cases where value is null/undef or number\n          ret == null ? \"\" : ret;\n        }\n\n        return;\n      }\n\n      isFunction = jQuery.isFunction(value);\n      return this.each(function (i) {\n        var val;\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (isFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        } // Treat null/undefined as \"\"; convert numbers to string\n\n\n        if (val == null) {\n          val = \"\";\n        } else if (typeof val === \"number\") {\n          val += \"\";\n        } else if (jQuery.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? \"\" : value + \"\";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function get(elem) {\n          var val = jQuery.find.attr(elem, \"value\");\n          return val != null ? val : // Support: IE10-11+\n          // option.text throws exceptions (#14686, #14858)\n          jQuery.trim(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function get(elem) {\n          var value,\n              option,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === \"select-one\" || index < 0,\n              values = one ? null : [],\n              max = one ? index + 1 : options.length,\n              i = index < 0 ? max : one ? index : 0; // Loop through all the selected options\n\n          for (; i < max; i++) {\n            option = options[i]; // IE6-9 doesn't update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && ( // Don't return options that are disabled or in a disabled optgroup\n            support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, \"optgroup\"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don't need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function set(elem, value) {\n          var optionSet,\n              option,\n              options = elem.options,\n              values = jQuery.makeArray(value),\n              i = options.length;\n\n          while (i--) {\n            option = options[i];\n\n            if (option.selected = jQuery.inArray(option.value, values) >= 0) {\n              optionSet = true;\n            }\n          } // Force browsers to behave consistently when non-matching value is set\n\n\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    }\n  }); // Radios and checkboxes getter/setter\n\n  jQuery.each([\"radio\", \"checkbox\"], function () {\n    jQuery.valHooks[this] = {\n      set: function set(elem, value) {\n        if (jQuery.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n        }\n      }\n    };\n\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n      };\n    }\n  }); // Return jQuery for attributes-only inclusion\n\n  jQuery.each((\"blur focus focusin focusout load resize scroll unload click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function (i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  });\n  jQuery.fn.extend({\n    hover: function hover(fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    },\n    bind: function bind(types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function unbind(types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function delegate(selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function undelegate(selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n    }\n  });\n  var nonce = jQuery.now();\n  var rquery = /\\?/; // Support: Android 2.3\n  // Workaround failure to string-cast null input\n\n  jQuery.parseJSON = function (data) {\n    return JSON.parse(data + \"\");\n  }; // Cross-browser xml parsing\n\n\n  jQuery.parseXML = function (data) {\n    var xml, tmp;\n\n    if (!data || typeof data !== \"string\") {\n      return null;\n    } // Support: IE9\n\n\n    try {\n      tmp = new DOMParser();\n      xml = tmp.parseFromString(data, \"text/xml\");\n    } catch (e) {\n      xml = undefined;\n    }\n\n    if (!xml || xml.getElementsByTagName(\"parsererror\").length) {\n      jQuery.error(\"Invalid XML: \" + data);\n    }\n\n    return xml;\n  };\n\n  var rhash = /#.*$/,\n      rts = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n      // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n      rurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol \"*\" can be used\n   * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol \"*\" can be used\n   * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = \"*/\".concat(\"*\"),\n      // Document location\n  ajaxLocation = window.location.href,\n      // Segment location into parts\n  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []; // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to \"*\"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== \"string\") {\n        func = dataTypeExpression;\n        dataTypeExpression = \"*\";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\n\n      if (jQuery.isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === \"+\") {\n            dataType = dataType.slice(1) || \"*\";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n  } // A special extend for ajax options\n  // that takes \"flat\" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var key,\n        deep,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n        type,\n        finalDataType,\n        firstDataType,\n        contents = s.contents,\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n    while (dataTypes[0] === \"*\") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n      }\n    } // Check if we're dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  }\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n\n\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        prev,\n        converters = {},\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift(); // Convert to each sequential dataType\n\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      } // Apply the dataFilter if provided\n\n\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n        // There's only work to do if current dataType is non-auto\n        if (current === \"*\") {\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== \"*\" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + \" \" + current] || converters[\"* \" + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(\" \");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s[\"throws\"]) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: response\n    };\n  }\n\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: ajaxLocation,\n      type: \"GET\",\n      isLocal: rlocalProtocol.test(ajaxLocParts[1]),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        \"*\": allTypes,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /xml/,\n        html: /html/,\n        json: /json/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      // Data converters\n      // Keys separate source (or catchall \"*\") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        \"* text\": String,\n        // Text to html (true = no transformation)\n        \"text html\": true,\n        // Evaluate text as a json expression\n        \"text json\": jQuery.parseJSON,\n        // Parse text as xml\n        \"text xml\": jQuery.parseXML\n      },\n      // For options that shouldn't be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn't be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function ajaxSetup(target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function ajax(url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (_typeof(url) === \"object\") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n\n      var transport,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers\n      responseHeadersString,\n          responseHeaders,\n          // timeout handle\n      timeoutTimer,\n          // Cross-domain detection vars\n      parts,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          // Loop variable\n      i,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks(\"once memory\"),\n          // Status-dependent callbacks\n      _statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // The jqXHR state\n      state = 0,\n          // Default abort message\n      strAbort = \"canceled\",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function getResponseHeader(key) {\n          var match;\n\n          if (state === 2) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase()] = match[2];\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase()];\n          }\n\n          return match == null ? null : match;\n        },\n        // Raw string\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return state === 2 ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function setRequestHeader(name, value) {\n          var lname = name.toLowerCase();\n\n          if (!state) {\n            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function overrideMimeType(type) {\n          if (!state) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function statusCode(map) {\n          var code;\n\n          if (map) {\n            if (state < 2) {\n              for (code in map) {\n                // Lazy-add the new callback in a way that preserves old ones\n                _statusCode[code] = [_statusCode[code], map[code]];\n              }\n            } else {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function abort(statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n\n      deferred.promise(jqXHR).complete = completeDeferred.add;\n      jqXHR.success = jqXHR.done;\n      jqXHR.error = jqXHR.fail; // Remove hash character (#7531: and string promotion)\n      // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || ajaxLocation) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = jQuery.trim(s.dataType || \"*\").toLowerCase().match(rnotwhite) || [\"\"]; // A cross-domain request is in order when we have a protocol:host:port mismatch\n\n      if (s.crossDomain == null) {\n        parts = rurl.exec(s.url.toLowerCase());\n        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === \"http:\" ? \"80\" : \"443\")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? \"80\" : \"443\"))));\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== \"string\") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (state === 2) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger(\"ajaxStart\");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n\n      cacheURL = s.url; // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // If data is available, append data to url\n        if (s.data) {\n          cacheURL = s.url += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data; // #9682: remove data so that it's not used in an eventual retry\n\n          delete s.data;\n        } // Add anti-cache in url if needed\n\n\n        if (s.cache === false) {\n          s.url = rts.test(cacheURL) ? // If there is already a '_' parameter, set its value\n          cacheURL.replace(rts, \"$1_=\" + nonce++) : // Otherwise add one to the end\n          cacheURL + (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++;\n        }\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // Aborting is no longer a cancellation\n\n\n      strAbort = \"abort\"; // Install callbacks on deferreds\n\n      for (i in {\n        success: 1,\n        error: 1,\n        complete: 1\n      }) {\n        jqXHR[i](s[i]);\n      } // Get transport\n\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, \"No Transport\");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = setTimeout(function () {\n            jqXHR.abort(\"timeout\");\n          }, s.timeout);\n        }\n\n        try {\n          state = 1;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Propagate exception as error if not done\n          if (state < 2) {\n            done(-1, e); // Simply rethrow otherwise\n          } else {\n            throw e;\n          }\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Called once\n\n        if (state === 2) {\n          return;\n        } // State is \"done\" now\n\n\n        state = 2; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || \"\"; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // Convert no matter what (that way responseXXX fields are always set)\n\n\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader(\"Last-Modified\");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader(\"etag\");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204 || s.type === \"HEAD\") {\n            statusText = \"nocontent\"; // if not modified\n          } else if (status === 304) {\n            statusText = \"notmodified\"; // If we have data, let's convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = \"error\";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + \"\"; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(_statusCode);\n        _statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger(\"ajaxStop\");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getJSON: function getJSON(url, data, callback) {\n      return jQuery.get(url, data, callback, \"json\");\n    },\n    getScript: function getScript(url, callback) {\n      return jQuery.get(url, undefined, callback, \"script\");\n    }\n  });\n  jQuery.each([\"get\", \"post\"], function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (jQuery.isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      }\n\n      return jQuery.ajax({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      });\n    };\n  });\n\n  jQuery._evalUrl = function (url) {\n    return jQuery.ajax({\n      url: url,\n      type: \"GET\",\n      dataType: \"script\",\n      async: false,\n      global: false,\n      \"throws\": true\n    });\n  };\n\n  jQuery.fn.extend({\n    wrapAll: function wrapAll(html) {\n      var wrap;\n\n      if (jQuery.isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapAll(html.call(this, i));\n        });\n      }\n\n      if (this[0]) {\n        // The elements to wrap the target around\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function wrapInner(html) {\n      if (jQuery.isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function wrap(html) {\n      var isFunction = jQuery.isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function unwrap() {\n      return this.parent().each(function () {\n        if (!jQuery.nodeName(this, \"body\")) {\n          jQuery(this).replaceWith(this.childNodes);\n        }\n      }).end();\n    }\n  });\n\n  jQuery.expr.filters.hidden = function (elem) {\n    // Support: Opera <= 12.12\n    // Opera reports offsetWidths and offsetHeights less than zero on some elements\n    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;\n  };\n\n  jQuery.expr.filters.visible = function (elem) {\n    return !jQuery.expr.filters.hidden(elem);\n  };\n\n  var r20 = /%20/g,\n      rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (jQuery.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + \"[\" + (_typeof(v) === \"object\" ? i : \"\") + \"]\", v, traditional, add);\n        }\n      });\n    } else if (!traditional && jQuery.type(obj) === \"object\") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  } // Serialize an array of form elements or a set of\n  // key/values into a query string\n\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function add(key, value) {\n      // If value is a function, invoke it and return its value\n      value = jQuery.isFunction(value) ? value() : value == null ? \"\" : value;\n      s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n    }; // Set traditional to true for jQuery <= 1.3.2 behavior.\n\n\n    if (traditional === undefined) {\n      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join(\"&\").replace(r20, \"+\");\n  };\n\n  jQuery.fn.extend({\n    serialize: function serialize() {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        // Can add propHook for \"elements\" to filter or add form elements\n        var elements = jQuery.prop(this, \"elements\");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is( \":disabled\" ) so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (i, elem) {\n        var val = jQuery(this).val();\n        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n          return {\n            name: elem.name,\n            value: val.replace(rCRLF, \"\\r\\n\")\n          };\n        }) : {\n          name: elem.name,\n          value: val.replace(rCRLF, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new XMLHttpRequest();\n    } catch (e) {}\n  };\n\n  var xhrId = 0,\n      xhrCallbacks = {},\n      xhrSuccessStatus = {\n    // file protocol always yields status code 0, assume 200\n    0: 200,\n    // Support: IE9\n    // #1450: sometimes IE returns 1223 when it should be 204\n    1223: 204\n  },\n      xhrSupported = jQuery.ajaxSettings.xhr(); // Support: IE9\n  // Open requests must be manually aborted on unload (#5280)\n  // See https://support.microsoft.com/kb/2856746 for more info\n\n  if (window.attachEvent) {\n    window.attachEvent(\"onunload\", function () {\n      for (var key in xhrCallbacks) {\n        xhrCallbacks[key]();\n      }\n    });\n  }\n\n  support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var _callback; // Cross domain only allowed if supported through XMLHttpRequest\n\n\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function send(headers, complete) {\n          var i,\n              xhr = options.xhr(),\n              id = ++xhrId;\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          } // Override mime type if needed\n\n\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          } // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won't change header if already provided.\n\n\n          if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n            headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n          } // Set headers\n\n\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          } // Callback\n\n\n          _callback = function callback(type) {\n            return function () {\n              if (_callback) {\n                delete xhrCallbacks[id];\n                _callback = xhr.onload = xhr.onerror = null;\n\n                if (type === \"abort\") {\n                  xhr.abort();\n                } else if (type === \"error\") {\n                  complete( // file: protocol always yields status 0; see #8605, #14207\n                  xhr.status, xhr.statusText);\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE9\n                  // Accessing binary-data responseText throws an exception\n                  // (#11426)\n                  typeof xhr.responseText === \"string\" ? {\n                    text: xhr.responseText\n                  } : undefined, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          }; // Listen to events\n\n\n          xhr.onload = _callback();\n          xhr.onerror = _callback(\"error\"); // Create the abort callback\n\n          _callback = xhrCallbacks[id] = _callback(\"abort\");\n\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // #14683: Only rethrow if this hasn't been notified as an error yet\n            if (_callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function abort() {\n          if (_callback) {\n            _callback();\n          }\n        }\n      };\n    }\n  }); // Install script dataType\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /(?:java|ecma)script/\n    },\n    converters: {\n      \"text script\": function textScript(text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache's special case and crossDomain\n\n  jQuery.ajaxPrefilter(\"script\", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = \"GET\";\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport(\"script\", function (s) {\n    // This transport only deals with cross domain requests\n    if (s.crossDomain) {\n      var script, _callback2;\n\n      return {\n        send: function send(_, complete) {\n          script = jQuery(\"<script>\").prop({\n            async: true,\n            charset: s.scriptCharset,\n            src: s.url\n          }).on(\"load error\", _callback2 = function callback(evt) {\n            script.remove();\n            _callback2 = null;\n\n            if (evt) {\n              complete(evt.type === \"error\" ? 404 : 200, evt.type);\n            }\n          });\n          document.head.appendChild(script[0]);\n        },\n        abort: function abort() {\n          if (_callback2) {\n            _callback2();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters[\"script json\"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + \" was not called\");\n        }\n\n        return responseContainer[0];\n      }; // force json dataType\n\n\n      s.dataTypes[0] = \"json\"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // Restore preexisting value\n        window[callbackName] = overwritten; // Save back as free\n\n        if (s[callbackName]) {\n          // make sure that re-using the options doesn't screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && jQuery.isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return \"script\";\n    }\n  }); // data: string of html\n  // context (optional): If specified, the fragment will be created in this context, defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (!data || typeof data !== \"string\") {\n      return null;\n    }\n\n    if (typeof context === \"boolean\") {\n      keepScripts = context;\n      context = false;\n    }\n\n    context = context || document;\n    var parsed = rsingleTag.exec(data),\n        scripts = !keepScripts && []; // Single tag\n\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = jQuery.buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  }; // Keep a copy of the old load method\n\n\n  var _load = jQuery.fn.load;\n  /**\n   * Load a url into a page\n   */\n\n  jQuery.fn.load = function (url, params, callback) {\n    if (typeof url !== \"string\" && _load) {\n      return _load.apply(this, arguments);\n    }\n\n    var selector,\n        type,\n        response,\n        self = this,\n        off = url.indexOf(\" \");\n\n    if (off >= 0) {\n      selector = jQuery.trim(url.slice(off));\n      url = url.slice(0, off);\n    } // If it's a function\n\n\n    if (jQuery.isFunction(params)) {\n      // We assume that it's the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && _typeof(params) === \"object\") {\n      type = \"POST\";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // if \"type\" variable is undefined, then \"GET\" method will be used\n        type: type,\n        dataType: \"html\",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE 'Permission Denied' errors\n        jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText);\n      }).complete(callback && function (jqXHR, status) {\n        self.each(callback, response || [jqXHR.responseText, status, jqXHR]);\n      });\n    }\n\n    return this;\n  }; // Attach a bunch of functions for handling common AJAX events\n\n\n  jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n\n  jQuery.expr.filters.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n\n  var docElem = window.document.documentElement;\n  /**\n   * Gets a window from an element\n   */\n\n  function getWindow(elem) {\n    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;\n  }\n\n  jQuery.offset = {\n    setOffset: function setOffset(elem, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = jQuery.css(elem, \"position\"),\n          curElem = jQuery(elem),\n          props = {}; // Set position first, in-case top/left are set even on static elem\n\n      if (position === \"static\") {\n        elem.style.position = \"relative\";\n      }\n\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, \"top\");\n      curCSSLeft = jQuery.css(elem, \"left\");\n      calculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1; // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (jQuery.isFunction(options)) {\n        options = options.call(elem, i, curOffset);\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if (\"using\" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    offset: function offset(options) {\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n\n      var docElem,\n          win,\n          elem = this[0],\n          box = {\n        top: 0,\n        left: 0\n      },\n          doc = elem && elem.ownerDocument;\n\n      if (!doc) {\n        return;\n      }\n\n      docElem = doc.documentElement; // Make sure it's not a disconnected DOM node\n\n      if (!jQuery.contains(docElem, elem)) {\n        return box;\n      } // Support: BlackBerry 5, iOS 3 (original iPhone)\n      // If we don't have gBCR, just use 0,0 rather than error\n\n\n      if (_typeof(elem.getBoundingClientRect) !== strundefined) {\n        box = elem.getBoundingClientRect();\n      }\n\n      win = getWindow(doc);\n      return {\n        top: box.top + win.pageYOffset - docElem.clientTop,\n        left: box.left + win.pageXOffset - docElem.clientLeft\n      };\n    },\n    position: function position() {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          elem = this[0],\n          parentOffset = {\n        top: 0,\n        left: 0\n      }; // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent\n\n      if (jQuery.css(elem, \"position\") === \"fixed\") {\n        // Assume getBoundingClientRect is there when computed position is fixed\n        offset = elem.getBoundingClientRect();\n      } else {\n        // Get *real* offsetParent\n        offsetParent = this.offsetParent(); // Get correct offsets\n\n        offset = this.offset();\n\n        if (!jQuery.nodeName(offsetParent[0], \"html\")) {\n          parentOffset = offsetParent.offset();\n        } // Add offsetParent borders\n\n\n        parentOffset.top += jQuery.css(offsetParent[0], \"borderTopWidth\", true);\n        parentOffset.left += jQuery.css(offsetParent[0], \"borderLeftWidth\", true);\n      } // Subtract parent offsets and element margins\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n      };\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var offsetParent = this.offsetParent || docElem;\n\n        while (offsetParent && !jQuery.nodeName(offsetParent, \"html\") && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || docElem;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (method, prop) {\n    var top = \"pageYOffset\" === prop;\n\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        var win = getWindow(elem);\n\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length, null);\n    };\n  }); // Support: Safari<7+, Chrome<37+\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n\n  jQuery.each([\"top\", \"left\"], function (i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n      }\n    });\n  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n  jQuery.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (name, type) {\n    jQuery.each({\n      padding: \"inner\" + name,\n      content: type,\n      \"\": \"outer\" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n            extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n        return access(this, function (elem, type, value) {\n          var doc;\n\n          if (jQuery.isWindow(elem)) {\n            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n            // isn't a whole lot we can do. See pull request at this URL for discussion:\n            // https://github.com/jquery/jquery/pull/764\n            return elem.document.documentElement[\"client\" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n\n            return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable, null);\n      };\n    });\n  }); // The number of elements contained in the matched element set\n\n  jQuery.fn.size = function () {\n    return this.length;\n  };\n\n  jQuery.fn.andSelf = jQuery.fn.addBack; // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n  if (typeof define === \"function\" && define.amd) {\n    define(\"jquery\", [], function () {\n      return jQuery;\n    });\n  }\n\n  var // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$;\n\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n\n    return jQuery;\n  }; // Expose jQuery and $ identifiers, even in AMD\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (#13566)\n\n\n  if (_typeof(noGlobal) === strundefined) {\n    window.jQuery = window.$ = jQuery;\n  }\n\n  return jQuery;\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.form.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.form.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * jQuery Form Plugin\n * version: 3.51.0-2014.06.20\n * Requires jQuery v1.5 or later\n * Copyright (c) 2014 M. Alsup\n * Examples and documentation at: http://malsup.com/jquery/form/\n * Project repository: https://github.com/malsup/form\n * Dual licensed under the MIT and GPL licenses.\n * https://github.com/malsup/form#copyright-and-license\n */\n\n/*global ActiveXObject */\n// AMD support\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === 'function' && define.amd) {\n    // using AMD; register as anon module\n    define(['jquery'], factory);\n  } else {\n    // no AMD; invoke directly\n    factory(typeof jQuery != 'undefined' ? jQuery : window.Zepto);\n  }\n})(function ($) {\n  \"use strict\";\n  /*\n      Usage Note:\n      -----------\n      Do not use both ajaxSubmit and ajaxForm on the same form.  These\n      functions are mutually exclusive.  Use ajaxSubmit if you want\n      to bind your own submit handler to the form.  For example,\n  \n      $(document).ready(function() {\n          $('#myForm').on('submit', function(e) {\n              e.preventDefault(); // <-- important\n              $(this).ajaxSubmit({\n                  target: '#output'\n              });\n          });\n      });\n  \n      Use ajaxForm when you want the plugin to manage all the event binding\n      for you.  For example,\n  \n      $(document).ready(function() {\n          $('#myForm').ajaxForm({\n              target: '#output'\n          });\n      });\n  \n      You can also use ajaxForm with delegation (requires jQuery v1.7+), so the\n      form does not have to exist when you invoke ajaxForm:\n  \n      $('#myForm').ajaxForm({\n          delegation: true,\n          target: '#output'\n      });\n  \n      When using ajaxForm, the ajaxSubmit function will be invoked for you\n      at the appropriate time.\n  */\n\n  /**\n   * Feature detection\n   */\n\n  var feature = {};\n  feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined;\n  feature.formdata = window.FormData !== undefined;\n  var hasProp = !!$.fn.prop; // attr2 uses prop when it can but checks the return type for\n  // an expected string.  this accounts for the case where a form \n  // contains inputs with names like \"action\" or \"method\"; in those\n  // cases \"prop\" returns the element\n\n  $.fn.attr2 = function () {\n    if (!hasProp) {\n      return this.attr.apply(this, arguments);\n    }\n\n    var val = this.prop.apply(this, arguments);\n\n    if (val && val.jquery || typeof val === 'string') {\n      return val;\n    }\n\n    return this.attr.apply(this, arguments);\n  };\n  /**\n   * ajaxSubmit() provides a mechanism for immediately submitting\n   * an HTML form using AJAX.\n   */\n\n\n  $.fn.ajaxSubmit = function (options) {\n    /*jshint scripturl:true */\n    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)\n    if (!this.length) {\n      log('ajaxSubmit: skipping submit process - no element selected');\n      return this;\n    }\n\n    var method,\n        action,\n        url,\n        $form = this;\n\n    if (typeof options == 'function') {\n      options = {\n        success: options\n      };\n    } else if (options === undefined) {\n      options = {};\n    }\n\n    method = options.type || this.attr2('method');\n    action = options.url || this.attr2('action');\n    url = typeof action === 'string' ? $.trim(action) : '';\n    url = url || window.location.href || '';\n\n    if (url) {\n      // clean url (don't include hash vaue)\n      url = (url.match(/^([^#]+)/) || [])[1];\n    }\n\n    options = $.extend(true, {\n      url: url,\n      success: $.ajaxSettings.success,\n      type: method || $.ajaxSettings.type,\n      iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'\n    }, options); // hook for manipulating the form data before it is extracted;\n    // convenient for use with rich editors like tinyMCE or FCKEditor\n\n    var veto = {};\n    this.trigger('form-pre-serialize', [this, options, veto]);\n\n    if (veto.veto) {\n      log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');\n      return this;\n    } // provide opportunity to alter form data before it is serialized\n\n\n    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {\n      log('ajaxSubmit: submit aborted via beforeSerialize callback');\n      return this;\n    }\n\n    var traditional = options.traditional;\n\n    if (traditional === undefined) {\n      traditional = $.ajaxSettings.traditional;\n    }\n\n    var elements = [];\n    var qx,\n        a = this.formToArray(options.semantic, elements);\n\n    if (options.data) {\n      options.extraData = options.data;\n      qx = $.param(options.data, traditional);\n    } // give pre-submit callback an opportunity to abort the submit\n\n\n    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {\n      log('ajaxSubmit: submit aborted via beforeSubmit callback');\n      return this;\n    } // fire vetoable 'validate' event\n\n\n    this.trigger('form-submit-validate', [a, this, options, veto]);\n\n    if (veto.veto) {\n      log('ajaxSubmit: submit vetoed via form-submit-validate trigger');\n      return this;\n    }\n\n    var q = $.param(a, traditional);\n\n    if (qx) {\n      q = q ? q + '&' + qx : qx;\n    }\n\n    if (options.type.toUpperCase() == 'GET') {\n      options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;\n      options.data = null; // data is null for 'get'\n    } else {\n      options.data = q; // data is the query string for 'post'\n    }\n\n    var callbacks = [];\n\n    if (options.resetForm) {\n      callbacks.push(function () {\n        $form.resetForm();\n      });\n    }\n\n    if (options.clearForm) {\n      callbacks.push(function () {\n        $form.clearForm(options.includeHidden);\n      });\n    } // perform a load on the target only if dataType is not provided\n\n\n    if (!options.dataType && options.target) {\n      var oldSuccess = options.success || function () {};\n\n      callbacks.push(function (data) {\n        var fn = options.replaceTarget ? 'replaceWith' : 'html';\n        $(options.target)[fn](data).each(oldSuccess, arguments);\n      });\n    } else if (options.success) {\n      callbacks.push(options.success);\n    }\n\n    options.success = function (data, status, xhr) {\n      // jQuery 1.4+ passes xhr as 3rd arg\n      var context = options.context || this; // jQuery 1.4+ supports scope context\n\n      for (var i = 0, max = callbacks.length; i < max; i++) {\n        callbacks[i].apply(context, [data, status, xhr || $form, $form]);\n      }\n    };\n\n    if (options.error) {\n      var oldError = options.error;\n\n      options.error = function (xhr, status, error) {\n        var context = options.context || this;\n        oldError.apply(context, [xhr, status, error, $form]);\n      };\n    }\n\n    if (options.complete) {\n      var oldComplete = options.complete;\n\n      options.complete = function (xhr, status) {\n        var context = options.context || this;\n        oldComplete.apply(context, [xhr, status, $form]);\n      };\n    } // are there files to upload?\n    // [value] (issue #113), also see comment:\n    // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219\n\n\n    var fileInputs = $('input[type=file]:enabled', this).filter(function () {\n      return $(this).val() !== '';\n    });\n    var hasFileInputs = fileInputs.length > 0;\n    var mp = 'multipart/form-data';\n    var multipart = $form.attr('enctype') == mp || $form.attr('encoding') == mp;\n    var fileAPI = feature.fileapi && feature.formdata;\n    log(\"fileAPI :\" + fileAPI);\n    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;\n    var jqxhr; // options.iframe allows user to force iframe mode\n    // 06-NOV-09: now defaulting to iframe mode if file input is detected\n\n    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {\n      // hack to fix Safari hang (thanks to Tim Molendijk for this)\n      // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d\n      if (options.closeKeepAlive) {\n        $.get(options.closeKeepAlive, function () {\n          jqxhr = fileUploadIframe(a);\n        });\n      } else {\n        jqxhr = fileUploadIframe(a);\n      }\n    } else if ((hasFileInputs || multipart) && fileAPI) {\n      jqxhr = fileUploadXhr(a);\n    } else {\n      jqxhr = $.ajax(options);\n    }\n\n    $form.removeData('jqxhr').data('jqxhr', jqxhr); // clear element array\n\n    for (var k = 0; k < elements.length; k++) {\n      elements[k] = null;\n    } // fire 'notify' event\n\n\n    this.trigger('form-submit-notify', [this, options]);\n    return this; // utility fn for deep serialization\n\n    function deepSerialize(extraData) {\n      var serialized = $.param(extraData, options.traditional).split('&');\n      var len = serialized.length;\n      var result = [];\n      var i, part;\n\n      for (i = 0; i < len; i++) {\n        // #252; undo param space replacement\n        serialized[i] = serialized[i].replace(/\\+/g, ' ');\n        part = serialized[i].split('='); // #278; use array instead of object storage, favoring array serializations\n\n        result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\n      }\n\n      return result;\n    } // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)\n\n\n    function fileUploadXhr(a) {\n      var formdata = new FormData();\n\n      for (var i = 0; i < a.length; i++) {\n        formdata.append(a[i].name, a[i].value);\n      }\n\n      if (options.extraData) {\n        var serializedData = deepSerialize(options.extraData);\n\n        for (i = 0; i < serializedData.length; i++) {\n          if (serializedData[i]) {\n            formdata.append(serializedData[i][0], serializedData[i][1]);\n          }\n        }\n      }\n\n      options.data = null;\n      var s = $.extend(true, {}, $.ajaxSettings, options, {\n        contentType: false,\n        processData: false,\n        cache: false,\n        type: method || 'POST'\n      });\n\n      if (options.uploadProgress) {\n        // workaround because jqXHR does not expose upload property\n        s.xhr = function () {\n          var xhr = $.ajaxSettings.xhr();\n\n          if (xhr.upload) {\n            xhr.upload.addEventListener('progress', function (event) {\n              var percent = 0;\n              var position = event.loaded || event.position;\n              /*event.position is deprecated*/\n\n              var total = event.total;\n\n              if (event.lengthComputable) {\n                percent = Math.ceil(position / total * 100);\n              }\n\n              options.uploadProgress(event, position, total, percent);\n            }, false);\n          }\n\n          return xhr;\n        };\n      }\n\n      s.data = null;\n      var beforeSend = s.beforeSend;\n\n      s.beforeSend = function (xhr, o) {\n        //Send FormData() provided by user\n        if (options.formData) {\n          o.data = options.formData;\n        } else {\n          o.data = formdata;\n        }\n\n        if (beforeSend) {\n          beforeSend.call(this, xhr, o);\n        }\n      };\n\n      return $.ajax(s);\n    } // private function for handling file uploads (hat tip to YAHOO!)\n\n\n    function fileUploadIframe(a) {\n      var form = $form[0],\n          el,\n          i,\n          s,\n          g,\n          id,\n          $io,\n          io,\n          xhr,\n          sub,\n          n,\n          timedOut,\n          timeoutHandle;\n      var deferred = $.Deferred(); // #341\n\n      deferred.abort = function (status) {\n        xhr.abort(status);\n      };\n\n      if (a) {\n        // ensure that every serialized input is still enabled\n        for (i = 0; i < elements.length; i++) {\n          el = $(elements[i]);\n\n          if (hasProp) {\n            el.prop('disabled', false);\n          } else {\n            el.removeAttr('disabled');\n          }\n        }\n      }\n\n      s = $.extend(true, {}, $.ajaxSettings, options);\n      s.context = s.context || s;\n      id = 'jqFormIO' + new Date().getTime();\n\n      if (s.iframeTarget) {\n        $io = $(s.iframeTarget);\n        n = $io.attr2('name');\n\n        if (!n) {\n          $io.attr2('name', id);\n        } else {\n          id = n;\n        }\n      } else {\n        $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />');\n        $io.css({\n          position: 'absolute',\n          top: '-1000px',\n          left: '-1000px'\n        });\n      }\n\n      io = $io[0];\n      xhr = {\n        // mock object\n        aborted: 0,\n        responseText: null,\n        responseXML: null,\n        status: 0,\n        statusText: 'n/a',\n        getAllResponseHeaders: function getAllResponseHeaders() {},\n        getResponseHeader: function getResponseHeader() {},\n        setRequestHeader: function setRequestHeader() {},\n        abort: function abort(status) {\n          var e = status === 'timeout' ? 'timeout' : 'aborted';\n          log('aborting upload... ' + e);\n          this.aborted = 1;\n\n          try {\n            // #214, #257\n            if (io.contentWindow.document.execCommand) {\n              io.contentWindow.document.execCommand('Stop');\n            }\n          } catch (ignore) {}\n\n          $io.attr('src', s.iframeSrc); // abort op in progress\n\n          xhr.error = e;\n\n          if (s.error) {\n            s.error.call(s.context, xhr, e, status);\n          }\n\n          if (g) {\n            $.event.trigger(\"ajaxError\", [xhr, s, e]);\n          }\n\n          if (s.complete) {\n            s.complete.call(s.context, xhr, e);\n          }\n        }\n      };\n      g = s.global; // trigger ajax global events so that activity/block indicators work like normal\n\n      if (g && 0 === $.active++) {\n        $.event.trigger(\"ajaxStart\");\n      }\n\n      if (g) {\n        $.event.trigger(\"ajaxSend\", [xhr, s]);\n      }\n\n      if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {\n        if (s.global) {\n          $.active--;\n        }\n\n        deferred.reject();\n        return deferred;\n      }\n\n      if (xhr.aborted) {\n        deferred.reject();\n        return deferred;\n      } // add submitting element to data if we know it\n\n\n      sub = form.clk;\n\n      if (sub) {\n        n = sub.name;\n\n        if (n && !sub.disabled) {\n          s.extraData = s.extraData || {};\n          s.extraData[n] = sub.value;\n\n          if (sub.type == \"image\") {\n            s.extraData[n + '.x'] = form.clk_x;\n            s.extraData[n + '.y'] = form.clk_y;\n          }\n        }\n      }\n\n      var CLIENT_TIMEOUT_ABORT = 1;\n      var SERVER_ABORT = 2;\n\n      function getDoc(frame) {\n        /* it looks like contentWindow or contentDocument do not\n         * carry the protocol property in ie8, when running under ssl\n         * frame.document is the only valid response document, since\n         * the protocol is know but not on the other two objects. strange?\n         * \"Same origin policy\" http://en.wikipedia.org/wiki/Same_origin_policy\n         */\n        var doc = null; // IE8 cascading access check\n\n        try {\n          if (frame.contentWindow) {\n            doc = frame.contentWindow.document;\n          }\n        } catch (err) {\n          // IE8 access denied under ssl & missing protocol\n          log('cannot get iframe.contentWindow document: ' + err);\n        }\n\n        if (doc) {\n          // successful getting content\n          return doc;\n        }\n\n        try {\n          // simply checking may throw in ie8 under ssl or mismatched protocol\n          doc = frame.contentDocument ? frame.contentDocument : frame.document;\n        } catch (err) {\n          // last attempt\n          log('cannot get iframe.contentDocument: ' + err);\n          doc = frame.document;\n        }\n\n        return doc;\n      } // Rails CSRF hack (thanks to Yvan Barthelemy)\n\n\n      var csrf_token = $('meta[name=csrf-token]').attr('content');\n      var csrf_param = $('meta[name=csrf-param]').attr('content');\n\n      if (csrf_param && csrf_token) {\n        s.extraData = s.extraData || {};\n        s.extraData[csrf_param] = csrf_token;\n      } // take a breath so that pending repaints get some cpu time before the upload starts\n\n\n      function doSubmit() {\n        // make sure form attrs are set\n        var t = $form.attr2('target'),\n            a = $form.attr2('action'),\n            mp = 'multipart/form-data',\n            et = $form.attr('enctype') || $form.attr('encoding') || mp; // update form attrs in IE friendly way\n\n        form.setAttribute('target', id);\n\n        if (!method || /post/i.test(method)) {\n          form.setAttribute('method', 'POST');\n        }\n\n        if (a != s.url) {\n          form.setAttribute('action', s.url);\n        } // ie borks in some cases when setting encoding\n\n\n        if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {\n          $form.attr({\n            encoding: 'multipart/form-data',\n            enctype: 'multipart/form-data'\n          });\n        } // support timout\n\n\n        if (s.timeout) {\n          timeoutHandle = setTimeout(function () {\n            timedOut = true;\n            cb(CLIENT_TIMEOUT_ABORT);\n          }, s.timeout);\n        } // look for server aborts\n\n\n        function checkState() {\n          try {\n            var state = getDoc(io).readyState;\n            log('state = ' + state);\n\n            if (state && state.toLowerCase() == 'uninitialized') {\n              setTimeout(checkState, 50);\n            }\n          } catch (e) {\n            log('Server abort: ', e, ' (', e.name, ')');\n            cb(SERVER_ABORT);\n\n            if (timeoutHandle) {\n              clearTimeout(timeoutHandle);\n            }\n\n            timeoutHandle = undefined;\n          }\n        } // add \"extra\" data to form if provided in options\n\n\n        var extraInputs = [];\n\n        try {\n          if (s.extraData) {\n            for (var n in s.extraData) {\n              if (s.extraData.hasOwnProperty(n)) {\n                // if using the $.param format that allows for multiple values with the same name\n                if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {\n                  extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]);\n                } else {\n                  extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]);\n                }\n              }\n            }\n          }\n\n          if (!s.iframeTarget) {\n            // add iframe to doc and submit the form\n            $io.appendTo('body');\n          }\n\n          if (io.attachEvent) {\n            io.attachEvent('onload', cb);\n          } else {\n            io.addEventListener('load', cb, false);\n          }\n\n          setTimeout(checkState, 15);\n\n          try {\n            form.submit();\n          } catch (err) {\n            // just in case form has element with name/id of 'submit'\n            var submitFn = document.createElement('form').submit;\n            submitFn.apply(form);\n          }\n        } finally {\n          // reset attrs and remove \"extra\" input elements\n          form.setAttribute('action', a);\n          form.setAttribute('enctype', et); // #380\n\n          if (t) {\n            form.setAttribute('target', t);\n          } else {\n            $form.removeAttr('target');\n          }\n\n          $(extraInputs).remove();\n        }\n      }\n\n      if (s.forceSync) {\n        doSubmit();\n      } else {\n        setTimeout(doSubmit, 10); // this lets dom updates render\n      }\n\n      var data,\n          doc,\n          domCheckCount = 50,\n          callbackProcessed;\n\n      function cb(e) {\n        if (xhr.aborted || callbackProcessed) {\n          return;\n        }\n\n        doc = getDoc(io);\n\n        if (!doc) {\n          log('cannot access response document');\n          e = SERVER_ABORT;\n        }\n\n        if (e === CLIENT_TIMEOUT_ABORT && xhr) {\n          xhr.abort('timeout');\n          deferred.reject(xhr, 'timeout');\n          return;\n        } else if (e == SERVER_ABORT && xhr) {\n          xhr.abort('server abort');\n          deferred.reject(xhr, 'error', 'server abort');\n          return;\n        }\n\n        if (!doc || doc.location.href == s.iframeSrc) {\n          // response not received yet\n          if (!timedOut) {\n            return;\n          }\n        }\n\n        if (io.detachEvent) {\n          io.detachEvent('onload', cb);\n        } else {\n          io.removeEventListener('load', cb, false);\n        }\n\n        var status = 'success',\n            errMsg;\n\n        try {\n          if (timedOut) {\n            throw 'timeout';\n          }\n\n          var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);\n          log('isXml=' + isXml);\n\n          if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {\n            if (--domCheckCount) {\n              // in some browsers (Opera) the iframe DOM is not always traversable when\n              // the onload callback fires, so we loop a bit to accommodate\n              log('requeing onLoad callback, DOM not available');\n              setTimeout(cb, 250);\n              return;\n            } // let this fall through because server response could be an empty document\n            //log('Could not access iframe DOM after mutiple tries.');\n            //throw 'DOMException: not available';\n\n          } //log('response detected');\n\n\n          var docRoot = doc.body ? doc.body : doc.documentElement;\n          xhr.responseText = docRoot ? docRoot.innerHTML : null;\n          xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;\n\n          if (isXml) {\n            s.dataType = 'xml';\n          }\n\n          xhr.getResponseHeader = function (header) {\n            var headers = {\n              'content-type': s.dataType\n            };\n            return headers[header.toLowerCase()];\n          }; // support for XHR 'status' & 'statusText' emulation :\n\n\n          if (docRoot) {\n            xhr.status = Number(docRoot.getAttribute('status')) || xhr.status;\n            xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;\n          }\n\n          var dt = (s.dataType || '').toLowerCase();\n          var scr = /(json|script|text)/.test(dt);\n\n          if (scr || s.textarea) {\n            // see if user embedded response in textarea\n            var ta = doc.getElementsByTagName('textarea')[0];\n\n            if (ta) {\n              xhr.responseText = ta.value; // support for XHR 'status' & 'statusText' emulation :\n\n              xhr.status = Number(ta.getAttribute('status')) || xhr.status;\n              xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;\n            } else if (scr) {\n              // account for browsers injecting pre around json response\n              var pre = doc.getElementsByTagName('pre')[0];\n              var b = doc.getElementsByTagName('body')[0];\n\n              if (pre) {\n                xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;\n              } else if (b) {\n                xhr.responseText = b.textContent ? b.textContent : b.innerText;\n              }\n            }\n          } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {\n            xhr.responseXML = toXml(xhr.responseText);\n          }\n\n          try {\n            data = httpData(xhr, dt, s);\n          } catch (err) {\n            status = 'parsererror';\n            xhr.error = errMsg = err || status;\n          }\n        } catch (err) {\n          log('error caught: ', err);\n          status = 'error';\n          xhr.error = errMsg = err || status;\n        }\n\n        if (xhr.aborted) {\n          log('upload aborted');\n          status = null;\n        }\n\n        if (xhr.status) {\n          // we've set xhr.status\n          status = xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 ? 'success' : 'error';\n        } // ordering of these callbacks/triggers is odd, but that's how $.ajax does it\n\n\n        if (status === 'success') {\n          if (s.success) {\n            s.success.call(s.context, data, 'success', xhr);\n          }\n\n          deferred.resolve(xhr.responseText, 'success', xhr);\n\n          if (g) {\n            $.event.trigger(\"ajaxSuccess\", [xhr, s]);\n          }\n        } else if (status) {\n          if (errMsg === undefined) {\n            errMsg = xhr.statusText;\n          }\n\n          if (s.error) {\n            s.error.call(s.context, xhr, status, errMsg);\n          }\n\n          deferred.reject(xhr, 'error', errMsg);\n\n          if (g) {\n            $.event.trigger(\"ajaxError\", [xhr, s, errMsg]);\n          }\n        }\n\n        if (g) {\n          $.event.trigger(\"ajaxComplete\", [xhr, s]);\n        }\n\n        if (g && ! --$.active) {\n          $.event.trigger(\"ajaxStop\");\n        }\n\n        if (s.complete) {\n          s.complete.call(s.context, xhr, status);\n        }\n\n        callbackProcessed = true;\n\n        if (s.timeout) {\n          clearTimeout(timeoutHandle);\n        } // clean up\n\n\n        setTimeout(function () {\n          if (!s.iframeTarget) {\n            $io.remove();\n          } else {\n            //adding else to clean up existing iframe response.\n            $io.attr('src', s.iframeSrc);\n          }\n\n          xhr.responseXML = null;\n        }, 100);\n      }\n\n      var toXml = $.parseXML || function (s, doc) {\n        // use parseXML if available (jQuery 1.5+)\n        if (window.ActiveXObject) {\n          doc = new ActiveXObject('Microsoft.XMLDOM');\n          doc.async = 'false';\n          doc.loadXML(s);\n        } else {\n          doc = new DOMParser().parseFromString(s, 'text/xml');\n        }\n\n        return doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror' ? doc : null;\n      };\n\n      var parseJSON = $.parseJSON || function (s) {\n        /*jslint evil:true */\n        return window['eval']('(' + s + ')');\n      };\n\n      var httpData = function httpData(xhr, type, s) {\n        // mostly lifted from jq1.4.4\n        var ct = xhr.getResponseHeader('content-type') || '',\n            xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,\n            data = xml ? xhr.responseXML : xhr.responseText;\n\n        if (xml && data.documentElement.nodeName === 'parsererror') {\n          if ($.error) {\n            $.error('parsererror');\n          }\n        }\n\n        if (s && s.dataFilter) {\n          data = s.dataFilter(data, type);\n        }\n\n        if (typeof data === 'string') {\n          if (type === 'json' || !type && ct.indexOf('json') >= 0) {\n            data = parseJSON(data);\n          } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) {\n            $.globalEval(data);\n          }\n        }\n\n        return data;\n      };\n\n      return deferred;\n    }\n  };\n  /**\n   * ajaxForm() provides a mechanism for fully automating form submission.\n   *\n   * The advantages of using this method instead of ajaxSubmit() are:\n   *\n   * 1: This method will include coordinates for <input type=\"image\" /> elements (if the element\n   *    is used to submit the form).\n   * 2. This method will include the submit element's name/value data (for the element that was\n   *    used to submit the form).\n   * 3. This method binds the submit() method to the form for you.\n   *\n   * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely\n   * passes the options argument along after properly binding events for submit elements and\n   * the form itself.\n   */\n\n\n  $.fn.ajaxForm = function (options) {\n    options = options || {};\n    options.delegation = options.delegation && $.isFunction($.fn.on); // in jQuery 1.3+ we can fix mistakes with the ready state\n\n    if (!options.delegation && this.length === 0) {\n      var o = {\n        s: this.selector,\n        c: this.context\n      };\n\n      if (!$.isReady && o.s) {\n        log('DOM not ready, queuing ajaxForm');\n        $(function () {\n          $(o.s, o.c).ajaxForm(options);\n        });\n        return this;\n      } // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()\n\n\n      log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));\n      return this;\n    }\n\n    if (options.delegation) {\n      $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement);\n      return this;\n    }\n\n    return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement);\n  }; // private event handlers\n\n\n  function doAjaxSubmit(e) {\n    /*jshint validthis:true */\n    var options = e.data;\n\n    if (!e.isDefaultPrevented()) {\n      // if event has been canceled, don't proceed\n      e.preventDefault();\n      $(e.target).ajaxSubmit(options); // #365\n    }\n  }\n\n  function captureSubmittingElement(e) {\n    /*jshint validthis:true */\n    var target = e.target;\n    var $el = $(target);\n\n    if (!$el.is(\"[type=submit],[type=image]\")) {\n      // is this a child element of the submit el?  (ex: a span within a button)\n      var t = $el.closest('[type=submit]');\n\n      if (t.length === 0) {\n        return;\n      }\n\n      target = t[0];\n    }\n\n    var form = this;\n    form.clk = target;\n\n    if (target.type == 'image') {\n      if (e.offsetX !== undefined) {\n        form.clk_x = e.offsetX;\n        form.clk_y = e.offsetY;\n      } else if (typeof $.fn.offset == 'function') {\n        var offset = $el.offset();\n        form.clk_x = e.pageX - offset.left;\n        form.clk_y = e.pageY - offset.top;\n      } else {\n        form.clk_x = e.pageX - target.offsetLeft;\n        form.clk_y = e.pageY - target.offsetTop;\n      }\n    } // clear form vars\n\n\n    setTimeout(function () {\n      form.clk = form.clk_x = form.clk_y = null;\n    }, 100);\n  } // ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm\n\n\n  $.fn.ajaxFormUnbind = function () {\n    return this.unbind('submit.form-plugin click.form-plugin');\n  };\n  /**\n   * formToArray() gathers form element data into an array of objects that can\n   * be passed to any of the following ajax functions: $.get, $.post, or load.\n   * Each object in the array has both a 'name' and 'value' property.  An example of\n   * an array for a simple login form might be:\n   *\n   * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]\n   *\n   * It is this array that is passed to pre-submit callback functions provided to the\n   * ajaxSubmit() and ajaxForm() methods.\n   */\n\n\n  $.fn.formToArray = function (semantic, elements) {\n    var a = [];\n\n    if (this.length === 0) {\n      return a;\n    }\n\n    var form = this[0];\n    var formId = this.attr('id');\n    var els = semantic ? form.getElementsByTagName('*') : form.elements;\n    var els2;\n\n    if (els && !/MSIE [678]/.test(navigator.userAgent)) {\n      // #390\n      els = $(els).get(); // convert to standard array\n    } // #386; account for inputs outside the form which use the 'form' attribute\n\n\n    if (formId) {\n      els2 = $(':input[form=\"' + formId + '\"]').get(); // hat tip @thet\n\n      if (els2.length) {\n        els = (els || []).concat(els2);\n      }\n    }\n\n    if (!els || !els.length) {\n      return a;\n    }\n\n    var i, j, n, v, el, max, jmax;\n\n    for (i = 0, max = els.length; i < max; i++) {\n      el = els[i];\n      n = el.name;\n\n      if (!n || el.disabled) {\n        continue;\n      }\n\n      if (semantic && form.clk && el.type == \"image\") {\n        // handle image inputs on the fly when semantic == true\n        if (form.clk == el) {\n          a.push({\n            name: n,\n            value: $(el).val(),\n            type: el.type\n          });\n          a.push({\n            name: n + '.x',\n            value: form.clk_x\n          }, {\n            name: n + '.y',\n            value: form.clk_y\n          });\n        }\n\n        continue;\n      }\n\n      v = $.fieldValue(el, true);\n\n      if (v && v.constructor == Array) {\n        if (elements) {\n          elements.push(el);\n        }\n\n        for (j = 0, jmax = v.length; j < jmax; j++) {\n          a.push({\n            name: n,\n            value: v[j]\n          });\n        }\n      } else if (feature.fileapi && el.type == 'file') {\n        if (elements) {\n          elements.push(el);\n        }\n\n        var files = el.files;\n\n        if (files.length) {\n          for (j = 0; j < files.length; j++) {\n            a.push({\n              name: n,\n              value: files[j],\n              type: el.type\n            });\n          }\n        } else {\n          // #180\n          a.push({\n            name: n,\n            value: '',\n            type: el.type\n          });\n        }\n      } else if (v !== null && typeof v != 'undefined') {\n        if (elements) {\n          elements.push(el);\n        }\n\n        a.push({\n          name: n,\n          value: v,\n          type: el.type,\n          required: el.required\n        });\n      }\n    }\n\n    if (!semantic && form.clk) {\n      // input type=='image' are not found in elements array! handle it here\n      var $input = $(form.clk),\n          input = $input[0];\n      n = input.name;\n\n      if (n && !input.disabled && input.type == 'image') {\n        a.push({\n          name: n,\n          value: $input.val()\n        });\n        a.push({\n          name: n + '.x',\n          value: form.clk_x\n        }, {\n          name: n + '.y',\n          value: form.clk_y\n        });\n      }\n    }\n\n    return a;\n  };\n  /**\n   * Serializes form data into a 'submittable' string. This method will return a string\n   * in the format: name1=value1&amp;name2=value2\n   */\n\n\n  $.fn.formSerialize = function (semantic) {\n    //hand off to jQuery.param for proper encoding\n    return $.param(this.formToArray(semantic));\n  };\n  /**\n   * Serializes all field elements in the jQuery object into a query string.\n   * This method will return a string in the format: name1=value1&amp;name2=value2\n   */\n\n\n  $.fn.fieldSerialize = function (successful) {\n    var a = [];\n    this.each(function () {\n      var n = this.name;\n\n      if (!n) {\n        return;\n      }\n\n      var v = $.fieldValue(this, successful);\n\n      if (v && v.constructor == Array) {\n        for (var i = 0, max = v.length; i < max; i++) {\n          a.push({\n            name: n,\n            value: v[i]\n          });\n        }\n      } else if (v !== null && typeof v != 'undefined') {\n        a.push({\n          name: this.name,\n          value: v\n        });\n      }\n    }); //hand off to jQuery.param for proper encoding\n\n    return $.param(a);\n  };\n  /**\n   * Returns the value(s) of the element in the matched set.  For example, consider the following form:\n   *\n   *  <form><fieldset>\n   *      <input name=\"A\" type=\"text\" />\n   *      <input name=\"A\" type=\"text\" />\n   *      <input name=\"B\" type=\"checkbox\" value=\"B1\" />\n   *      <input name=\"B\" type=\"checkbox\" value=\"B2\"/>\n   *      <input name=\"C\" type=\"radio\" value=\"C1\" />\n   *      <input name=\"C\" type=\"radio\" value=\"C2\" />\n   *  </fieldset></form>\n   *\n   *  var v = $('input[type=text]').fieldValue();\n   *  // if no values are entered into the text inputs\n   *  v == ['','']\n   *  // if values entered into the text inputs are 'foo' and 'bar'\n   *  v == ['foo','bar']\n   *\n   *  var v = $('input[type=checkbox]').fieldValue();\n   *  // if neither checkbox is checked\n   *  v === undefined\n   *  // if both checkboxes are checked\n   *  v == ['B1', 'B2']\n   *\n   *  var v = $('input[type=radio]').fieldValue();\n   *  // if neither radio is checked\n   *  v === undefined\n   *  // if first radio is checked\n   *  v == ['C1']\n   *\n   * The successful argument controls whether or not the field element must be 'successful'\n   * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).\n   * The default value of the successful argument is true.  If this value is false the value(s)\n   * for each element is returned.\n   *\n   * Note: This method *always* returns an array.  If no valid value can be determined the\n   *    array will be empty, otherwise it will contain one or more values.\n   */\n\n\n  $.fn.fieldValue = function (successful) {\n    for (var val = [], i = 0, max = this.length; i < max; i++) {\n      var el = this[i];\n      var v = $.fieldValue(el, successful);\n\n      if (v === null || typeof v == 'undefined' || v.constructor == Array && !v.length) {\n        continue;\n      }\n\n      if (v.constructor == Array) {\n        $.merge(val, v);\n      } else {\n        val.push(v);\n      }\n    }\n\n    return val;\n  };\n  /**\n   * Returns the value of the field element.\n   */\n\n\n  $.fieldValue = function (el, successful) {\n    var n = el.name,\n        t = el.type,\n        tag = el.tagName.toLowerCase();\n\n    if (successful === undefined) {\n      successful = true;\n    }\n\n    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) {\n      return null;\n    }\n\n    if (tag == 'select') {\n      var index = el.selectedIndex;\n\n      if (index < 0) {\n        return null;\n      }\n\n      var a = [],\n          ops = el.options;\n      var one = t == 'select-one';\n      var max = one ? index + 1 : ops.length;\n\n      for (var i = one ? index : 0; i < max; i++) {\n        var op = ops[i];\n\n        if (op.selected) {\n          var v = op.value;\n\n          if (!v) {\n            // extra pain for IE...\n            v = op.attributes && op.attributes.value && !op.attributes.value.specified ? op.text : op.value;\n          }\n\n          if (one) {\n            return v;\n          }\n\n          a.push(v);\n        }\n      }\n\n      return a;\n    }\n\n    return $(el).val();\n  };\n  /**\n   * Clears the form data.  Takes the following actions on the form's input fields:\n   *  - input text fields will have their 'value' property set to the empty string\n   *  - select elements will have their 'selectedIndex' property set to -1\n   *  - checkbox and radio inputs will have their 'checked' property set to false\n   *  - inputs of type submit, button, reset, and hidden will *not* be effected\n   *  - button elements will *not* be effected\n   */\n\n\n  $.fn.clearForm = function (includeHidden) {\n    return this.each(function () {\n      $('input,select,textarea', this).clearFields(includeHidden);\n    });\n  };\n  /**\n   * Clears the selected form elements.\n   */\n\n\n  $.fn.clearFields = $.fn.clearInputs = function (includeHidden) {\n    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list\n\n    return this.each(function () {\n      var t = this.type,\n          tag = this.tagName.toLowerCase();\n\n      if (re.test(t) || tag == 'textarea') {\n        this.value = '';\n      } else if (t == 'checkbox' || t == 'radio') {\n        this.checked = false;\n      } else if (tag == 'select') {\n        this.selectedIndex = -1;\n      } else if (t == \"file\") {\n        if (/MSIE/.test(navigator.userAgent)) {\n          $(this).replaceWith($(this).clone(true));\n        } else {\n          $(this).val('');\n        }\n      } else if (includeHidden) {\n        // includeHidden can be the value true, or it can be a selector string\n        // indicating a special test; for example:\n        //  $('#myForm').clearForm('.special:hidden')\n        // the above would clean hidden inputs that have the class of 'special'\n        if (includeHidden === true && /hidden/.test(t) || typeof includeHidden == 'string' && $(this).is(includeHidden)) {\n          this.value = '';\n        }\n      }\n    });\n  };\n  /**\n   * Resets the form data.  Causes all form elements to be reset to their original value.\n   */\n\n\n  $.fn.resetForm = function () {\n    return this.each(function () {\n      // guard against an input with the name of 'reset'\n      // note that IE reports the reset function as an 'object'\n      if (typeof this.reset == 'function' || _typeof(this.reset) == 'object' && !this.reset.nodeType) {\n        this.reset();\n      }\n    });\n  };\n  /**\n   * Enables or disables any matching elements.\n   */\n\n\n  $.fn.enable = function (b) {\n    if (b === undefined) {\n      b = true;\n    }\n\n    return this.each(function () {\n      this.disabled = !b;\n    });\n  };\n  /**\n   * Checks/unchecks any matching checkboxes or radio buttons and\n   * selects/deselects and matching option elements.\n   */\n\n\n  $.fn.selected = function (select) {\n    if (select === undefined) {\n      select = true;\n    }\n\n    return this.each(function () {\n      var t = this.type;\n\n      if (t == 'checkbox' || t == 'radio') {\n        this.checked = select;\n      } else if (this.tagName.toLowerCase() == 'option') {\n        var $sel = $(this).parent('select');\n\n        if (select && $sel[0] && $sel[0].type == 'select-one') {\n          // deselect all other options\n          $sel.find('option').selected(false);\n        }\n\n        this.selected = select;\n      }\n    });\n  }; // expose debug var\n\n\n  $.fn.ajaxSubmit.debug = false; // helper fn for console logging\n\n  function log() {\n    if (!$.fn.ajaxSubmit.debug) {\n      return;\n    }\n\n    var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, '');\n\n    if (window.console && window.console.log) {\n      window.console.log(msg);\n    } else if (window.opera && window.opera.postError) {\n      window.opera.postError(msg);\n    }\n  }\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.qtip.nightly.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.qtip.nightly.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * qTip2 - Pretty powerful tooltips - v2.2.1-29-\n * http://qtip2.com\n *\n * Copyright (c) 2015 \n * Released under the MIT licenses\n * http://jquery.org/license\n *\n * Date: Tue Dec 8 2015 05:50 EST-0500\n * Plugins: tips modal viewport svg imagemap ie6\n * Styles: core basic css3\n */\n\n/*global window: false, jQuery: false, console: false, define: false */\n\n/* Cache window, document, undefined */\n(function (window, document, undefined) {\n  // Uses AMD or browser globals to create a jQuery plugin.\n  (function (factory) {\n    \"use strict\";\n\n    if (typeof define === 'function' && define.amd) {\n      define(['jquery'], factory);\n    } else if (jQuery && !jQuery.fn.qtip) {\n      factory(jQuery);\n    }\n  })(function ($) {\n    \"use strict\"; // Enable ECMAScript \"strict\" operation for this function. See more: http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\n\n    ; // Munge the primitives - Paul Irish tip\n\n    var TRUE = true,\n        FALSE = false,\n        NULL = null,\n        // Common variables\n    X = 'x',\n        Y = 'y',\n        WIDTH = 'width',\n        HEIGHT = 'height',\n        // Positioning sides\n    TOP = 'top',\n        LEFT = 'left',\n        BOTTOM = 'bottom',\n        RIGHT = 'right',\n        CENTER = 'center',\n        // Position adjustment types\n    FLIP = 'flip',\n        FLIPINVERT = 'flipinvert',\n        SHIFT = 'shift',\n        // Shortcut vars\n    QTIP,\n        PROTOTYPE,\n        CORNER,\n        CHECKS,\n        PLUGINS = {},\n        NAMESPACE = 'qtip',\n        ATTR_HAS = 'data-hasqtip',\n        ATTR_ID = 'data-qtip-id',\n        WIDGET = ['ui-widget', 'ui-tooltip'],\n        SELECTOR = '.' + NAMESPACE,\n        INACTIVE_EVENTS = 'click dblclick mousedown mouseup mousemove mouseleave mouseenter'.split(' '),\n        CLASS_FIXED = NAMESPACE + '-fixed',\n        CLASS_DEFAULT = NAMESPACE + '-default',\n        CLASS_FOCUS = NAMESPACE + '-focus',\n        CLASS_HOVER = NAMESPACE + '-hover',\n        CLASS_DISABLED = NAMESPACE + '-disabled',\n        replaceSuffix = '_replacedByqTip',\n        oldtitle = 'oldtitle',\n        trackingBound,\n        // Browser detection\n    BROWSER = {\n      /*\n       * IE version detection\n       *\n       * Adapted from: http://ajaxian.com/archives/attack-of-the-ie-conditional-comment\n       * Credit to James Padolsey for the original implemntation!\n       */\n      ie: function () {\n        for (var v = 4, i = document.createElement(\"div\"); (i.innerHTML = \"<!--[if gt IE \" + v + \"]><i></i><![endif]-->\") && i.getElementsByTagName(\"i\")[0]; v += 1) {}\n\n        return v > 4 ? v : NaN;\n      }(),\n\n      /*\n       * iOS version detection\n       */\n      iOS: parseFloat(('' + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1]).replace('undefined', '3_2').replace('_', '.').replace('_', '')) || FALSE\n    };\n    ;\n\n    function QTip(target, options, id, attr) {\n      // Elements and ID\n      this.id = id;\n      this.target = target;\n      this.tooltip = NULL;\n      this.elements = {\n        target: target\n      }; // Internal constructs\n\n      this._id = NAMESPACE + '-' + id;\n      this.timers = {\n        img: {}\n      };\n      this.options = options;\n      this.plugins = {}; // Cache object\n\n      this.cache = {\n        event: {},\n        target: $(),\n        disabled: FALSE,\n        attr: attr,\n        onTooltip: FALSE,\n        lastClass: ''\n      }; // Set the initial flags\n\n      this.rendered = this.destroyed = this.disabled = this.waiting = this.hiddenDuringWait = this.positioning = this.triggering = FALSE;\n    }\n\n    PROTOTYPE = QTip.prototype;\n\n    PROTOTYPE._when = function (deferreds) {\n      return $.when.apply($, deferreds);\n    };\n\n    PROTOTYPE.render = function (show) {\n      if (this.rendered || this.destroyed) {\n        return this;\n      } // If tooltip has already been rendered, exit\n\n\n      var self = this,\n          options = this.options,\n          cache = this.cache,\n          elements = this.elements,\n          text = options.content.text,\n          title = options.content.title,\n          button = options.content.button,\n          posOptions = options.position,\n          namespace = '.' + this._id + ' ',\n          deferreds = [],\n          tooltip; // Add ARIA attributes to target\n\n      $.attr(this.target[0], 'aria-describedby', this._id); // Create public position object that tracks current position corners\n\n      cache.posClass = this._createPosClass((this.position = {\n        my: posOptions.my,\n        at: posOptions.at\n      }).my); // Create tooltip element\n\n      this.tooltip = elements.tooltip = tooltip = $('<div/>', {\n        'id': this._id,\n        'class': [NAMESPACE, CLASS_DEFAULT, options.style.classes, cache.posClass].join(' '),\n        'width': options.style.width || '',\n        'height': options.style.height || '',\n        'tracking': posOptions.target === 'mouse' && posOptions.adjust.mouse,\n\n        /* ARIA specific attributes */\n        'role': 'alert',\n        'aria-live': 'polite',\n        'aria-atomic': FALSE,\n        'aria-describedby': this._id + '-content',\n        'aria-hidden': TRUE\n      }).toggleClass(CLASS_DISABLED, this.disabled).attr(ATTR_ID, this.id).data(NAMESPACE, this).appendTo(posOptions.container).append( // Create content element\n      elements.content = $('<div />', {\n        'class': NAMESPACE + '-content',\n        'id': this._id + '-content',\n        'aria-atomic': TRUE\n      })); // Set rendered flag and prevent redundant reposition calls for now\n\n      this.rendered = -1;\n      this.positioning = TRUE; // Create title...\n\n      if (title) {\n        this._createTitle(); // Update title only if its not a callback (called in toggle if so)\n\n\n        if (!$.isFunction(title)) {\n          deferreds.push(this._updateTitle(title, FALSE));\n        }\n      } // Create button\n\n\n      if (button) {\n        this._createButton();\n      } // Set proper rendered flag and update content if not a callback function (called in toggle)\n\n\n      if (!$.isFunction(text)) {\n        deferreds.push(this._updateContent(text, FALSE));\n      }\n\n      this.rendered = TRUE; // Setup widget classes\n\n      this._setWidget(); // Initialize 'render' plugins\n\n\n      $.each(PLUGINS, function (name) {\n        var instance;\n\n        if (this.initialize === 'render' && (instance = this(self))) {\n          self.plugins[name] = instance;\n        }\n      }); // Unassign initial events and assign proper events\n\n      this._unassignEvents();\n\n      this._assignEvents(); // When deferreds have completed\n\n\n      this._when(deferreds).then(function () {\n        // tooltiprender event\n        self._trigger('render'); // Reset flags\n\n\n        self.positioning = FALSE; // Show tooltip if not hidden during wait period\n\n        if (!self.hiddenDuringWait && (options.show.ready || show)) {\n          self.toggle(TRUE, cache.event, FALSE);\n        }\n\n        self.hiddenDuringWait = FALSE;\n      }); // Expose API\n\n\n      QTIP.api[this.id] = this;\n      return this;\n    };\n\n    PROTOTYPE.destroy = function (immediate) {\n      // Set flag the signify destroy is taking place to plugins\n      // and ensure it only gets destroyed once!\n      if (this.destroyed) {\n        return this.target;\n      }\n\n      function process() {\n        if (this.destroyed) {\n          return;\n        }\n\n        this.destroyed = TRUE;\n        var target = this.target,\n            title = target.attr(oldtitle),\n            timer; // Destroy tooltip if rendered\n\n        if (this.rendered) {\n          this.tooltip.stop(1, 0).find('*').remove().end().remove();\n        } // Destroy all plugins\n\n\n        $.each(this.plugins, function (name) {\n          this.destroy && this.destroy();\n        }); // Clear timers\n\n        for (timer in this.timers) {\n          clearTimeout(this.timers[timer]);\n        } // Remove api object and ARIA attributes\n\n\n        target.removeData(NAMESPACE).removeAttr(ATTR_ID).removeAttr(ATTR_HAS).removeAttr('aria-describedby'); // Reset old title attribute if removed\n\n        if (this.options.suppress && title) {\n          target.attr('title', title).removeAttr(oldtitle);\n        } // Remove qTip events associated with this API\n\n\n        this._unassignEvents(); // Remove ID from used id objects, and delete object references\n        // for better garbage collection and leak protection\n\n\n        this.options = this.elements = this.cache = this.timers = this.plugins = this.mouse = NULL; // Delete epoxsed API object\n\n        delete QTIP.api[this.id];\n      } // If an immediate destroy is needed\n\n\n      if ((immediate !== TRUE || this.triggering === 'hide') && this.rendered) {\n        this.tooltip.one('tooltiphidden', $.proxy(process, this));\n        !this.triggering && this.hide();\n      } // If we're not in the process of hiding... process\n      else {\n          process.call(this);\n        }\n\n      return this.target;\n    };\n\n    ;\n\n    function invalidOpt(a) {\n      return a === NULL || $.type(a) !== 'object';\n    }\n\n    function invalidContent(c) {\n      return !($.isFunction(c) || c && c.attr || c.length || $.type(c) === 'object' && (c.jquery || c.then));\n    } // Option object sanitizer\n\n\n    function sanitizeOptions(opts) {\n      var content, text, ajax, once;\n\n      if (invalidOpt(opts)) {\n        return FALSE;\n      }\n\n      if (invalidOpt(opts.metadata)) {\n        opts.metadata = {\n          type: opts.metadata\n        };\n      }\n\n      if ('content' in opts) {\n        content = opts.content;\n\n        if (invalidOpt(content) || content.jquery || content.done) {\n          content = opts.content = {\n            text: text = invalidContent(content) ? FALSE : content\n          };\n        } else {\n          text = content.text;\n        } // DEPRECATED - Old content.ajax plugin functionality\n        // Converts it into the proper Deferred syntax\n\n\n        if ('ajax' in content) {\n          ajax = content.ajax;\n          once = ajax && ajax.once !== FALSE;\n          delete content.ajax;\n\n          content.text = function (event, api) {\n            var loading = text || $(this).attr(api.options.content.attr) || 'Loading...',\n                deferred = $.ajax($.extend({}, ajax, {\n              context: api\n            })).then(ajax.success, NULL, ajax.error).then(function (content) {\n              if (content && once) {\n                api.set('content.text', content);\n              }\n\n              return content;\n            }, function (xhr, status, error) {\n              if (api.destroyed || xhr.status === 0) {\n                return;\n              }\n\n              api.set('content.text', status + ': ' + error);\n            });\n            return !once ? (api.set('content.text', loading), deferred) : loading;\n          };\n        }\n\n        if ('title' in content) {\n          if ($.isPlainObject(content.title)) {\n            content.button = content.title.button;\n            content.title = content.title.text;\n          }\n\n          if (invalidContent(content.title || FALSE)) {\n            content.title = FALSE;\n          }\n        }\n      }\n\n      if ('position' in opts && invalidOpt(opts.position)) {\n        opts.position = {\n          my: opts.position,\n          at: opts.position\n        };\n      }\n\n      if ('show' in opts && invalidOpt(opts.show)) {\n        opts.show = opts.show.jquery ? {\n          target: opts.show\n        } : opts.show === TRUE ? {\n          ready: TRUE\n        } : {\n          event: opts.show\n        };\n      }\n\n      if ('hide' in opts && invalidOpt(opts.hide)) {\n        opts.hide = opts.hide.jquery ? {\n          target: opts.hide\n        } : {\n          event: opts.hide\n        };\n      }\n\n      if ('style' in opts && invalidOpt(opts.style)) {\n        opts.style = {\n          classes: opts.style\n        };\n      } // Sanitize plugin options\n\n\n      $.each(PLUGINS, function () {\n        this.sanitize && this.sanitize(opts);\n      });\n      return opts;\n    } // Setup builtin .set() option checks\n\n\n    CHECKS = PROTOTYPE.checks = {\n      builtin: {\n        // Core checks\n        '^id$': function id$(obj, o, v, prev) {\n          var id = v === TRUE ? QTIP.nextid : v,\n              new_id = NAMESPACE + '-' + id;\n\n          if (id !== FALSE && id.length > 0 && !$('#' + new_id).length) {\n            this._id = new_id;\n\n            if (this.rendered) {\n              this.tooltip[0].id = this._id;\n              this.elements.content[0].id = this._id + '-content';\n              this.elements.title[0].id = this._id + '-title';\n            }\n          } else {\n            obj[o] = prev;\n          }\n        },\n        '^prerender': function prerender(obj, o, v) {\n          v && !this.rendered && this.render(this.options.show.ready);\n        },\n        // Content checks\n        '^content.text$': function contentText$(obj, o, v) {\n          this._updateContent(v);\n        },\n        '^content.attr$': function contentAttr$(obj, o, v, prev) {\n          if (this.options.content.text === this.target.attr(prev)) {\n            this._updateContent(this.target.attr(v));\n          }\n        },\n        '^content.title$': function contentTitle$(obj, o, v) {\n          // Remove title if content is null\n          if (!v) {\n            return this._removeTitle();\n          } // If title isn't already created, create it now and update\n\n\n          v && !this.elements.title && this._createTitle();\n\n          this._updateTitle(v);\n        },\n        '^content.button$': function contentButton$(obj, o, v) {\n          this._updateButton(v);\n        },\n        '^content.title.(text|button)$': function contentTitleTextButton$(obj, o, v) {\n          this.set('content.' + o, v); // Backwards title.text/button compat\n        },\n        // Position checks\n        '^position.(my|at)$': function positionMyAt$(obj, o, v) {\n          if ('string' === typeof v) {\n            this.position[o] = obj[o] = new CORNER(v, o === 'at');\n          }\n        },\n        '^position.container$': function positionContainer$(obj, o, v) {\n          this.rendered && this.tooltip.appendTo(v);\n        },\n        // Show checks\n        '^show.ready$': function showReady$(obj, o, v) {\n          v && (!this.rendered && this.render(TRUE) || this.toggle(TRUE));\n        },\n        // Style checks\n        '^style.classes$': function styleClasses$(obj, o, v, p) {\n          this.rendered && this.tooltip.removeClass(p).addClass(v);\n        },\n        '^style.(width|height)': function styleWidthHeight(obj, o, v) {\n          this.rendered && this.tooltip.css(o, v);\n        },\n        '^style.widget|content.title': function styleWidgetContentTitle() {\n          this.rendered && this._setWidget();\n        },\n        '^style.def': function styleDef(obj, o, v) {\n          this.rendered && this.tooltip.toggleClass(CLASS_DEFAULT, !!v);\n        },\n        // Events check\n        '^events.(render|show|move|hide|focus|blur)$': function eventsRenderShowMoveHideFocusBlur$(obj, o, v) {\n          this.rendered && this.tooltip[($.isFunction(v) ? '' : 'un') + 'bind']('tooltip' + o, v);\n        },\n        // Properties which require event reassignment\n        '^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)': function showHidePositionEventTargetFixedInactiveLeaveDistanceViewportAdjust() {\n          if (!this.rendered) {\n            return;\n          } // Set tracking flag\n\n\n          var posOptions = this.options.position;\n          this.tooltip.attr('tracking', posOptions.target === 'mouse' && posOptions.adjust.mouse); // Reassign events\n\n          this._unassignEvents();\n\n          this._assignEvents();\n        }\n      }\n    }; // Dot notation converter\n\n    function convertNotation(options, notation) {\n      var i = 0,\n          obj,\n          option = options,\n          // Split notation into array\n      levels = notation.split('.'); // Loop through\n\n      while (option = option[levels[i++]]) {\n        if (i < levels.length) {\n          obj = option;\n        }\n      }\n\n      return [obj || options, levels.pop()];\n    }\n\n    PROTOTYPE.get = function (notation) {\n      if (this.destroyed) {\n        return this;\n      }\n\n      var o = convertNotation(this.options, notation.toLowerCase()),\n          result = o[0][o[1]];\n      return result.precedance ? result.string() : result;\n    };\n\n    function setCallback(notation, args) {\n      var category, rule, match;\n\n      for (category in this.checks) {\n        for (rule in this.checks[category]) {\n          if (match = new RegExp(rule, 'i').exec(notation)) {\n            args.push(match);\n\n            if (category === 'builtin' || this.plugins[category]) {\n              this.checks[category][rule].apply(this.plugins[category] || this, args);\n            }\n          }\n        }\n      }\n    }\n\n    var rmove = /^position\\.(my|at|adjust|target|container|viewport)|style|content|show\\.ready/i,\n        rrender = /^prerender|show\\.ready/i;\n\n    PROTOTYPE.set = function (option, value) {\n      if (this.destroyed) {\n        return this;\n      }\n\n      var rendered = this.rendered,\n          reposition = FALSE,\n          options = this.options,\n          checks = this.checks,\n          name; // Convert singular option/value pair into object form\n\n      if ('string' === typeof option) {\n        name = option;\n        option = {};\n        option[name] = value;\n      } else {\n        option = $.extend({}, option);\n      } // Set all of the defined options to their new values\n\n\n      $.each(option, function (notation, value) {\n        if (rendered && rrender.test(notation)) {\n          delete option[notation];\n          return;\n        } // Set new obj value\n\n\n        var obj = convertNotation(options, notation.toLowerCase()),\n            previous;\n        previous = obj[0][obj[1]];\n        obj[0][obj[1]] = value && value.nodeType ? $(value) : value; // Also check if we need to reposition\n\n        reposition = rmove.test(notation) || reposition; // Set the new params for the callback\n\n        option[notation] = [obj[0], obj[1], value, previous];\n      }); // Re-sanitize options\n\n      sanitizeOptions(options);\n      /*\n       * Execute any valid callbacks for the set options\n       * Also set positioning flag so we don't get loads of redundant repositioning calls.\n       */\n\n      this.positioning = TRUE;\n      $.each(option, $.proxy(setCallback, this));\n      this.positioning = FALSE; // Update position if needed\n\n      if (this.rendered && this.tooltip[0].offsetWidth > 0 && reposition) {\n        this.reposition(options.position.target === 'mouse' ? NULL : this.cache.event);\n      }\n\n      return this;\n    };\n\n    ;\n\n    PROTOTYPE._update = function (content, element, reposition) {\n      var self = this,\n          cache = this.cache; // Make sure tooltip is rendered and content is defined. If not return\n\n      if (!this.rendered || !content) {\n        return FALSE;\n      } // Use function to parse content\n\n\n      if ($.isFunction(content)) {\n        content = content.call(this.elements.target, cache.event, this) || '';\n      } // Handle deferred content\n\n\n      if ($.isFunction(content.then)) {\n        cache.waiting = TRUE;\n        return content.then(function (c) {\n          cache.waiting = FALSE;\n          return self._update(c, element);\n        }, NULL, function (e) {\n          return self._update(e, element);\n        });\n      } // If content is null... return false\n\n\n      if (content === FALSE || !content && content !== '') {\n        return FALSE;\n      } // Append new content if its a DOM array and show it if hidden\n\n\n      if (content.jquery && content.length > 0) {\n        element.empty().append(content.css({\n          display: 'block',\n          visibility: 'visible'\n        }));\n      } // Content is a regular string, insert the new content\n      else {\n          element.html(content);\n        } // Wait for content to be loaded, and reposition\n\n\n      return this._waitForContent(element).then(function (images) {\n        if (self.rendered && self.tooltip[0].offsetWidth > 0) {\n          self.reposition(cache.event, !images.length);\n        }\n      });\n    };\n\n    PROTOTYPE._waitForContent = function (element) {\n      var cache = this.cache; // Set flag\n\n      cache.waiting = TRUE; // If imagesLoaded is included, ensure images have loaded and return promise\n\n      return ($.fn.imagesLoaded ? element.imagesLoaded() : $.Deferred().resolve([])).done(function () {\n        cache.waiting = FALSE;\n      }).promise();\n    };\n\n    PROTOTYPE._updateContent = function (content, reposition) {\n      this._update(content, this.elements.content, reposition);\n    };\n\n    PROTOTYPE._updateTitle = function (content, reposition) {\n      if (this._update(content, this.elements.title, reposition) === FALSE) {\n        this._removeTitle(FALSE);\n      }\n    };\n\n    PROTOTYPE._createTitle = function () {\n      var elements = this.elements,\n          id = this._id + '-title'; // Destroy previous title element, if present\n\n      if (elements.titlebar) {\n        this._removeTitle();\n      } // Create title bar and title elements\n\n\n      elements.titlebar = $('<div />', {\n        'class': NAMESPACE + '-titlebar ' + (this.options.style.widget ? createWidgetClass('header') : '')\n      }).append(elements.title = $('<div />', {\n        'id': id,\n        'class': NAMESPACE + '-title',\n        'aria-atomic': TRUE\n      })).insertBefore(elements.content) // Button-specific events\n      .delegate('.qtip-close', 'mousedown keydown mouseup keyup mouseout', function (event) {\n        $(this).toggleClass('ui-state-active ui-state-focus', event.type.substr(-4) === 'down');\n      }).delegate('.qtip-close', 'mouseover mouseout', function (event) {\n        $(this).toggleClass('ui-state-hover', event.type === 'mouseover');\n      }); // Create button if enabled\n\n      if (this.options.content.button) {\n        this._createButton();\n      }\n    };\n\n    PROTOTYPE._removeTitle = function (reposition) {\n      var elements = this.elements;\n\n      if (elements.title) {\n        elements.titlebar.remove();\n        elements.titlebar = elements.title = elements.button = NULL; // Reposition if enabled\n\n        if (reposition !== FALSE) {\n          this.reposition();\n        }\n      }\n    };\n\n    ;\n\n    PROTOTYPE._createPosClass = function (my) {\n      return NAMESPACE + '-pos-' + (my || this.options.position.my).abbrev();\n    };\n\n    PROTOTYPE.reposition = function (event, effect) {\n      if (!this.rendered || this.positioning || this.destroyed) {\n        return this;\n      } // Set positioning flag\n\n\n      this.positioning = TRUE;\n      var cache = this.cache,\n          tooltip = this.tooltip,\n          posOptions = this.options.position,\n          target = posOptions.target,\n          my = posOptions.my,\n          at = posOptions.at,\n          viewport = posOptions.viewport,\n          container = posOptions.container,\n          adjust = posOptions.adjust,\n          method = adjust.method.split(' '),\n          tooltipWidth = tooltip.outerWidth(FALSE),\n          tooltipHeight = tooltip.outerHeight(FALSE),\n          targetWidth = 0,\n          targetHeight = 0,\n          type = tooltip.css('position'),\n          position = {\n        left: 0,\n        top: 0\n      },\n          visible = tooltip[0].offsetWidth > 0,\n          isScroll = event && event.type === 'scroll',\n          win = $(window),\n          doc = container[0].ownerDocument,\n          mouse = this.mouse,\n          pluginCalculations,\n          offset,\n          adjusted,\n          newClass; // Check if absolute position was passed\n\n      if ($.isArray(target) && target.length === 2) {\n        // Force left top and set position\n        at = {\n          x: LEFT,\n          y: TOP\n        };\n        position = {\n          left: target[0],\n          top: target[1]\n        };\n      } // Check if mouse was the target\n      else if (target === 'mouse') {\n          // Force left top to allow flipping\n          at = {\n            x: LEFT,\n            y: TOP\n          }; // Use the mouse origin that caused the show event, if distance hiding is enabled\n\n          if ((!adjust.mouse || this.options.hide.distance) && cache.origin && cache.origin.pageX) {\n            event = cache.origin;\n          } // Use cached event for resize/scroll events\n          else if (!event || event && (event.type === 'resize' || event.type === 'scroll')) {\n              event = cache.event;\n            } // Otherwise, use the cached mouse coordinates if available\n            else if (mouse && mouse.pageX) {\n                event = mouse;\n              } // Calculate body and container offset and take them into account below\n\n\n          if (type !== 'static') {\n            position = container.offset();\n          }\n\n          if (doc.body.offsetWidth !== (window.innerWidth || doc.documentElement.clientWidth)) {\n            offset = $(document.body).offset();\n          } // Use event coordinates for position\n\n\n          position = {\n            left: event.pageX - position.left + (offset && offset.left || 0),\n            top: event.pageY - position.top + (offset && offset.top || 0)\n          }; // Scroll events are a pain, some browsers\n\n          if (adjust.mouse && isScroll && mouse) {\n            position.left -= (mouse.scrollX || 0) - win.scrollLeft();\n            position.top -= (mouse.scrollY || 0) - win.scrollTop();\n          }\n        } // Target wasn't mouse or absolute...\n        else {\n            // Check if event targetting is being used\n            if (target === 'event') {\n              if (event && event.target && event.type !== 'scroll' && event.type !== 'resize') {\n                cache.target = $(event.target);\n              } else if (!event.target) {\n                cache.target = this.elements.target;\n              }\n            } else if (target !== 'event') {\n              cache.target = $(target.jquery ? target : this.elements.target);\n            }\n\n            target = cache.target; // Parse the target into a jQuery object and make sure there's an element present\n\n            target = $(target).eq(0);\n\n            if (target.length === 0) {\n              return this;\n            } // Check if window or document is the target\n            else if (target[0] === document || target[0] === window) {\n                targetWidth = BROWSER.iOS ? window.innerWidth : target.width();\n                targetHeight = BROWSER.iOS ? window.innerHeight : target.height();\n\n                if (target[0] === window) {\n                  position = {\n                    top: (viewport || target).scrollTop(),\n                    left: (viewport || target).scrollLeft()\n                  };\n                }\n              } // Check if the target is an <AREA> element\n              else if (PLUGINS.imagemap && target.is('area')) {\n                  pluginCalculations = PLUGINS.imagemap(this, target, at, PLUGINS.viewport ? method : FALSE);\n                } // Check if the target is an SVG element\n                else if (PLUGINS.svg && target && target[0].ownerSVGElement) {\n                    pluginCalculations = PLUGINS.svg(this, target, at, PLUGINS.viewport ? method : FALSE);\n                  } // Otherwise use regular jQuery methods\n                  else {\n                      targetWidth = target.outerWidth(FALSE);\n                      targetHeight = target.outerHeight(FALSE);\n                      position = target.offset();\n                    } // Parse returned plugin values into proper variables\n\n\n            if (pluginCalculations) {\n              targetWidth = pluginCalculations.width;\n              targetHeight = pluginCalculations.height;\n              offset = pluginCalculations.offset;\n              position = pluginCalculations.position;\n            } // Adjust position to take into account offset parents\n\n\n            position = this.reposition.offset(target, position, container); // Adjust for position.fixed tooltips (and also iOS scroll bug in v3.2-4.0 & v4.3-4.3.2)\n\n            if (BROWSER.iOS > 3.1 && BROWSER.iOS < 4.1 || BROWSER.iOS >= 4.3 && BROWSER.iOS < 4.33 || !BROWSER.iOS && type === 'fixed') {\n              position.left -= win.scrollLeft();\n              position.top -= win.scrollTop();\n            } // Adjust position relative to target\n\n\n            if (!pluginCalculations || pluginCalculations && pluginCalculations.adjustable !== FALSE) {\n              position.left += at.x === RIGHT ? targetWidth : at.x === CENTER ? targetWidth / 2 : 0;\n              position.top += at.y === BOTTOM ? targetHeight : at.y === CENTER ? targetHeight / 2 : 0;\n            }\n          } // Adjust position relative to tooltip\n\n\n      position.left += adjust.x + (my.x === RIGHT ? -tooltipWidth : my.x === CENTER ? -tooltipWidth / 2 : 0);\n      position.top += adjust.y + (my.y === BOTTOM ? -tooltipHeight : my.y === CENTER ? -tooltipHeight / 2 : 0); // Use viewport adjustment plugin if enabled\n\n      if (PLUGINS.viewport) {\n        adjusted = position.adjusted = PLUGINS.viewport(this, position, posOptions, targetWidth, targetHeight, tooltipWidth, tooltipHeight); // Apply offsets supplied by positioning plugin (if used)\n\n        if (offset && adjusted.left) {\n          position.left += offset.left;\n        }\n\n        if (offset && adjusted.top) {\n          position.top += offset.top;\n        } // Apply any new 'my' position\n\n\n        if (adjusted.my) {\n          this.position.my = adjusted.my;\n        }\n      } // Viewport adjustment is disabled, set values to zero\n      else {\n          position.adjusted = {\n            left: 0,\n            top: 0\n          };\n        } // Set tooltip position class if it's changed\n\n\n      if (cache.posClass !== (newClass = this._createPosClass(this.position.my))) {\n        tooltip.removeClass(cache.posClass).addClass(cache.posClass = newClass);\n      } // tooltipmove event\n\n\n      if (!this._trigger('move', [position, viewport.elem || viewport], event)) {\n        return this;\n      }\n\n      delete position.adjusted; // If effect is disabled, target it mouse, no animation is defined or positioning gives NaN out, set CSS directly\n\n      if (effect === FALSE || !visible || isNaN(position.left) || isNaN(position.top) || target === 'mouse' || !$.isFunction(posOptions.effect)) {\n        tooltip.css(position);\n      } // Use custom function if provided\n      else if ($.isFunction(posOptions.effect)) {\n          posOptions.effect.call(tooltip, this, $.extend({}, position));\n          tooltip.queue(function (next) {\n            // Reset attributes to avoid cross-browser rendering bugs\n            $(this).css({\n              opacity: '',\n              height: ''\n            });\n\n            if (BROWSER.ie) {\n              this.style.removeAttribute('filter');\n            }\n\n            next();\n          });\n        } // Set positioning flag\n\n\n      this.positioning = FALSE;\n      return this;\n    }; // Custom (more correct for qTip!) offset calculator\n\n\n    PROTOTYPE.reposition.offset = function (elem, pos, container) {\n      if (!container[0]) {\n        return pos;\n      }\n\n      var ownerDocument = $(elem[0].ownerDocument),\n          quirks = !!BROWSER.ie && document.compatMode !== 'CSS1Compat',\n          parent = container[0],\n          scrolled,\n          position,\n          parentOffset,\n          overflow;\n\n      function scroll(e, i) {\n        pos.left += i * e.scrollLeft();\n        pos.top += i * e.scrollTop();\n      } // Compensate for non-static containers offset\n\n\n      do {\n        if ((position = $.css(parent, 'position')) !== 'static') {\n          if (position === 'fixed') {\n            parentOffset = parent.getBoundingClientRect();\n            scroll(ownerDocument, -1);\n          } else {\n            parentOffset = $(parent).position();\n            parentOffset.left += parseFloat($.css(parent, 'borderLeftWidth')) || 0;\n            parentOffset.top += parseFloat($.css(parent, 'borderTopWidth')) || 0;\n          }\n\n          pos.left -= parentOffset.left + (parseFloat($.css(parent, 'marginLeft')) || 0);\n          pos.top -= parentOffset.top + (parseFloat($.css(parent, 'marginTop')) || 0); // If this is the first parent element with an overflow of \"scroll\" or \"auto\", store it\n\n          if (!scrolled && (overflow = $.css(parent, 'overflow')) !== 'hidden' && overflow !== 'visible') {\n            scrolled = $(parent);\n          }\n        }\n      } while (parent = parent.offsetParent); // Compensate for containers scroll if it also has an offsetParent (or in IE quirks mode)\n\n\n      if (scrolled && (scrolled[0] !== ownerDocument[0] || quirks)) {\n        scroll(scrolled, 1);\n      }\n\n      return pos;\n    }; // Corner class\n\n\n    var C = (CORNER = PROTOTYPE.reposition.Corner = function (corner, forceY) {\n      corner = ('' + corner).replace(/([A-Z])/, ' $1').replace(/middle/gi, CENTER).toLowerCase();\n      this.x = (corner.match(/left|right/i) || corner.match(/center/) || ['inherit'])[0].toLowerCase();\n      this.y = (corner.match(/top|bottom|center/i) || ['inherit'])[0].toLowerCase();\n      this.forceY = !!forceY;\n      var f = corner.charAt(0);\n      this.precedance = f === 't' || f === 'b' ? Y : X;\n    }).prototype;\n\n    C.invert = function (z, center) {\n      this[z] = this[z] === LEFT ? RIGHT : this[z] === RIGHT ? LEFT : center || this[z];\n    };\n\n    C.string = function (join) {\n      var x = this.x,\n          y = this.y;\n      var result = x !== y ? x === 'center' || y !== 'center' && (this.precedance === Y || this.forceY) ? [y, x] : [x, y] : [x];\n      return join !== false ? result.join(' ') : result;\n    };\n\n    C.abbrev = function () {\n      var result = this.string(false);\n      return result[0].charAt(0) + (result[1] && result[1].charAt(0) || '');\n    };\n\n    C.clone = function () {\n      return new CORNER(this.string(), this.forceY);\n    };\n\n    ;\n\n    PROTOTYPE.toggle = function (state, event) {\n      var cache = this.cache,\n          options = this.options,\n          tooltip = this.tooltip; // Try to prevent flickering when tooltip overlaps show element\n\n      if (event) {\n        if (/over|enter/.test(event.type) && cache.event && /out|leave/.test(cache.event.type) && options.show.target.add(event.target).length === options.show.target.length && tooltip.has(event.relatedTarget).length) {\n          return this;\n        } // Cache event\n\n\n        cache.event = $.event.fix(event);\n      } // If we're currently waiting and we've just hidden... stop it\n\n\n      this.waiting && !state && (this.hiddenDuringWait = TRUE); // Render the tooltip if showing and it isn't already\n\n      if (!this.rendered) {\n        return state ? this.render(1) : this;\n      } else if (this.destroyed || this.disabled) {\n        return this;\n      }\n\n      var type = state ? 'show' : 'hide',\n          opts = this.options[type],\n          otherOpts = this.options[!state ? 'show' : 'hide'],\n          posOptions = this.options.position,\n          contentOptions = this.options.content,\n          width = this.tooltip.css('width'),\n          visible = this.tooltip.is(':visible'),\n          animate = state || opts.target.length === 1,\n          sameTarget = !event || opts.target.length < 2 || cache.target[0] === event.target,\n          identicalState,\n          allow,\n          showEvent,\n          delay,\n          after; // Detect state if valid one isn't provided\n\n      if (_typeof(state).search('boolean|number')) {\n        state = !visible;\n      } // Check if the tooltip is in an identical state to the new would-be state\n\n\n      identicalState = !tooltip.is(':animated') && visible === state && sameTarget; // Fire tooltip(show/hide) event and check if destroyed\n\n      allow = !identicalState ? !!this._trigger(type, [90]) : NULL; // Check to make sure the tooltip wasn't destroyed in the callback\n\n      if (this.destroyed) {\n        return this;\n      } // If the user didn't stop the method prematurely and we're showing the tooltip, focus it\n\n\n      if (allow !== FALSE && state) {\n        this.focus(event);\n      } // If the state hasn't changed or the user stopped it, return early\n\n\n      if (!allow || identicalState) {\n        return this;\n      } // Set ARIA hidden attribute\n\n\n      $.attr(tooltip[0], 'aria-hidden', !!!state); // Execute state specific properties\n\n      if (state) {\n        // Store show origin coordinates\n        this.mouse && (cache.origin = $.event.fix(this.mouse)); // Update tooltip content & title if it's a dynamic function\n\n        if ($.isFunction(contentOptions.text)) {\n          this._updateContent(contentOptions.text, FALSE);\n        }\n\n        if ($.isFunction(contentOptions.title)) {\n          this._updateTitle(contentOptions.title, FALSE);\n        } // Cache mousemove events for positioning purposes (if not already tracking)\n\n\n        if (!trackingBound && posOptions.target === 'mouse' && posOptions.adjust.mouse) {\n          $(document).bind('mousemove.' + NAMESPACE, this._storeMouse);\n          trackingBound = TRUE;\n        } // Update the tooltip position (set width first to prevent viewport/max-width issues)\n\n\n        if (!width) {\n          tooltip.css('width', tooltip.outerWidth(FALSE));\n        }\n\n        this.reposition(event, arguments[2]);\n\n        if (!width) {\n          tooltip.css('width', '');\n        } // Hide other tooltips if tooltip is solo\n\n\n        if (!!opts.solo) {\n          (typeof opts.solo === 'string' ? $(opts.solo) : $(SELECTOR, opts.solo)).not(tooltip).not(opts.target).qtip('hide', $.Event('tooltipsolo'));\n        }\n      } else {\n        // Clear show timer if we're hiding\n        clearTimeout(this.timers.show); // Remove cached origin on hide\n\n        delete cache.origin; // Remove mouse tracking event if not needed (all tracking qTips are hidden)\n\n        if (trackingBound && !$(SELECTOR + '[tracking=\"true\"]:visible', opts.solo).not(tooltip).length) {\n          $(document).unbind('mousemove.' + NAMESPACE);\n          trackingBound = FALSE;\n        } // Blur the tooltip\n\n\n        this.blur(event);\n      } // Define post-animation, state specific properties\n\n\n      after = $.proxy(function () {\n        if (state) {\n          // Prevent antialias from disappearing in IE by removing filter\n          if (BROWSER.ie) {\n            tooltip[0].style.removeAttribute('filter');\n          } // Remove overflow setting to prevent tip bugs\n\n\n          tooltip.css('overflow', ''); // Autofocus elements if enabled\n\n          if ('string' === typeof opts.autofocus) {\n            $(this.options.show.autofocus, tooltip).focus();\n          } // If set, hide tooltip when inactive for delay period\n\n\n          this.options.show.target.trigger('qtip-' + this.id + '-inactive');\n        } else {\n          // Reset CSS states\n          tooltip.css({\n            display: '',\n            visibility: '',\n            opacity: '',\n            left: '',\n            top: ''\n          });\n        } // tooltipvisible/tooltiphidden events\n\n\n        this._trigger(state ? 'visible' : 'hidden');\n      }, this); // If no effect type is supplied, use a simple toggle\n\n      if (opts.effect === FALSE || animate === FALSE) {\n        tooltip[type]();\n        after();\n      } // Use custom function if provided\n      else if ($.isFunction(opts.effect)) {\n          tooltip.stop(1, 1);\n          opts.effect.call(tooltip, this);\n          tooltip.queue('fx', function (n) {\n            after();\n            n();\n          });\n        } // Use basic fade function by default\n        else {\n            tooltip.fadeTo(90, state ? 1 : 0, after);\n          } // If inactive hide method is set, active it\n\n\n      if (state) {\n        opts.target.trigger('qtip-' + this.id + '-inactive');\n      }\n\n      return this;\n    };\n\n    PROTOTYPE.show = function (event) {\n      return this.toggle(TRUE, event);\n    };\n\n    PROTOTYPE.hide = function (event) {\n      return this.toggle(FALSE, event);\n    };\n\n    ;\n\n    PROTOTYPE.focus = function (event) {\n      if (!this.rendered || this.destroyed) {\n        return this;\n      }\n\n      var qtips = $(SELECTOR),\n          tooltip = this.tooltip,\n          curIndex = parseInt(tooltip[0].style.zIndex, 10),\n          newIndex = QTIP.zindex + qtips.length,\n          focusedElem; // Only update the z-index if it has changed and tooltip is not already focused\n\n      if (!tooltip.hasClass(CLASS_FOCUS)) {\n        // tooltipfocus event\n        if (this._trigger('focus', [newIndex], event)) {\n          // Only update z-index's if they've changed\n          if (curIndex !== newIndex) {\n            // Reduce our z-index's and keep them properly ordered\n            qtips.each(function () {\n              if (this.style.zIndex > curIndex) {\n                this.style.zIndex = this.style.zIndex - 1;\n              }\n            }); // Fire blur event for focused tooltip\n\n            qtips.filter('.' + CLASS_FOCUS).qtip('blur', event);\n          } // Set the new z-index\n\n\n          tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;\n        }\n      }\n\n      return this;\n    };\n\n    PROTOTYPE.blur = function (event) {\n      if (!this.rendered || this.destroyed) {\n        return this;\n      } // Set focused status to FALSE\n\n\n      this.tooltip.removeClass(CLASS_FOCUS); // tooltipblur event\n\n      this._trigger('blur', [this.tooltip.css('zIndex')], event);\n\n      return this;\n    };\n\n    ;\n\n    PROTOTYPE.disable = function (state) {\n      if (this.destroyed) {\n        return this;\n      } // If 'toggle' is passed, toggle the current state\n\n\n      if (state === 'toggle') {\n        state = !(this.rendered ? this.tooltip.hasClass(CLASS_DISABLED) : this.disabled);\n      } // Disable if no state passed\n      else if ('boolean' !== typeof state) {\n          state = TRUE;\n        }\n\n      if (this.rendered) {\n        this.tooltip.toggleClass(CLASS_DISABLED, state).attr('aria-disabled', state);\n      }\n\n      this.disabled = !!state;\n      return this;\n    };\n\n    PROTOTYPE.enable = function () {\n      return this.disable(FALSE);\n    };\n\n    ;\n\n    PROTOTYPE._createButton = function () {\n      var self = this,\n          elements = this.elements,\n          tooltip = elements.tooltip,\n          button = this.options.content.button,\n          isString = typeof button === 'string',\n          close = isString ? button : 'Close tooltip';\n\n      if (elements.button) {\n        elements.button.remove();\n      } // Use custom button if one was supplied by user, else use default\n\n\n      if (button.jquery) {\n        elements.button = button;\n      } else {\n        elements.button = $('<a />', {\n          'class': 'qtip-close ' + (this.options.style.widget ? '' : NAMESPACE + '-icon'),\n          'title': close,\n          'aria-label': close\n        }).prepend($('<span />', {\n          'class': 'ui-icon ui-icon-close',\n          'html': '&times;'\n        }));\n      } // Create button and setup attributes\n\n\n      elements.button.appendTo(elements.titlebar || tooltip).attr('role', 'button').click(function (event) {\n        if (!tooltip.hasClass(CLASS_DISABLED)) {\n          self.hide(event);\n        }\n\n        return FALSE;\n      });\n    };\n\n    PROTOTYPE._updateButton = function (button) {\n      // Make sure tooltip is rendered and if not, return\n      if (!this.rendered) {\n        return FALSE;\n      }\n\n      var elem = this.elements.button;\n\n      if (button) {\n        this._createButton();\n      } else {\n        elem.remove();\n      }\n    };\n\n    ; // Widget class creator\n\n    function createWidgetClass(cls) {\n      return WIDGET.concat('').join(cls ? '-' + cls + ' ' : ' ');\n    } // Widget class setter method\n\n\n    PROTOTYPE._setWidget = function () {\n      var on = this.options.style.widget,\n          elements = this.elements,\n          tooltip = elements.tooltip,\n          disabled = tooltip.hasClass(CLASS_DISABLED);\n      tooltip.removeClass(CLASS_DISABLED);\n      CLASS_DISABLED = on ? 'ui-state-disabled' : 'qtip-disabled';\n      tooltip.toggleClass(CLASS_DISABLED, disabled);\n      tooltip.toggleClass('ui-helper-reset ' + createWidgetClass(), on).toggleClass(CLASS_DEFAULT, this.options.style.def && !on);\n\n      if (elements.content) {\n        elements.content.toggleClass(createWidgetClass('content'), on);\n      }\n\n      if (elements.titlebar) {\n        elements.titlebar.toggleClass(createWidgetClass('header'), on);\n      }\n\n      if (elements.button) {\n        elements.button.toggleClass(NAMESPACE + '-icon', !on);\n      }\n    };\n\n    ;\n\n    function delay(callback, duration) {\n      // If tooltip has displayed, start hide timer\n      if (duration > 0) {\n        return setTimeout($.proxy(callback, this), duration);\n      } else {\n        callback.call(this);\n      }\n    }\n\n    function showMethod(event) {\n      if (this.tooltip.hasClass(CLASS_DISABLED)) {\n        return;\n      } // Clear hide timers\n\n\n      clearTimeout(this.timers.show);\n      clearTimeout(this.timers.hide); // Start show timer\n\n      this.timers.show = delay.call(this, function () {\n        this.toggle(TRUE, event);\n      }, this.options.show.delay);\n    }\n\n    function hideMethod(event) {\n      if (this.tooltip.hasClass(CLASS_DISABLED) || this.destroyed) {\n        return;\n      } // Check if new target was actually the tooltip element\n\n\n      var relatedTarget = $(event.relatedTarget),\n          ontoTooltip = relatedTarget.closest(SELECTOR)[0] === this.tooltip[0],\n          ontoTarget = relatedTarget[0] === this.options.show.target[0]; // Clear timers and stop animation queue\n\n      clearTimeout(this.timers.show);\n      clearTimeout(this.timers.hide); // Prevent hiding if tooltip is fixed and event target is the tooltip.\n      // Or if mouse positioning is enabled and cursor momentarily overlaps\n\n      if (this !== relatedTarget[0] && this.options.position.target === 'mouse' && ontoTooltip || this.options.hide.fixed && /mouse(out|leave|move)/.test(event.type) && (ontoTooltip || ontoTarget)) {\n        try {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        } catch (e) {}\n\n        return;\n      } // If tooltip has displayed, start hide timer\n\n\n      this.timers.hide = delay.call(this, function () {\n        this.toggle(FALSE, event);\n      }, this.options.hide.delay, this);\n    }\n\n    function inactiveMethod(event) {\n      if (this.tooltip.hasClass(CLASS_DISABLED) || !this.options.hide.inactive) {\n        return;\n      } // Clear timer\n\n\n      clearTimeout(this.timers.inactive);\n      this.timers.inactive = delay.call(this, function () {\n        this.hide(event);\n      }, this.options.hide.inactive);\n    }\n\n    function repositionMethod(event) {\n      if (this.rendered && this.tooltip[0].offsetWidth > 0) {\n        this.reposition(event);\n      }\n    } // Store mouse coordinates\n\n\n    PROTOTYPE._storeMouse = function (event) {\n      (this.mouse = $.event.fix(event)).type = 'mousemove';\n      return this;\n    }; // Bind events\n\n\n    PROTOTYPE._bind = function (targets, events, method, suffix, context) {\n      if (!targets || !method || !events.length) {\n        return;\n      }\n\n      var ns = '.' + this._id + (suffix ? '-' + suffix : '');\n      $(targets).bind((events.split ? events : events.join(ns + ' ')) + ns, $.proxy(method, context || this));\n      return this;\n    };\n\n    PROTOTYPE._unbind = function (targets, suffix) {\n      targets && $(targets).unbind('.' + this._id + (suffix ? '-' + suffix : ''));\n      return this;\n    }; // Global delegation helper\n\n\n    function delegate(selector, events, method) {\n      $(document.body).delegate(selector, (events.split ? events : events.join('.' + NAMESPACE + ' ')) + '.' + NAMESPACE, function () {\n        var api = QTIP.api[$.attr(this, ATTR_ID)];\n        api && !api.disabled && method.apply(api, arguments);\n      });\n    } // Event trigger\n\n\n    PROTOTYPE._trigger = function (type, args, event) {\n      var callback = $.Event('tooltip' + type);\n      callback.originalEvent = event && $.extend({}, event) || this.cache.event || NULL;\n      this.triggering = type;\n      this.tooltip.trigger(callback, [this].concat(args || []));\n      this.triggering = FALSE;\n      return !callback.isDefaultPrevented();\n    };\n\n    PROTOTYPE._bindEvents = function (showEvents, hideEvents, showTargets, hideTargets, showMethod, hideMethod) {\n      // Get tasrgets that lye within both\n      var similarTargets = showTargets.filter(hideTargets).add(hideTargets.filter(showTargets)),\n          toggleEvents = []; // If hide and show targets are the same...\n\n      if (similarTargets.length) {\n        // Filter identical show/hide events\n        $.each(hideEvents, function (i, type) {\n          var showIndex = $.inArray(type, showEvents); // Both events are identical, remove from both hide and show events\n          // and append to toggleEvents\n\n          showIndex > -1 && toggleEvents.push(showEvents.splice(showIndex, 1)[0]);\n        }); // Toggle events are special case of identical show/hide events, which happen in sequence\n\n        if (toggleEvents.length) {\n          // Bind toggle events to the similar targets\n          this._bind(similarTargets, toggleEvents, function (event) {\n            var state = this.rendered ? this.tooltip[0].offsetWidth > 0 : false;\n            (state ? hideMethod : showMethod).call(this, event);\n          }); // Remove the similar targets from the regular show/hide bindings\n\n\n          showTargets = showTargets.not(similarTargets);\n          hideTargets = hideTargets.not(similarTargets);\n        }\n      } // Apply show/hide/toggle events\n\n\n      this._bind(showTargets, showEvents, showMethod);\n\n      this._bind(hideTargets, hideEvents, hideMethod);\n    };\n\n    PROTOTYPE._assignInitialEvents = function (event) {\n      var options = this.options,\n          showTarget = options.show.target,\n          hideTarget = options.hide.target,\n          showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],\n          hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : []; // Catch remove/removeqtip events on target element to destroy redundant tooltips\n\n      this._bind(this.elements.target, ['remove', 'removeqtip'], function (event) {\n        this.destroy(true);\n      }, 'destroy');\n      /*\n       * Make sure hoverIntent functions properly by using mouseleave as a hide event if\n       * mouseenter/mouseout is used for show.event, even if it isn't in the users options.\n       */\n\n\n      if (/mouse(over|enter)/i.test(options.show.event) && !/mouse(out|leave)/i.test(options.hide.event)) {\n        hideEvents.push('mouseleave');\n      }\n      /*\n       * Also make sure initial mouse targetting works correctly by caching mousemove coords\n       * on show targets before the tooltip has rendered. Also set onTarget when triggered to\n       * keep mouse tracking working.\n       */\n\n\n      this._bind(showTarget, 'mousemove', function (event) {\n        this._storeMouse(event);\n\n        this.cache.onTarget = TRUE;\n      }); // Define hoverIntent function\n\n\n      function hoverIntent(event) {\n        // Only continue if tooltip isn't disabled\n        if (this.disabled || this.destroyed) {\n          return FALSE;\n        } // Cache the event data\n\n\n        this.cache.event = event && $.event.fix(event);\n        this.cache.target = event && $(event.target); // Start the event sequence\n\n        clearTimeout(this.timers.show);\n        this.timers.show = delay.call(this, function () {\n          this.render(_typeof(event) === 'object' || options.show.ready);\n        }, options.prerender ? 0 : options.show.delay);\n      } // Filter and bind events\n\n\n      this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, hoverIntent, function () {\n        if (!this.timers) {\n          return FALSE;\n        }\n\n        clearTimeout(this.timers.show);\n      }); // Prerendering is enabled, create tooltip now\n\n\n      if (options.show.ready || options.prerender) {\n        hoverIntent.call(this, event);\n      }\n    }; // Event assignment method\n\n\n    PROTOTYPE._assignEvents = function () {\n      var self = this,\n          options = this.options,\n          posOptions = options.position,\n          tooltip = this.tooltip,\n          showTarget = options.show.target,\n          hideTarget = options.hide.target,\n          containerTarget = posOptions.container,\n          viewportTarget = posOptions.viewport,\n          documentTarget = $(document),\n          bodyTarget = $(document.body),\n          windowTarget = $(window),\n          showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],\n          hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : []; // Assign passed event callbacks\n\n      $.each(options.events, function (name, callback) {\n        self._bind(tooltip, name === 'toggle' ? ['tooltipshow', 'tooltiphide'] : ['tooltip' + name], callback, null, tooltip);\n      }); // Hide tooltips when leaving current window/frame (but not select/option elements)\n\n      if (/mouse(out|leave)/i.test(options.hide.event) && options.hide.leave === 'window') {\n        this._bind(documentTarget, ['mouseout', 'blur'], function (event) {\n          if (!/select|option/.test(event.target.nodeName) && !event.relatedTarget) {\n            this.hide(event);\n          }\n        });\n      } // Enable hide.fixed by adding appropriate class\n\n\n      if (options.hide.fixed) {\n        hideTarget = hideTarget.add(tooltip.addClass(CLASS_FIXED));\n      }\n      /*\n       * Make sure hoverIntent functions properly by using mouseleave to clear show timer if\n       * mouseenter/mouseout is used for show.event, even if it isn't in the users options.\n       */\n      else if (/mouse(over|enter)/i.test(options.show.event)) {\n          this._bind(hideTarget, 'mouseleave', function () {\n            clearTimeout(this.timers.show);\n          });\n        } // Hide tooltip on document mousedown if unfocus events are enabled\n\n\n      if (('' + options.hide.event).indexOf('unfocus') > -1) {\n        this._bind(containerTarget.closest('html'), ['mousedown', 'touchstart'], function (event) {\n          var elem = $(event.target),\n              enabled = this.rendered && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0,\n              isAncestor = elem.parents(SELECTOR).filter(this.tooltip[0]).length > 0;\n\n          if (elem[0] !== this.target[0] && elem[0] !== this.tooltip[0] && !isAncestor && !this.target.has(elem[0]).length && enabled) {\n            this.hide(event);\n          }\n        });\n      } // Check if the tooltip hides when inactive\n\n\n      if ('number' === typeof options.hide.inactive) {\n        // Bind inactive method to show target(s) as a custom event\n        this._bind(showTarget, 'qtip-' + this.id + '-inactive', inactiveMethod, 'inactive'); // Define events which reset the 'inactive' event handler\n\n\n        this._bind(hideTarget.add(tooltip), QTIP.inactiveEvents, inactiveMethod);\n      } // Filter and bind events\n\n\n      this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, showMethod, hideMethod); // Mouse movement bindings\n\n\n      this._bind(showTarget.add(tooltip), 'mousemove', function (event) {\n        // Check if the tooltip hides when mouse is moved a certain distance\n        if ('number' === typeof options.hide.distance) {\n          var origin = this.cache.origin || {},\n              limit = this.options.hide.distance,\n              abs = Math.abs; // Check if the movement has gone beyond the limit, and hide it if so\n\n          if (abs(event.pageX - origin.pageX) >= limit || abs(event.pageY - origin.pageY) >= limit) {\n            this.hide(event);\n          }\n        } // Cache mousemove coords on show targets\n\n\n        this._storeMouse(event);\n      }); // Mouse positioning events\n\n\n      if (posOptions.target === 'mouse') {\n        // If mouse adjustment is on...\n        if (posOptions.adjust.mouse) {\n          // Apply a mouseleave event so we don't get problems with overlapping\n          if (options.hide.event) {\n            // Track if we're on the target or not\n            this._bind(showTarget, ['mouseenter', 'mouseleave'], function (event) {\n              if (!this.cache) {\n                return FALSE;\n              }\n\n              this.cache.onTarget = event.type === 'mouseenter';\n            });\n          } // Update tooltip position on mousemove\n\n\n          this._bind(documentTarget, 'mousemove', function (event) {\n            // Update the tooltip position only if the tooltip is visible and adjustment is enabled\n            if (this.rendered && this.cache.onTarget && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0) {\n              this.reposition(event);\n            }\n          });\n        }\n      } // Adjust positions of the tooltip on window resize if enabled\n\n\n      if (posOptions.adjust.resize || viewportTarget.length) {\n        this._bind($.event.special.resize ? viewportTarget : windowTarget, 'resize', repositionMethod);\n      } // Adjust tooltip position on scroll of the window or viewport element if present\n\n\n      if (posOptions.adjust.scroll) {\n        this._bind(windowTarget.add(posOptions.container), 'scroll', repositionMethod);\n      }\n    }; // Un-assignment method\n\n\n    PROTOTYPE._unassignEvents = function () {\n      var options = this.options,\n          showTargets = options.show.target,\n          hideTargets = options.hide.target,\n          targets = $.grep([this.elements.target[0], this.rendered && this.tooltip[0], options.position.container[0], options.position.viewport[0], options.position.container.closest('html')[0], // unfocus\n      window, document], function (i) {\n        return _typeof(i) === 'object';\n      }); // Add show and hide targets if they're valid\n\n      if (showTargets && showTargets.toArray) {\n        targets = targets.concat(showTargets.toArray());\n      }\n\n      if (hideTargets && hideTargets.toArray) {\n        targets = targets.concat(hideTargets.toArray());\n      } // Unbind the events\n\n\n      this._unbind(targets)._unbind(targets, 'destroy')._unbind(targets, 'inactive');\n    }; // Apply common event handlers using delegate (avoids excessive .bind calls!)\n\n\n    $(function () {\n      delegate(SELECTOR, ['mouseenter', 'mouseleave'], function (event) {\n        var state = event.type === 'mouseenter',\n            tooltip = $(event.currentTarget),\n            target = $(event.relatedTarget || event.target),\n            options = this.options; // On mouseenter...\n\n        if (state) {\n          // Focus the tooltip on mouseenter (z-index stacking)\n          this.focus(event); // Clear hide timer on tooltip hover to prevent it from closing\n\n          tooltip.hasClass(CLASS_FIXED) && !tooltip.hasClass(CLASS_DISABLED) && clearTimeout(this.timers.hide);\n        } // On mouseleave...\n        else {\n            // When mouse tracking is enabled, hide when we leave the tooltip and not onto the show target (if a hide event is set)\n            if (options.position.target === 'mouse' && options.position.adjust.mouse && options.hide.event && options.show.target && !target.closest(options.show.target[0]).length) {\n              this.hide(event);\n            }\n          } // Add hover class\n\n\n        tooltip.toggleClass(CLASS_HOVER, state);\n      }); // Define events which reset the 'inactive' event handler\n\n      delegate('[' + ATTR_ID + ']', INACTIVE_EVENTS, inactiveMethod);\n    });\n    ; // Initialization method\n\n    function init(elem, id, opts) {\n      var obj,\n          posOptions,\n          attr,\n          config,\n          title,\n          // Setup element references\n      docBody = $(document.body),\n          // Use document body instead of document element if needed\n      newTarget = elem[0] === document ? docBody : elem,\n          // Grab metadata from element if plugin is present\n      metadata = elem.metadata ? elem.metadata(opts.metadata) : NULL,\n          // If metadata type if HTML5, grab 'name' from the object instead, or use the regular data object otherwise\n      metadata5 = opts.metadata.type === 'html5' && metadata ? metadata[opts.metadata.name] : NULL,\n          // Grab data from metadata.name (or data-qtipopts as fallback) using .data() method,\n      html5 = elem.data(opts.metadata.name || 'qtipopts'); // If we don't get an object returned attempt to parse it manualyl without parseJSON\n\n      try {\n        html5 = typeof html5 === 'string' ? $.parseJSON(html5) : html5;\n      } catch (e) {} // Merge in and sanitize metadata\n\n\n      config = $.extend(TRUE, {}, QTIP.defaults, opts, _typeof(html5) === 'object' ? sanitizeOptions(html5) : NULL, sanitizeOptions(metadata5 || metadata)); // Re-grab our positioning options now we've merged our metadata and set id to passed value\n\n      posOptions = config.position;\n      config.id = id; // Setup missing content if none is detected\n\n      if ('boolean' === typeof config.content.text) {\n        attr = elem.attr(config.content.attr); // Grab from supplied attribute if available\n\n        if (config.content.attr !== FALSE && attr) {\n          config.content.text = attr;\n        } // No valid content was found, abort render\n        else {\n            return FALSE;\n          }\n      } // Setup target options\n\n\n      if (!posOptions.container.length) {\n        posOptions.container = docBody;\n      }\n\n      if (posOptions.target === FALSE) {\n        posOptions.target = newTarget;\n      }\n\n      if (config.show.target === FALSE) {\n        config.show.target = newTarget;\n      }\n\n      if (config.show.solo === TRUE) {\n        config.show.solo = posOptions.container.closest('body');\n      }\n\n      if (config.hide.target === FALSE) {\n        config.hide.target = newTarget;\n      }\n\n      if (config.position.viewport === TRUE) {\n        config.position.viewport = posOptions.container;\n      } // Ensure we only use a single container\n\n\n      posOptions.container = posOptions.container.eq(0); // Convert position corner values into x and y strings\n\n      posOptions.at = new CORNER(posOptions.at, TRUE);\n      posOptions.my = new CORNER(posOptions.my); // Destroy previous tooltip if overwrite is enabled, or skip element if not\n\n      if (elem.data(NAMESPACE)) {\n        if (config.overwrite) {\n          elem.qtip('destroy', true);\n        } else if (config.overwrite === FALSE) {\n          return FALSE;\n        }\n      } // Add has-qtip attribute\n\n\n      elem.attr(ATTR_HAS, id); // Remove title attribute and store it if present\n\n      if (config.suppress && (title = elem.attr('title'))) {\n        // Final attr call fixes event delegatiom and IE default tooltip showing problem\n        elem.removeAttr('title').attr(oldtitle, title).attr('title', '');\n      } // Initialize the tooltip and add API reference\n\n\n      obj = new QTip(elem, config, id, !!attr);\n      elem.data(NAMESPACE, obj);\n      return obj;\n    } // jQuery $.fn extension method\n\n\n    QTIP = $.fn.qtip = function (options, notation, newValue) {\n      var command = ('' + options).toLowerCase(),\n          // Parse command\n      returned = NULL,\n          args = $.makeArray(arguments).slice(1),\n          event = args[args.length - 1],\n          opts = this[0] ? $.data(this[0], NAMESPACE) : NULL; // Check for API request\n\n      if (!arguments.length && opts || command === 'api') {\n        return opts;\n      } // Execute API command if present\n      else if ('string' === typeof options) {\n          this.each(function () {\n            var api = $.data(this, NAMESPACE);\n\n            if (!api) {\n              return TRUE;\n            } // Cache the event if possible\n\n\n            if (event && event.timeStamp) {\n              api.cache.event = event;\n            } // Check for specific API commands\n\n\n            if (notation && (command === 'option' || command === 'options')) {\n              if (newValue !== undefined || $.isPlainObject(notation)) {\n                api.set(notation, newValue);\n              } else {\n                returned = api.get(notation);\n                return FALSE;\n              }\n            } // Execute API command\n            else if (api[command]) {\n                api[command].apply(api, args);\n              }\n          });\n          return returned !== NULL ? returned : this;\n        } // No API commands. validate provided options and setup qTips\n        else if ('object' === _typeof(options) || !arguments.length) {\n            // Sanitize options first\n            opts = sanitizeOptions($.extend(TRUE, {}, options));\n            return this.each(function (i) {\n              var api, id; // Find next available ID, or use custom ID if provided\n\n              id = $.isArray(opts.id) ? opts.id[i] : opts.id;\n              id = !id || id === FALSE || id.length < 1 || QTIP.api[id] ? QTIP.nextid++ : id; // Initialize the qTip and re-grab newly sanitized options\n\n              api = init($(this), id, opts);\n\n              if (api === FALSE) {\n                return TRUE;\n              } else {\n                QTIP.api[id] = api;\n              } // Initialize plugins\n\n\n              $.each(PLUGINS, function () {\n                if (this.initialize === 'initialize') {\n                  this(api);\n                }\n              }); // Assign initial pre-render events\n\n              api._assignInitialEvents(event);\n            });\n          }\n    }; // Expose class\n\n\n    $.qtip = QTip; // Populated in render method\n\n    QTIP.api = {};\n    ;\n    $.each({\n      /* Allow other plugins to successfully retrieve the title of an element with a qTip applied */\n      attr: function attr(_attr, val) {\n        if (this.length) {\n          var self = this[0],\n              title = 'title',\n              api = $.data(self, 'qtip');\n\n          if (_attr === title && api && 'object' === _typeof(api) && api.options.suppress) {\n            if (arguments.length < 2) {\n              return $.attr(self, oldtitle);\n            } // If qTip is rendered and title was originally used as content, update it\n\n\n            if (api && api.options.content.attr === title && api.cache.attr) {\n              api.set('content.text', val);\n            } // Use the regular attr method to set, then cache the result\n\n\n            return this.attr(oldtitle, val);\n          }\n        }\n\n        return $.fn['attr' + replaceSuffix].apply(this, arguments);\n      },\n\n      /* Allow clone to correctly retrieve cached title attributes */\n      clone: function clone(keepData) {\n        var titles = $([]),\n            title = 'title',\n            // Clone our element using the real clone method\n        elems = $.fn['clone' + replaceSuffix].apply(this, arguments); // Grab all elements with an oldtitle set, and change it to regular title attribute, if keepData is false\n\n        if (!keepData) {\n          elems.filter('[' + oldtitle + ']').attr('title', function () {\n            return $.attr(this, oldtitle);\n          }).removeAttr(oldtitle);\n        }\n\n        return elems;\n      }\n    }, function (name, func) {\n      if (!func || $.fn[name + replaceSuffix]) {\n        return TRUE;\n      }\n\n      var old = $.fn[name + replaceSuffix] = $.fn[name];\n\n      $.fn[name] = function () {\n        return func.apply(this, arguments) || old.apply(this, arguments);\n      };\n    });\n    /* Fire off 'removeqtip' handler in $.cleanData if jQuery UI not present (it already does similar).\n     * This snippet is taken directly from jQuery UI source code found here:\n     *     http://code.jquery.com/ui/jquery-ui-git.js\n     */\n\n    if (!$.ui) {\n      $['cleanData' + replaceSuffix] = $.cleanData;\n\n      $.cleanData = function (elems) {\n        for (var i = 0, elem; (elem = $(elems[i])).length; i++) {\n          if (elem.attr(ATTR_HAS)) {\n            try {\n              elem.triggerHandler('removeqtip');\n            } catch (e) {}\n          }\n        }\n\n        $['cleanData' + replaceSuffix].apply(this, arguments);\n      };\n    }\n\n    ; // qTip version\n\n    QTIP.version = '2.2.1-29-'; // Base ID for all qTips\n\n    QTIP.nextid = 0; // Inactive events array\n\n    QTIP.inactiveEvents = INACTIVE_EVENTS; // Base z-index for all qTips\n\n    QTIP.zindex = 15000; // Define configuration defaults\n\n    QTIP.defaults = {\n      prerender: FALSE,\n      id: FALSE,\n      overwrite: TRUE,\n      suppress: TRUE,\n      content: {\n        text: TRUE,\n        attr: 'title',\n        title: FALSE,\n        button: FALSE\n      },\n      position: {\n        my: 'top left',\n        at: 'bottom right',\n        target: FALSE,\n        container: FALSE,\n        viewport: FALSE,\n        adjust: {\n          x: 0,\n          y: 0,\n          mouse: TRUE,\n          scroll: TRUE,\n          resize: TRUE,\n          method: 'flipinvert flipinvert'\n        },\n        effect: function effect(api, pos, viewport) {\n          $(this).animate(pos, {\n            duration: 200,\n            queue: FALSE\n          });\n        }\n      },\n      show: {\n        target: FALSE,\n        event: 'mouseenter',\n        effect: TRUE,\n        delay: 90,\n        solo: FALSE,\n        ready: FALSE,\n        autofocus: FALSE\n      },\n      hide: {\n        target: FALSE,\n        event: 'mouseleave',\n        effect: TRUE,\n        delay: 0,\n        fixed: FALSE,\n        inactive: FALSE,\n        leave: 'window',\n        distance: FALSE\n      },\n      style: {\n        classes: '',\n        widget: FALSE,\n        width: FALSE,\n        height: FALSE,\n        def: TRUE\n      },\n      events: {\n        render: NULL,\n        move: NULL,\n        show: NULL,\n        hide: NULL,\n        toggle: NULL,\n        visible: NULL,\n        hidden: NULL,\n        focus: NULL,\n        blur: NULL\n      }\n    };\n    ;\n    var TIP,\n        // .bind()/.on() namespace\n    TIPNS = '.qtip-tip',\n        // Common CSS strings\n    MARGIN = 'margin',\n        BORDER = 'border',\n        COLOR = 'color',\n        BG_COLOR = 'background-color',\n        TRANSPARENT = 'transparent',\n        IMPORTANT = ' !important',\n        // Check if the browser supports <canvas/> elements\n    HASCANVAS = !!document.createElement('canvas').getContext,\n        // Invalid colour values used in parseColours()\n    INVALID = /rgba?\\(0, 0, 0(, 0)?\\)|transparent|#123456/i; // Camel-case method, taken from jQuery source\n    // http://code.jquery.com/jquery-1.8.0.js\n\n    function camel(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n    /*\n     * Modified from Modernizr's testPropsAll()\n     * http://modernizr.com/downloads/modernizr-latest.js\n     */\n\n\n    var cssProps = {},\n        cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\n    function vendorCss(elem, prop) {\n      var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n          props = (prop + ' ' + cssPrefixes.join(ucProp + ' ') + ucProp).split(' '),\n          cur,\n          val,\n          i = 0; // If the property has already been mapped...\n\n      if (cssProps[prop]) {\n        return elem.css(cssProps[prop]);\n      }\n\n      while (cur = props[i++]) {\n        if ((val = elem.css(cur)) !== undefined) {\n          return cssProps[prop] = cur, val;\n        }\n      }\n    } // Parse a given elements CSS property into an int\n\n\n    function intCss(elem, prop) {\n      return Math.ceil(parseFloat(vendorCss(elem, prop)));\n    } // VML creation (for IE only)\n\n\n    if (!HASCANVAS) {\n      var createVML = function createVML(tag, props, style) {\n        return '<qtipvml:' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"qtip-vml\" ' + (props || '') + ' style=\"behavior: url(#default#VML); ' + (style || '') + '\" />';\n      };\n    } // Canvas only definitions\n    else {\n        var PIXEL_RATIO = window.devicePixelRatio || 1,\n            BACKING_STORE_RATIO = function () {\n          var context = document.createElement('canvas').getContext('2d');\n          return context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;\n        }(),\n            SCALE = PIXEL_RATIO / BACKING_STORE_RATIO;\n      }\n\n    function Tip(qtip, options) {\n      this._ns = 'tip';\n      this.options = options;\n      this.offset = options.offset;\n      this.size = [options.width, options.height]; // Initialize\n\n      this.init(this.qtip = qtip);\n    }\n\n    $.extend(Tip.prototype, {\n      init: function init(qtip) {\n        var context, tip; // Create tip element and prepend to the tooltip\n\n        tip = this.element = qtip.elements.tip = $('<div />', {\n          'class': NAMESPACE + '-tip'\n        }).prependTo(qtip.tooltip); // Create tip drawing element(s)\n\n        if (HASCANVAS) {\n          // save() as soon as we create the canvas element so FF2 doesn't bork on our first restore()!\n          context = $('<canvas />').appendTo(this.element)[0].getContext('2d'); // Setup constant parameters\n\n          context.lineJoin = 'miter';\n          context.miterLimit = 100000;\n          context.save();\n        } else {\n          context = createVML('shape', 'coordorigin=\"0,0\"', 'position:absolute;');\n          this.element.html(context + context); // Prevent mousing down on the tip since it causes problems with .live() handling in IE due to VML\n\n          qtip._bind($('*', tip).add(tip), ['click', 'mousedown'], function (event) {\n            event.stopPropagation();\n          }, this._ns);\n        } // Bind update events\n\n\n        qtip._bind(qtip.tooltip, 'tooltipmove', this.reposition, this._ns, this); // Create it\n\n\n        this.create();\n      },\n      _swapDimensions: function _swapDimensions() {\n        this.size[0] = this.options.height;\n        this.size[1] = this.options.width;\n      },\n      _resetDimensions: function _resetDimensions() {\n        this.size[0] = this.options.width;\n        this.size[1] = this.options.height;\n      },\n      _useTitle: function _useTitle(corner) {\n        var titlebar = this.qtip.elements.titlebar;\n        return titlebar && (corner.y === TOP || corner.y === CENTER && this.element.position().top + this.size[1] / 2 + this.options.offset < titlebar.outerHeight(TRUE));\n      },\n      _parseCorner: function _parseCorner(corner) {\n        var my = this.qtip.options.position.my; // Detect corner and mimic properties\n\n        if (corner === FALSE || my === FALSE) {\n          corner = FALSE;\n        } else if (corner === TRUE) {\n          corner = new CORNER(my.string());\n        } else if (!corner.string) {\n          corner = new CORNER(corner);\n          corner.fixed = TRUE;\n        }\n\n        return corner;\n      },\n      _parseWidth: function _parseWidth(corner, side, use) {\n        var elements = this.qtip.elements,\n            prop = BORDER + camel(side) + 'Width';\n        return (use ? intCss(use, prop) : intCss(elements.content, prop) || intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop)) || 0;\n      },\n      _parseRadius: function _parseRadius(corner) {\n        var elements = this.qtip.elements,\n            prop = BORDER + camel(corner.y) + camel(corner.x) + 'Radius';\n        return BROWSER.ie < 9 ? 0 : intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop) || 0;\n      },\n      _invalidColour: function _invalidColour(elem, prop, compare) {\n        var val = elem.css(prop);\n        return !val || compare && val === elem.css(compare) || INVALID.test(val) ? FALSE : val;\n      },\n      _parseColours: function _parseColours(corner) {\n        var elements = this.qtip.elements,\n            tip = this.element.css('cssText', ''),\n            borderSide = BORDER + camel(corner[corner.precedance]) + camel(COLOR),\n            colorElem = this._useTitle(corner) && elements.titlebar || elements.content,\n            css = this._invalidColour,\n            color = []; // Attempt to detect the background colour from various elements, left-to-right precedance\n\n        color[0] = css(tip, BG_COLOR) || css(colorElem, BG_COLOR) || css(elements.content, BG_COLOR) || css(elements.tooltip, BG_COLOR) || tip.css(BG_COLOR); // Attempt to detect the correct border side colour from various elements, left-to-right precedance\n\n        color[1] = css(tip, borderSide, COLOR) || css(colorElem, borderSide, COLOR) || css(elements.content, borderSide, COLOR) || css(elements.tooltip, borderSide, COLOR) || elements.tooltip.css(borderSide); // Reset background and border colours\n\n        $('*', tip).add(tip).css('cssText', BG_COLOR + ':' + TRANSPARENT + IMPORTANT + ';' + BORDER + ':0' + IMPORTANT + ';');\n        return color;\n      },\n      _calculateSize: function _calculateSize(corner) {\n        var y = corner.precedance === Y,\n            width = this.options['width'],\n            height = this.options['height'],\n            isCenter = corner.abbrev() === 'c',\n            base = (y ? width : height) * (isCenter ? 0.5 : 1),\n            pow = Math.pow,\n            round = Math.round,\n            bigHyp,\n            ratio,\n            result,\n            smallHyp = Math.sqrt(pow(base, 2) + pow(height, 2)),\n            hyp = [this.border / base * smallHyp, this.border / height * smallHyp];\n        hyp[2] = Math.sqrt(pow(hyp[0], 2) - pow(this.border, 2));\n        hyp[3] = Math.sqrt(pow(hyp[1], 2) - pow(this.border, 2));\n        bigHyp = smallHyp + hyp[2] + hyp[3] + (isCenter ? 0 : hyp[0]);\n        ratio = bigHyp / smallHyp;\n        result = [round(ratio * width), round(ratio * height)];\n        return y ? result : result.reverse();\n      },\n      // Tip coordinates calculator\n      _calculateTip: function _calculateTip(corner, size, scale) {\n        scale = scale || 1;\n        size = size || this.size;\n        var width = size[0] * scale,\n            height = size[1] * scale,\n            width2 = Math.ceil(width / 2),\n            height2 = Math.ceil(height / 2),\n            // Define tip coordinates in terms of height and width values\n        tips = {\n          br: [0, 0, width, height, width, 0],\n          bl: [0, 0, width, 0, 0, height],\n          tr: [0, height, width, 0, width, height],\n          tl: [0, 0, 0, height, width, height],\n          tc: [0, height, width2, 0, width, height],\n          bc: [0, 0, width, 0, width2, height],\n          rc: [0, 0, width, height2, 0, height],\n          lc: [width, 0, width, height, 0, height2]\n        }; // Set common side shapes\n\n        tips.lt = tips.br;\n        tips.rt = tips.bl;\n        tips.lb = tips.tr;\n        tips.rb = tips.tl;\n        return tips[corner.abbrev()];\n      },\n      // Tip coordinates drawer (canvas)\n      _drawCoords: function _drawCoords(context, coords) {\n        context.beginPath();\n        context.moveTo(coords[0], coords[1]);\n        context.lineTo(coords[2], coords[3]);\n        context.lineTo(coords[4], coords[5]);\n        context.closePath();\n      },\n      create: function create() {\n        // Determine tip corner\n        var c = this.corner = (HASCANVAS || BROWSER.ie) && this._parseCorner(this.options.corner); // If we have a tip corner...\n\n\n        if (this.enabled = !!this.corner && this.corner.abbrev() !== 'c') {\n          // Cache it\n          this.qtip.cache.corner = c.clone(); // Create it\n\n          this.update();\n        } // Toggle tip element\n\n\n        this.element.toggle(this.enabled);\n        return this.corner;\n      },\n      update: function update(corner, position) {\n        if (!this.enabled) {\n          return this;\n        }\n\n        var elements = this.qtip.elements,\n            tip = this.element,\n            inner = tip.children(),\n            options = this.options,\n            curSize = this.size,\n            mimic = options.mimic,\n            round = Math.round,\n            color,\n            precedance,\n            context,\n            coords,\n            bigCoords,\n            translate,\n            newSize,\n            border,\n            BACKING_STORE_RATIO; // Re-determine tip if not already set\n\n        if (!corner) {\n          corner = this.qtip.cache.corner || this.corner;\n        } // Use corner property if we detect an invalid mimic value\n\n\n        if (mimic === FALSE) {\n          mimic = corner;\n        } // Otherwise inherit mimic properties from the corner object as necessary\n        else {\n            mimic = new CORNER(mimic);\n            mimic.precedance = corner.precedance;\n\n            if (mimic.x === 'inherit') {\n              mimic.x = corner.x;\n            } else if (mimic.y === 'inherit') {\n              mimic.y = corner.y;\n            } else if (mimic.x === mimic.y) {\n              mimic[corner.precedance] = corner[corner.precedance];\n            }\n          }\n\n        precedance = mimic.precedance; // Ensure the tip width.height are relative to the tip position\n\n        if (corner.precedance === X) {\n          this._swapDimensions();\n        } else {\n          this._resetDimensions();\n        } // Update our colours\n\n\n        color = this.color = this._parseColours(corner); // Detect border width, taking into account colours\n\n        if (color[1] !== TRANSPARENT) {\n          // Grab border width\n          border = this.border = this._parseWidth(corner, corner[corner.precedance]); // If border width isn't zero, use border color as fill if it's not invalid (1.0 style tips)\n\n          if (options.border && border < 1 && !INVALID.test(color[1])) {\n            color[0] = color[1];\n          } // Set border width (use detected border width if options.border is true)\n\n\n          this.border = border = options.border !== TRUE ? options.border : border;\n        } // Border colour was invalid, set border to zero\n        else {\n            this.border = border = 0;\n          } // Determine tip size\n\n\n        newSize = this.size = this._calculateSize(corner);\n        tip.css({\n          width: newSize[0],\n          height: newSize[1],\n          lineHeight: newSize[1] + 'px'\n        }); // Calculate tip translation\n\n        if (corner.precedance === Y) {\n          translate = [round(mimic.x === LEFT ? border : mimic.x === RIGHT ? newSize[0] - curSize[0] - border : (newSize[0] - curSize[0]) / 2), round(mimic.y === TOP ? newSize[1] - curSize[1] : 0)];\n        } else {\n          translate = [round(mimic.x === LEFT ? newSize[0] - curSize[0] : 0), round(mimic.y === TOP ? border : mimic.y === BOTTOM ? newSize[1] - curSize[1] - border : (newSize[1] - curSize[1]) / 2)];\n        } // Canvas drawing implementation\n\n\n        if (HASCANVAS) {\n          // Grab canvas context and clear/save it\n          context = inner[0].getContext('2d');\n          context.restore();\n          context.save();\n          context.clearRect(0, 0, 6000, 6000); // Calculate coordinates\n\n          coords = this._calculateTip(mimic, curSize, SCALE);\n          bigCoords = this._calculateTip(mimic, this.size, SCALE); // Set the canvas size using calculated size\n\n          inner.attr(WIDTH, newSize[0] * SCALE).attr(HEIGHT, newSize[1] * SCALE);\n          inner.css(WIDTH, newSize[0]).css(HEIGHT, newSize[1]); // Draw the outer-stroke tip\n\n          this._drawCoords(context, bigCoords);\n\n          context.fillStyle = color[1];\n          context.fill(); // Draw the actual tip\n\n          context.translate(translate[0] * SCALE, translate[1] * SCALE);\n\n          this._drawCoords(context, coords);\n\n          context.fillStyle = color[0];\n          context.fill();\n        } // VML (IE Proprietary implementation)\n        else {\n            // Calculate coordinates\n            coords = this._calculateTip(mimic); // Setup coordinates string\n\n            coords = 'm' + coords[0] + ',' + coords[1] + ' l' + coords[2] + ',' + coords[3] + ' ' + coords[4] + ',' + coords[5] + ' xe'; // Setup VML-specific offset for pixel-perfection\n\n            translate[2] = border && /^(r|b)/i.test(corner.string()) ? BROWSER.ie === 8 ? 2 : 1 : 0; // Set initial CSS\n\n            inner.css({\n              coordsize: newSize[0] + border + ' ' + (newSize[1] + border),\n              antialias: '' + (mimic.string().indexOf(CENTER) > -1),\n              left: translate[0] - translate[2] * Number(precedance === X),\n              top: translate[1] - translate[2] * Number(precedance === Y),\n              width: newSize[0] + border,\n              height: newSize[1] + border\n            }).each(function (i) {\n              var $this = $(this); // Set shape specific attributes\n\n              $this[$this.prop ? 'prop' : 'attr']({\n                coordsize: newSize[0] + border + ' ' + (newSize[1] + border),\n                path: coords,\n                fillcolor: color[0],\n                filled: !!i,\n                stroked: !i\n              }).toggle(!!(border || i)); // Check if border is enabled and add stroke element\n\n              !i && $this.html(createVML('stroke', 'weight=\"' + border * 2 + 'px\" color=\"' + color[1] + '\" miterlimit=\"1000\" joinstyle=\"miter\"'));\n            });\n          } // Opera bug #357 - Incorrect tip position\n        // https://github.com/Craga89/qTip2/issues/367\n\n\n        window.opera && setTimeout(function () {\n          elements.tip.css({\n            display: 'inline-block',\n            visibility: 'visible'\n          });\n        }, 1); // Position if needed\n\n        if (position !== FALSE) {\n          this.calculate(corner, newSize);\n        }\n      },\n      calculate: function calculate(corner, size) {\n        if (!this.enabled) {\n          return FALSE;\n        }\n\n        var self = this,\n            elements = this.qtip.elements,\n            tip = this.element,\n            userOffset = this.options.offset,\n            isWidget = elements.tooltip.hasClass('ui-widget'),\n            position = {},\n            precedance,\n            corners; // Inherit corner if not provided\n\n        corner = corner || this.corner;\n        precedance = corner.precedance; // Determine which tip dimension to use for adjustment\n\n        size = size || this._calculateSize(corner); // Setup corners and offset array\n\n        corners = [corner.x, corner.y];\n\n        if (precedance === X) {\n          corners.reverse();\n        } // Calculate tip position\n\n\n        $.each(corners, function (i, side) {\n          var b, bc, br;\n\n          if (side === CENTER) {\n            b = precedance === Y ? LEFT : TOP;\n            position[b] = '50%';\n            position[MARGIN + '-' + b] = -Math.round(size[precedance === Y ? 0 : 1] / 2) + userOffset;\n          } else {\n            b = self._parseWidth(corner, side, elements.tooltip);\n            bc = self._parseWidth(corner, side, elements.content);\n            br = self._parseRadius(corner);\n            position[side] = Math.max(-self.border, i ? bc : userOffset + (br > b ? br : -b));\n          }\n        }); // Adjust for tip size\n\n        position[corner[precedance]] -= size[precedance === X ? 0 : 1]; // Set and return new position\n\n        tip.css({\n          margin: '',\n          top: '',\n          bottom: '',\n          left: '',\n          right: ''\n        }).css(position);\n        return position;\n      },\n      reposition: function reposition(event, api, pos, viewport) {\n        if (!this.enabled) {\n          return;\n        }\n\n        var cache = api.cache,\n            newCorner = this.corner.clone(),\n            adjust = pos.adjusted,\n            method = api.options.position.adjust.method.split(' '),\n            horizontal = method[0],\n            vertical = method[1] || method[0],\n            shift = {\n          left: FALSE,\n          top: FALSE,\n          x: 0,\n          y: 0\n        },\n            offset,\n            css = {},\n            props;\n\n        function shiftflip(direction, precedance, popposite, side, opposite) {\n          // Horizontal - Shift or flip method\n          if (direction === SHIFT && newCorner.precedance === precedance && adjust[side] && newCorner[popposite] !== CENTER) {\n            newCorner.precedance = newCorner.precedance === X ? Y : X;\n          } else if (direction !== SHIFT && adjust[side]) {\n            newCorner[precedance] = newCorner[precedance] === CENTER ? adjust[side] > 0 ? side : opposite : newCorner[precedance] === side ? opposite : side;\n          }\n        }\n\n        function shiftonly(xy, side, opposite) {\n          if (newCorner[xy] === CENTER) {\n            css[MARGIN + '-' + side] = shift[xy] = offset[MARGIN + '-' + side] - adjust[side];\n          } else {\n            props = offset[opposite] !== undefined ? [adjust[side], -offset[side]] : [-adjust[side], offset[side]];\n\n            if ((shift[xy] = Math.max(props[0], props[1])) > props[0]) {\n              pos[side] -= adjust[side];\n              shift[side] = FALSE;\n            }\n\n            css[offset[opposite] !== undefined ? opposite : side] = shift[xy];\n          }\n        } // If our tip position isn't fixed e.g. doesn't adjust with viewport...\n\n\n        if (this.corner.fixed !== TRUE) {\n          // Perform shift/flip adjustments\n          shiftflip(horizontal, X, Y, LEFT, RIGHT);\n          shiftflip(vertical, Y, X, TOP, BOTTOM); // Update and redraw the tip if needed (check cached details of last drawn tip)\n\n          if (newCorner.string() !== cache.corner.string() || cache.cornerTop !== adjust.top || cache.cornerLeft !== adjust.left) {\n            this.update(newCorner, FALSE);\n          }\n        } // Setup tip offset properties\n\n\n        offset = this.calculate(newCorner); // Readjust offset object to make it left/top\n\n        if (offset.right !== undefined) {\n          offset.left = -offset.right;\n        }\n\n        if (offset.bottom !== undefined) {\n          offset.top = -offset.bottom;\n        }\n\n        offset.user = this.offset; // Perform shift adjustments\n\n        if (shift.left = horizontal === SHIFT && !!adjust.left) {\n          shiftonly(X, LEFT, RIGHT);\n        }\n\n        if (shift.top = vertical === SHIFT && !!adjust.top) {\n          shiftonly(Y, TOP, BOTTOM);\n        }\n        /*\n        * If the tip is adjusted in both dimensions, or in a\n        * direction that would cause it to be anywhere but the\n        * outer border, hide it!\n        */\n\n\n        this.element.css(css).toggle(!(shift.x && shift.y || newCorner.x === CENTER && shift.y || newCorner.y === CENTER && shift.x)); // Adjust position to accomodate tip dimensions\n\n        pos.left -= offset.left.charAt ? offset.user : horizontal !== SHIFT || shift.top || !shift.left && !shift.top ? offset.left + this.border : 0;\n        pos.top -= offset.top.charAt ? offset.user : vertical !== SHIFT || shift.left || !shift.left && !shift.top ? offset.top + this.border : 0; // Cache details\n\n        cache.cornerLeft = adjust.left;\n        cache.cornerTop = adjust.top;\n        cache.corner = newCorner.clone();\n      },\n      destroy: function destroy() {\n        // Unbind events\n        this.qtip._unbind(this.qtip.tooltip, this._ns); // Remove the tip element(s)\n\n\n        if (this.qtip.elements.tip) {\n          this.qtip.elements.tip.find('*').remove().end().remove();\n        }\n      }\n    });\n\n    TIP = PLUGINS.tip = function (api) {\n      return new Tip(api, api.options.style.tip);\n    }; // Initialize tip on render\n\n\n    TIP.initialize = 'render'; // Setup plugin sanitization options\n\n    TIP.sanitize = function (options) {\n      if (options.style && 'tip' in options.style) {\n        var opts = options.style.tip;\n\n        if (_typeof(opts) !== 'object') {\n          opts = options.style.tip = {\n            corner: opts\n          };\n        }\n\n        if (!/string|boolean/i.test(_typeof(opts.corner))) {\n          opts.corner = TRUE;\n        }\n      }\n    }; // Add new option checks for the plugin\n\n\n    CHECKS.tip = {\n      '^position.my|style.tip.(corner|mimic|border)$': function positionMyStyleTipCornerMimicBorder$() {\n        // Make sure a tip can be drawn\n        this.create(); // Reposition the tooltip\n\n        this.qtip.reposition();\n      },\n      '^style.tip.(height|width)$': function styleTipHeightWidth$(obj) {\n        // Re-set dimensions and redraw the tip\n        this.size = [obj.width, obj.height];\n        this.update(); // Reposition the tooltip\n\n        this.qtip.reposition();\n      },\n      '^content.title|style.(classes|widget)$': function contentTitleStyleClassesWidget$() {\n        this.update();\n      }\n    }; // Extend original qTip defaults\n\n    $.extend(TRUE, QTIP.defaults, {\n      style: {\n        tip: {\n          corner: TRUE,\n          mimic: FALSE,\n          width: 6,\n          height: 6,\n          border: TRUE,\n          offset: 0\n        }\n      }\n    });\n    ;\n    var MODAL,\n        OVERLAY,\n        MODALCLASS = 'qtip-modal',\n        MODALSELECTOR = '.' + MODALCLASS;\n\n    OVERLAY = function OVERLAY() {\n      var self = this,\n          focusableElems = {},\n          current,\n          onLast,\n          prevState,\n          elem; // Modified code from jQuery UI 1.10.0 source\n      // http://code.jquery.com/ui/1.10.0/jquery-ui.js\n\n      function focusable(element) {\n        // Use the defined focusable checker when possible\n        if ($.expr[':'].focusable) {\n          return $.expr[':'].focusable;\n        }\n\n        var isTabIndexNotNaN = !isNaN($.attr(element, 'tabindex')),\n            nodeName = element.nodeName && element.nodeName.toLowerCase(),\n            map,\n            mapName,\n            img;\n\n        if ('area' === nodeName) {\n          map = element.parentNode;\n          mapName = map.name;\n\n          if (!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {\n            return false;\n          }\n\n          img = $('img[usemap=#' + mapName + ']')[0];\n          return !!img && img.is(':visible');\n        }\n\n        return /input|select|textarea|button|object/.test(nodeName) ? !element.disabled : 'a' === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN;\n      } // Focus inputs using cached focusable elements (see update())\n\n\n      function focusInputs(blurElems) {\n        // Blurring body element in IE causes window.open windows to unfocus!\n        if (focusableElems.length < 1 && blurElems.length) {\n          blurElems.not('body').blur();\n        } // Focus the inputs\n        else {\n            focusableElems.first().focus();\n          }\n      } // Steal focus from elements outside tooltip\n\n\n      function stealFocus(event) {\n        if (!elem.is(':visible')) {\n          return;\n        }\n\n        var target = $(event.target),\n            tooltip = current.tooltip,\n            container = target.closest(SELECTOR),\n            targetOnTop; // Determine if input container target is above this\n\n        targetOnTop = container.length < 1 ? FALSE : parseInt(container[0].style.zIndex, 10) > parseInt(tooltip[0].style.zIndex, 10); // If we're showing a modal, but focus has landed on an input below\n        // this modal, divert focus to the first visible input in this modal\n        // or if we can't find one... the tooltip itself\n\n        if (!targetOnTop && target.closest(SELECTOR)[0] !== tooltip[0]) {\n          focusInputs(target);\n        } // Detect when we leave the last focusable element...\n\n\n        onLast = event.target === focusableElems[focusableElems.length - 1];\n      }\n\n      $.extend(self, {\n        init: function init() {\n          // Create document overlay\n          elem = self.elem = $('<div />', {\n            id: 'qtip-overlay',\n            html: '<div></div>',\n            mousedown: function mousedown() {\n              return FALSE;\n            }\n          }).hide(); // Make sure we can't focus anything outside the tooltip\n\n          $(document.body).bind('focusin' + MODALSELECTOR, stealFocus); // Apply keyboard \"Escape key\" close handler\n\n          $(document).bind('keydown' + MODALSELECTOR, function (event) {\n            if (current && current.options.show.modal.escape && event.keyCode === 27) {\n              current.hide(event);\n            }\n          }); // Apply click handler for blur option\n\n          elem.bind('click' + MODALSELECTOR, function (event) {\n            if (current && current.options.show.modal.blur) {\n              current.hide(event);\n            }\n          });\n          return self;\n        },\n        update: function update(api) {\n          // Update current API reference\n          current = api; // Update focusable elements if enabled\n\n          if (api.options.show.modal.stealfocus !== FALSE) {\n            focusableElems = api.tooltip.find('*').filter(function () {\n              return focusable(this);\n            });\n          } else {\n            focusableElems = [];\n          }\n        },\n        toggle: function toggle(api, state, duration) {\n          var docBody = $(document.body),\n              tooltip = api.tooltip,\n              options = api.options.show.modal,\n              effect = options.effect,\n              type = state ? 'show' : 'hide',\n              visible = elem.is(':visible'),\n              visibleModals = $(MODALSELECTOR).filter(':visible:not(:animated)').not(tooltip),\n              zindex; // Set active tooltip API reference\n\n          self.update(api); // If the modal can steal the focus...\n          // Blur the current item and focus anything in the modal we an\n\n          if (state && options.stealfocus !== FALSE) {\n            focusInputs($(':focus'));\n          } // Toggle backdrop cursor style on show\n\n\n          elem.toggleClass('blurs', options.blur); // Append to body on show\n\n          if (state) {\n            elem.appendTo(document.body);\n          } // Prevent modal from conflicting with show.solo, and don't hide backdrop is other modals are visible\n\n\n          if (elem.is(':animated') && visible === state && prevState !== FALSE || !state && visibleModals.length) {\n            return self;\n          } // Stop all animations\n\n\n          elem.stop(TRUE, FALSE); // Use custom function if provided\n\n          if ($.isFunction(effect)) {\n            effect.call(elem, state);\n          } // If no effect type is supplied, use a simple toggle\n          else if (effect === FALSE) {\n              elem[type]();\n            } // Use basic fade function\n            else {\n                elem.fadeTo(parseInt(duration, 10) || 90, state ? 1 : 0, function () {\n                  if (!state) {\n                    elem.hide();\n                  }\n                });\n              } // Reset position and detach from body on hide\n\n\n          if (!state) {\n            elem.queue(function (next) {\n              elem.css({\n                left: '',\n                top: ''\n              });\n\n              if (!$(MODALSELECTOR).length) {\n                elem.detach();\n              }\n\n              next();\n            });\n          } // Cache the state\n\n\n          prevState = state; // If the tooltip is destroyed, set reference to null\n\n          if (current.destroyed) {\n            current = NULL;\n          }\n\n          return self;\n        }\n      });\n      self.init();\n    };\n\n    OVERLAY = new OVERLAY();\n\n    function Modal(api, options) {\n      this.options = options;\n      this._ns = '-modal';\n      this.init(this.qtip = api);\n    }\n\n    $.extend(Modal.prototype, {\n      init: function init(qtip) {\n        var tooltip = qtip.tooltip; // If modal is disabled... return\n\n        if (!this.options.on) {\n          return this;\n        } // Set overlay reference\n\n\n        qtip.elements.overlay = OVERLAY.elem; // Add unique attribute so we can grab modal tooltips easily via a SELECTOR, and set z-index\n\n        tooltip.addClass(MODALCLASS).css('z-index', QTIP.modal_zindex + $(MODALSELECTOR).length); // Apply our show/hide/focus modal events\n\n        qtip._bind(tooltip, ['tooltipshow', 'tooltiphide'], function (event, api, duration) {\n          var oEvent = event.originalEvent; // Make sure mouseout doesn't trigger a hide when showing the modal and mousing onto backdrop\n\n          if (event.target === tooltip[0]) {\n            if (oEvent && event.type === 'tooltiphide' && /mouse(leave|enter)/.test(oEvent.type) && $(oEvent.relatedTarget).closest(OVERLAY.elem[0]).length) {\n              try {\n                event.preventDefault();\n              } catch (e) {}\n            } else if (!oEvent || oEvent && oEvent.type !== 'tooltipsolo') {\n              this.toggle(event, event.type === 'tooltipshow', duration);\n            }\n          }\n        }, this._ns, this); // Adjust modal z-index on tooltip focus\n\n\n        qtip._bind(tooltip, 'tooltipfocus', function (event, api) {\n          // If focus was cancelled before it reached us, don't do anything\n          if (event.isDefaultPrevented() || event.target !== tooltip[0]) {\n            return;\n          }\n\n          var qtips = $(MODALSELECTOR),\n              // Keep the modal's lower than other, regular qtips\n          newIndex = QTIP.modal_zindex + qtips.length,\n              curIndex = parseInt(tooltip[0].style.zIndex, 10); // Set overlay z-index\n\n          OVERLAY.elem[0].style.zIndex = newIndex - 1; // Reduce modal z-index's and keep them properly ordered\n\n          qtips.each(function () {\n            if (this.style.zIndex > curIndex) {\n              this.style.zIndex -= 1;\n            }\n          }); // Fire blur event for focused tooltip\n\n          qtips.filter('.' + CLASS_FOCUS).qtip('blur', event.originalEvent); // Set the new z-index\n\n          tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex; // Set current\n\n          OVERLAY.update(api); // Prevent default handling\n\n          try {\n            event.preventDefault();\n          } catch (e) {}\n        }, this._ns, this); // Focus any other visible modals when this one hides\n\n\n        qtip._bind(tooltip, 'tooltiphide', function (event) {\n          if (event.target === tooltip[0]) {\n            $(MODALSELECTOR).filter(':visible').not(tooltip).last().qtip('focus', event);\n          }\n        }, this._ns, this);\n      },\n      toggle: function toggle(event, state, duration) {\n        // Make sure default event hasn't been prevented\n        if (event && event.isDefaultPrevented()) {\n          return this;\n        } // Toggle it\n\n\n        OVERLAY.toggle(this.qtip, !!state, duration);\n      },\n      destroy: function destroy() {\n        // Remove modal class\n        this.qtip.tooltip.removeClass(MODALCLASS); // Remove bound events\n\n        this.qtip._unbind(this.qtip.tooltip, this._ns); // Delete element reference\n\n\n        OVERLAY.toggle(this.qtip, FALSE);\n        delete this.qtip.elements.overlay;\n      }\n    });\n\n    MODAL = PLUGINS.modal = function (api) {\n      return new Modal(api, api.options.show.modal);\n    }; // Setup sanitiztion rules\n\n\n    MODAL.sanitize = function (opts) {\n      if (opts.show) {\n        if (_typeof(opts.show.modal) !== 'object') {\n          opts.show.modal = {\n            on: !!opts.show.modal\n          };\n        } else if (typeof opts.show.modal.on === 'undefined') {\n          opts.show.modal.on = TRUE;\n        }\n      }\n    }; // Base z-index for all modal tooltips (use qTip core z-index as a base)\n\n\n    QTIP.modal_zindex = QTIP.zindex - 200; // Plugin needs to be initialized on render\n\n    MODAL.initialize = 'render'; // Setup option set checks\n\n    CHECKS.modal = {\n      '^show.modal.(on|blur)$': function showModalOnBlur$() {\n        // Initialise\n        this.destroy();\n        this.init(); // Show the modal if not visible already and tooltip is visible\n\n        this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth > 0);\n      }\n    }; // Extend original api defaults\n\n    $.extend(TRUE, QTIP.defaults, {\n      show: {\n        modal: {\n          on: FALSE,\n          effect: TRUE,\n          blur: TRUE,\n          stealfocus: TRUE,\n          escape: TRUE\n        }\n      }\n    });\n    ;\n\n    PLUGINS.viewport = function (api, position, posOptions, targetWidth, targetHeight, elemWidth, elemHeight) {\n      var target = posOptions.target,\n          tooltip = api.elements.tooltip,\n          my = posOptions.my,\n          at = posOptions.at,\n          adjust = posOptions.adjust,\n          method = adjust.method.split(' '),\n          methodX = method[0],\n          methodY = method[1] || method[0],\n          viewport = posOptions.viewport,\n          container = posOptions.container,\n          cache = api.cache,\n          adjusted = {\n        left: 0,\n        top: 0\n      },\n          fixed,\n          newMy,\n          containerOffset,\n          containerStatic,\n          viewportWidth,\n          viewportHeight,\n          viewportScroll,\n          viewportOffset; // If viewport is not a jQuery element, or it's the window/document, or no adjustment method is used... return\n\n      if (!viewport.jquery || target[0] === window || target[0] === document.body || adjust.method === 'none') {\n        return adjusted;\n      } // Cach container details\n\n\n      containerOffset = container.offset() || adjusted;\n      containerStatic = container.css('position') === 'static'; // Cache our viewport details\n\n      fixed = tooltip.css('position') === 'fixed';\n      viewportWidth = viewport[0] === window ? viewport.width() : viewport.outerWidth(FALSE);\n      viewportHeight = viewport[0] === window ? viewport.height() : viewport.outerHeight(FALSE);\n      viewportScroll = {\n        left: fixed ? 0 : viewport.scrollLeft(),\n        top: fixed ? 0 : viewport.scrollTop()\n      };\n      viewportOffset = viewport.offset() || adjusted; // Generic calculation method\n\n      function calculate(side, otherSide, type, adjust, side1, side2, lengthName, targetLength, elemLength) {\n        var initialPos = position[side1],\n            mySide = my[side],\n            atSide = at[side],\n            isShift = type === SHIFT,\n            myLength = mySide === side1 ? elemLength : mySide === side2 ? -elemLength : -elemLength / 2,\n            atLength = atSide === side1 ? targetLength : atSide === side2 ? -targetLength : -targetLength / 2,\n            sideOffset = viewportScroll[side1] + viewportOffset[side1] - (containerStatic ? 0 : containerOffset[side1]),\n            overflow1 = sideOffset - initialPos,\n            overflow2 = initialPos + elemLength - (lengthName === WIDTH ? viewportWidth : viewportHeight) - sideOffset,\n            offset = myLength - (my.precedance === side || mySide === my[otherSide] ? atLength : 0) - (atSide === CENTER ? targetLength / 2 : 0); // shift\n\n        if (isShift) {\n          offset = (mySide === side1 ? 1 : -1) * myLength; // Adjust position but keep it within viewport dimensions\n\n          position[side1] += overflow1 > 0 ? overflow1 : overflow2 > 0 ? -overflow2 : 0;\n          position[side1] = Math.max(-containerOffset[side1] + viewportOffset[side1], initialPos - offset, Math.min(Math.max(-containerOffset[side1] + viewportOffset[side1] + (lengthName === WIDTH ? viewportWidth : viewportHeight), initialPos + offset), position[side1], // Make sure we don't adjust complete off the element when using 'center'\n          mySide === 'center' ? initialPos - myLength : 1E9));\n        } // flip/flipinvert\n        else {\n            // Update adjustment amount depending on if using flipinvert or flip\n            adjust *= type === FLIPINVERT ? 2 : 0; // Check for overflow on the left/top\n\n            if (overflow1 > 0 && (mySide !== side1 || overflow2 > 0)) {\n              position[side1] -= offset + adjust;\n              newMy.invert(side, side1);\n            } // Check for overflow on the bottom/right\n            else if (overflow2 > 0 && (mySide !== side2 || overflow1 > 0)) {\n                position[side1] -= (mySide === CENTER ? -offset : offset) + adjust;\n                newMy.invert(side, side2);\n              } // Make sure we haven't made things worse with the adjustment and reset if so\n\n\n            if (position[side1] < viewportScroll && -position[side1] > overflow2) {\n              position[side1] = initialPos;\n              newMy = my.clone();\n            }\n          }\n\n        return position[side1] - initialPos;\n      } // Set newMy if using flip or flipinvert methods\n\n\n      if (methodX !== 'shift' || methodY !== 'shift') {\n        newMy = my.clone();\n      } // Adjust position based onviewport and adjustment options\n\n\n      adjusted = {\n        left: methodX !== 'none' ? calculate(X, Y, methodX, adjust.x, LEFT, RIGHT, WIDTH, targetWidth, elemWidth) : 0,\n        top: methodY !== 'none' ? calculate(Y, X, methodY, adjust.y, TOP, BOTTOM, HEIGHT, targetHeight, elemHeight) : 0,\n        my: newMy\n      };\n      return adjusted;\n    };\n\n    ;\n    PLUGINS.polys = {\n      // POLY area coordinate calculator\n      //\tSpecial thanks to Ed Cradock for helping out with this.\n      //\tUses a binary search algorithm to find suitable coordinates.\n      polygon: function polygon(baseCoords, corner) {\n        var result = {\n          width: 0,\n          height: 0,\n          position: {\n            top: 1e10,\n            right: 0,\n            bottom: 0,\n            left: 1e10\n          },\n          adjustable: FALSE\n        },\n            i = 0,\n            next,\n            coords = [],\n            compareX = 1,\n            compareY = 1,\n            realX = 0,\n            realY = 0,\n            newWidth,\n            newHeight; // First pass, sanitize coords and determine outer edges\n\n        i = baseCoords.length;\n\n        while (i--) {\n          next = [parseInt(baseCoords[--i], 10), parseInt(baseCoords[i + 1], 10)];\n\n          if (next[0] > result.position.right) {\n            result.position.right = next[0];\n          }\n\n          if (next[0] < result.position.left) {\n            result.position.left = next[0];\n          }\n\n          if (next[1] > result.position.bottom) {\n            result.position.bottom = next[1];\n          }\n\n          if (next[1] < result.position.top) {\n            result.position.top = next[1];\n          }\n\n          coords.push(next);\n        } // Calculate height and width from outer edges\n\n\n        newWidth = result.width = Math.abs(result.position.right - result.position.left);\n        newHeight = result.height = Math.abs(result.position.bottom - result.position.top); // If it's the center corner...\n\n        if (corner.abbrev() === 'c') {\n          result.position = {\n            left: result.position.left + result.width / 2,\n            top: result.position.top + result.height / 2\n          };\n        } else {\n          // Second pass, use a binary search algorithm to locate most suitable coordinate\n          while (newWidth > 0 && newHeight > 0 && compareX > 0 && compareY > 0) {\n            newWidth = Math.floor(newWidth / 2);\n            newHeight = Math.floor(newHeight / 2);\n\n            if (corner.x === LEFT) {\n              compareX = newWidth;\n            } else if (corner.x === RIGHT) {\n              compareX = result.width - newWidth;\n            } else {\n              compareX += Math.floor(newWidth / 2);\n            }\n\n            if (corner.y === TOP) {\n              compareY = newHeight;\n            } else if (corner.y === BOTTOM) {\n              compareY = result.height - newHeight;\n            } else {\n              compareY += Math.floor(newHeight / 2);\n            }\n\n            i = coords.length;\n\n            while (i--) {\n              if (coords.length < 2) {\n                break;\n              }\n\n              realX = coords[i][0] - result.position.left;\n              realY = coords[i][1] - result.position.top;\n\n              if (corner.x === LEFT && realX >= compareX || corner.x === RIGHT && realX <= compareX || corner.x === CENTER && (realX < compareX || realX > result.width - compareX) || corner.y === TOP && realY >= compareY || corner.y === BOTTOM && realY <= compareY || corner.y === CENTER && (realY < compareY || realY > result.height - compareY)) {\n                coords.splice(i, 1);\n              }\n            }\n          }\n\n          result.position = {\n            left: coords[0][0],\n            top: coords[0][1]\n          };\n        }\n\n        return result;\n      },\n      rect: function rect(ax, ay, bx, by) {\n        return {\n          width: Math.abs(bx - ax),\n          height: Math.abs(by - ay),\n          position: {\n            left: Math.min(ax, bx),\n            top: Math.min(ay, by)\n          }\n        };\n      },\n      _angles: {\n        tc: 3 / 2,\n        tr: 7 / 4,\n        tl: 5 / 4,\n        bc: 1 / 2,\n        br: 1 / 4,\n        bl: 3 / 4,\n        rc: 2,\n        lc: 1,\n        c: 0\n      },\n      ellipse: function ellipse(cx, cy, rx, ry, corner) {\n        var c = PLUGINS.polys._angles[corner.abbrev()],\n            rxc = c === 0 ? 0 : rx * Math.cos(c * Math.PI),\n            rys = ry * Math.sin(c * Math.PI);\n\n        return {\n          width: rx * 2 - Math.abs(rxc),\n          height: ry * 2 - Math.abs(rys),\n          position: {\n            left: cx + rxc,\n            top: cy + rys\n          },\n          adjustable: FALSE\n        };\n      },\n      circle: function circle(cx, cy, r, corner) {\n        return PLUGINS.polys.ellipse(cx, cy, r, r, corner);\n      }\n    };\n    ;\n\n    PLUGINS.svg = function (api, svg, corner) {\n      var doc = $(document),\n          elem = svg[0],\n          root = $(elem.ownerSVGElement),\n          ownerDocument = elem.ownerDocument,\n          strokeWidth2 = (parseInt(svg.css('stroke-width'), 10) || 0) / 2,\n          frameOffset,\n          mtx,\n          transformed,\n          viewBox,\n          len,\n          next,\n          i,\n          points,\n          result,\n          position,\n          dimensions; // Ascend the parentNode chain until we find an element with getBBox()\n\n      while (!elem.getBBox) {\n        elem = elem.parentNode;\n      }\n\n      if (!elem.getBBox || !elem.parentNode) {\n        return FALSE;\n      } // Determine which shape calculation to use\n\n\n      switch (elem.nodeName) {\n        case 'ellipse':\n        case 'circle':\n          result = PLUGINS.polys.ellipse(elem.cx.baseVal.value, elem.cy.baseVal.value, (elem.rx || elem.r).baseVal.value + strokeWidth2, (elem.ry || elem.r).baseVal.value + strokeWidth2, corner);\n          break;\n\n        case 'line':\n        case 'polygon':\n        case 'polyline':\n          // Determine points object (line has none, so mimic using array)\n          points = elem.points || [{\n            x: elem.x1.baseVal.value,\n            y: elem.y1.baseVal.value\n          }, {\n            x: elem.x2.baseVal.value,\n            y: elem.y2.baseVal.value\n          }];\n\n          for (result = [], i = -1, len = points.numberOfItems || points.length; ++i < len;) {\n            next = points.getItem ? points.getItem(i) : points[i];\n            result.push.apply(result, [next.x, next.y]);\n          }\n\n          result = PLUGINS.polys.polygon(result, corner);\n          break;\n        // Unknown shape or rectangle? Use bounding box\n\n        default:\n          result = elem.getBBox();\n          result = {\n            width: result.width,\n            height: result.height,\n            position: {\n              left: result.x,\n              top: result.y\n            }\n          };\n          break;\n      } // Shortcut assignments\n\n\n      position = result.position;\n      root = root[0]; // Convert position into a pixel value\n\n      if (root.createSVGPoint) {\n        mtx = elem.getScreenCTM();\n        points = root.createSVGPoint();\n        points.x = position.left;\n        points.y = position.top;\n        transformed = points.matrixTransform(mtx);\n        position.left = transformed.x;\n        position.top = transformed.y;\n      } // Check the element is not in a child document, and if so, adjust for frame elements offset\n\n\n      if (ownerDocument !== document && api.position.target !== 'mouse') {\n        frameOffset = $((ownerDocument.defaultView || ownerDocument.parentWindow).frameElement).offset();\n\n        if (frameOffset) {\n          position.left += frameOffset.left;\n          position.top += frameOffset.top;\n        }\n      } // Adjust by scroll offset of owner document\n\n\n      ownerDocument = $(ownerDocument);\n      position.left += ownerDocument.scrollLeft();\n      position.top += ownerDocument.scrollTop();\n      return result;\n    };\n\n    ;\n\n    PLUGINS.imagemap = function (api, area, corner, adjustMethod) {\n      if (!area.jquery) {\n        area = $(area);\n      }\n\n      var shape = (area.attr('shape') || 'rect').toLowerCase().replace('poly', 'polygon'),\n          image = $('img[usemap=\"#' + area.parent('map').attr('name') + '\"]'),\n          coordsString = $.trim(area.attr('coords')),\n          coordsArray = coordsString.replace(/,$/, '').split(','),\n          imageOffset,\n          coords,\n          i,\n          next,\n          result,\n          len; // If we can't find the image using the map...\n\n      if (!image.length) {\n        return FALSE;\n      } // Pass coordinates string if polygon\n\n\n      if (shape === 'polygon') {\n        result = PLUGINS.polys.polygon(coordsArray, corner);\n      } // Otherwise parse the coordinates and pass them as arguments\n      else if (PLUGINS.polys[shape]) {\n          for (i = -1, len = coordsArray.length, coords = []; ++i < len;) {\n            coords.push(parseInt(coordsArray[i], 10));\n          }\n\n          result = PLUGINS.polys[shape].apply(this, coords.concat(corner));\n        } // If no shapre calculation method was found, return false\n        else {\n            return FALSE;\n          } // Make sure we account for padding and borders on the image\n\n\n      imageOffset = image.offset();\n      imageOffset.left += Math.ceil((image.outerWidth(FALSE) - image.width()) / 2);\n      imageOffset.top += Math.ceil((image.outerHeight(FALSE) - image.height()) / 2); // Add image position to offset coordinates\n\n      result.position.left += imageOffset.left;\n      result.position.top += imageOffset.top;\n      return result;\n    };\n\n    ;\n    var IE6,\n\n    /*\n     * BGIFrame adaption (http://plugins.jquery.com/project/bgiframe)\n     * Special thanks to Brandon Aaron\n     */\n    BGIFRAME = '<iframe class=\"qtip-bgiframe\" frameborder=\"0\" tabindex=\"-1\" src=\"javascript:\\'\\';\" ' + ' style=\"display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); ' + '-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\"></iframe>';\n\n    function Ie6(api, qtip) {\n      this._ns = 'ie6';\n      this.init(this.qtip = api);\n    }\n\n    $.extend(Ie6.prototype, {\n      _scroll: function _scroll() {\n        var overlay = this.qtip.elements.overlay;\n        overlay && (overlay[0].style.top = $(window).scrollTop() + 'px');\n      },\n      init: function init(qtip) {\n        var tooltip = qtip.tooltip,\n            scroll; // Create the BGIFrame element if needed\n\n        if ($('select, object').length < 1) {\n          this.bgiframe = qtip.elements.bgiframe = $(BGIFRAME).appendTo(tooltip); // Update BGIFrame on tooltip move\n\n          qtip._bind(tooltip, 'tooltipmove', this.adjustBGIFrame, this._ns, this);\n        } // redraw() container for width/height calculations\n\n\n        this.redrawContainer = $('<div/>', {\n          id: NAMESPACE + '-rcontainer'\n        }).appendTo(document.body); // Fixup modal plugin if present too\n\n        if (qtip.elements.overlay && qtip.elements.overlay.addClass('qtipmodal-ie6fix')) {\n          qtip._bind(window, ['scroll', 'resize'], this._scroll, this._ns, this);\n\n          qtip._bind(tooltip, ['tooltipshow'], this._scroll, this._ns, this);\n        } // Set dimensions\n\n\n        this.redraw();\n      },\n      adjustBGIFrame: function adjustBGIFrame() {\n        var tooltip = this.qtip.tooltip,\n            dimensions = {\n          height: tooltip.outerHeight(FALSE),\n          width: tooltip.outerWidth(FALSE)\n        },\n            plugin = this.qtip.plugins.tip,\n            tip = this.qtip.elements.tip,\n            tipAdjust,\n            offset; // Adjust border offset\n\n        offset = parseInt(tooltip.css('borderLeftWidth'), 10) || 0;\n        offset = {\n          left: -offset,\n          top: -offset\n        }; // Adjust for tips plugin\n\n        if (plugin && tip) {\n          tipAdjust = plugin.corner.precedance === 'x' ? [WIDTH, LEFT] : [HEIGHT, TOP];\n          offset[tipAdjust[1]] -= tip[tipAdjust[0]]();\n        } // Update bgiframe\n\n\n        this.bgiframe.css(offset).css(dimensions);\n      },\n      // Max/min width simulator function\n      redraw: function redraw() {\n        if (this.qtip.rendered < 1 || this.drawing) {\n          return this;\n        }\n\n        var tooltip = this.qtip.tooltip,\n            style = this.qtip.options.style,\n            container = this.qtip.options.position.container,\n            perc,\n            width,\n            max,\n            min; // Set drawing flag\n\n        this.qtip.drawing = 1; // If tooltip has a set height/width, just set it... like a boss!\n\n        if (style.height) {\n          tooltip.css(HEIGHT, style.height);\n        }\n\n        if (style.width) {\n          tooltip.css(WIDTH, style.width);\n        } // Simulate max/min width if not set width present...\n        else {\n            // Reset width and add fluid class\n            tooltip.css(WIDTH, '').appendTo(this.redrawContainer); // Grab our tooltip width (add 1 if odd so we don't get wrapping problems.. huzzah!)\n\n            width = tooltip.width();\n\n            if (width % 2 < 1) {\n              width += 1;\n            } // Grab our max/min properties\n\n\n            max = tooltip.css('maxWidth') || '';\n            min = tooltip.css('minWidth') || ''; // Parse into proper pixel values\n\n            perc = (max + min).indexOf('%') > -1 ? container.width() / 100 : 0;\n            max = (max.indexOf('%') > -1 ? perc : 1) * parseInt(max, 10) || width;\n            min = (min.indexOf('%') > -1 ? perc : 1) * parseInt(min, 10) || 0; // Determine new dimension size based on max/min/current values\n\n            width = max + min ? Math.min(Math.max(width, min), max) : width; // Set the newly calculated width and remvoe fluid class\n\n            tooltip.css(WIDTH, Math.round(width)).appendTo(container);\n          } // Set drawing flag\n\n\n        this.drawing = 0;\n        return this;\n      },\n      destroy: function destroy() {\n        // Remove iframe\n        this.bgiframe && this.bgiframe.remove(); // Remove bound events\n\n        this.qtip._unbind([window, this.qtip.tooltip], this._ns);\n      }\n    });\n\n    IE6 = PLUGINS.ie6 = function (api) {\n      // Proceed only if the browser is IE6\n      return BROWSER.ie === 6 ? new Ie6(api) : FALSE;\n    };\n\n    IE6.initialize = 'render';\n    CHECKS.ie6 = {\n      '^content|style$': function contentStyle$() {\n        this.redraw();\n      }\n    };\n    ;\n  });\n})(window, document);"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.ui-1.11.4.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.ui-1.11.4.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! jQuery UI - v1.11.4 - 2015-03-11\n* http://jqueryui.com\n* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js\n* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  /*!\n   * jQuery UI Core 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/category/ui-core/\n   */\n  // $.ui might exist from components with no dependencies, e.g., $.ui.position\n  $.ui = $.ui || {};\n  $.extend($.ui, {\n    version: \"1.11.4\",\n    keyCode: {\n      BACKSPACE: 8,\n      COMMA: 188,\n      DELETE: 46,\n      DOWN: 40,\n      END: 35,\n      ENTER: 13,\n      ESCAPE: 27,\n      HOME: 36,\n      LEFT: 37,\n      PAGE_DOWN: 34,\n      PAGE_UP: 33,\n      PERIOD: 190,\n      RIGHT: 39,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38\n    }\n  }); // plugins\n\n  $.fn.extend({\n    scrollParent: function scrollParent(includeHidden) {\n      var position = this.css(\"position\"),\n          excludeStaticParent = position === \"absolute\",\n          overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\n          scrollParent = this.parents().filter(function () {\n        var parent = $(this);\n\n        if (excludeStaticParent && parent.css(\"position\") === \"static\") {\n          return false;\n        }\n\n        return overflowRegex.test(parent.css(\"overflow\") + parent.css(\"overflow-y\") + parent.css(\"overflow-x\"));\n      }).eq(0);\n      return position === \"fixed\" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;\n    },\n    uniqueId: function () {\n      var uuid = 0;\n      return function () {\n        return this.each(function () {\n          if (!this.id) {\n            this.id = \"ui-id-\" + ++uuid;\n          }\n        });\n      };\n    }(),\n    removeUniqueId: function removeUniqueId() {\n      return this.each(function () {\n        if (/^ui-id-\\d+$/.test(this.id)) {\n          $(this).removeAttr(\"id\");\n        }\n      });\n    }\n  }); // selectors\n\n  function _focusable(element, isTabIndexNotNaN) {\n    var map,\n        mapName,\n        img,\n        nodeName = element.nodeName.toLowerCase();\n\n    if (\"area\" === nodeName) {\n      map = element.parentNode;\n      mapName = map.name;\n\n      if (!element.href || !mapName || map.nodeName.toLowerCase() !== \"map\") {\n        return false;\n      }\n\n      img = $(\"img[usemap='#\" + mapName + \"']\")[0];\n      return !!img && visible(img);\n    }\n\n    return (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : \"a\" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && // the element and all of its ancestors must be visible\n    visible(element);\n  }\n\n  function visible(element) {\n    return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {\n      return $.css(this, \"visibility\") === \"hidden\";\n    }).length;\n  }\n\n  $.extend($.expr[\":\"], {\n    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {\n      return function (elem) {\n        return !!$.data(elem, dataName);\n      };\n    }) : // support: jQuery <1.8\n    function (elem, i, match) {\n      return !!$.data(elem, match[3]);\n    },\n    focusable: function focusable(element) {\n      return _focusable(element, !isNaN($.attr(element, \"tabindex\")));\n    },\n    tabbable: function tabbable(element) {\n      var tabIndex = $.attr(element, \"tabindex\"),\n          isTabIndexNaN = isNaN(tabIndex);\n      return (isTabIndexNaN || tabIndex >= 0) && _focusable(element, !isTabIndexNaN);\n    }\n  }); // support: jQuery <1.8\n\n  if (!$(\"<a>\").outerWidth(1).jquery) {\n    $.each([\"Width\", \"Height\"], function (i, name) {\n      var side = name === \"Width\" ? [\"Left\", \"Right\"] : [\"Top\", \"Bottom\"],\n          type = name.toLowerCase(),\n          orig = {\n        innerWidth: $.fn.innerWidth,\n        innerHeight: $.fn.innerHeight,\n        outerWidth: $.fn.outerWidth,\n        outerHeight: $.fn.outerHeight\n      };\n\n      function reduce(elem, size, border, margin) {\n        $.each(side, function () {\n          size -= parseFloat($.css(elem, \"padding\" + this)) || 0;\n\n          if (border) {\n            size -= parseFloat($.css(elem, \"border\" + this + \"Width\")) || 0;\n          }\n\n          if (margin) {\n            size -= parseFloat($.css(elem, \"margin\" + this)) || 0;\n          }\n        });\n        return size;\n      }\n\n      $.fn[\"inner\" + name] = function (size) {\n        if (size === undefined) {\n          return orig[\"inner\" + name].call(this);\n        }\n\n        return this.each(function () {\n          $(this).css(type, reduce(this, size) + \"px\");\n        });\n      };\n\n      $.fn[\"outer\" + name] = function (size, margin) {\n        if (typeof size !== \"number\") {\n          return orig[\"outer\" + name].call(this, size);\n        }\n\n        return this.each(function () {\n          $(this).css(type, reduce(this, size, true, margin) + \"px\");\n        });\n      };\n    });\n  } // support: jQuery <1.8\n\n\n  if (!$.fn.addBack) {\n    $.fn.addBack = function (selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    };\n  } // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)\n\n\n  if ($(\"<a>\").data(\"a-b\", \"a\").removeData(\"a-b\").data(\"a-b\")) {\n    $.fn.removeData = function (removeData) {\n      return function (key) {\n        if (arguments.length) {\n          return removeData.call(this, $.camelCase(key));\n        } else {\n          return removeData.call(this);\n        }\n      };\n    }($.fn.removeData);\n  } // deprecated\n\n\n  $.ui.ie = !!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());\n  $.fn.extend({\n    focus: function (orig) {\n      return function (delay, fn) {\n        return typeof delay === \"number\" ? this.each(function () {\n          var elem = this;\n          setTimeout(function () {\n            $(elem).focus();\n\n            if (fn) {\n              fn.call(elem);\n            }\n          }, delay);\n        }) : orig.apply(this, arguments);\n      };\n    }($.fn.focus),\n    disableSelection: function () {\n      var eventType = \"onselectstart\" in document.createElement(\"div\") ? \"selectstart\" : \"mousedown\";\n      return function () {\n        return this.bind(eventType + \".ui-disableSelection\", function (event) {\n          event.preventDefault();\n        });\n      };\n    }(),\n    enableSelection: function enableSelection() {\n      return this.unbind(\".ui-disableSelection\");\n    },\n    zIndex: function zIndex(_zIndex) {\n      if (_zIndex !== undefined) {\n        return this.css(\"zIndex\", _zIndex);\n      }\n\n      if (this.length) {\n        var elem = $(this[0]),\n            position,\n            value;\n\n        while (elem.length && elem[0] !== document) {\n          // Ignore z-index if position is set to a value where z-index is ignored by the browser\n          // This makes behavior of this function consistent across browsers\n          // WebKit always returns auto if the element is positioned\n          position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n            // IE returns 0 when zIndex is not specified\n            // other browsers return a string\n            // we ignore the case of nested elements with an explicit value of 0\n            // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n            value = parseInt(elem.css(\"zIndex\"), 10);\n\n            if (!isNaN(value) && value !== 0) {\n              return value;\n            }\n          }\n\n          elem = elem.parent();\n        }\n      }\n\n      return 0;\n    }\n  }); // $.ui.plugin is deprecated. Use $.widget() extensions instead.\n\n  $.ui.plugin = {\n    add: function add(module, option, set) {\n      var i,\n          proto = $.ui[module].prototype;\n\n      for (i in set) {\n        proto.plugins[i] = proto.plugins[i] || [];\n        proto.plugins[i].push([option, set[i]]);\n      }\n    },\n    call: function call(instance, name, args, allowDisconnected) {\n      var i,\n          set = instance.plugins[name];\n\n      if (!set) {\n        return;\n      }\n\n      if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {\n        return;\n      }\n\n      for (i = 0; i < set.length; i++) {\n        if (instance.options[set[i][0]]) {\n          set[i][1].apply(instance.element, args);\n        }\n      }\n    }\n  };\n  /*!\n   * jQuery UI Widget 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/jQuery.widget/\n   */\n\n  var widget_uuid = 0,\n      widget_slice = Array.prototype.slice;\n\n  $.cleanData = function (orig) {\n    return function (elems) {\n      var events, elem, i;\n\n      for (i = 0; (elem = elems[i]) != null; i++) {\n        try {\n          // Only trigger remove when necessary to save time\n          events = $._data(elem, \"events\");\n\n          if (events && events.remove) {\n            $(elem).triggerHandler(\"remove\");\n          } // http://bugs.jquery.com/ticket/8235\n\n        } catch (e) {}\n      }\n\n      orig(elems);\n    };\n  }($.cleanData);\n\n  $.widget = function (name, base, prototype) {\n    var fullName,\n        existingConstructor,\n        constructor,\n        basePrototype,\n        // proxiedPrototype allows the provided prototype to remain unmodified\n    // so that it can be used as a mixin for multiple widgets (#8876)\n    proxiedPrototype = {},\n        namespace = name.split(\".\")[0];\n    name = name.split(\".\")[1];\n    fullName = namespace + \"-\" + name;\n\n    if (!prototype) {\n      prototype = base;\n      base = $.Widget;\n    } // create selector for plugin\n\n\n    $.expr[\":\"][fullName.toLowerCase()] = function (elem) {\n      return !!$.data(elem, fullName);\n    };\n\n    $[namespace] = $[namespace] || {};\n    existingConstructor = $[namespace][name];\n\n    constructor = $[namespace][name] = function (options, element) {\n      // allow instantiation without \"new\" keyword\n      if (!this._createWidget) {\n        return new constructor(options, element);\n      } // allow instantiation without initializing for simple inheritance\n      // must use \"new\" keyword (the code above always passes args)\n\n\n      if (arguments.length) {\n        this._createWidget(options, element);\n      }\n    }; // extend with the existing constructor to carry over any static properties\n\n\n    $.extend(constructor, existingConstructor, {\n      version: prototype.version,\n      // copy the object used to create the prototype in case we need to\n      // redefine the widget later\n      _proto: $.extend({}, prototype),\n      // track widgets that inherit from this widget in case this widget is\n      // redefined after a widget inherits from it\n      _childConstructors: []\n    });\n    basePrototype = new base(); // we need to make the options hash a property directly on the new instance\n    // otherwise we'll modify the options hash on the prototype that we're\n    // inheriting from\n\n    basePrototype.options = $.widget.extend({}, basePrototype.options);\n    $.each(prototype, function (prop, value) {\n      if (!$.isFunction(value)) {\n        proxiedPrototype[prop] = value;\n        return;\n      }\n\n      proxiedPrototype[prop] = function () {\n        var _super = function _super() {\n          return base.prototype[prop].apply(this, arguments);\n        },\n            _superApply = function _superApply(args) {\n          return base.prototype[prop].apply(this, args);\n        };\n\n        return function () {\n          var __super = this._super,\n              __superApply = this._superApply,\n              returnValue;\n          this._super = _super;\n          this._superApply = _superApply;\n          returnValue = value.apply(this, arguments);\n          this._super = __super;\n          this._superApply = __superApply;\n          return returnValue;\n        };\n      }();\n    });\n    constructor.prototype = $.widget.extend(basePrototype, {\n      // TODO: remove support for widgetEventPrefix\n      // always use the name + a colon as the prefix, e.g., draggable:start\n      // don't prefix for widgets that aren't DOM-based\n      widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name\n    }, proxiedPrototype, {\n      constructor: constructor,\n      namespace: namespace,\n      widgetName: name,\n      widgetFullName: fullName\n    }); // If this widget is being redefined then we need to find all widgets that\n    // are inheriting from it and redefine all of them so that they inherit from\n    // the new version of this widget. We're essentially trying to replace one\n    // level in the prototype chain.\n\n    if (existingConstructor) {\n      $.each(existingConstructor._childConstructors, function (i, child) {\n        var childPrototype = child.prototype; // redefine the child widget using the same prototype that was\n        // originally used, but inherit from the new version of the base\n\n        $.widget(childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto);\n      }); // remove the list of existing child constructors from the old constructor\n      // so the old child constructors can be garbage collected\n\n      delete existingConstructor._childConstructors;\n    } else {\n      base._childConstructors.push(constructor);\n    }\n\n    $.widget.bridge(name, constructor);\n    return constructor;\n  };\n\n  $.widget.extend = function (target) {\n    var input = widget_slice.call(arguments, 1),\n        inputIndex = 0,\n        inputLength = input.length,\n        key,\n        value;\n\n    for (; inputIndex < inputLength; inputIndex++) {\n      for (key in input[inputIndex]) {\n        value = input[inputIndex][key];\n\n        if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n          // Clone objects\n          if ($.isPlainObject(value)) {\n            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : // Don't extend strings, arrays, etc. with objects\n            $.widget.extend({}, value); // Copy everything else by reference\n          } else {\n            target[key] = value;\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  $.widget.bridge = function (name, object) {\n    var fullName = object.prototype.widgetFullName || name;\n\n    $.fn[name] = function (options) {\n      var isMethodCall = typeof options === \"string\",\n          args = widget_slice.call(arguments, 1),\n          returnValue = this;\n\n      if (isMethodCall) {\n        this.each(function () {\n          var methodValue,\n              instance = $.data(this, fullName);\n\n          if (options === \"instance\") {\n            returnValue = instance;\n            return false;\n          }\n\n          if (!instance) {\n            return $.error(\"cannot call methods on \" + name + \" prior to initialization; \" + \"attempted to call method '\" + options + \"'\");\n          }\n\n          if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n            return $.error(\"no such method '\" + options + \"' for \" + name + \" widget instance\");\n          }\n\n          methodValue = instance[options].apply(instance, args);\n\n          if (methodValue !== instance && methodValue !== undefined) {\n            returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;\n            return false;\n          }\n        });\n      } else {\n        // Allow multiple hashes to be passed on init\n        if (args.length) {\n          options = $.widget.extend.apply(null, [options].concat(args));\n        }\n\n        this.each(function () {\n          var instance = $.data(this, fullName);\n\n          if (instance) {\n            instance.option(options || {});\n\n            if (instance._init) {\n              instance._init();\n            }\n          } else {\n            $.data(this, fullName, new object(options, this));\n          }\n        });\n      }\n\n      return returnValue;\n    };\n  };\n\n  $.Widget = function ()\n  /* options, element */\n  {};\n\n  $.Widget._childConstructors = [];\n  $.Widget.prototype = {\n    widgetName: \"widget\",\n    widgetEventPrefix: \"\",\n    defaultElement: \"<div>\",\n    options: {\n      disabled: false,\n      // callbacks\n      create: null\n    },\n    _createWidget: function _createWidget(options, element) {\n      element = $(element || this.defaultElement || this)[0];\n      this.element = $(element);\n      this.uuid = widget_uuid++;\n      this.eventNamespace = \".\" + this.widgetName + this.uuid;\n      this.bindings = $();\n      this.hoverable = $();\n      this.focusable = $();\n\n      if (element !== this) {\n        $.data(element, this.widgetFullName, this);\n\n        this._on(true, this.element, {\n          remove: function remove(event) {\n            if (event.target === element) {\n              this.destroy();\n            }\n          }\n        });\n\n        this.document = $(element.style ? // element within the document\n        element.ownerDocument : // element is window or document\n        element.document || element);\n        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);\n      }\n\n      this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);\n\n      this._create();\n\n      this._trigger(\"create\", null, this._getCreateEventData());\n\n      this._init();\n    },\n    _getCreateOptions: $.noop,\n    _getCreateEventData: $.noop,\n    _create: $.noop,\n    _init: $.noop,\n    destroy: function destroy() {\n      this._destroy(); // we can probably remove the unbind calls in 2.0\n      // all event bindings should go through this._on()\n\n\n      this.element.unbind(this.eventNamespace).removeData(this.widgetFullName) // support: jquery <1.6.3\n      // http://bugs.jquery.com/ticket/9413\n      .removeData($.camelCase(this.widgetFullName));\n      this.widget().unbind(this.eventNamespace).removeAttr(\"aria-disabled\").removeClass(this.widgetFullName + \"-disabled \" + \"ui-state-disabled\"); // clean up events and states\n\n      this.bindings.unbind(this.eventNamespace);\n      this.hoverable.removeClass(\"ui-state-hover\");\n      this.focusable.removeClass(\"ui-state-focus\");\n    },\n    _destroy: $.noop,\n    widget: function widget() {\n      return this.element;\n    },\n    option: function option(key, value) {\n      var options = key,\n          parts,\n          curOption,\n          i;\n\n      if (arguments.length === 0) {\n        // don't return a reference to the internal hash\n        return $.widget.extend({}, this.options);\n      }\n\n      if (typeof key === \"string\") {\n        // handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n        options = {};\n        parts = key.split(\".\");\n        key = parts.shift();\n\n        if (parts.length) {\n          curOption = options[key] = $.widget.extend({}, this.options[key]);\n\n          for (i = 0; i < parts.length - 1; i++) {\n            curOption[parts[i]] = curOption[parts[i]] || {};\n            curOption = curOption[parts[i]];\n          }\n\n          key = parts.pop();\n\n          if (arguments.length === 1) {\n            return curOption[key] === undefined ? null : curOption[key];\n          }\n\n          curOption[key] = value;\n        } else {\n          if (arguments.length === 1) {\n            return this.options[key] === undefined ? null : this.options[key];\n          }\n\n          options[key] = value;\n        }\n      }\n\n      this._setOptions(options);\n\n      return this;\n    },\n    _setOptions: function _setOptions(options) {\n      var key;\n\n      for (key in options) {\n        this._setOption(key, options[key]);\n      }\n\n      return this;\n    },\n    _setOption: function _setOption(key, value) {\n      this.options[key] = value;\n\n      if (key === \"disabled\") {\n        this.widget().toggleClass(this.widgetFullName + \"-disabled\", !!value); // If the widget is becoming disabled, then nothing is interactive\n\n        if (value) {\n          this.hoverable.removeClass(\"ui-state-hover\");\n          this.focusable.removeClass(\"ui-state-focus\");\n        }\n      }\n\n      return this;\n    },\n    enable: function enable() {\n      return this._setOptions({\n        disabled: false\n      });\n    },\n    disable: function disable() {\n      return this._setOptions({\n        disabled: true\n      });\n    },\n    _on: function _on(suppressDisabledCheck, element, handlers) {\n      var delegateElement,\n          instance = this; // no suppressDisabledCheck flag, shuffle arguments\n\n      if (typeof suppressDisabledCheck !== \"boolean\") {\n        handlers = element;\n        element = suppressDisabledCheck;\n        suppressDisabledCheck = false;\n      } // no element argument, shuffle and use this.element\n\n\n      if (!handlers) {\n        handlers = element;\n        element = this.element;\n        delegateElement = this.widget();\n      } else {\n        element = delegateElement = $(element);\n        this.bindings = this.bindings.add(element);\n      }\n\n      $.each(handlers, function (event, handler) {\n        function handlerProxy() {\n          // allow widgets to customize the disabled handling\n          // - disabled as an array instead of boolean\n          // - disabled class as method for disabling individual parts\n          if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass(\"ui-state-disabled\"))) {\n            return;\n          }\n\n          return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n        } // copy the guid so direct unbinding works\n\n\n        if (typeof handler !== \"string\") {\n          handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;\n        }\n\n        var match = event.match(/^([\\w:-]*)\\s*(.*)$/),\n            eventName = match[1] + instance.eventNamespace,\n            selector = match[2];\n\n        if (selector) {\n          delegateElement.delegate(selector, eventName, handlerProxy);\n        } else {\n          element.bind(eventName, handlerProxy);\n        }\n      });\n    },\n    _off: function _off(element, eventName) {\n      eventName = (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace;\n      element.unbind(eventName).undelegate(eventName); // Clear the stack to avoid memory leaks (#10056)\n\n      this.bindings = $(this.bindings.not(element).get());\n      this.focusable = $(this.focusable.not(element).get());\n      this.hoverable = $(this.hoverable.not(element).get());\n    },\n    _delay: function _delay(handler, delay) {\n      function handlerProxy() {\n        return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n      }\n\n      var instance = this;\n      return setTimeout(handlerProxy, delay || 0);\n    },\n    _hoverable: function _hoverable(element) {\n      this.hoverable = this.hoverable.add(element);\n\n      this._on(element, {\n        mouseenter: function mouseenter(event) {\n          $(event.currentTarget).addClass(\"ui-state-hover\");\n        },\n        mouseleave: function mouseleave(event) {\n          $(event.currentTarget).removeClass(\"ui-state-hover\");\n        }\n      });\n    },\n    _focusable: function _focusable(element) {\n      this.focusable = this.focusable.add(element);\n\n      this._on(element, {\n        focusin: function focusin(event) {\n          $(event.currentTarget).addClass(\"ui-state-focus\");\n        },\n        focusout: function focusout(event) {\n          $(event.currentTarget).removeClass(\"ui-state-focus\");\n        }\n      });\n    },\n    _trigger: function _trigger(type, event, data) {\n      var prop,\n          orig,\n          callback = this.options[type];\n      data = data || {};\n      event = $.Event(event);\n      event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(); // the original event may come from any element\n      // so we need to reset the target on the new event\n\n      event.target = this.element[0]; // copy original event properties over to the new event\n\n      orig = event.originalEvent;\n\n      if (orig) {\n        for (prop in orig) {\n          if (!(prop in event)) {\n            event[prop] = orig[prop];\n          }\n        }\n      }\n\n      this.element.trigger(event, data);\n      return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());\n    }\n  };\n  $.each({\n    show: \"fadeIn\",\n    hide: \"fadeOut\"\n  }, function (method, defaultEffect) {\n    $.Widget.prototype[\"_\" + method] = function (element, options, callback) {\n      if (typeof options === \"string\") {\n        options = {\n          effect: options\n        };\n      }\n\n      var hasOptions,\n          effectName = !options ? method : options === true || typeof options === \"number\" ? defaultEffect : options.effect || defaultEffect;\n      options = options || {};\n\n      if (typeof options === \"number\") {\n        options = {\n          duration: options\n        };\n      }\n\n      hasOptions = !$.isEmptyObject(options);\n      options.complete = callback;\n\n      if (options.delay) {\n        element.delay(options.delay);\n      }\n\n      if (hasOptions && $.effects && $.effects.effect[effectName]) {\n        element[method](options);\n      } else if (effectName !== method && element[effectName]) {\n        element[effectName](options.duration, options.easing, callback);\n      } else {\n        element.queue(function (next) {\n          $(this)[method]();\n\n          if (callback) {\n            callback.call(element[0]);\n          }\n\n          next();\n        });\n      }\n    };\n  });\n  var widget = $.widget;\n  /*!\n   * jQuery UI Mouse 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/mouse/\n   */\n\n  var mouseHandled = false;\n  $(document).mouseup(function () {\n    mouseHandled = false;\n  });\n  var mouse = $.widget(\"ui.mouse\", {\n    version: \"1.11.4\",\n    options: {\n      cancel: \"input,textarea,button,select,option\",\n      distance: 1,\n      delay: 0\n    },\n    _mouseInit: function _mouseInit() {\n      var that = this;\n      this.element.bind(\"mousedown.\" + this.widgetName, function (event) {\n        return that._mouseDown(event);\n      }).bind(\"click.\" + this.widgetName, function (event) {\n        if (true === $.data(event.target, that.widgetName + \".preventClickEvent\")) {\n          $.removeData(event.target, that.widgetName + \".preventClickEvent\");\n          event.stopImmediatePropagation();\n          return false;\n        }\n      });\n      this.started = false;\n    },\n    // TODO: make sure destroying one instance of mouse doesn't mess with\n    // other instances of mouse\n    _mouseDestroy: function _mouseDestroy() {\n      this.element.unbind(\".\" + this.widgetName);\n\n      if (this._mouseMoveDelegate) {\n        this.document.unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      }\n    },\n    _mouseDown: function _mouseDown(event) {\n      // don't let more than one widget handle mouseStart\n      if (mouseHandled) {\n        return;\n      }\n\n      this._mouseMoved = false; // we may have missed mouseup (out of window)\n\n      this._mouseStarted && this._mouseUp(event);\n      this._mouseDownEvent = event;\n      var that = this,\n          btnIsLeft = event.which === 1,\n          // event.target.nodeName works around a bug in IE 8 with\n      // disabled inputs (#7620)\n      elIsCancel = typeof this.options.cancel === \"string\" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;\n\n      if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {\n        return true;\n      }\n\n      this.mouseDelayMet = !this.options.delay;\n\n      if (!this.mouseDelayMet) {\n        this._mouseDelayTimer = setTimeout(function () {\n          that.mouseDelayMet = true;\n        }, this.options.delay);\n      }\n\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(event) !== false;\n\n        if (!this._mouseStarted) {\n          event.preventDefault();\n          return true;\n        }\n      } // Click event may never have fired (Gecko & Opera)\n\n\n      if (true === $.data(event.target, this.widgetName + \".preventClickEvent\")) {\n        $.removeData(event.target, this.widgetName + \".preventClickEvent\");\n      } // these delegates are required to keep context\n\n\n      this._mouseMoveDelegate = function (event) {\n        return that._mouseMove(event);\n      };\n\n      this._mouseUpDelegate = function (event) {\n        return that._mouseUp(event);\n      };\n\n      this.document.bind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).bind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      event.preventDefault();\n      mouseHandled = true;\n      return true;\n    },\n    _mouseMove: function _mouseMove(event) {\n      // Only check for mouseups outside the document if you've moved inside the document\n      // at least once. This prevents the firing of mouseup in the case of IE<9, which will\n      // fire a mousemove event if content is placed under the cursor. See #7778\n      // Support: IE <9\n      if (this._mouseMoved) {\n        // IE mouseup check - mouseup happened when mouse was out of window\n        if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {\n          return this._mouseUp(event); // Iframe mouseup check - mouseup occurred in another document\n        } else if (!event.which) {\n          return this._mouseUp(event);\n        }\n      }\n\n      if (event.which || event.button) {\n        this._mouseMoved = true;\n      }\n\n      if (this._mouseStarted) {\n        this._mouseDrag(event);\n\n        return event.preventDefault();\n      }\n\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;\n        this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);\n      }\n\n      return !this._mouseStarted;\n    },\n    _mouseUp: function _mouseUp(event) {\n      this.document.unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\n      if (this._mouseStarted) {\n        this._mouseStarted = false;\n\n        if (event.target === this._mouseDownEvent.target) {\n          $.data(event.target, this.widgetName + \".preventClickEvent\", true);\n        }\n\n        this._mouseStop(event);\n      }\n\n      mouseHandled = false;\n      return false;\n    },\n    _mouseDistanceMet: function _mouseDistanceMet(event) {\n      return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;\n    },\n    _mouseDelayMet: function _mouseDelayMet()\n    /* event */\n    {\n      return this.mouseDelayMet;\n    },\n    // These are placeholder methods, to be overriden by extending plugin\n    _mouseStart: function _mouseStart()\n    /* event */\n    {},\n    _mouseDrag: function _mouseDrag()\n    /* event */\n    {},\n    _mouseStop: function _mouseStop()\n    /* event */\n    {},\n    _mouseCapture: function _mouseCapture()\n    /* event */\n    {\n      return true;\n    }\n  });\n  /*!\n   * jQuery UI Position 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/position/\n   */\n\n  (function () {\n    $.ui = $.ui || {};\n    var cachedScrollbarWidth,\n        supportsOffsetFractions,\n        max = Math.max,\n        abs = Math.abs,\n        round = Math.round,\n        rhorizontal = /left|center|right/,\n        rvertical = /top|center|bottom/,\n        roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\n        rposition = /^\\w+/,\n        rpercent = /%$/,\n        _position = $.fn.position;\n\n    function getOffsets(offsets, width, height) {\n      return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)];\n    }\n\n    function parseCss(element, property) {\n      return parseInt($.css(element, property), 10) || 0;\n    }\n\n    function getDimensions(elem) {\n      var raw = elem[0];\n\n      if (raw.nodeType === 9) {\n        return {\n          width: elem.width(),\n          height: elem.height(),\n          offset: {\n            top: 0,\n            left: 0\n          }\n        };\n      }\n\n      if ($.isWindow(raw)) {\n        return {\n          width: elem.width(),\n          height: elem.height(),\n          offset: {\n            top: elem.scrollTop(),\n            left: elem.scrollLeft()\n          }\n        };\n      }\n\n      if (raw.preventDefault) {\n        return {\n          width: 0,\n          height: 0,\n          offset: {\n            top: raw.pageY,\n            left: raw.pageX\n          }\n        };\n      }\n\n      return {\n        width: elem.outerWidth(),\n        height: elem.outerHeight(),\n        offset: elem.offset()\n      };\n    }\n\n    $.position = {\n      scrollbarWidth: function scrollbarWidth() {\n        if (cachedScrollbarWidth !== undefined) {\n          return cachedScrollbarWidth;\n        }\n\n        var w1,\n            w2,\n            div = $(\"<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>\"),\n            innerDiv = div.children()[0];\n        $(\"body\").append(div);\n        w1 = innerDiv.offsetWidth;\n        div.css(\"overflow\", \"scroll\");\n        w2 = innerDiv.offsetWidth;\n\n        if (w1 === w2) {\n          w2 = div[0].clientWidth;\n        }\n\n        div.remove();\n        return cachedScrollbarWidth = w1 - w2;\n      },\n      getScrollInfo: function getScrollInfo(within) {\n        var overflowX = within.isWindow || within.isDocument ? \"\" : within.element.css(\"overflow-x\"),\n            overflowY = within.isWindow || within.isDocument ? \"\" : within.element.css(\"overflow-y\"),\n            hasOverflowX = overflowX === \"scroll\" || overflowX === \"auto\" && within.width < within.element[0].scrollWidth,\n            hasOverflowY = overflowY === \"scroll\" || overflowY === \"auto\" && within.height < within.element[0].scrollHeight;\n        return {\n          width: hasOverflowY ? $.position.scrollbarWidth() : 0,\n          height: hasOverflowX ? $.position.scrollbarWidth() : 0\n        };\n      },\n      getWithinInfo: function getWithinInfo(element) {\n        var withinElement = $(element || window),\n            isWindow = $.isWindow(withinElement[0]),\n            isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;\n        return {\n          element: withinElement,\n          isWindow: isWindow,\n          isDocument: isDocument,\n          offset: withinElement.offset() || {\n            left: 0,\n            top: 0\n          },\n          scrollLeft: withinElement.scrollLeft(),\n          scrollTop: withinElement.scrollTop(),\n          // support: jQuery 1.6.x\n          // jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows\n          width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),\n          height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()\n        };\n      }\n    };\n\n    $.fn.position = function (options) {\n      if (!options || !options.of) {\n        return _position.apply(this, arguments);\n      } // make a copy, we don't want to modify arguments\n\n\n      options = $.extend({}, options);\n      var atOffset,\n          targetWidth,\n          targetHeight,\n          targetOffset,\n          basePosition,\n          dimensions,\n          target = $(options.of),\n          within = $.position.getWithinInfo(options.within),\n          scrollInfo = $.position.getScrollInfo(within),\n          collision = (options.collision || \"flip\").split(\" \"),\n          offsets = {};\n      dimensions = getDimensions(target);\n\n      if (target[0].preventDefault) {\n        // force left top to allow flipping\n        options.at = \"left top\";\n      }\n\n      targetWidth = dimensions.width;\n      targetHeight = dimensions.height;\n      targetOffset = dimensions.offset; // clone to reuse original targetOffset later\n\n      basePosition = $.extend({}, targetOffset); // force my and at to have valid horizontal and vertical positions\n      // if a value is missing or invalid, it will be converted to center\n\n      $.each([\"my\", \"at\"], function () {\n        var pos = (options[this] || \"\").split(\" \"),\n            horizontalOffset,\n            verticalOffset;\n\n        if (pos.length === 1) {\n          pos = rhorizontal.test(pos[0]) ? pos.concat([\"center\"]) : rvertical.test(pos[0]) ? [\"center\"].concat(pos) : [\"center\", \"center\"];\n        }\n\n        pos[0] = rhorizontal.test(pos[0]) ? pos[0] : \"center\";\n        pos[1] = rvertical.test(pos[1]) ? pos[1] : \"center\"; // calculate offsets\n\n        horizontalOffset = roffset.exec(pos[0]);\n        verticalOffset = roffset.exec(pos[1]);\n        offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0]; // reduce to just the positions without the offsets\n\n        options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];\n      }); // normalize collision option\n\n      if (collision.length === 1) {\n        collision[1] = collision[0];\n      }\n\n      if (options.at[0] === \"right\") {\n        basePosition.left += targetWidth;\n      } else if (options.at[0] === \"center\") {\n        basePosition.left += targetWidth / 2;\n      }\n\n      if (options.at[1] === \"bottom\") {\n        basePosition.top += targetHeight;\n      } else if (options.at[1] === \"center\") {\n        basePosition.top += targetHeight / 2;\n      }\n\n      atOffset = getOffsets(offsets.at, targetWidth, targetHeight);\n      basePosition.left += atOffset[0];\n      basePosition.top += atOffset[1];\n      return this.each(function () {\n        var collisionPosition,\n            using,\n            elem = $(this),\n            elemWidth = elem.outerWidth(),\n            elemHeight = elem.outerHeight(),\n            marginLeft = parseCss(this, \"marginLeft\"),\n            marginTop = parseCss(this, \"marginTop\"),\n            collisionWidth = elemWidth + marginLeft + parseCss(this, \"marginRight\") + scrollInfo.width,\n            collisionHeight = elemHeight + marginTop + parseCss(this, \"marginBottom\") + scrollInfo.height,\n            position = $.extend({}, basePosition),\n            myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());\n\n        if (options.my[0] === \"right\") {\n          position.left -= elemWidth;\n        } else if (options.my[0] === \"center\") {\n          position.left -= elemWidth / 2;\n        }\n\n        if (options.my[1] === \"bottom\") {\n          position.top -= elemHeight;\n        } else if (options.my[1] === \"center\") {\n          position.top -= elemHeight / 2;\n        }\n\n        position.left += myOffset[0];\n        position.top += myOffset[1]; // if the browser doesn't support fractions, then round for consistent results\n\n        if (!supportsOffsetFractions) {\n          position.left = round(position.left);\n          position.top = round(position.top);\n        }\n\n        collisionPosition = {\n          marginLeft: marginLeft,\n          marginTop: marginTop\n        };\n        $.each([\"left\", \"top\"], function (i, dir) {\n          if ($.ui.position[collision[i]]) {\n            $.ui.position[collision[i]][dir](position, {\n              targetWidth: targetWidth,\n              targetHeight: targetHeight,\n              elemWidth: elemWidth,\n              elemHeight: elemHeight,\n              collisionPosition: collisionPosition,\n              collisionWidth: collisionWidth,\n              collisionHeight: collisionHeight,\n              offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],\n              my: options.my,\n              at: options.at,\n              within: within,\n              elem: elem\n            });\n          }\n        });\n\n        if (options.using) {\n          // adds feedback as second argument to using callback, if present\n          using = function using(props) {\n            var left = targetOffset.left - position.left,\n                right = left + targetWidth - elemWidth,\n                top = targetOffset.top - position.top,\n                bottom = top + targetHeight - elemHeight,\n                feedback = {\n              target: {\n                element: target,\n                left: targetOffset.left,\n                top: targetOffset.top,\n                width: targetWidth,\n                height: targetHeight\n              },\n              element: {\n                element: elem,\n                left: position.left,\n                top: position.top,\n                width: elemWidth,\n                height: elemHeight\n              },\n              horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\n              vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\n            };\n\n            if (targetWidth < elemWidth && abs(left + right) < targetWidth) {\n              feedback.horizontal = \"center\";\n            }\n\n            if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {\n              feedback.vertical = \"middle\";\n            }\n\n            if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {\n              feedback.important = \"horizontal\";\n            } else {\n              feedback.important = \"vertical\";\n            }\n\n            options.using.call(this, props, feedback);\n          };\n        }\n\n        elem.offset($.extend(position, {\n          using: using\n        }));\n      });\n    };\n\n    $.ui.position = {\n      fit: {\n        left: function left(position, data) {\n          var within = data.within,\n              withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\n              outerWidth = within.width,\n              collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n              overLeft = withinOffset - collisionPosLeft,\n              overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\n              newOverRight; // element is wider than within\n\n          if (data.collisionWidth > outerWidth) {\n            // element is initially over the left side of within\n            if (overLeft > 0 && overRight <= 0) {\n              newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;\n              position.left += overLeft - newOverRight; // element is initially over right side of within\n            } else if (overRight > 0 && overLeft <= 0) {\n              position.left = withinOffset; // element is initially over both left and right sides of within\n            } else {\n              if (overLeft > overRight) {\n                position.left = withinOffset + outerWidth - data.collisionWidth;\n              } else {\n                position.left = withinOffset;\n              }\n            } // too far left -> align with left edge\n\n          } else if (overLeft > 0) {\n            position.left += overLeft; // too far right -> align with right edge\n          } else if (overRight > 0) {\n            position.left -= overRight; // adjust based on position and margin\n          } else {\n            position.left = max(position.left - collisionPosLeft, position.left);\n          }\n        },\n        top: function top(position, data) {\n          var within = data.within,\n              withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\n              outerHeight = data.within.height,\n              collisionPosTop = position.top - data.collisionPosition.marginTop,\n              overTop = withinOffset - collisionPosTop,\n              overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\n              newOverBottom; // element is taller than within\n\n          if (data.collisionHeight > outerHeight) {\n            // element is initially over the top of within\n            if (overTop > 0 && overBottom <= 0) {\n              newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;\n              position.top += overTop - newOverBottom; // element is initially over bottom of within\n            } else if (overBottom > 0 && overTop <= 0) {\n              position.top = withinOffset; // element is initially over both top and bottom of within\n            } else {\n              if (overTop > overBottom) {\n                position.top = withinOffset + outerHeight - data.collisionHeight;\n              } else {\n                position.top = withinOffset;\n              }\n            } // too far up -> align with top\n\n          } else if (overTop > 0) {\n            position.top += overTop; // too far down -> align with bottom edge\n          } else if (overBottom > 0) {\n            position.top -= overBottom; // adjust based on position and margin\n          } else {\n            position.top = max(position.top - collisionPosTop, position.top);\n          }\n        }\n      },\n      flip: {\n        left: function left(position, data) {\n          var within = data.within,\n              withinOffset = within.offset.left + within.scrollLeft,\n              outerWidth = within.width,\n              offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\n              collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n              overLeft = collisionPosLeft - offsetLeft,\n              overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\n              myOffset = data.my[0] === \"left\" ? -data.elemWidth : data.my[0] === \"right\" ? data.elemWidth : 0,\n              atOffset = data.at[0] === \"left\" ? data.targetWidth : data.at[0] === \"right\" ? -data.targetWidth : 0,\n              offset = -2 * data.offset[0],\n              newOverRight,\n              newOverLeft;\n\n          if (overLeft < 0) {\n            newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;\n\n            if (newOverRight < 0 || newOverRight < abs(overLeft)) {\n              position.left += myOffset + atOffset + offset;\n            }\n          } else if (overRight > 0) {\n            newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;\n\n            if (newOverLeft > 0 || abs(newOverLeft) < overRight) {\n              position.left += myOffset + atOffset + offset;\n            }\n          }\n        },\n        top: function top(position, data) {\n          var within = data.within,\n              withinOffset = within.offset.top + within.scrollTop,\n              outerHeight = within.height,\n              offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\n              collisionPosTop = position.top - data.collisionPosition.marginTop,\n              overTop = collisionPosTop - offsetTop,\n              overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\n              top = data.my[1] === \"top\",\n              myOffset = top ? -data.elemHeight : data.my[1] === \"bottom\" ? data.elemHeight : 0,\n              atOffset = data.at[1] === \"top\" ? data.targetHeight : data.at[1] === \"bottom\" ? -data.targetHeight : 0,\n              offset = -2 * data.offset[1],\n              newOverTop,\n              newOverBottom;\n\n          if (overTop < 0) {\n            newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;\n\n            if (newOverBottom < 0 || newOverBottom < abs(overTop)) {\n              position.top += myOffset + atOffset + offset;\n            }\n          } else if (overBottom > 0) {\n            newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;\n\n            if (newOverTop > 0 || abs(newOverTop) < overBottom) {\n              position.top += myOffset + atOffset + offset;\n            }\n          }\n        }\n      },\n      flipfit: {\n        left: function left() {\n          $.ui.position.flip.left.apply(this, arguments);\n          $.ui.position.fit.left.apply(this, arguments);\n        },\n        top: function top() {\n          $.ui.position.flip.top.apply(this, arguments);\n          $.ui.position.fit.top.apply(this, arguments);\n        }\n      }\n    }; // fraction support test\n\n    (function () {\n      var testElement,\n          testElementParent,\n          testElementStyle,\n          offsetLeft,\n          i,\n          body = document.getElementsByTagName(\"body\")[0],\n          div = document.createElement(\"div\"); //Create a \"fake body\" for testing based on method used in jQuery.support\n\n      testElement = document.createElement(body ? \"div\" : \"body\");\n      testElementStyle = {\n        visibility: \"hidden\",\n        width: 0,\n        height: 0,\n        border: 0,\n        margin: 0,\n        background: \"none\"\n      };\n\n      if (body) {\n        $.extend(testElementStyle, {\n          position: \"absolute\",\n          left: \"-1000px\",\n          top: \"-1000px\"\n        });\n      }\n\n      for (i in testElementStyle) {\n        testElement.style[i] = testElementStyle[i];\n      }\n\n      testElement.appendChild(div);\n      testElementParent = body || document.documentElement;\n      testElementParent.insertBefore(testElement, testElementParent.firstChild);\n      div.style.cssText = \"position: absolute; left: 10.7432222px;\";\n      offsetLeft = $(div).offset().left;\n      supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;\n      testElement.innerHTML = \"\";\n      testElementParent.removeChild(testElement);\n    })();\n  })();\n\n  var position = $.ui.position;\n  /*!\n   * jQuery UI Accordion 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/accordion/\n   */\n\n  var accordion = $.widget(\"ui.accordion\", {\n    version: \"1.11.4\",\n    options: {\n      active: 0,\n      animate: {},\n      collapsible: false,\n      event: \"click\",\n      header: \"> li > :first-child,> :not(li):even\",\n      heightStyle: \"auto\",\n      icons: {\n        activeHeader: \"ui-icon-triangle-1-s\",\n        header: \"ui-icon-triangle-1-e\"\n      },\n      // callbacks\n      activate: null,\n      beforeActivate: null\n    },\n    hideProps: {\n      borderTopWidth: \"hide\",\n      borderBottomWidth: \"hide\",\n      paddingTop: \"hide\",\n      paddingBottom: \"hide\",\n      height: \"hide\"\n    },\n    showProps: {\n      borderTopWidth: \"show\",\n      borderBottomWidth: \"show\",\n      paddingTop: \"show\",\n      paddingBottom: \"show\",\n      height: \"show\"\n    },\n    _create: function _create() {\n      var options = this.options;\n      this.prevShow = this.prevHide = $();\n      this.element.addClass(\"ui-accordion ui-widget ui-helper-reset\") // ARIA\n      .attr(\"role\", \"tablist\"); // don't allow collapsible: false and active: false / null\n\n      if (!options.collapsible && (options.active === false || options.active == null)) {\n        options.active = 0;\n      }\n\n      this._processPanels(); // handle negative values\n\n\n      if (options.active < 0) {\n        options.active += this.headers.length;\n      }\n\n      this._refresh();\n    },\n    _getCreateEventData: function _getCreateEventData() {\n      return {\n        header: this.active,\n        panel: !this.active.length ? $() : this.active.next()\n      };\n    },\n    _createIcons: function _createIcons() {\n      var icons = this.options.icons;\n\n      if (icons) {\n        $(\"<span>\").addClass(\"ui-accordion-header-icon ui-icon \" + icons.header).prependTo(this.headers);\n        this.active.children(\".ui-accordion-header-icon\").removeClass(icons.header).addClass(icons.activeHeader);\n        this.headers.addClass(\"ui-accordion-icons\");\n      }\n    },\n    _destroyIcons: function _destroyIcons() {\n      this.headers.removeClass(\"ui-accordion-icons\").children(\".ui-accordion-header-icon\").remove();\n    },\n    _destroy: function _destroy() {\n      var contents; // clean up main element\n\n      this.element.removeClass(\"ui-accordion ui-widget ui-helper-reset\").removeAttr(\"role\"); // clean up headers\n\n      this.headers.removeClass(\"ui-accordion-header ui-accordion-header-active ui-state-default \" + \"ui-corner-all ui-state-active ui-state-disabled ui-corner-top\").removeAttr(\"role\").removeAttr(\"aria-expanded\").removeAttr(\"aria-selected\").removeAttr(\"aria-controls\").removeAttr(\"tabIndex\").removeUniqueId();\n\n      this._destroyIcons(); // clean up content panels\n\n\n      contents = this.headers.next().removeClass(\"ui-helper-reset ui-widget-content ui-corner-bottom \" + \"ui-accordion-content ui-accordion-content-active ui-state-disabled\").css(\"display\", \"\").removeAttr(\"role\").removeAttr(\"aria-hidden\").removeAttr(\"aria-labelledby\").removeUniqueId();\n\n      if (this.options.heightStyle !== \"content\") {\n        contents.css(\"height\", \"\");\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"active\") {\n        // _activate() will handle invalid values and update this.options\n        this._activate(value);\n\n        return;\n      }\n\n      if (key === \"event\") {\n        if (this.options.event) {\n          this._off(this.headers, this.options.event);\n        }\n\n        this._setupEvents(value);\n      }\n\n      this._super(key, value); // setting collapsible: false while collapsed; open first panel\n\n\n      if (key === \"collapsible\" && !value && this.options.active === false) {\n        this._activate(0);\n      }\n\n      if (key === \"icons\") {\n        this._destroyIcons();\n\n        if (value) {\n          this._createIcons();\n        }\n      } // #5332 - opacity doesn't cascade to positioned elements in IE\n      // so we need to add the disabled class to the headers and panels\n\n\n      if (key === \"disabled\") {\n        this.element.toggleClass(\"ui-state-disabled\", !!value).attr(\"aria-disabled\", value);\n        this.headers.add(this.headers.next()).toggleClass(\"ui-state-disabled\", !!value);\n      }\n    },\n    _keydown: function _keydown(event) {\n      if (event.altKey || event.ctrlKey) {\n        return;\n      }\n\n      var keyCode = $.ui.keyCode,\n          length = this.headers.length,\n          currentIndex = this.headers.index(event.target),\n          toFocus = false;\n\n      switch (event.keyCode) {\n        case keyCode.RIGHT:\n        case keyCode.DOWN:\n          toFocus = this.headers[(currentIndex + 1) % length];\n          break;\n\n        case keyCode.LEFT:\n        case keyCode.UP:\n          toFocus = this.headers[(currentIndex - 1 + length) % length];\n          break;\n\n        case keyCode.SPACE:\n        case keyCode.ENTER:\n          this._eventHandler(event);\n\n          break;\n\n        case keyCode.HOME:\n          toFocus = this.headers[0];\n          break;\n\n        case keyCode.END:\n          toFocus = this.headers[length - 1];\n          break;\n      }\n\n      if (toFocus) {\n        $(event.target).attr(\"tabIndex\", -1);\n        $(toFocus).attr(\"tabIndex\", 0);\n        toFocus.focus();\n        event.preventDefault();\n      }\n    },\n    _panelKeyDown: function _panelKeyDown(event) {\n      if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {\n        $(event.currentTarget).prev().focus();\n      }\n    },\n    refresh: function refresh() {\n      var options = this.options;\n\n      this._processPanels(); // was collapsed or no panel\n\n\n      if (options.active === false && options.collapsible === true || !this.headers.length) {\n        options.active = false;\n        this.active = $(); // active false only when collapsible is true\n      } else if (options.active === false) {\n        this._activate(0); // was active, but active panel is gone\n\n      } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {\n        // all remaining panel are disabled\n        if (this.headers.length === this.headers.find(\".ui-state-disabled\").length) {\n          options.active = false;\n          this.active = $(); // activate previous panel\n        } else {\n          this._activate(Math.max(0, options.active - 1));\n        } // was active, active panel still exists\n\n      } else {\n        // make sure active index is correct\n        options.active = this.headers.index(this.active);\n      }\n\n      this._destroyIcons();\n\n      this._refresh();\n    },\n    _processPanels: function _processPanels() {\n      var prevHeaders = this.headers,\n          prevPanels = this.panels;\n      this.headers = this.element.find(this.options.header).addClass(\"ui-accordion-header ui-state-default ui-corner-all\");\n      this.panels = this.headers.next().addClass(\"ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\").filter(\":not(.ui-accordion-content-active)\").hide(); // Avoid memory leaks (#10056)\n\n      if (prevPanels) {\n        this._off(prevHeaders.not(this.headers));\n\n        this._off(prevPanels.not(this.panels));\n      }\n    },\n    _refresh: function _refresh() {\n      var maxHeight,\n          options = this.options,\n          heightStyle = options.heightStyle,\n          parent = this.element.parent();\n      this.active = this._findActive(options.active).addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\").removeClass(\"ui-corner-all\");\n      this.active.next().addClass(\"ui-accordion-content-active\").show();\n      this.headers.attr(\"role\", \"tab\").each(function () {\n        var header = $(this),\n            headerId = header.uniqueId().attr(\"id\"),\n            panel = header.next(),\n            panelId = panel.uniqueId().attr(\"id\");\n        header.attr(\"aria-controls\", panelId);\n        panel.attr(\"aria-labelledby\", headerId);\n      }).next().attr(\"role\", \"tabpanel\");\n      this.headers.not(this.active).attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\",\n        tabIndex: -1\n      }).next().attr({\n        \"aria-hidden\": \"true\"\n      }).hide(); // make sure at least one header is in the tab order\n\n      if (!this.active.length) {\n        this.headers.eq(0).attr(\"tabIndex\", 0);\n      } else {\n        this.active.attr({\n          \"aria-selected\": \"true\",\n          \"aria-expanded\": \"true\",\n          tabIndex: 0\n        }).next().attr({\n          \"aria-hidden\": \"false\"\n        });\n      }\n\n      this._createIcons();\n\n      this._setupEvents(options.event);\n\n      if (heightStyle === \"fill\") {\n        maxHeight = parent.height();\n        this.element.siblings(\":visible\").each(function () {\n          var elem = $(this),\n              position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"fixed\") {\n            return;\n          }\n\n          maxHeight -= elem.outerHeight(true);\n        });\n        this.headers.each(function () {\n          maxHeight -= $(this).outerHeight(true);\n        });\n        this.headers.next().each(function () {\n          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n        }).css(\"overflow\", \"auto\");\n      } else if (heightStyle === \"auto\") {\n        maxHeight = 0;\n        this.headers.next().each(function () {\n          maxHeight = Math.max(maxHeight, $(this).css(\"height\", \"\").height());\n        }).height(maxHeight);\n      }\n    },\n    _activate: function _activate(index) {\n      var active = this._findActive(index)[0]; // trying to activate the already active panel\n\n\n      if (active === this.active[0]) {\n        return;\n      } // trying to collapse, simulate a click on the currently active header\n\n\n      active = active || this.active[0];\n\n      this._eventHandler({\n        target: active,\n        currentTarget: active,\n        preventDefault: $.noop\n      });\n    },\n    _findActive: function _findActive(selector) {\n      return typeof selector === \"number\" ? this.headers.eq(selector) : $();\n    },\n    _setupEvents: function _setupEvents(event) {\n      var events = {\n        keydown: \"_keydown\"\n      };\n\n      if (event) {\n        $.each(event.split(\" \"), function (index, eventName) {\n          events[eventName] = \"_eventHandler\";\n        });\n      }\n\n      this._off(this.headers.add(this.headers.next()));\n\n      this._on(this.headers, events);\n\n      this._on(this.headers.next(), {\n        keydown: \"_panelKeyDown\"\n      });\n\n      this._hoverable(this.headers);\n\n      this._focusable(this.headers);\n    },\n    _eventHandler: function _eventHandler(event) {\n      var options = this.options,\n          active = this.active,\n          clicked = $(event.currentTarget),\n          clickedIsActive = clicked[0] === active[0],\n          collapsing = clickedIsActive && options.collapsible,\n          toShow = collapsing ? $() : clicked.next(),\n          toHide = active.next(),\n          eventData = {\n        oldHeader: active,\n        oldPanel: toHide,\n        newHeader: collapsing ? $() : clicked,\n        newPanel: toShow\n      };\n      event.preventDefault();\n\n      if ( // click on active header, but not collapsible\n      clickedIsActive && !options.collapsible || // allow canceling activation\n      this._trigger(\"beforeActivate\", event, eventData) === false) {\n        return;\n      }\n\n      options.active = collapsing ? false : this.headers.index(clicked); // when the call to ._toggle() comes after the class changes\n      // it causes a very odd bug in IE 8 (see #6720)\n\n      this.active = clickedIsActive ? $() : clicked;\n\n      this._toggle(eventData); // switch classes\n      // corner classes on the previously active header stay after the animation\n\n\n      active.removeClass(\"ui-accordion-header-active ui-state-active\");\n\n      if (options.icons) {\n        active.children(\".ui-accordion-header-icon\").removeClass(options.icons.activeHeader).addClass(options.icons.header);\n      }\n\n      if (!clickedIsActive) {\n        clicked.removeClass(\"ui-corner-all\").addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\");\n\n        if (options.icons) {\n          clicked.children(\".ui-accordion-header-icon\").removeClass(options.icons.header).addClass(options.icons.activeHeader);\n        }\n\n        clicked.next().addClass(\"ui-accordion-content-active\");\n      }\n    },\n    _toggle: function _toggle(data) {\n      var toShow = data.newPanel,\n          toHide = this.prevShow.length ? this.prevShow : data.oldPanel; // handle activating a panel during the animation for another activation\n\n      this.prevShow.add(this.prevHide).stop(true, true);\n      this.prevShow = toShow;\n      this.prevHide = toHide;\n\n      if (this.options.animate) {\n        this._animate(toShow, toHide, data);\n      } else {\n        toHide.hide();\n        toShow.show();\n\n        this._toggleComplete(data);\n      }\n\n      toHide.attr({\n        \"aria-hidden\": \"true\"\n      });\n      toHide.prev().attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\"\n      }); // if we're switching panels, remove the old header from the tab order\n      // if we're opening from collapsed state, remove the previous header from the tab order\n      // if we're collapsing, then keep the collapsing header in the tab order\n\n      if (toShow.length && toHide.length) {\n        toHide.prev().attr({\n          \"tabIndex\": -1,\n          \"aria-expanded\": \"false\"\n        });\n      } else if (toShow.length) {\n        this.headers.filter(function () {\n          return parseInt($(this).attr(\"tabIndex\"), 10) === 0;\n        }).attr(\"tabIndex\", -1);\n      }\n\n      toShow.attr(\"aria-hidden\", \"false\").prev().attr({\n        \"aria-selected\": \"true\",\n        \"aria-expanded\": \"true\",\n        tabIndex: 0\n      });\n    },\n    _animate: function _animate(toShow, toHide, data) {\n      var total,\n          easing,\n          duration,\n          that = this,\n          adjust = 0,\n          boxSizing = toShow.css(\"box-sizing\"),\n          down = toShow.length && (!toHide.length || toShow.index() < toHide.index()),\n          animate = this.options.animate || {},\n          options = down && animate.down || animate,\n          complete = function complete() {\n        that._toggleComplete(data);\n      };\n\n      if (typeof options === \"number\") {\n        duration = options;\n      }\n\n      if (typeof options === \"string\") {\n        easing = options;\n      } // fall back from options to animation in case of partial down settings\n\n\n      easing = easing || options.easing || animate.easing;\n      duration = duration || options.duration || animate.duration;\n\n      if (!toHide.length) {\n        return toShow.animate(this.showProps, duration, easing, complete);\n      }\n\n      if (!toShow.length) {\n        return toHide.animate(this.hideProps, duration, easing, complete);\n      }\n\n      total = toShow.show().outerHeight();\n      toHide.animate(this.hideProps, {\n        duration: duration,\n        easing: easing,\n        step: function step(now, fx) {\n          fx.now = Math.round(now);\n        }\n      });\n      toShow.hide().animate(this.showProps, {\n        duration: duration,\n        easing: easing,\n        complete: complete,\n        step: function step(now, fx) {\n          fx.now = Math.round(now);\n\n          if (fx.prop !== \"height\") {\n            if (boxSizing === \"content-box\") {\n              adjust += fx.now;\n            }\n          } else if (that.options.heightStyle !== \"content\") {\n            fx.now = Math.round(total - toHide.outerHeight() - adjust);\n            adjust = 0;\n          }\n        }\n      });\n    },\n    _toggleComplete: function _toggleComplete(data) {\n      var toHide = data.oldPanel;\n      toHide.removeClass(\"ui-accordion-content-active\").prev().removeClass(\"ui-corner-top\").addClass(\"ui-corner-all\"); // Work around for rendering bug in IE (#5421)\n\n      if (toHide.length) {\n        toHide.parent()[0].className = toHide.parent()[0].className;\n      }\n\n      this._trigger(\"activate\", null, data);\n    }\n  });\n  /*!\n   * jQuery UI Menu 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/menu/\n   */\n\n  var menu = $.widget(\"ui.menu\", {\n    version: \"1.11.4\",\n    defaultElement: \"<ul>\",\n    delay: 300,\n    options: {\n      icons: {\n        submenu: \"ui-icon-carat-1-e\"\n      },\n      items: \"> *\",\n      menus: \"ul\",\n      position: {\n        my: \"left-1 top\",\n        at: \"right top\"\n      },\n      role: \"menu\",\n      // callbacks\n      blur: null,\n      focus: null,\n      select: null\n    },\n    _create: function _create() {\n      this.activeMenu = this.element; // Flag used to prevent firing of the click handler\n      // as the event bubbles up through nested menus\n\n      this.mouseHandled = false;\n      this.element.uniqueId().addClass(\"ui-menu ui-widget ui-widget-content\").toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length).attr({\n        role: this.options.role,\n        tabIndex: 0\n      });\n\n      if (this.options.disabled) {\n        this.element.addClass(\"ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n      }\n\n      this._on({\n        // Prevent focus from sticking to links inside menu after clicking\n        // them (focus should always stay on UL during navigation).\n        \"mousedown .ui-menu-item\": function mousedownUiMenuItem(event) {\n          event.preventDefault();\n        },\n        \"click .ui-menu-item\": function clickUiMenuItem(event) {\n          var target = $(event.target);\n\n          if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\n            this.select(event); // Only set the mouseHandled flag if the event will bubble, see #9469.\n\n            if (!event.isPropagationStopped()) {\n              this.mouseHandled = true;\n            } // Open submenu on click\n\n\n            if (target.has(\".ui-menu\").length) {\n              this.expand(event);\n            } else if (!this.element.is(\":focus\") && $(this.document[0].activeElement).closest(\".ui-menu\").length) {\n              // Redirect focus to the menu\n              this.element.trigger(\"focus\", [true]); // If the active item is on the top level, let it stay active.\n              // Otherwise, blur the active item since it is no longer visible.\n\n              if (this.active && this.active.parents(\".ui-menu\").length === 1) {\n                clearTimeout(this.timer);\n              }\n            }\n          }\n        },\n        \"mouseenter .ui-menu-item\": function mouseenterUiMenuItem(event) {\n          // Ignore mouse events while typeahead is active, see #10458.\n          // Prevents focusing the wrong item when typeahead causes a scroll while the mouse\n          // is over an item in the menu\n          if (this.previousFilter) {\n            return;\n          }\n\n          var target = $(event.currentTarget); // Remove ui-state-active class from siblings of the newly focused menu item\n          // to avoid a jump caused by adjacent elements both having a class with a border\n\n          target.siblings(\".ui-state-active\").removeClass(\"ui-state-active\");\n          this.focus(event, target);\n        },\n        mouseleave: \"collapseAll\",\n        \"mouseleave .ui-menu\": \"collapseAll\",\n        focus: function focus(event, keepActiveItem) {\n          // If there's already an active item, keep it active\n          // If not, activate the first item\n          var item = this.active || this.element.find(this.options.items).eq(0);\n\n          if (!keepActiveItem) {\n            this.focus(event, item);\n          }\n        },\n        blur: function blur(event) {\n          this._delay(function () {\n            if (!$.contains(this.element[0], this.document[0].activeElement)) {\n              this.collapseAll(event);\n            }\n          });\n        },\n        keydown: \"_keydown\"\n      });\n\n      this.refresh(); // Clicks outside of a menu collapse any open menus\n\n      this._on(this.document, {\n        click: function click(event) {\n          if (this._closeOnDocumentClick(event)) {\n            this.collapseAll(event);\n          } // Reset the mouseHandled flag\n\n\n          this.mouseHandled = false;\n        }\n      });\n    },\n    _destroy: function _destroy() {\n      // Destroy (sub)menus\n      this.element.removeAttr(\"aria-activedescendant\").find(\".ui-menu\").addBack().removeClass(\"ui-menu ui-widget ui-widget-content ui-menu-icons ui-front\").removeAttr(\"role\").removeAttr(\"tabIndex\").removeAttr(\"aria-labelledby\").removeAttr(\"aria-expanded\").removeAttr(\"aria-hidden\").removeAttr(\"aria-disabled\").removeUniqueId().show(); // Destroy menu items\n\n      this.element.find(\".ui-menu-item\").removeClass(\"ui-menu-item\").removeAttr(\"role\").removeAttr(\"aria-disabled\").removeUniqueId().removeClass(\"ui-state-hover\").removeAttr(\"tabIndex\").removeAttr(\"role\").removeAttr(\"aria-haspopup\").children().each(function () {\n        var elem = $(this);\n\n        if (elem.data(\"ui-menu-submenu-carat\")) {\n          elem.remove();\n        }\n      }); // Destroy menu dividers\n\n      this.element.find(\".ui-menu-divider\").removeClass(\"ui-menu-divider ui-widget-content\");\n    },\n    _keydown: function _keydown(event) {\n      var match,\n          prev,\n          character,\n          skip,\n          preventDefault = true;\n\n      switch (event.keyCode) {\n        case $.ui.keyCode.PAGE_UP:\n          this.previousPage(event);\n          break;\n\n        case $.ui.keyCode.PAGE_DOWN:\n          this.nextPage(event);\n          break;\n\n        case $.ui.keyCode.HOME:\n          this._move(\"first\", \"first\", event);\n\n          break;\n\n        case $.ui.keyCode.END:\n          this._move(\"last\", \"last\", event);\n\n          break;\n\n        case $.ui.keyCode.UP:\n          this.previous(event);\n          break;\n\n        case $.ui.keyCode.DOWN:\n          this.next(event);\n          break;\n\n        case $.ui.keyCode.LEFT:\n          this.collapse(event);\n          break;\n\n        case $.ui.keyCode.RIGHT:\n          if (this.active && !this.active.is(\".ui-state-disabled\")) {\n            this.expand(event);\n          }\n\n          break;\n\n        case $.ui.keyCode.ENTER:\n        case $.ui.keyCode.SPACE:\n          this._activate(event);\n\n          break;\n\n        case $.ui.keyCode.ESCAPE:\n          this.collapse(event);\n          break;\n\n        default:\n          preventDefault = false;\n          prev = this.previousFilter || \"\";\n          character = String.fromCharCode(event.keyCode);\n          skip = false;\n          clearTimeout(this.filterTimer);\n\n          if (character === prev) {\n            skip = true;\n          } else {\n            character = prev + character;\n          }\n\n          match = this._filterMenuItems(character);\n          match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(\".ui-menu-item\") : match; // If no matches on the current filter, reset to the last character pressed\n          // to move down the menu to the first item that starts with that character\n\n          if (!match.length) {\n            character = String.fromCharCode(event.keyCode);\n            match = this._filterMenuItems(character);\n          }\n\n          if (match.length) {\n            this.focus(event, match);\n            this.previousFilter = character;\n            this.filterTimer = this._delay(function () {\n              delete this.previousFilter;\n            }, 1000);\n          } else {\n            delete this.previousFilter;\n          }\n\n      }\n\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    },\n    _activate: function _activate(event) {\n      if (!this.active.is(\".ui-state-disabled\")) {\n        if (this.active.is(\"[aria-haspopup='true']\")) {\n          this.expand(event);\n        } else {\n          this.select(event);\n        }\n      }\n    },\n    refresh: function refresh() {\n      var menus,\n          items,\n          that = this,\n          icon = this.options.icons.submenu,\n          submenus = this.element.find(this.options.menus);\n      this.element.toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length); // Initialize nested menus\n\n      submenus.filter(\":not(.ui-menu)\").addClass(\"ui-menu ui-widget ui-widget-content ui-front\").hide().attr({\n        role: this.options.role,\n        \"aria-hidden\": \"true\",\n        \"aria-expanded\": \"false\"\n      }).each(function () {\n        var menu = $(this),\n            item = menu.parent(),\n            submenuCarat = $(\"<span>\").addClass(\"ui-menu-icon ui-icon \" + icon).data(\"ui-menu-submenu-carat\", true);\n        item.attr(\"aria-haspopup\", \"true\").prepend(submenuCarat);\n        menu.attr(\"aria-labelledby\", item.attr(\"id\"));\n      });\n      menus = submenus.add(this.element);\n      items = menus.find(this.options.items); // Initialize menu-items containing spaces and/or dashes only as dividers\n\n      items.not(\".ui-menu-item\").each(function () {\n        var item = $(this);\n\n        if (that._isDivider(item)) {\n          item.addClass(\"ui-widget-content ui-menu-divider\");\n        }\n      }); // Don't refresh list items that are already adapted\n\n      items.not(\".ui-menu-item, .ui-menu-divider\").addClass(\"ui-menu-item\").uniqueId().attr({\n        tabIndex: -1,\n        role: this._itemRole()\n      }); // Add aria-disabled attribute to any disabled menu item\n\n      items.filter(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\"); // If the active item has been removed, blur the menu\n\n      if (this.active && !$.contains(this.element[0], this.active[0])) {\n        this.blur();\n      }\n    },\n    _itemRole: function _itemRole() {\n      return {\n        menu: \"menuitem\",\n        listbox: \"option\"\n      }[this.options.role];\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icons\") {\n        this.element.find(\".ui-menu-icon\").removeClass(this.options.icons.submenu).addClass(value.submenu);\n      }\n\n      if (key === \"disabled\") {\n        this.element.toggleClass(\"ui-state-disabled\", !!value).attr(\"aria-disabled\", value);\n      }\n\n      this._super(key, value);\n    },\n    focus: function focus(event, item) {\n      var nested, focused;\n      this.blur(event, event && event.type === \"focus\");\n\n      this._scrollIntoView(item);\n\n      this.active = item.first();\n      focused = this.active.addClass(\"ui-state-focus\").removeClass(\"ui-state-active\"); // Only update aria-activedescendant if there's a role\n      // otherwise we assume focus is managed elsewhere\n\n      if (this.options.role) {\n        this.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\n      } // Highlight active parent menu item, if any\n\n\n      this.active.parent().closest(\".ui-menu-item\").addClass(\"ui-state-active\");\n\n      if (event && event.type === \"keydown\") {\n        this._close();\n      } else {\n        this.timer = this._delay(function () {\n          this._close();\n        }, this.delay);\n      }\n\n      nested = item.children(\".ui-menu\");\n\n      if (nested.length && event && /^mouse/.test(event.type)) {\n        this._startOpening(nested);\n      }\n\n      this.activeMenu = item.parent();\n\n      this._trigger(\"focus\", event, {\n        item: item\n      });\n    },\n    _scrollIntoView: function _scrollIntoView(item) {\n      var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n\n      if (this._hasScroll()) {\n        borderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\n        paddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\n        offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n        scroll = this.activeMenu.scrollTop();\n        elementHeight = this.activeMenu.height();\n        itemHeight = item.outerHeight();\n\n        if (offset < 0) {\n          this.activeMenu.scrollTop(scroll + offset);\n        } else if (offset + itemHeight > elementHeight) {\n          this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\n        }\n      }\n    },\n    blur: function blur(event, fromFocus) {\n      if (!fromFocus) {\n        clearTimeout(this.timer);\n      }\n\n      if (!this.active) {\n        return;\n      }\n\n      this.active.removeClass(\"ui-state-focus\");\n      this.active = null;\n\n      this._trigger(\"blur\", event, {\n        item: this.active\n      });\n    },\n    _startOpening: function _startOpening(submenu) {\n      clearTimeout(this.timer); // Don't open if already open fixes a Firefox bug that caused a .5 pixel\n      // shift in the submenu position when mousing over the carat icon\n\n      if (submenu.attr(\"aria-hidden\") !== \"true\") {\n        return;\n      }\n\n      this.timer = this._delay(function () {\n        this._close();\n\n        this._open(submenu);\n      }, this.delay);\n    },\n    _open: function _open(submenu) {\n      var position = $.extend({\n        of: this.active\n      }, this.options.position);\n      clearTimeout(this.timer);\n      this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\")).hide().attr(\"aria-hidden\", \"true\");\n      submenu.show().removeAttr(\"aria-hidden\").attr(\"aria-expanded\", \"true\").position(position);\n    },\n    collapseAll: function collapseAll(event, all) {\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        // If we were passed an event, look for the submenu that contains the event\n        var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(\".ui-menu\")); // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\n\n        if (!currentMenu.length) {\n          currentMenu = this.element;\n        }\n\n        this._close(currentMenu);\n\n        this.blur(event);\n        this.activeMenu = currentMenu;\n      }, this.delay);\n    },\n    // With no arguments, closes the currently active menu - if nothing is active\n    // it closes all menus.  If passed an argument, it will search for menus BELOW\n    _close: function _close(startMenu) {\n      if (!startMenu) {\n        startMenu = this.active ? this.active.parent() : this.element;\n      }\n\n      startMenu.find(\".ui-menu\").hide().attr(\"aria-hidden\", \"true\").attr(\"aria-expanded\", \"false\").end().find(\".ui-state-active\").not(\".ui-state-focus\").removeClass(\"ui-state-active\");\n    },\n    _closeOnDocumentClick: function _closeOnDocumentClick(event) {\n      return !$(event.target).closest(\".ui-menu\").length;\n    },\n    _isDivider: function _isDivider(item) {\n      // Match hyphen, em dash, en dash\n      return !/[^\\-\\u2014\\u2013\\s]/.test(item.text());\n    },\n    collapse: function collapse(event) {\n      var newItem = this.active && this.active.parent().closest(\".ui-menu-item\", this.element);\n\n      if (newItem && newItem.length) {\n        this._close();\n\n        this.focus(event, newItem);\n      }\n    },\n    expand: function expand(event) {\n      var newItem = this.active && this.active.children(\".ui-menu \").find(this.options.items).first();\n\n      if (newItem && newItem.length) {\n        this._open(newItem.parent()); // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n\n\n        this._delay(function () {\n          this.focus(event, newItem);\n        });\n      }\n    },\n    next: function next(event) {\n      this._move(\"next\", \"first\", event);\n    },\n    previous: function previous(event) {\n      this._move(\"prev\", \"last\", event);\n    },\n    isFirstItem: function isFirstItem() {\n      return this.active && !this.active.prevAll(\".ui-menu-item\").length;\n    },\n    isLastItem: function isLastItem() {\n      return this.active && !this.active.nextAll(\".ui-menu-item\").length;\n    },\n    _move: function _move(direction, filter, event) {\n      var next;\n\n      if (this.active) {\n        if (direction === \"first\" || direction === \"last\") {\n          next = this.active[direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\").eq(-1);\n        } else {\n          next = this.active[direction + \"All\"](\".ui-menu-item\").eq(0);\n        }\n      }\n\n      if (!next || !next.length || !this.active) {\n        next = this.activeMenu.find(this.options.items)[filter]();\n      }\n\n      this.focus(event, next);\n    },\n    nextPage: function nextPage(event) {\n      var item, base, height;\n\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n\n      if (this.isLastItem()) {\n        return;\n      }\n\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.height();\n        this.active.nextAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base - height < 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? \"first\" : \"last\"]());\n      }\n    },\n    previousPage: function previousPage(event) {\n      var item, base, height;\n\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n\n      if (this.isFirstItem()) {\n        return;\n      }\n\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.height();\n        this.active.prevAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base + height > 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this.activeMenu.find(this.options.items).first());\n      }\n    },\n    _hasScroll: function _hasScroll() {\n      return this.element.outerHeight() < this.element.prop(\"scrollHeight\");\n    },\n    select: function select(event) {\n      // TODO: It should never be possible to not have an active item at this\n      // point, but the tests don't trigger mouseenter before click.\n      this.active = this.active || $(event.target).closest(\".ui-menu-item\");\n      var ui = {\n        item: this.active\n      };\n\n      if (!this.active.has(\".ui-menu\").length) {\n        this.collapseAll(event, true);\n      }\n\n      this._trigger(\"select\", event, ui);\n    },\n    _filterMenuItems: function _filterMenuItems(character) {\n      var escapedCharacter = character.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\"),\n          regex = new RegExp(\"^\" + escapedCharacter, \"i\");\n      return this.activeMenu.find(this.options.items) // Only match on items, not dividers or other content (#10571)\n      .filter(\".ui-menu-item\").filter(function () {\n        return regex.test($.trim($(this).text()));\n      });\n    }\n  });\n  /*!\n   * jQuery UI Autocomplete 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/autocomplete/\n   */\n\n  $.widget(\"ui.autocomplete\", {\n    version: \"1.11.4\",\n    defaultElement: \"<input>\",\n    options: {\n      appendTo: null,\n      autoFocus: false,\n      delay: 300,\n      minLength: 1,\n      position: {\n        my: \"left top\",\n        at: \"left bottom\",\n        collision: \"none\"\n      },\n      source: null,\n      // callbacks\n      change: null,\n      close: null,\n      focus: null,\n      open: null,\n      response: null,\n      search: null,\n      select: null\n    },\n    requestIndex: 0,\n    pending: 0,\n    _create: function _create() {\n      // Some browsers only repeat keydown events, not keypress events,\n      // so we use the suppressKeyPress flag to determine if we've already\n      // handled the keydown event. #7269\n      // Unfortunately the code for & in keypress is the same as the up arrow,\n      // so we use the suppressKeyPressRepeat flag to avoid handling keypress\n      // events when we know the keydown event was used to modify the\n      // search term. #7799\n      var suppressKeyPress,\n          suppressKeyPressRepeat,\n          suppressInput,\n          nodeName = this.element[0].nodeName.toLowerCase(),\n          isTextarea = nodeName === \"textarea\",\n          isInput = nodeName === \"input\";\n      this.isMultiLine = // Textareas are always multi-line\n      isTextarea ? true : // Inputs are always single-line, even if inside a contentEditable element\n      // IE also treats inputs as contentEditable\n      isInput ? false : // All other element types are determined by whether or not they're contentEditable\n      this.element.prop(\"isContentEditable\");\n      this.valueMethod = this.element[isTextarea || isInput ? \"val\" : \"text\"];\n      this.isNewMenu = true;\n      this.element.addClass(\"ui-autocomplete-input\").attr(\"autocomplete\", \"off\");\n\n      this._on(this.element, {\n        keydown: function keydown(event) {\n          if (this.element.prop(\"readOnly\")) {\n            suppressKeyPress = true;\n            suppressInput = true;\n            suppressKeyPressRepeat = true;\n            return;\n          }\n\n          suppressKeyPress = false;\n          suppressInput = false;\n          suppressKeyPressRepeat = false;\n          var keyCode = $.ui.keyCode;\n\n          switch (event.keyCode) {\n            case keyCode.PAGE_UP:\n              suppressKeyPress = true;\n\n              this._move(\"previousPage\", event);\n\n              break;\n\n            case keyCode.PAGE_DOWN:\n              suppressKeyPress = true;\n\n              this._move(\"nextPage\", event);\n\n              break;\n\n            case keyCode.UP:\n              suppressKeyPress = true;\n\n              this._keyEvent(\"previous\", event);\n\n              break;\n\n            case keyCode.DOWN:\n              suppressKeyPress = true;\n\n              this._keyEvent(\"next\", event);\n\n              break;\n\n            case keyCode.ENTER:\n              // when menu is open and has focus\n              if (this.menu.active) {\n                // #6055 - Opera still allows the keypress to occur\n                // which causes forms to submit\n                suppressKeyPress = true;\n                event.preventDefault();\n                this.menu.select(event);\n              }\n\n              break;\n\n            case keyCode.TAB:\n              if (this.menu.active) {\n                this.menu.select(event);\n              }\n\n              break;\n\n            case keyCode.ESCAPE:\n              if (this.menu.element.is(\":visible\")) {\n                if (!this.isMultiLine) {\n                  this._value(this.term);\n                }\n\n                this.close(event); // Different browsers have different default behavior for escape\n                // Single press can mean undo or clear\n                // Double press in IE means clear the whole form\n\n                event.preventDefault();\n              }\n\n              break;\n\n            default:\n              suppressKeyPressRepeat = true; // search timeout should be triggered before the input value is changed\n\n              this._searchTimeout(event);\n\n              break;\n          }\n        },\n        keypress: function keypress(event) {\n          if (suppressKeyPress) {\n            suppressKeyPress = false;\n\n            if (!this.isMultiLine || this.menu.element.is(\":visible\")) {\n              event.preventDefault();\n            }\n\n            return;\n          }\n\n          if (suppressKeyPressRepeat) {\n            return;\n          } // replicate some key handlers to allow them to repeat in Firefox and Opera\n\n\n          var keyCode = $.ui.keyCode;\n\n          switch (event.keyCode) {\n            case keyCode.PAGE_UP:\n              this._move(\"previousPage\", event);\n\n              break;\n\n            case keyCode.PAGE_DOWN:\n              this._move(\"nextPage\", event);\n\n              break;\n\n            case keyCode.UP:\n              this._keyEvent(\"previous\", event);\n\n              break;\n\n            case keyCode.DOWN:\n              this._keyEvent(\"next\", event);\n\n              break;\n          }\n        },\n        input: function input(event) {\n          if (suppressInput) {\n            suppressInput = false;\n            event.preventDefault();\n            return;\n          }\n\n          this._searchTimeout(event);\n        },\n        focus: function focus() {\n          this.selectedItem = null;\n          this.previous = this._value();\n        },\n        blur: function blur(event) {\n          if (this.cancelBlur) {\n            delete this.cancelBlur;\n            return;\n          }\n\n          clearTimeout(this.searching);\n          this.close(event);\n\n          this._change(event);\n        }\n      });\n\n      this._initSource();\n\n      this.menu = $(\"<ul>\").addClass(\"ui-autocomplete ui-front\").appendTo(this._appendTo()).menu({\n        // disable ARIA support, the live region takes care of that\n        role: null\n      }).hide().menu(\"instance\");\n\n      this._on(this.menu.element, {\n        mousedown: function mousedown(event) {\n          // prevent moving focus out of the text field\n          event.preventDefault(); // IE doesn't prevent moving focus even with event.preventDefault()\n          // so we set a flag to know when we should ignore the blur event\n\n          this.cancelBlur = true;\n\n          this._delay(function () {\n            delete this.cancelBlur;\n          }); // clicking on the scrollbar causes focus to shift to the body\n          // but we can't detect a mouseup or a click immediately afterward\n          // so we have to track the next mousedown and close the menu if\n          // the user clicks somewhere outside of the autocomplete\n\n\n          var menuElement = this.menu.element[0];\n\n          if (!$(event.target).closest(\".ui-menu-item\").length) {\n            this._delay(function () {\n              var that = this;\n              this.document.one(\"mousedown\", function (event) {\n                if (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {\n                  that.close();\n                }\n              });\n            });\n          }\n        },\n        menufocus: function menufocus(event, ui) {\n          var label, item; // support: Firefox\n          // Prevent accidental activation of menu items in Firefox (#7024 #9118)\n\n          if (this.isNewMenu) {\n            this.isNewMenu = false;\n\n            if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {\n              this.menu.blur();\n              this.document.one(\"mousemove\", function () {\n                $(event.target).trigger(event.originalEvent);\n              });\n              return;\n            }\n          }\n\n          item = ui.item.data(\"ui-autocomplete-item\");\n\n          if (false !== this._trigger(\"focus\", event, {\n            item: item\n          })) {\n            // use value to match what will end up in the input, if it was a key event\n            if (event.originalEvent && /^key/.test(event.originalEvent.type)) {\n              this._value(item.value);\n            }\n          } // Announce the value in the liveRegion\n\n\n          label = ui.item.attr(\"aria-label\") || item.value;\n\n          if (label && $.trim(label).length) {\n            this.liveRegion.children().hide();\n            $(\"<div>\").text(label).appendTo(this.liveRegion);\n          }\n        },\n        menuselect: function menuselect(event, ui) {\n          var item = ui.item.data(\"ui-autocomplete-item\"),\n              previous = this.previous; // only trigger when focus was lost (click on menu)\n\n          if (this.element[0] !== this.document[0].activeElement) {\n            this.element.focus();\n            this.previous = previous; // #6109 - IE triggers two focus events and the second\n            // is asynchronous, so we need to reset the previous\n            // term synchronously and asynchronously :-(\n\n            this._delay(function () {\n              this.previous = previous;\n              this.selectedItem = item;\n            });\n          }\n\n          if (false !== this._trigger(\"select\", event, {\n            item: item\n          })) {\n            this._value(item.value);\n          } // reset the term after the select event\n          // this allows custom select handling to work properly\n\n\n          this.term = this._value();\n          this.close(event);\n          this.selectedItem = item;\n        }\n      });\n\n      this.liveRegion = $(\"<span>\", {\n        role: \"status\",\n        \"aria-live\": \"assertive\",\n        \"aria-relevant\": \"additions\"\n      }).addClass(\"ui-helper-hidden-accessible\").appendTo(this.document[0].body); // turning off autocomplete prevents the browser from remembering the\n      // value when navigating through history, so we re-enable autocomplete\n      // if the page is unloaded before the widget is destroyed. #7790\n\n      this._on(this.window, {\n        beforeunload: function beforeunload() {\n          this.element.removeAttr(\"autocomplete\");\n        }\n      });\n    },\n    _destroy: function _destroy() {\n      clearTimeout(this.searching);\n      this.element.removeClass(\"ui-autocomplete-input\").removeAttr(\"autocomplete\");\n      this.menu.element.remove();\n      this.liveRegion.remove();\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"source\") {\n        this._initSource();\n      }\n\n      if (key === \"appendTo\") {\n        this.menu.element.appendTo(this._appendTo());\n      }\n\n      if (key === \"disabled\" && value && this.xhr) {\n        this.xhr.abort();\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element) {\n        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n      }\n\n      if (!element || !element[0]) {\n        element = this.element.closest(\".ui-front\");\n      }\n\n      if (!element.length) {\n        element = this.document[0].body;\n      }\n\n      return element;\n    },\n    _initSource: function _initSource() {\n      var array,\n          url,\n          that = this;\n\n      if ($.isArray(this.options.source)) {\n        array = this.options.source;\n\n        this.source = function (request, response) {\n          response($.ui.autocomplete.filter(array, request.term));\n        };\n      } else if (typeof this.options.source === \"string\") {\n        url = this.options.source;\n\n        this.source = function (request, response) {\n          if (that.xhr) {\n            that.xhr.abort();\n          }\n\n          that.xhr = $.ajax({\n            url: url,\n            data: request,\n            dataType: \"json\",\n            success: function success(data) {\n              response(data);\n            },\n            error: function error() {\n              response([]);\n            }\n          });\n        };\n      } else {\n        this.source = this.options.source;\n      }\n    },\n    _searchTimeout: function _searchTimeout(event) {\n      clearTimeout(this.searching);\n      this.searching = this._delay(function () {\n        // Search if the value has changed, or if the user retypes the same value (see #7434)\n        var equalValues = this.term === this._value(),\n            menuVisible = this.menu.element.is(\":visible\"),\n            modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;\n\n        if (!equalValues || equalValues && !menuVisible && !modifierKey) {\n          this.selectedItem = null;\n          this.search(null, event);\n        }\n      }, this.options.delay);\n    },\n    search: function search(value, event) {\n      value = value != null ? value : this._value(); // always save the actual value, not the one passed as an argument\n\n      this.term = this._value();\n\n      if (value.length < this.options.minLength) {\n        return this.close(event);\n      }\n\n      if (this._trigger(\"search\", event) === false) {\n        return;\n      }\n\n      return this._search(value);\n    },\n    _search: function _search(value) {\n      this.pending++;\n      this.element.addClass(\"ui-autocomplete-loading\");\n      this.cancelSearch = false;\n      this.source({\n        term: value\n      }, this._response());\n    },\n    _response: function _response() {\n      var index = ++this.requestIndex;\n      return $.proxy(function (content) {\n        if (index === this.requestIndex) {\n          this.__response(content);\n        }\n\n        this.pending--;\n\n        if (!this.pending) {\n          this.element.removeClass(\"ui-autocomplete-loading\");\n        }\n      }, this);\n    },\n    __response: function __response(content) {\n      if (content) {\n        content = this._normalize(content);\n      }\n\n      this._trigger(\"response\", null, {\n        content: content\n      });\n\n      if (!this.options.disabled && content && content.length && !this.cancelSearch) {\n        this._suggest(content);\n\n        this._trigger(\"open\");\n      } else {\n        // use ._close() instead of .close() so we don't cancel future searches\n        this._close();\n      }\n    },\n    close: function close(event) {\n      this.cancelSearch = true;\n\n      this._close(event);\n    },\n    _close: function _close(event) {\n      if (this.menu.element.is(\":visible\")) {\n        this.menu.element.hide();\n        this.menu.blur();\n        this.isNewMenu = true;\n\n        this._trigger(\"close\", event);\n      }\n    },\n    _change: function _change(event) {\n      if (this.previous !== this._value()) {\n        this._trigger(\"change\", event, {\n          item: this.selectedItem\n        });\n      }\n    },\n    _normalize: function _normalize(items) {\n      // assume all items have the right format when the first item is complete\n      if (items.length && items[0].label && items[0].value) {\n        return items;\n      }\n\n      return $.map(items, function (item) {\n        if (typeof item === \"string\") {\n          return {\n            label: item,\n            value: item\n          };\n        }\n\n        return $.extend({}, item, {\n          label: item.label || item.value,\n          value: item.value || item.label\n        });\n      });\n    },\n    _suggest: function _suggest(items) {\n      var ul = this.menu.element.empty();\n\n      this._renderMenu(ul, items);\n\n      this.isNewMenu = true;\n      this.menu.refresh(); // size and position menu\n\n      ul.show();\n\n      this._resizeMenu();\n\n      ul.position($.extend({\n        of: this.element\n      }, this.options.position));\n\n      if (this.options.autoFocus) {\n        this.menu.next();\n      }\n    },\n    _resizeMenu: function _resizeMenu() {\n      var ul = this.menu.element;\n      ul.outerWidth(Math.max( // Firefox wraps long text (possibly a rounding bug)\n      // so we add 1px to avoid the wrapping (#7513)\n      ul.width(\"\").outerWidth() + 1, this.element.outerWidth()));\n    },\n    _renderMenu: function _renderMenu(ul, items) {\n      var that = this;\n      $.each(items, function (index, item) {\n        that._renderItemData(ul, item);\n      });\n    },\n    _renderItemData: function _renderItemData(ul, item) {\n      return this._renderItem(ul, item).data(\"ui-autocomplete-item\", item);\n    },\n    _renderItem: function _renderItem(ul, item) {\n      return $(\"<li>\").text(item.label).appendTo(ul);\n    },\n    _move: function _move(direction, event) {\n      if (!this.menu.element.is(\":visible\")) {\n        this.search(null, event);\n        return;\n      }\n\n      if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {\n        if (!this.isMultiLine) {\n          this._value(this.term);\n        }\n\n        this.menu.blur();\n        return;\n      }\n\n      this.menu[direction](event);\n    },\n    widget: function widget() {\n      return this.menu.element;\n    },\n    _value: function _value() {\n      return this.valueMethod.apply(this.element, arguments);\n    },\n    _keyEvent: function _keyEvent(keyEvent, event) {\n      if (!this.isMultiLine || this.menu.element.is(\":visible\")) {\n        this._move(keyEvent, event); // prevents moving cursor to beginning/end of the text field in some browsers\n\n\n        event.preventDefault();\n      }\n    }\n  });\n  $.extend($.ui.autocomplete, {\n    escapeRegex: function escapeRegex(value) {\n      return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n    },\n    filter: function filter(array, term) {\n      var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), \"i\");\n      return $.grep(array, function (value) {\n        return matcher.test(value.label || value.value || value);\n      });\n    }\n  }); // live region extension, adding a `messages` option\n  // NOTE: This is an experimental API. We are still investigating\n  // a full solution for string manipulation and internationalization.\n\n  $.widget(\"ui.autocomplete\", $.ui.autocomplete, {\n    options: {\n      messages: {\n        noResults: \"No search results.\",\n        results: function results(amount) {\n          return amount + (amount > 1 ? \" results are\" : \" result is\") + \" available, use up and down arrow keys to navigate.\";\n        }\n      }\n    },\n    __response: function __response(content) {\n      var message;\n\n      this._superApply(arguments);\n\n      if (this.options.disabled || this.cancelSearch) {\n        return;\n      }\n\n      if (content && content.length) {\n        message = this.options.messages.results(content.length);\n      } else {\n        message = this.options.messages.noResults;\n      }\n\n      this.liveRegion.children().hide();\n      $(\"<div>\").text(message).appendTo(this.liveRegion);\n    }\n  });\n  var autocomplete = $.ui.autocomplete;\n  /*!\n   * jQuery UI Button 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/button/\n   */\n\n  var lastActive,\n      baseClasses = \"ui-button ui-widget ui-state-default ui-corner-all\",\n      typeClasses = \"ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only\",\n      formResetHandler = function formResetHandler() {\n    var form = $(this);\n    setTimeout(function () {\n      form.find(\":ui-button\").button(\"refresh\");\n    }, 1);\n  },\n      radioGroup = function radioGroup(radio) {\n    var name = radio.name,\n        form = radio.form,\n        radios = $([]);\n\n    if (name) {\n      name = name.replace(/'/g, \"\\\\'\");\n\n      if (form) {\n        radios = $(form).find(\"[name='\" + name + \"'][type=radio]\");\n      } else {\n        radios = $(\"[name='\" + name + \"'][type=radio]\", radio.ownerDocument).filter(function () {\n          return !this.form;\n        });\n      }\n    }\n\n    return radios;\n  };\n\n  $.widget(\"ui.button\", {\n    version: \"1.11.4\",\n    defaultElement: \"<button>\",\n    options: {\n      disabled: null,\n      text: true,\n      label: null,\n      icons: {\n        primary: null,\n        secondary: null\n      }\n    },\n    _create: function _create() {\n      this.element.closest(\"form\").unbind(\"reset\" + this.eventNamespace).bind(\"reset\" + this.eventNamespace, formResetHandler);\n\n      if (typeof this.options.disabled !== \"boolean\") {\n        this.options.disabled = !!this.element.prop(\"disabled\");\n      } else {\n        this.element.prop(\"disabled\", this.options.disabled);\n      }\n\n      this._determineButtonType();\n\n      this.hasTitle = !!this.buttonElement.attr(\"title\");\n      var that = this,\n          options = this.options,\n          toggleButton = this.type === \"checkbox\" || this.type === \"radio\",\n          activeClass = !toggleButton ? \"ui-state-active\" : \"\";\n\n      if (options.label === null) {\n        options.label = this.type === \"input\" ? this.buttonElement.val() : this.buttonElement.html();\n      }\n\n      this._hoverable(this.buttonElement);\n\n      this.buttonElement.addClass(baseClasses).attr(\"role\", \"button\").bind(\"mouseenter\" + this.eventNamespace, function () {\n        if (options.disabled) {\n          return;\n        }\n\n        if (this === lastActive) {\n          $(this).addClass(\"ui-state-active\");\n        }\n      }).bind(\"mouseleave\" + this.eventNamespace, function () {\n        if (options.disabled) {\n          return;\n        }\n\n        $(this).removeClass(activeClass);\n      }).bind(\"click\" + this.eventNamespace, function (event) {\n        if (options.disabled) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        }\n      }); // Can't use _focusable() because the element that receives focus\n      // and the element that gets the ui-state-focus class are different\n\n      this._on({\n        focus: function focus() {\n          this.buttonElement.addClass(\"ui-state-focus\");\n        },\n        blur: function blur() {\n          this.buttonElement.removeClass(\"ui-state-focus\");\n        }\n      });\n\n      if (toggleButton) {\n        this.element.bind(\"change\" + this.eventNamespace, function () {\n          that.refresh();\n        });\n      }\n\n      if (this.type === \"checkbox\") {\n        this.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n          if (options.disabled) {\n            return false;\n          }\n        });\n      } else if (this.type === \"radio\") {\n        this.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n          if (options.disabled) {\n            return false;\n          }\n\n          $(this).addClass(\"ui-state-active\");\n          that.buttonElement.attr(\"aria-pressed\", \"true\");\n          var radio = that.element[0];\n          radioGroup(radio).not(radio).map(function () {\n            return $(this).button(\"widget\")[0];\n          }).removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n        });\n      } else {\n        this.buttonElement.bind(\"mousedown\" + this.eventNamespace, function () {\n          if (options.disabled) {\n            return false;\n          }\n\n          $(this).addClass(\"ui-state-active\");\n          lastActive = this;\n          that.document.one(\"mouseup\", function () {\n            lastActive = null;\n          });\n        }).bind(\"mouseup\" + this.eventNamespace, function () {\n          if (options.disabled) {\n            return false;\n          }\n\n          $(this).removeClass(\"ui-state-active\");\n        }).bind(\"keydown\" + this.eventNamespace, function (event) {\n          if (options.disabled) {\n            return false;\n          }\n\n          if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {\n            $(this).addClass(\"ui-state-active\");\n          }\n        }) // see #8559, we bind to blur here in case the button element loses\n        // focus between keydown and keyup, it would be left in an \"active\" state\n        .bind(\"keyup\" + this.eventNamespace + \" blur\" + this.eventNamespace, function () {\n          $(this).removeClass(\"ui-state-active\");\n        });\n\n        if (this.buttonElement.is(\"a\")) {\n          this.buttonElement.keyup(function (event) {\n            if (event.keyCode === $.ui.keyCode.SPACE) {\n              // TODO pass through original event correctly (just as 2nd argument doesn't work)\n              $(this).click();\n            }\n          });\n        }\n      }\n\n      this._setOption(\"disabled\", options.disabled);\n\n      this._resetButton();\n    },\n    _determineButtonType: function _determineButtonType() {\n      var ancestor, labelSelector, checked;\n\n      if (this.element.is(\"[type=checkbox]\")) {\n        this.type = \"checkbox\";\n      } else if (this.element.is(\"[type=radio]\")) {\n        this.type = \"radio\";\n      } else if (this.element.is(\"input\")) {\n        this.type = \"input\";\n      } else {\n        this.type = \"button\";\n      }\n\n      if (this.type === \"checkbox\" || this.type === \"radio\") {\n        // we don't search against the document in case the element\n        // is disconnected from the DOM\n        ancestor = this.element.parents().last();\n        labelSelector = \"label[for='\" + this.element.attr(\"id\") + \"']\";\n        this.buttonElement = ancestor.find(labelSelector);\n\n        if (!this.buttonElement.length) {\n          ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();\n          this.buttonElement = ancestor.filter(labelSelector);\n\n          if (!this.buttonElement.length) {\n            this.buttonElement = ancestor.find(labelSelector);\n          }\n        }\n\n        this.element.addClass(\"ui-helper-hidden-accessible\");\n        checked = this.element.is(\":checked\");\n\n        if (checked) {\n          this.buttonElement.addClass(\"ui-state-active\");\n        }\n\n        this.buttonElement.prop(\"aria-pressed\", checked);\n      } else {\n        this.buttonElement = this.element;\n      }\n    },\n    widget: function widget() {\n      return this.buttonElement;\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-helper-hidden-accessible\");\n      this.buttonElement.removeClass(baseClasses + \" ui-state-active \" + typeClasses).removeAttr(\"role\").removeAttr(\"aria-pressed\").html(this.buttonElement.find(\".ui-button-text\").html());\n\n      if (!this.hasTitle) {\n        this.buttonElement.removeAttr(\"title\");\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        this.widget().toggleClass(\"ui-state-disabled\", !!value);\n        this.element.prop(\"disabled\", !!value);\n\n        if (value) {\n          if (this.type === \"checkbox\" || this.type === \"radio\") {\n            this.buttonElement.removeClass(\"ui-state-focus\");\n          } else {\n            this.buttonElement.removeClass(\"ui-state-focus ui-state-active\");\n          }\n        }\n\n        return;\n      }\n\n      this._resetButton();\n    },\n    refresh: function refresh() {\n      //See #8237 & #8828\n      var isDisabled = this.element.is(\"input, button\") ? this.element.is(\":disabled\") : this.element.hasClass(\"ui-button-disabled\");\n\n      if (isDisabled !== this.options.disabled) {\n        this._setOption(\"disabled\", isDisabled);\n      }\n\n      if (this.type === \"radio\") {\n        radioGroup(this.element[0]).each(function () {\n          if ($(this).is(\":checked\")) {\n            $(this).button(\"widget\").addClass(\"ui-state-active\").attr(\"aria-pressed\", \"true\");\n          } else {\n            $(this).button(\"widget\").removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n          }\n        });\n      } else if (this.type === \"checkbox\") {\n        if (this.element.is(\":checked\")) {\n          this.buttonElement.addClass(\"ui-state-active\").attr(\"aria-pressed\", \"true\");\n        } else {\n          this.buttonElement.removeClass(\"ui-state-active\").attr(\"aria-pressed\", \"false\");\n        }\n      }\n    },\n    _resetButton: function _resetButton() {\n      if (this.type === \"input\") {\n        if (this.options.label) {\n          this.element.val(this.options.label);\n        }\n\n        return;\n      }\n\n      var buttonElement = this.buttonElement.removeClass(typeClasses),\n          buttonText = $(\"<span></span>\", this.document[0]).addClass(\"ui-button-text\").html(this.options.label).appendTo(buttonElement.empty()).text(),\n          icons = this.options.icons,\n          multipleIcons = icons.primary && icons.secondary,\n          buttonClasses = [];\n\n      if (icons.primary || icons.secondary) {\n        if (this.options.text) {\n          buttonClasses.push(\"ui-button-text-icon\" + (multipleIcons ? \"s\" : icons.primary ? \"-primary\" : \"-secondary\"));\n        }\n\n        if (icons.primary) {\n          buttonElement.prepend(\"<span class='ui-button-icon-primary ui-icon \" + icons.primary + \"'></span>\");\n        }\n\n        if (icons.secondary) {\n          buttonElement.append(\"<span class='ui-button-icon-secondary ui-icon \" + icons.secondary + \"'></span>\");\n        }\n\n        if (!this.options.text) {\n          buttonClasses.push(multipleIcons ? \"ui-button-icons-only\" : \"ui-button-icon-only\");\n\n          if (!this.hasTitle) {\n            buttonElement.attr(\"title\", $.trim(buttonText));\n          }\n        }\n      } else {\n        buttonClasses.push(\"ui-button-text-only\");\n      }\n\n      buttonElement.addClass(buttonClasses.join(\" \"));\n    }\n  });\n  $.widget(\"ui.buttonset\", {\n    version: \"1.11.4\",\n    options: {\n      items: \"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)\"\n    },\n    _create: function _create() {\n      this.element.addClass(\"ui-buttonset\");\n    },\n    _init: function _init() {\n      this.refresh();\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"disabled\") {\n        this.buttons.button(\"option\", key, value);\n      }\n\n      this._super(key, value);\n    },\n    refresh: function refresh() {\n      var rtl = this.element.css(\"direction\") === \"rtl\",\n          allButtons = this.element.find(this.options.items),\n          existingButtons = allButtons.filter(\":ui-button\"); // Initialize new buttons\n\n      allButtons.not(\":ui-button\").button(); // Refresh existing buttons\n\n      existingButtons.button(\"refresh\");\n      this.buttons = allButtons.map(function () {\n        return $(this).button(\"widget\")[0];\n      }).removeClass(\"ui-corner-all ui-corner-left ui-corner-right\").filter(\":first\").addClass(rtl ? \"ui-corner-right\" : \"ui-corner-left\").end().filter(\":last\").addClass(rtl ? \"ui-corner-left\" : \"ui-corner-right\").end().end();\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-buttonset\");\n      this.buttons.map(function () {\n        return $(this).button(\"widget\")[0];\n      }).removeClass(\"ui-corner-left ui-corner-right\").end().button(\"destroy\");\n    }\n  });\n  var button = $.ui.button;\n  /*!\n   * jQuery UI Datepicker 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/datepicker/\n   */\n\n  $.extend($.ui, {\n    datepicker: {\n      version: \"1.11.4\"\n    }\n  });\n  var datepicker_instActive;\n\n  function datepicker_getZindex(elem) {\n    var position, value;\n\n    while (elem.length && elem[0] !== document) {\n      // Ignore z-index if position is set to a value where z-index is ignored by the browser\n      // This makes behavior of this function consistent across browsers\n      // WebKit always returns auto if the element is positioned\n      position = elem.css(\"position\");\n\n      if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n        // IE returns 0 when zIndex is not specified\n        // other browsers return a string\n        // we ignore the case of nested elements with an explicit value of 0\n        // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n        value = parseInt(elem.css(\"zIndex\"), 10);\n\n        if (!isNaN(value) && value !== 0) {\n          return value;\n        }\n      }\n\n      elem = elem.parent();\n    }\n\n    return 0;\n  }\n  /* Date picker manager.\n     Use the singleton instance of this class, $.datepicker, to interact with the date picker.\n     Settings for (groups of) date pickers are maintained in an instance object,\n     allowing multiple different settings on the same page. */\n\n\n  function Datepicker() {\n    this._curInst = null; // The current instance in use\n\n    this._keyEvent = false; // If the last event was a key event\n\n    this._disabledInputs = []; // List of date picker inputs that have been disabled\n\n    this._datepickerShowing = false; // True if the popup picker is showing , false if not\n\n    this._inDialog = false; // True if showing within a \"dialog\", false if not\n\n    this._mainDivId = \"ui-datepicker-div\"; // The ID of the main datepicker division\n\n    this._inlineClass = \"ui-datepicker-inline\"; // The name of the inline marker class\n\n    this._appendClass = \"ui-datepicker-append\"; // The name of the append marker class\n\n    this._triggerClass = \"ui-datepicker-trigger\"; // The name of the trigger marker class\n\n    this._dialogClass = \"ui-datepicker-dialog\"; // The name of the dialog marker class\n\n    this._disableClass = \"ui-datepicker-disabled\"; // The name of the disabled covering marker class\n\n    this._unselectableClass = \"ui-datepicker-unselectable\"; // The name of the unselectable cell marker class\n\n    this._currentClass = \"ui-datepicker-current-day\"; // The name of the current day marker class\n\n    this._dayOverClass = \"ui-datepicker-days-cell-over\"; // The name of the day hover marker class\n\n    this.regional = []; // Available regional settings, indexed by language code\n\n    this.regional[\"\"] = {\n      // Default regional settings\n      closeText: \"Done\",\n      // Display text for close link\n      prevText: \"Prev\",\n      // Display text for previous month link\n      nextText: \"Next\",\n      // Display text for next month link\n      currentText: \"Today\",\n      // Display text for current month link\n      monthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      // Names of months for drop-down and formatting\n      monthNamesShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      // For formatting\n      dayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      // For formatting\n      dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      // For formatting\n      dayNamesMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n      // Column headings for days starting at Sunday\n      weekHeader: \"Wk\",\n      // Column header for week of the year\n      dateFormat: \"mm/dd/yy\",\n      // See format options on parseDate\n      firstDay: 0,\n      // The first day of the week, Sun = 0, Mon = 1, ...\n      isRTL: false,\n      // True if right-to-left language, false if left-to-right\n      showMonthAfterYear: false,\n      // True if the year select precedes month, false for month then year\n      yearSuffix: \"\" // Additional text to append to the year in the month headers\n\n    };\n    this._defaults = {\n      // Global defaults for all the date picker instances\n      showOn: \"focus\",\n      // \"focus\" for popup on focus,\n      // \"button\" for trigger button, or \"both\" for either\n      showAnim: \"fadeIn\",\n      // Name of jQuery animation for popup\n      showOptions: {},\n      // Options for enhanced animations\n      defaultDate: null,\n      // Used when field is blank: actual date,\n      // +/-number for offset from today, null for today\n      appendText: \"\",\n      // Display text following the input box, e.g. showing the format\n      buttonText: \"...\",\n      // Text for trigger button\n      buttonImage: \"\",\n      // URL for trigger button image\n      buttonImageOnly: false,\n      // True if the image appears alone, false if it appears on a button\n      hideIfNoPrevNext: false,\n      // True to hide next/previous month links\n      // if not applicable, false to just disable them\n      navigationAsDateFormat: false,\n      // True if date formatting applied to prev/today/next links\n      gotoCurrent: false,\n      // True if today link goes back to current selection instead\n      changeMonth: false,\n      // True if month can be selected directly, false if only prev/next\n      changeYear: false,\n      // True if year can be selected directly, false if only prev/next\n      yearRange: \"c-10:c+10\",\n      // Range of years to display in drop-down,\n      // either relative to today's year (-nn:+nn), relative to currently displayed year\n      // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\n      showOtherMonths: false,\n      // True to show dates in other months, false to leave blank\n      selectOtherMonths: false,\n      // True to allow selection of dates in other months, false for unselectable\n      showWeek: false,\n      // True to show week of the year, false to not show it\n      calculateWeek: this.iso8601Week,\n      // How to calculate the week of the year,\n      // takes a Date and returns the number of the week for it\n      shortYearCutoff: \"+10\",\n      // Short year values < this are in the current century,\n      // > this are in the previous century,\n      // string value starting with \"+\" for current year + value\n      minDate: null,\n      // The earliest selectable date, or null for no limit\n      maxDate: null,\n      // The latest selectable date, or null for no limit\n      duration: \"fast\",\n      // Duration of display/closure\n      beforeShowDay: null,\n      // Function that takes a date and returns an array with\n      // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n      // [2] = cell title (optional), e.g. $.datepicker.noWeekends\n      beforeShow: null,\n      // Function that takes an input field and\n      // returns a set of custom settings for the date picker\n      onSelect: null,\n      // Define a callback function when a date is selected\n      onChangeMonthYear: null,\n      // Define a callback function when the month or year is changed\n      onClose: null,\n      // Define a callback function when the datepicker is closed\n      numberOfMonths: 1,\n      // Number of months to show at a time\n      showCurrentAtPos: 0,\n      // The position in multipe months at which to show the current month (starting at 0)\n      stepMonths: 1,\n      // Number of months to step back/forward\n      stepBigMonths: 12,\n      // Number of months to step back/forward for the big links\n      altField: \"\",\n      // Selector for an alternate field to store selected dates into\n      altFormat: \"\",\n      // The date format to use for the alternate field\n      constrainInput: true,\n      // The input is constrained by the current date format\n      showButtonPanel: false,\n      // True to show button panel, false to not show it\n      autoSize: false,\n      // True to size the input for the date format, false to leave as is\n      disabled: false // The initial disabled state\n\n    };\n    $.extend(this._defaults, this.regional[\"\"]);\n    this.regional.en = $.extend(true, {}, this.regional[\"\"]);\n    this.regional[\"en-US\"] = $.extend(true, {}, this.regional.en);\n    this.dpDiv = datepicker_bindHover($(\"<div id='\" + this._mainDivId + \"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"));\n  }\n\n  $.extend(Datepicker.prototype, {\n    /* Class name added to elements to indicate already configured with a date picker. */\n    markerClassName: \"hasDatepicker\",\n    //Keep track of the maximum number of rows displayed (see #7043)\n    maxRows: 4,\n    // TODO rename to \"widget\" when switching to widget factory\n    _widgetDatepicker: function _widgetDatepicker() {\n      return this.dpDiv;\n    },\n\n    /* Override the default settings for all instances of the date picker.\n     * @param  settings  object - the new settings to use as defaults (anonymous object)\n     * @return the manager object\n     */\n    setDefaults: function setDefaults(settings) {\n      datepicker_extendRemove(this._defaults, settings || {});\n      return this;\n    },\n\n    /* Attach the date picker to a jQuery selection.\n     * @param  target\telement - the target input field or division or span\n     * @param  settings  object - the new settings to use for this date picker instance (anonymous)\n     */\n    _attachDatepicker: function _attachDatepicker(target, settings) {\n      var nodeName, inline, inst;\n      nodeName = target.nodeName.toLowerCase();\n      inline = nodeName === \"div\" || nodeName === \"span\";\n\n      if (!target.id) {\n        this.uuid += 1;\n        target.id = \"dp\" + this.uuid;\n      }\n\n      inst = this._newInst($(target), inline);\n      inst.settings = $.extend({}, settings || {});\n\n      if (nodeName === \"input\") {\n        this._connectDatepicker(target, inst);\n      } else if (inline) {\n        this._inlineDatepicker(target, inst);\n      }\n    },\n\n    /* Create a new instance object. */\n    _newInst: function _newInst(target, inline) {\n      var id = target[0].id.replace(/([^A-Za-z0-9_\\-])/g, \"\\\\\\\\$1\"); // escape jQuery meta chars\n\n      return {\n        id: id,\n        input: target,\n        // associated target\n        selectedDay: 0,\n        selectedMonth: 0,\n        selectedYear: 0,\n        // current selection\n        drawMonth: 0,\n        drawYear: 0,\n        // month being drawn\n        inline: inline,\n        // is datepicker inline or not\n        dpDiv: !inline ? this.dpDiv : // presentation div\n        datepicker_bindHover($(\"<div class='\" + this._inlineClass + \" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"))\n      };\n    },\n\n    /* Attach the date picker to an input field. */\n    _connectDatepicker: function _connectDatepicker(target, inst) {\n      var input = $(target);\n      inst.append = $([]);\n      inst.trigger = $([]);\n\n      if (input.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      this._attachments(input, inst);\n\n      input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);\n\n      this._autoSize(inst);\n\n      $.data(target, \"datepicker\", inst); //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\n\n      if (inst.settings.disabled) {\n        this._disableDatepicker(target);\n      }\n    },\n\n    /* Make attachments based on settings. */\n    _attachments: function _attachments(input, inst) {\n      var showOn,\n          buttonText,\n          buttonImage,\n          appendText = this._get(inst, \"appendText\"),\n          isRTL = this._get(inst, \"isRTL\");\n\n      if (inst.append) {\n        inst.append.remove();\n      }\n\n      if (appendText) {\n        inst.append = $(\"<span class='\" + this._appendClass + \"'>\" + appendText + \"</span>\");\n        input[isRTL ? \"before\" : \"after\"](inst.append);\n      }\n\n      input.unbind(\"focus\", this._showDatepicker);\n\n      if (inst.trigger) {\n        inst.trigger.remove();\n      }\n\n      showOn = this._get(inst, \"showOn\");\n\n      if (showOn === \"focus\" || showOn === \"both\") {\n        // pop-up date picker when in the marked field\n        input.focus(this._showDatepicker);\n      }\n\n      if (showOn === \"button\" || showOn === \"both\") {\n        // pop-up date picker when button clicked\n        buttonText = this._get(inst, \"buttonText\");\n        buttonImage = this._get(inst, \"buttonImage\");\n        inst.trigger = $(this._get(inst, \"buttonImageOnly\") ? $(\"<img/>\").addClass(this._triggerClass).attr({\n          src: buttonImage,\n          alt: buttonText,\n          title: buttonText\n        }) : $(\"<button type='button'></button>\").addClass(this._triggerClass).html(!buttonImage ? buttonText : $(\"<img/>\").attr({\n          src: buttonImage,\n          alt: buttonText,\n          title: buttonText\n        })));\n        input[isRTL ? \"before\" : \"after\"](inst.trigger);\n        inst.trigger.click(function () {\n          if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {\n            $.datepicker._hideDatepicker();\n          } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {\n            $.datepicker._hideDatepicker();\n\n            $.datepicker._showDatepicker(input[0]);\n          } else {\n            $.datepicker._showDatepicker(input[0]);\n          }\n\n          return false;\n        });\n      }\n    },\n\n    /* Apply the maximum length for the date format. */\n    _autoSize: function _autoSize(inst) {\n      if (this._get(inst, \"autoSize\") && !inst.inline) {\n        var findMax,\n            max,\n            maxI,\n            i,\n            date = new Date(2009, 12 - 1, 20),\n            // Ensure double digits\n        dateFormat = this._get(inst, \"dateFormat\");\n\n        if (dateFormat.match(/[DM]/)) {\n          findMax = function findMax(names) {\n            max = 0;\n            maxI = 0;\n\n            for (i = 0; i < names.length; i++) {\n              if (names[i].length > max) {\n                max = names[i].length;\n                maxI = i;\n              }\n            }\n\n            return maxI;\n          };\n\n          date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? \"monthNames\" : \"monthNamesShort\")));\n          date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? \"dayNames\" : \"dayNamesShort\")) + 20 - date.getDay());\n        }\n\n        inst.input.attr(\"size\", this._formatDate(inst, date).length);\n      }\n    },\n\n    /* Attach an inline date picker to a div. */\n    _inlineDatepicker: function _inlineDatepicker(target, inst) {\n      var divSpan = $(target);\n\n      if (divSpan.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      divSpan.addClass(this.markerClassName).append(inst.dpDiv);\n      $.data(target, \"datepicker\", inst);\n\n      this._setDate(inst, this._getDefaultDate(inst), true);\n\n      this._updateDatepicker(inst);\n\n      this._updateAlternate(inst); //If disabled option is true, disable the datepicker before showing it (see ticket #5665)\n\n\n      if (inst.settings.disabled) {\n        this._disableDatepicker(target);\n      } // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n      // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\n\n\n      inst.dpDiv.css(\"display\", \"block\");\n    },\n\n    /* Pop-up the date picker in a \"dialog\" box.\n     * @param  input element - ignored\n     * @param  date\tstring or Date - the initial date to display\n     * @param  onSelect  function - the function to call when a date is selected\n     * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\n     * @param  pos int[2] - coordinates for the dialog's position within the screen or\n     *\t\t\t\t\tevent - with x/y coordinates or\n     *\t\t\t\t\tleave empty for default (screen centre)\n     * @return the manager object\n     */\n    _dialogDatepicker: function _dialogDatepicker(input, date, onSelect, settings, pos) {\n      var id,\n          browserWidth,\n          browserHeight,\n          scrollX,\n          scrollY,\n          inst = this._dialogInst; // internal instance\n\n      if (!inst) {\n        this.uuid += 1;\n        id = \"dp\" + this.uuid;\n        this._dialogInput = $(\"<input type='text' id='\" + id + \"' style='position: absolute; top: -100px; width: 0px;'/>\");\n\n        this._dialogInput.keydown(this._doKeyDown);\n\n        $(\"body\").append(this._dialogInput);\n        inst = this._dialogInst = this._newInst(this._dialogInput, false);\n        inst.settings = {};\n        $.data(this._dialogInput[0], \"datepicker\", inst);\n      }\n\n      datepicker_extendRemove(inst.settings, settings || {});\n      date = date && date.constructor === Date ? this._formatDate(inst, date) : date;\n\n      this._dialogInput.val(date);\n\n      this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;\n\n      if (!this._pos) {\n        browserWidth = document.documentElement.clientWidth;\n        browserHeight = document.documentElement.clientHeight;\n        scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n        scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n        this._pos = // should use actual width/height below\n        [browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY];\n      } // move input on screen for focus, but hidden behind dialog\n\n\n      this._dialogInput.css(\"left\", this._pos[0] + 20 + \"px\").css(\"top\", this._pos[1] + \"px\");\n\n      inst.settings.onSelect = onSelect;\n      this._inDialog = true;\n      this.dpDiv.addClass(this._dialogClass);\n\n      this._showDatepicker(this._dialogInput[0]);\n\n      if ($.blockUI) {\n        $.blockUI(this.dpDiv);\n      }\n\n      $.data(this._dialogInput[0], \"datepicker\", inst);\n      return this;\n    },\n\n    /* Detach a datepicker from its control.\n     * @param  target\telement - the target input field or division or span\n     */\n    _destroyDatepicker: function _destroyDatepicker(target) {\n      var nodeName,\n          $target = $(target),\n          inst = $.data(target, \"datepicker\");\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n      $.removeData(target, \"datepicker\");\n\n      if (nodeName === \"input\") {\n        inst.append.remove();\n        inst.trigger.remove();\n        $target.removeClass(this.markerClassName).unbind(\"focus\", this._showDatepicker).unbind(\"keydown\", this._doKeyDown).unbind(\"keypress\", this._doKeyPress).unbind(\"keyup\", this._doKeyUp);\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        $target.removeClass(this.markerClassName).empty();\n      }\n\n      if (datepicker_instActive === inst) {\n        datepicker_instActive = null;\n      }\n    },\n\n    /* Enable the date picker to a jQuery selection.\n     * @param  target\telement - the target input field or division or span\n     */\n    _enableDatepicker: function _enableDatepicker(target) {\n      var nodeName,\n          inline,\n          $target = $(target),\n          inst = $.data(target, \"datepicker\");\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n\n      if (nodeName === \"input\") {\n        target.disabled = false;\n        inst.trigger.filter(\"button\").each(function () {\n          this.disabled = false;\n        }).end().filter(\"img\").css({\n          opacity: \"1.0\",\n          cursor: \"\"\n        });\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        inline = $target.children(\".\" + this._inlineClass);\n        inline.children().removeClass(\"ui-state-disabled\");\n        inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", false);\n      }\n\n      this._disabledInputs = $.map(this._disabledInputs, function (value) {\n        return value === target ? null : value;\n      }); // delete entry\n    },\n\n    /* Disable the date picker to a jQuery selection.\n     * @param  target\telement - the target input field or division or span\n     */\n    _disableDatepicker: function _disableDatepicker(target) {\n      var nodeName,\n          inline,\n          $target = $(target),\n          inst = $.data(target, \"datepicker\");\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n\n      if (nodeName === \"input\") {\n        target.disabled = true;\n        inst.trigger.filter(\"button\").each(function () {\n          this.disabled = true;\n        }).end().filter(\"img\").css({\n          opacity: \"0.5\",\n          cursor: \"default\"\n        });\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        inline = $target.children(\".\" + this._inlineClass);\n        inline.children().addClass(\"ui-state-disabled\");\n        inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", true);\n      }\n\n      this._disabledInputs = $.map(this._disabledInputs, function (value) {\n        return value === target ? null : value;\n      }); // delete entry\n\n      this._disabledInputs[this._disabledInputs.length] = target;\n    },\n\n    /* Is the first field in a jQuery collection disabled as a datepicker?\n     * @param  target\telement - the target input field or division or span\n     * @return boolean - true if disabled, false if enabled\n     */\n    _isDisabledDatepicker: function _isDisabledDatepicker(target) {\n      if (!target) {\n        return false;\n      }\n\n      for (var i = 0; i < this._disabledInputs.length; i++) {\n        if (this._disabledInputs[i] === target) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /* Retrieve the instance data for the target control.\n     * @param  target  element - the target input field or division or span\n     * @return  object - the associated instance data\n     * @throws  error if a jQuery problem getting data\n     */\n    _getInst: function _getInst(target) {\n      try {\n        return $.data(target, \"datepicker\");\n      } catch (err) {\n        throw \"Missing instance data for this datepicker\";\n      }\n    },\n\n    /* Update or retrieve the settings for a date picker attached to an input field or division.\n     * @param  target  element - the target input field or division or span\n     * @param  name\tobject - the new settings to update or\n     *\t\t\t\tstring - the name of the setting to change or retrieve,\n     *\t\t\t\twhen retrieving also \"all\" for all instance settings or\n     *\t\t\t\t\"defaults\" for all global defaults\n     * @param  value   any - the new value for the setting\n     *\t\t\t\t(omit if above is an object or to retrieve a value)\n     */\n    _optionDatepicker: function _optionDatepicker(target, name, value) {\n      var settings,\n          date,\n          minDate,\n          maxDate,\n          inst = this._getInst(target);\n\n      if (arguments.length === 2 && typeof name === \"string\") {\n        return name === \"defaults\" ? $.extend({}, $.datepicker._defaults) : inst ? name === \"all\" ? $.extend({}, inst.settings) : this._get(inst, name) : null;\n      }\n\n      settings = name || {};\n\n      if (typeof name === \"string\") {\n        settings = {};\n        settings[name] = value;\n      }\n\n      if (inst) {\n        if (this._curInst === inst) {\n          this._hideDatepicker();\n        }\n\n        date = this._getDateDatepicker(target, true);\n        minDate = this._getMinMaxDate(inst, \"min\");\n        maxDate = this._getMinMaxDate(inst, \"max\");\n        datepicker_extendRemove(inst.settings, settings); // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\n\n        if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {\n          inst.settings.minDate = this._formatDate(inst, minDate);\n        }\n\n        if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {\n          inst.settings.maxDate = this._formatDate(inst, maxDate);\n        }\n\n        if (\"disabled\" in settings) {\n          if (settings.disabled) {\n            this._disableDatepicker(target);\n          } else {\n            this._enableDatepicker(target);\n          }\n        }\n\n        this._attachments($(target), inst);\n\n        this._autoSize(inst);\n\n        this._setDate(inst, date);\n\n        this._updateAlternate(inst);\n\n        this._updateDatepicker(inst);\n      }\n    },\n    // change method deprecated\n    _changeDatepicker: function _changeDatepicker(target, name, value) {\n      this._optionDatepicker(target, name, value);\n    },\n\n    /* Redraw the date picker attached to an input field or division.\n     * @param  target  element - the target input field or division or span\n     */\n    _refreshDatepicker: function _refreshDatepicker(target) {\n      var inst = this._getInst(target);\n\n      if (inst) {\n        this._updateDatepicker(inst);\n      }\n    },\n\n    /* Set the dates for a jQuery selection.\n     * @param  target element - the target input field or division or span\n     * @param  date\tDate - the new date\n     */\n    _setDateDatepicker: function _setDateDatepicker(target, date) {\n      var inst = this._getInst(target);\n\n      if (inst) {\n        this._setDate(inst, date);\n\n        this._updateDatepicker(inst);\n\n        this._updateAlternate(inst);\n      }\n    },\n\n    /* Get the date(s) for the first entry in a jQuery selection.\n     * @param  target element - the target input field or division or span\n     * @param  noDefault boolean - true if no default date is to be used\n     * @return Date - the current date\n     */\n    _getDateDatepicker: function _getDateDatepicker(target, noDefault) {\n      var inst = this._getInst(target);\n\n      if (inst && !inst.inline) {\n        this._setDateFromField(inst, noDefault);\n      }\n\n      return inst ? this._getDate(inst) : null;\n    },\n\n    /* Handle keystrokes. */\n    _doKeyDown: function _doKeyDown(event) {\n      var onSelect,\n          dateStr,\n          sel,\n          inst = $.datepicker._getInst(event.target),\n          handled = true,\n          isRTL = inst.dpDiv.is(\".ui-datepicker-rtl\");\n\n      inst._keyEvent = true;\n\n      if ($.datepicker._datepickerShowing) {\n        switch (event.keyCode) {\n          case 9:\n            $.datepicker._hideDatepicker();\n\n            handled = false;\n            break;\n          // hide on tab out\n\n          case 13:\n            sel = $(\"td.\" + $.datepicker._dayOverClass + \":not(.\" + $.datepicker._currentClass + \")\", inst.dpDiv);\n\n            if (sel[0]) {\n              $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);\n            }\n\n            onSelect = $.datepicker._get(inst, \"onSelect\");\n\n            if (onSelect) {\n              dateStr = $.datepicker._formatDate(inst); // trigger custom callback\n\n              onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);\n            } else {\n              $.datepicker._hideDatepicker();\n            }\n\n            return false;\n          // don't submit the form\n\n          case 27:\n            $.datepicker._hideDatepicker();\n\n            break;\n          // hide on escape\n\n          case 33:\n            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\n            break;\n          // previous month/year on page up/+ ctrl\n\n          case 34:\n            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\n            break;\n          // next month/year on page down/+ ctrl\n\n          case 35:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._clearDate(event.target);\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // clear on ctrl or command +end\n\n          case 36:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._gotoToday(event.target);\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // current on ctrl or command +home\n\n          case 37:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey; // -1 day on ctrl or command +left\n\n            if (event.originalEvent.altKey) {\n              $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n            } // next month/year on alt +left on Mac\n\n\n            break;\n\n          case 38:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, -7, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // -1 week on ctrl or command +up\n\n          case 39:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey; // +1 day on ctrl or command +right\n\n            if (event.originalEvent.altKey) {\n              $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n            } // next month/year on alt +right\n\n\n            break;\n\n          case 40:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, +7, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // +1 week on ctrl or command +down\n\n          default:\n            handled = false;\n        }\n      } else if (event.keyCode === 36 && event.ctrlKey) {\n        // display the date picker on ctrl+home\n        $.datepicker._showDatepicker(this);\n      } else {\n        handled = false;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n\n    /* Filter entered characters - based on date format. */\n    _doKeyPress: function _doKeyPress(event) {\n      var chars,\n          chr,\n          inst = $.datepicker._getInst(event.target);\n\n      if ($.datepicker._get(inst, \"constrainInput\")) {\n        chars = $.datepicker._possibleChars($.datepicker._get(inst, \"dateFormat\"));\n        chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);\n        return event.ctrlKey || event.metaKey || chr < \" \" || !chars || chars.indexOf(chr) > -1;\n      }\n    },\n\n    /* Synchronise manual entry and field/alternate field. */\n    _doKeyUp: function _doKeyUp(event) {\n      var date,\n          inst = $.datepicker._getInst(event.target);\n\n      if (inst.input.val() !== inst.lastVal) {\n        try {\n          date = $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));\n\n          if (date) {\n            // only if valid\n            $.datepicker._setDateFromField(inst);\n\n            $.datepicker._updateAlternate(inst);\n\n            $.datepicker._updateDatepicker(inst);\n          }\n        } catch (err) {}\n      }\n\n      return true;\n    },\n\n    /* Pop-up the date picker for a given input field.\n     * If false returned from beforeShow event handler do not show.\n     * @param  input  element - the input field attached to the date picker or\n     *\t\t\t\t\tevent - if triggered by focus\n     */\n    _showDatepicker: function _showDatepicker(input) {\n      input = input.target || input;\n\n      if (input.nodeName.toLowerCase() !== \"input\") {\n        // find from button/image trigger\n        input = $(\"input\", input.parentNode)[0];\n      }\n\n      if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {\n        // already here\n        return;\n      }\n\n      var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;\n      inst = $.datepicker._getInst(input);\n\n      if ($.datepicker._curInst && $.datepicker._curInst !== inst) {\n        $.datepicker._curInst.dpDiv.stop(true, true);\n\n        if (inst && $.datepicker._datepickerShowing) {\n          $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);\n        }\n      }\n\n      beforeShow = $.datepicker._get(inst, \"beforeShow\");\n      beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};\n\n      if (beforeShowSettings === false) {\n        return;\n      }\n\n      datepicker_extendRemove(inst.settings, beforeShowSettings);\n      inst.lastVal = null;\n      $.datepicker._lastInput = input;\n\n      $.datepicker._setDateFromField(inst);\n\n      if ($.datepicker._inDialog) {\n        // hide cursor\n        input.value = \"\";\n      }\n\n      if (!$.datepicker._pos) {\n        // position below input\n        $.datepicker._pos = $.datepicker._findPos(input);\n        $.datepicker._pos[1] += input.offsetHeight; // add the height\n      }\n\n      isFixed = false;\n      $(input).parents().each(function () {\n        isFixed |= $(this).css(\"position\") === \"fixed\";\n        return !isFixed;\n      });\n      offset = {\n        left: $.datepicker._pos[0],\n        top: $.datepicker._pos[1]\n      };\n      $.datepicker._pos = null; //to avoid flashes on Firefox\n\n      inst.dpDiv.empty(); // determine sizing offscreen\n\n      inst.dpDiv.css({\n        position: \"absolute\",\n        display: \"block\",\n        top: \"-1000px\"\n      });\n\n      $.datepicker._updateDatepicker(inst); // fix width for dynamic number of date pickers\n      // and adjust position before showing\n\n\n      offset = $.datepicker._checkOffset(inst, offset, isFixed);\n      inst.dpDiv.css({\n        position: $.datepicker._inDialog && $.blockUI ? \"static\" : isFixed ? \"fixed\" : \"absolute\",\n        display: \"none\",\n        left: offset.left + \"px\",\n        top: offset.top + \"px\"\n      });\n\n      if (!inst.inline) {\n        showAnim = $.datepicker._get(inst, \"showAnim\");\n        duration = $.datepicker._get(inst, \"duration\");\n        inst.dpDiv.css(\"z-index\", datepicker_getZindex($(input)) + 1);\n        $.datepicker._datepickerShowing = true;\n\n        if ($.effects && $.effects.effect[showAnim]) {\n          inst.dpDiv.show(showAnim, $.datepicker._get(inst, \"showOptions\"), duration);\n        } else {\n          inst.dpDiv[showAnim || \"show\"](showAnim ? duration : null);\n        }\n\n        if ($.datepicker._shouldFocusInput(inst)) {\n          inst.input.focus();\n        }\n\n        $.datepicker._curInst = inst;\n      }\n    },\n\n    /* Generate the date picker content. */\n    _updateDatepicker: function _updateDatepicker(inst) {\n      this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\n\n      datepicker_instActive = inst; // for delegate hover events\n\n      inst.dpDiv.empty().append(this._generateHTML(inst));\n\n      this._attachHandlers(inst);\n\n      var origyearshtml,\n          numMonths = this._getNumberOfMonths(inst),\n          cols = numMonths[1],\n          width = 17,\n          activeCell = inst.dpDiv.find(\".\" + this._dayOverClass + \" a\");\n\n      if (activeCell.length > 0) {\n        datepicker_handleMouseover.apply(activeCell.get(0));\n      }\n\n      inst.dpDiv.removeClass(\"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\").width(\"\");\n\n      if (cols > 1) {\n        inst.dpDiv.addClass(\"ui-datepicker-multi-\" + cols).css(\"width\", width * cols + \"em\");\n      }\n\n      inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-multi\");\n      inst.dpDiv[(this._get(inst, \"isRTL\") ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-rtl\");\n\n      if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {\n        inst.input.focus();\n      } // deffered render of the years select (to avoid flashes on Firefox)\n\n\n      if (inst.yearshtml) {\n        origyearshtml = inst.yearshtml;\n        setTimeout(function () {\n          //assure that inst.yearshtml didn't change.\n          if (origyearshtml === inst.yearshtml && inst.yearshtml) {\n            inst.dpDiv.find(\"select.ui-datepicker-year:first\").replaceWith(inst.yearshtml);\n          }\n\n          origyearshtml = inst.yearshtml = null;\n        }, 0);\n      }\n    },\n    // #6694 - don't focus the input if it's already focused\n    // this breaks the change event in IE\n    // Support: IE and jQuery <1.9\n    _shouldFocusInput: function _shouldFocusInput(inst) {\n      return inst.input && inst.input.is(\":visible\") && !inst.input.is(\":disabled\") && !inst.input.is(\":focus\");\n    },\n\n    /* Check positioning to remain on screen. */\n    _checkOffset: function _checkOffset(inst, offset, isFixed) {\n      var dpWidth = inst.dpDiv.outerWidth(),\n          dpHeight = inst.dpDiv.outerHeight(),\n          inputWidth = inst.input ? inst.input.outerWidth() : 0,\n          inputHeight = inst.input ? inst.input.outerHeight() : 0,\n          viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),\n          viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());\n      offset.left -= this._get(inst, \"isRTL\") ? dpWidth - inputWidth : 0;\n      offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;\n      offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0; // now check if datepicker is showing outside window viewport - move to a better place if so.\n\n      offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);\n      offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);\n      return offset;\n    },\n\n    /* Find an object's position on the screen. */\n    _findPos: function _findPos(obj) {\n      var position,\n          inst = this._getInst(obj),\n          isRTL = this._get(inst, \"isRTL\");\n\n      while (obj && (obj.type === \"hidden\" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {\n        obj = obj[isRTL ? \"previousSibling\" : \"nextSibling\"];\n      }\n\n      position = $(obj).offset();\n      return [position.left, position.top];\n    },\n\n    /* Hide the date picker from view.\n     * @param  input  element - the input field attached to the date picker\n     */\n    _hideDatepicker: function _hideDatepicker(input) {\n      var showAnim,\n          duration,\n          postProcess,\n          onClose,\n          inst = this._curInst;\n\n      if (!inst || input && inst !== $.data(input, \"datepicker\")) {\n        return;\n      }\n\n      if (this._datepickerShowing) {\n        showAnim = this._get(inst, \"showAnim\");\n        duration = this._get(inst, \"duration\");\n\n        postProcess = function postProcess() {\n          $.datepicker._tidyDialog(inst);\n        }; // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\n\n\n        if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {\n          inst.dpDiv.hide(showAnim, $.datepicker._get(inst, \"showOptions\"), duration, postProcess);\n        } else {\n          inst.dpDiv[showAnim === \"slideDown\" ? \"slideUp\" : showAnim === \"fadeIn\" ? \"fadeOut\" : \"hide\"](showAnim ? duration : null, postProcess);\n        }\n\n        if (!showAnim) {\n          postProcess();\n        }\n\n        this._datepickerShowing = false;\n        onClose = this._get(inst, \"onClose\");\n\n        if (onClose) {\n          onClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : \"\", inst]);\n        }\n\n        this._lastInput = null;\n\n        if (this._inDialog) {\n          this._dialogInput.css({\n            position: \"absolute\",\n            left: \"0\",\n            top: \"-100px\"\n          });\n\n          if ($.blockUI) {\n            $.unblockUI();\n            $(\"body\").append(this.dpDiv);\n          }\n        }\n\n        this._inDialog = false;\n      }\n    },\n\n    /* Tidy up after a dialog display. */\n    _tidyDialog: function _tidyDialog(inst) {\n      inst.dpDiv.removeClass(this._dialogClass).unbind(\".ui-datepicker-calendar\");\n    },\n\n    /* Close date picker if clicked elsewhere. */\n    _checkExternalClick: function _checkExternalClick(event) {\n      if (!$.datepicker._curInst) {\n        return;\n      }\n\n      var $target = $(event.target),\n          inst = $.datepicker._getInst($target[0]);\n\n      if ($target[0].id !== $.datepicker._mainDivId && $target.parents(\"#\" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest(\".\" + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {\n        $.datepicker._hideDatepicker();\n      }\n    },\n\n    /* Adjust one of the date sub-fields. */\n    _adjustDate: function _adjustDate(id, offset, period) {\n      var target = $(id),\n          inst = this._getInst(target[0]);\n\n      if (this._isDisabledDatepicker(target[0])) {\n        return;\n      }\n\n      this._adjustInstDate(inst, offset + (period === \"M\" ? this._get(inst, \"showCurrentAtPos\") : 0), // undo positioning\n      period);\n\n      this._updateDatepicker(inst);\n    },\n\n    /* Action for current link. */\n    _gotoToday: function _gotoToday(id) {\n      var date,\n          target = $(id),\n          inst = this._getInst(target[0]);\n\n      if (this._get(inst, \"gotoCurrent\") && inst.currentDay) {\n        inst.selectedDay = inst.currentDay;\n        inst.drawMonth = inst.selectedMonth = inst.currentMonth;\n        inst.drawYear = inst.selectedYear = inst.currentYear;\n      } else {\n        date = new Date();\n        inst.selectedDay = date.getDate();\n        inst.drawMonth = inst.selectedMonth = date.getMonth();\n        inst.drawYear = inst.selectedYear = date.getFullYear();\n      }\n\n      this._notifyChange(inst);\n\n      this._adjustDate(target);\n    },\n\n    /* Action for selecting a new month/year. */\n    _selectMonthYear: function _selectMonthYear(id, select, period) {\n      var target = $(id),\n          inst = this._getInst(target[0]);\n\n      inst[\"selected\" + (period === \"M\" ? \"Month\" : \"Year\")] = inst[\"draw\" + (period === \"M\" ? \"Month\" : \"Year\")] = parseInt(select.options[select.selectedIndex].value, 10);\n\n      this._notifyChange(inst);\n\n      this._adjustDate(target);\n    },\n\n    /* Action for selecting a day. */\n    _selectDay: function _selectDay(id, month, year, td) {\n      var inst,\n          target = $(id);\n\n      if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {\n        return;\n      }\n\n      inst = this._getInst(target[0]);\n      inst.selectedDay = inst.currentDay = $(\"a\", td).html();\n      inst.selectedMonth = inst.currentMonth = month;\n      inst.selectedYear = inst.currentYear = year;\n\n      this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));\n    },\n\n    /* Erase the input field and hide the date picker. */\n    _clearDate: function _clearDate(id) {\n      var target = $(id);\n\n      this._selectDate(target, \"\");\n    },\n\n    /* Update the input field with the selected date. */\n    _selectDate: function _selectDate(id, dateStr) {\n      var onSelect,\n          target = $(id),\n          inst = this._getInst(target[0]);\n\n      dateStr = dateStr != null ? dateStr : this._formatDate(inst);\n\n      if (inst.input) {\n        inst.input.val(dateStr);\n      }\n\n      this._updateAlternate(inst);\n\n      onSelect = this._get(inst, \"onSelect\");\n\n      if (onSelect) {\n        onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]); // trigger custom callback\n      } else if (inst.input) {\n        inst.input.trigger(\"change\"); // fire the change event\n      }\n\n      if (inst.inline) {\n        this._updateDatepicker(inst);\n      } else {\n        this._hideDatepicker();\n\n        this._lastInput = inst.input[0];\n\n        if (_typeof(inst.input[0]) !== \"object\") {\n          inst.input.focus(); // restore focus\n        }\n\n        this._lastInput = null;\n      }\n    },\n\n    /* Update any alternate field to synchronise with the main field. */\n    _updateAlternate: function _updateAlternate(inst) {\n      var altFormat,\n          date,\n          dateStr,\n          altField = this._get(inst, \"altField\");\n\n      if (altField) {\n        // update alternate field too\n        altFormat = this._get(inst, \"altFormat\") || this._get(inst, \"dateFormat\");\n        date = this._getDate(inst);\n        dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));\n        $(altField).each(function () {\n          $(this).val(dateStr);\n        });\n      }\n    },\n\n    /* Set as beforeShowDay function to prevent selection of weekends.\n     * @param  date  Date - the date to customise\n     * @return [boolean, string] - is this date selectable?, what is its CSS class?\n     */\n    noWeekends: function noWeekends(date) {\n      var day = date.getDay();\n      return [day > 0 && day < 6, \"\"];\n    },\n\n    /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\n     * @param  date  Date - the date to get the week for\n     * @return  number - the number of the week within the year that contains this date\n     */\n    iso8601Week: function iso8601Week(date) {\n      var time,\n          checkDate = new Date(date.getTime()); // Find Thursday of this week starting on Monday\n\n      checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n      time = checkDate.getTime();\n      checkDate.setMonth(0); // Compare with Jan 1\n\n      checkDate.setDate(1);\n      return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;\n    },\n\n    /* Parse a string value into a date object.\n     * See formatDate below for the possible formats.\n     *\n     * @param  format string - the expected format of the date\n     * @param  value string - the date in the above format\n     * @param  settings Object - attributes include:\n     *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\n     *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n     *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n     *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n     *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n     * @return  Date - the extracted date value or null if value is blank\n     */\n    parseDate: function parseDate(format, value, settings) {\n      if (format == null || value == null) {\n        throw \"Invalid arguments\";\n      }\n\n      value = _typeof(value) === \"object\" ? value.toString() : value + \"\";\n\n      if (value === \"\") {\n        return null;\n      }\n\n      var iFormat,\n          dim,\n          extra,\n          iValue = 0,\n          shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,\n          shortYearCutoff = typeof shortYearCutoffTemp !== \"string\" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10),\n          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n          year = -1,\n          month = -1,\n          day = -1,\n          doy = -1,\n          literal = false,\n          date,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      },\n          // Extract a number from the string value\n      getNumber = function getNumber(match) {\n        var isDoubled = lookAhead(match),\n            size = match === \"@\" ? 14 : match === \"!\" ? 20 : match === \"y\" && isDoubled ? 4 : match === \"o\" ? 3 : 2,\n            minSize = match === \"y\" ? size : 1,\n            digits = new RegExp(\"^\\\\d{\" + minSize + \",\" + size + \"}\"),\n            num = value.substring(iValue).match(digits);\n\n        if (!num) {\n          throw \"Missing number at position \" + iValue;\n        }\n\n        iValue += num[0].length;\n        return parseInt(num[0], 10);\n      },\n          // Extract a name from the string value and convert to an index\n      getName = function getName(match, shortNames, longNames) {\n        var index = -1,\n            names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {\n          return [[k, v]];\n        }).sort(function (a, b) {\n          return -(a[1].length - b[1].length);\n        });\n        $.each(names, function (i, pair) {\n          var name = pair[1];\n\n          if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {\n            index = pair[0];\n            iValue += name.length;\n            return false;\n          }\n        });\n\n        if (index !== -1) {\n          return index + 1;\n        } else {\n          throw \"Unknown name at position \" + iValue;\n        }\n      },\n          // Confirm that a literal character matches the string value\n      checkLiteral = function checkLiteral() {\n        if (value.charAt(iValue) !== format.charAt(iFormat)) {\n          throw \"Unexpected literal at position \" + iValue;\n        }\n\n        iValue++;\n      };\n\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n            literal = false;\n          } else {\n            checkLiteral();\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case \"d\":\n              day = getNumber(\"d\");\n              break;\n\n            case \"D\":\n              getName(\"D\", dayNamesShort, dayNames);\n              break;\n\n            case \"o\":\n              doy = getNumber(\"o\");\n              break;\n\n            case \"m\":\n              month = getNumber(\"m\");\n              break;\n\n            case \"M\":\n              month = getName(\"M\", monthNamesShort, monthNames);\n              break;\n\n            case \"y\":\n              year = getNumber(\"y\");\n              break;\n\n            case \"@\":\n              date = new Date(getNumber(\"@\"));\n              year = date.getFullYear();\n              month = date.getMonth() + 1;\n              day = date.getDate();\n              break;\n\n            case \"!\":\n              date = new Date((getNumber(\"!\") - this._ticksTo1970) / 10000);\n              year = date.getFullYear();\n              month = date.getMonth() + 1;\n              day = date.getDate();\n              break;\n\n            case \"'\":\n              if (lookAhead(\"'\")) {\n                checkLiteral();\n              } else {\n                literal = true;\n              }\n\n              break;\n\n            default:\n              checkLiteral();\n          }\n        }\n      }\n\n      if (iValue < value.length) {\n        extra = value.substr(iValue);\n\n        if (!/^\\s+/.test(extra)) {\n          throw \"Extra/unparsed characters found in date: \" + extra;\n        }\n      }\n\n      if (year === -1) {\n        year = new Date().getFullYear();\n      } else if (year < 100) {\n        year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);\n      }\n\n      if (doy > -1) {\n        month = 1;\n        day = doy;\n\n        do {\n          dim = this._getDaysInMonth(year, month - 1);\n\n          if (day <= dim) {\n            break;\n          }\n\n          month++;\n          day -= dim;\n        } while (true);\n      }\n\n      date = this._daylightSavingAdjust(new Date(year, month - 1, day));\n\n      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n        throw \"Invalid date\"; // E.g. 31/02/00\n      }\n\n      return date;\n    },\n\n    /* Standard date formats. */\n    ATOM: \"yy-mm-dd\",\n    // RFC 3339 (ISO 8601)\n    COOKIE: \"D, dd M yy\",\n    ISO_8601: \"yy-mm-dd\",\n    RFC_822: \"D, d M y\",\n    RFC_850: \"DD, dd-M-y\",\n    RFC_1036: \"D, d M y\",\n    RFC_1123: \"D, d M yy\",\n    RFC_2822: \"D, d M yy\",\n    RSS: \"D, d M y\",\n    // RFC 822\n    TICKS: \"!\",\n    TIMESTAMP: \"@\",\n    W3C: \"yy-mm-dd\",\n    // ISO 8601\n    _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000,\n\n    /* Format a date object into a string value.\n     * The format can be combinations of the following:\n     * d  - day of month (no leading zero)\n     * dd - day of month (two digit)\n     * o  - day of year (no leading zeros)\n     * oo - day of year (three digit)\n     * D  - day name short\n     * DD - day name long\n     * m  - month of year (no leading zero)\n     * mm - month of year (two digit)\n     * M  - month name short\n     * MM - month name long\n     * y  - year (two digit)\n     * yy - year (four digit)\n     * @ - Unix timestamp (ms since 01/01/1970)\n     * ! - Windows ticks (100ns since 01/01/0001)\n     * \"...\" - literal text\n     * '' - single quote\n     *\n     * @param  format string - the desired format of the date\n     * @param  date Date - the date value to format\n     * @param  settings Object - attributes include:\n     *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n     *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n     *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n     *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n     * @return  string - the date in the above format\n     */\n    formatDate: function formatDate(format, date, settings) {\n      if (!date) {\n        return \"\";\n      }\n\n      var iFormat,\n          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      },\n          // Format a number, with leading zero if necessary\n      formatNumber = function formatNumber(match, value, len) {\n        var num = \"\" + value;\n\n        if (lookAhead(match)) {\n          while (num.length < len) {\n            num = \"0\" + num;\n          }\n        }\n\n        return num;\n      },\n          // Format a name, short or long as requested\n      formatName = function formatName(match, value, shortNames, longNames) {\n        return lookAhead(match) ? longNames[value] : shortNames[value];\n      },\n          output = \"\",\n          literal = false;\n\n      if (date) {\n        for (iFormat = 0; iFormat < format.length; iFormat++) {\n          if (literal) {\n            if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n              literal = false;\n            } else {\n              output += format.charAt(iFormat);\n            }\n          } else {\n            switch (format.charAt(iFormat)) {\n              case \"d\":\n                output += formatNumber(\"d\", date.getDate(), 2);\n                break;\n\n              case \"D\":\n                output += formatName(\"D\", date.getDay(), dayNamesShort, dayNames);\n                break;\n\n              case \"o\":\n                output += formatNumber(\"o\", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n                break;\n\n              case \"m\":\n                output += formatNumber(\"m\", date.getMonth() + 1, 2);\n                break;\n\n              case \"M\":\n                output += formatName(\"M\", date.getMonth(), monthNamesShort, monthNames);\n                break;\n\n              case \"y\":\n                output += lookAhead(\"y\") ? date.getFullYear() : (date.getYear() % 100 < 10 ? \"0\" : \"\") + date.getYear() % 100;\n                break;\n\n              case \"@\":\n                output += date.getTime();\n                break;\n\n              case \"!\":\n                output += date.getTime() * 10000 + this._ticksTo1970;\n                break;\n\n              case \"'\":\n                if (lookAhead(\"'\")) {\n                  output += \"'\";\n                } else {\n                  literal = true;\n                }\n\n                break;\n\n              default:\n                output += format.charAt(iFormat);\n            }\n          }\n        }\n      }\n\n      return output;\n    },\n\n    /* Extract all possible characters from the date format. */\n    _possibleChars: function _possibleChars(format) {\n      var iFormat,\n          chars = \"\",\n          literal = false,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      };\n\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n            literal = false;\n          } else {\n            chars += format.charAt(iFormat);\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case \"d\":\n            case \"m\":\n            case \"y\":\n            case \"@\":\n              chars += \"0123456789\";\n              break;\n\n            case \"D\":\n            case \"M\":\n              return null;\n            // Accept anything\n\n            case \"'\":\n              if (lookAhead(\"'\")) {\n                chars += \"'\";\n              } else {\n                literal = true;\n              }\n\n              break;\n\n            default:\n              chars += format.charAt(iFormat);\n          }\n        }\n      }\n\n      return chars;\n    },\n\n    /* Get a setting value, defaulting if necessary. */\n    _get: function _get(inst, name) {\n      return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];\n    },\n\n    /* Parse existing date and initialise date picker. */\n    _setDateFromField: function _setDateFromField(inst, noDefault) {\n      if (inst.input.val() === inst.lastVal) {\n        return;\n      }\n\n      var dateFormat = this._get(inst, \"dateFormat\"),\n          dates = inst.lastVal = inst.input ? inst.input.val() : null,\n          defaultDate = this._getDefaultDate(inst),\n          date = defaultDate,\n          settings = this._getFormatConfig(inst);\n\n      try {\n        date = this.parseDate(dateFormat, dates, settings) || defaultDate;\n      } catch (event) {\n        dates = noDefault ? \"\" : dates;\n      }\n\n      inst.selectedDay = date.getDate();\n      inst.drawMonth = inst.selectedMonth = date.getMonth();\n      inst.drawYear = inst.selectedYear = date.getFullYear();\n      inst.currentDay = dates ? date.getDate() : 0;\n      inst.currentMonth = dates ? date.getMonth() : 0;\n      inst.currentYear = dates ? date.getFullYear() : 0;\n\n      this._adjustInstDate(inst);\n    },\n\n    /* Retrieve the default date shown on opening. */\n    _getDefaultDate: function _getDefaultDate(inst) {\n      return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, \"defaultDate\"), new Date()));\n    },\n\n    /* A date may be specified as an exact value or a relative one. */\n    _determineDate: function _determineDate(inst, date, defaultDate) {\n      var offsetNumeric = function offsetNumeric(offset) {\n        var date = new Date();\n        date.setDate(date.getDate() + offset);\n        return date;\n      },\n          offsetString = function offsetString(offset) {\n        try {\n          return $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), offset, $.datepicker._getFormatConfig(inst));\n        } catch (e) {// Ignore\n        }\n\n        var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(),\n            year = date.getFullYear(),\n            month = date.getMonth(),\n            day = date.getDate(),\n            pattern = /([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,\n            matches = pattern.exec(offset);\n\n        while (matches) {\n          switch (matches[2] || \"d\") {\n            case \"d\":\n            case \"D\":\n              day += parseInt(matches[1], 10);\n              break;\n\n            case \"w\":\n            case \"W\":\n              day += parseInt(matches[1], 10) * 7;\n              break;\n\n            case \"m\":\n            case \"M\":\n              month += parseInt(matches[1], 10);\n              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n              break;\n\n            case \"y\":\n            case \"Y\":\n              year += parseInt(matches[1], 10);\n              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n              break;\n          }\n\n          matches = pattern.exec(offset);\n        }\n\n        return new Date(year, month, day);\n      },\n          newDate = date == null || date === \"\" ? defaultDate : typeof date === \"string\" ? offsetString(date) : typeof date === \"number\" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());\n\n      newDate = newDate && newDate.toString() === \"Invalid Date\" ? defaultDate : newDate;\n\n      if (newDate) {\n        newDate.setHours(0);\n        newDate.setMinutes(0);\n        newDate.setSeconds(0);\n        newDate.setMilliseconds(0);\n      }\n\n      return this._daylightSavingAdjust(newDate);\n    },\n\n    /* Handle switch to/from daylight saving.\n     * Hours may be non-zero on daylight saving cut-over:\n     * > 12 when midnight changeover, but then cannot generate\n     * midnight datetime, so jump to 1AM, otherwise reset.\n     * @param  date  (Date) the date to check\n     * @return  (Date) the corrected date\n     */\n    _daylightSavingAdjust: function _daylightSavingAdjust(date) {\n      if (!date) {\n        return null;\n      }\n\n      date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n      return date;\n    },\n\n    /* Set the date(s) directly. */\n    _setDate: function _setDate(inst, date, noChange) {\n      var clear = !date,\n          origMonth = inst.selectedMonth,\n          origYear = inst.selectedYear,\n          newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));\n\n      inst.selectedDay = inst.currentDay = newDate.getDate();\n      inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\n      inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\n\n      if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {\n        this._notifyChange(inst);\n      }\n\n      this._adjustInstDate(inst);\n\n      if (inst.input) {\n        inst.input.val(clear ? \"\" : this._formatDate(inst));\n      }\n    },\n\n    /* Retrieve the date(s) directly. */\n    _getDate: function _getDate(inst) {\n      var startDate = !inst.currentYear || inst.input && inst.input.val() === \"\" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n      return startDate;\n    },\n\n    /* Attach the onxxx handlers.  These are declared statically so\n     * they work with static code transformers like Caja.\n     */\n    _attachHandlers: function _attachHandlers(inst) {\n      var stepMonths = this._get(inst, \"stepMonths\"),\n          id = \"#\" + inst.id.replace(/\\\\\\\\/g, \"\\\\\");\n\n      inst.dpDiv.find(\"[data-handler]\").map(function () {\n        var handler = {\n          prev: function prev() {\n            $.datepicker._adjustDate(id, -stepMonths, \"M\");\n          },\n          next: function next() {\n            $.datepicker._adjustDate(id, +stepMonths, \"M\");\n          },\n          hide: function hide() {\n            $.datepicker._hideDatepicker();\n          },\n          today: function today() {\n            $.datepicker._gotoToday(id);\n          },\n          selectDay: function selectDay() {\n            $.datepicker._selectDay(id, +this.getAttribute(\"data-month\"), +this.getAttribute(\"data-year\"), this);\n\n            return false;\n          },\n          selectMonth: function selectMonth() {\n            $.datepicker._selectMonthYear(id, this, \"M\");\n\n            return false;\n          },\n          selectYear: function selectYear() {\n            $.datepicker._selectMonthYear(id, this, \"Y\");\n\n            return false;\n          }\n        };\n        $(this).bind(this.getAttribute(\"data-event\"), handler[this.getAttribute(\"data-handler\")]);\n      });\n    },\n\n    /* Generate the HTML for the current state of the date picker. */\n    _generateHTML: function _generateHTML(inst) {\n      var maxDraw,\n          prevText,\n          prev,\n          nextText,\n          next,\n          currentText,\n          gotoDate,\n          controls,\n          buttonPanel,\n          firstDay,\n          showWeek,\n          dayNames,\n          dayNamesMin,\n          monthNames,\n          monthNamesShort,\n          beforeShowDay,\n          showOtherMonths,\n          selectOtherMonths,\n          defaultDate,\n          html,\n          dow,\n          row,\n          group,\n          col,\n          selectedDate,\n          cornerClass,\n          calender,\n          thead,\n          day,\n          daysInMonth,\n          leadDays,\n          curRows,\n          numRows,\n          printDate,\n          dRow,\n          tbody,\n          daySettings,\n          otherMonth,\n          unselectable,\n          tempDate = new Date(),\n          today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())),\n          // clear time\n      isRTL = this._get(inst, \"isRTL\"),\n          showButtonPanel = this._get(inst, \"showButtonPanel\"),\n          hideIfNoPrevNext = this._get(inst, \"hideIfNoPrevNext\"),\n          navigationAsDateFormat = this._get(inst, \"navigationAsDateFormat\"),\n          numMonths = this._getNumberOfMonths(inst),\n          showCurrentAtPos = this._get(inst, \"showCurrentAtPos\"),\n          stepMonths = this._get(inst, \"stepMonths\"),\n          isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1,\n          currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\n          minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          drawMonth = inst.drawMonth - showCurrentAtPos,\n          drawYear = inst.drawYear;\n\n      if (drawMonth < 0) {\n        drawMonth += 12;\n        drawYear--;\n      }\n\n      if (maxDate) {\n        maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\n        maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\n\n        while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\n          drawMonth--;\n\n          if (drawMonth < 0) {\n            drawMonth = 11;\n            drawYear--;\n          }\n        }\n      }\n\n      inst.drawMonth = drawMonth;\n      inst.drawYear = drawYear;\n      prevText = this._get(inst, \"prevText\");\n      prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));\n      prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? \"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'\" + \" title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\";\n      nextText = this._get(inst, \"nextText\");\n      nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));\n      next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? \"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'\" + \" title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\";\n      currentText = this._get(inst, \"currentText\");\n      gotoDate = this._get(inst, \"gotoCurrent\") && inst.currentDay ? currentDate : today;\n      currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\n      controls = !inst.inline ? \"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>\" + this._get(inst, \"closeText\") + \"</button>\" : \"\";\n      buttonPanel = showButtonPanel ? \"<div class='ui-datepicker-buttonpane ui-widget-content'>\" + (isRTL ? controls : \"\") + (this._isInRange(inst, gotoDate) ? \"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'\" + \">\" + currentText + \"</button>\" : \"\") + (isRTL ? \"\" : controls) + \"</div>\" : \"\";\n      firstDay = parseInt(this._get(inst, \"firstDay\"), 10);\n      firstDay = isNaN(firstDay) ? 0 : firstDay;\n      showWeek = this._get(inst, \"showWeek\");\n      dayNames = this._get(inst, \"dayNames\");\n      dayNamesMin = this._get(inst, \"dayNamesMin\");\n      monthNames = this._get(inst, \"monthNames\");\n      monthNamesShort = this._get(inst, \"monthNamesShort\");\n      beforeShowDay = this._get(inst, \"beforeShowDay\");\n      showOtherMonths = this._get(inst, \"showOtherMonths\");\n      selectOtherMonths = this._get(inst, \"selectOtherMonths\");\n      defaultDate = this._getDefaultDate(inst);\n      html = \"\";\n      dow;\n\n      for (row = 0; row < numMonths[0]; row++) {\n        group = \"\";\n        this.maxRows = 4;\n\n        for (col = 0; col < numMonths[1]; col++) {\n          selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\n          cornerClass = \" ui-corner-all\";\n          calender = \"\";\n\n          if (isMultiMonth) {\n            calender += \"<div class='ui-datepicker-group\";\n\n            if (numMonths[1] > 1) {\n              switch (col) {\n                case 0:\n                  calender += \" ui-datepicker-group-first\";\n                  cornerClass = \" ui-corner-\" + (isRTL ? \"right\" : \"left\");\n                  break;\n\n                case numMonths[1] - 1:\n                  calender += \" ui-datepicker-group-last\";\n                  cornerClass = \" ui-corner-\" + (isRTL ? \"left\" : \"right\");\n                  break;\n\n                default:\n                  calender += \" ui-datepicker-group-middle\";\n                  cornerClass = \"\";\n                  break;\n              }\n            }\n\n            calender += \"'>\";\n          }\n\n          calender += \"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\" + cornerClass + \"'>\" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : \"\") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : \"\") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\n          \"</div><table class='ui-datepicker-calendar'><thead>\" + \"<tr>\";\n          thead = showWeek ? \"<th class='ui-datepicker-week-col'>\" + this._get(inst, \"weekHeader\") + \"</th>\" : \"\";\n\n          for (dow = 0; dow < 7; dow++) {\n            // days of the week\n            day = (dow + firstDay) % 7;\n            thead += \"<th scope='col'\" + ((dow + firstDay + 6) % 7 >= 5 ? \" class='ui-datepicker-week-end'\" : \"\") + \">\" + \"<span title='\" + dayNames[day] + \"'>\" + dayNamesMin[day] + \"</span></th>\";\n          }\n\n          calender += thead + \"</tr></thead><tbody>\";\n          daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\n\n          if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\n            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\n          }\n\n          leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\n          curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\n\n          numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows; //If multiple months, use the higher number of rows (see #7043)\n\n          this.maxRows = numRows;\n          printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\n\n          for (dRow = 0; dRow < numRows; dRow++) {\n            // create date picker rows\n            calender += \"<tr>\";\n            tbody = !showWeek ? \"\" : \"<td class='ui-datepicker-week-col'>\" + this._get(inst, \"calculateWeek\")(printDate) + \"</td>\";\n\n            for (dow = 0; dow < 7; dow++) {\n              // create date picker days\n              daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, \"\"];\n              otherMonth = printDate.getMonth() !== drawMonth;\n              unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;\n              tbody += \"<td class='\" + ((dow + firstDay + 6) % 7 >= 5 ? \" ui-datepicker-week-end\" : \"\") + ( // highlight weekends\n              otherMonth ? \" ui-datepicker-other-month\" : \"\") + ( // highlight days from other months\n              printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\n              defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? // or defaultDate is current printedDate and defaultDate is selectedDate\n              \" \" + this._dayOverClass : \"\") + ( // highlight selected day\n              unselectable ? \" \" + this._unselectableClass + \" ui-state-disabled\" : \"\") + ( // highlight unselectable days\n              otherMonth && !showOtherMonths ? \"\" : \" \" + daySettings[1] + ( // highlight custom dates\n              printDate.getTime() === currentDate.getTime() ? \" \" + this._currentClass : \"\") + ( // highlight selected day\n              printDate.getTime() === today.getTime() ? \" ui-datepicker-today\" : \"\")) + \"'\" + ( // highlight today (if different)\n              (!otherMonth || showOtherMonths) && daySettings[2] ? \" title='\" + daySettings[2].replace(/'/g, \"&#39;\") + \"'\" : \"\") + ( // cell title\n              unselectable ? \"\" : \" data-handler='selectDay' data-event='click' data-month='\" + printDate.getMonth() + \"' data-year='\" + printDate.getFullYear() + \"'\") + \">\" + ( // actions\n              otherMonth && !showOtherMonths ? \"&#xa0;\" : // display for other months\n              unselectable ? \"<span class='ui-state-default'>\" + printDate.getDate() + \"</span>\" : \"<a class='ui-state-default\" + (printDate.getTime() === today.getTime() ? \" ui-state-highlight\" : \"\") + (printDate.getTime() === currentDate.getTime() ? \" ui-state-active\" : \"\") + ( // highlight selected day\n              otherMonth ? \" ui-priority-secondary\" : \"\") + // distinguish dates from other months\n              \"' href='#'>\" + printDate.getDate() + \"</a>\") + \"</td>\"; // display selectable date\n\n              printDate.setDate(printDate.getDate() + 1);\n              printDate = this._daylightSavingAdjust(printDate);\n            }\n\n            calender += tbody + \"</tr>\";\n          }\n\n          drawMonth++;\n\n          if (drawMonth > 11) {\n            drawMonth = 0;\n            drawYear++;\n          }\n\n          calender += \"</tbody></table>\" + (isMultiMonth ? \"</div>\" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? \"<div class='ui-datepicker-row-break'></div>\" : \"\") : \"\");\n          group += calender;\n        }\n\n        html += group;\n      }\n\n      html += buttonPanel;\n      inst._keyEvent = false;\n      return html;\n    },\n\n    /* Generate the month and year header. */\n    _generateMonthYearHeader: function _generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {\n      var inMinYear,\n          inMaxYear,\n          month,\n          years,\n          thisYear,\n          determineYear,\n          year,\n          endYear,\n          changeMonth = this._get(inst, \"changeMonth\"),\n          changeYear = this._get(inst, \"changeYear\"),\n          showMonthAfterYear = this._get(inst, \"showMonthAfterYear\"),\n          html = \"<div class='ui-datepicker-title'>\",\n          monthHtml = \"\"; // month selection\n\n\n      if (secondary || !changeMonth) {\n        monthHtml += \"<span class='ui-datepicker-month'>\" + monthNames[drawMonth] + \"</span>\";\n      } else {\n        inMinYear = minDate && minDate.getFullYear() === drawYear;\n        inMaxYear = maxDate && maxDate.getFullYear() === drawYear;\n        monthHtml += \"<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>\";\n\n        for (month = 0; month < 12; month++) {\n          if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {\n            monthHtml += \"<option value='\" + month + \"'\" + (month === drawMonth ? \" selected='selected'\" : \"\") + \">\" + monthNamesShort[month] + \"</option>\";\n          }\n        }\n\n        monthHtml += \"</select>\";\n      }\n\n      if (!showMonthAfterYear) {\n        html += monthHtml + (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\");\n      } // year selection\n\n\n      if (!inst.yearshtml) {\n        inst.yearshtml = \"\";\n\n        if (secondary || !changeYear) {\n          html += \"<span class='ui-datepicker-year'>\" + drawYear + \"</span>\";\n        } else {\n          // determine range of years to display\n          years = this._get(inst, \"yearRange\").split(\":\");\n          thisYear = new Date().getFullYear();\n\n          determineYear = function determineYear(value) {\n            var year = value.match(/c[+\\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);\n            return isNaN(year) ? thisYear : year;\n          };\n\n          year = determineYear(years[0]);\n          endYear = Math.max(year, determineYear(years[1] || \"\"));\n          year = minDate ? Math.max(year, minDate.getFullYear()) : year;\n          endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;\n          inst.yearshtml += \"<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>\";\n\n          for (; year <= endYear; year++) {\n            inst.yearshtml += \"<option value='\" + year + \"'\" + (year === drawYear ? \" selected='selected'\" : \"\") + \">\" + year + \"</option>\";\n          }\n\n          inst.yearshtml += \"</select>\";\n          html += inst.yearshtml;\n          inst.yearshtml = null;\n        }\n      }\n\n      html += this._get(inst, \"yearSuffix\");\n\n      if (showMonthAfterYear) {\n        html += (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\") + monthHtml;\n      }\n\n      html += \"</div>\"; // Close datepicker_header\n\n      return html;\n    },\n\n    /* Adjust one of the date sub-fields. */\n    _adjustInstDate: function _adjustInstDate(inst, offset, period) {\n      var year = inst.drawYear + (period === \"Y\" ? offset : 0),\n          month = inst.drawMonth + (period === \"M\" ? offset : 0),\n          day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === \"D\" ? offset : 0),\n          date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));\n\n      inst.selectedDay = date.getDate();\n      inst.drawMonth = inst.selectedMonth = date.getMonth();\n      inst.drawYear = inst.selectedYear = date.getFullYear();\n\n      if (period === \"M\" || period === \"Y\") {\n        this._notifyChange(inst);\n      }\n    },\n\n    /* Ensure a date is within any min/max bounds. */\n    _restrictMinMax: function _restrictMinMax(inst, date) {\n      var minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          newDate = minDate && date < minDate ? minDate : date;\n\n      return maxDate && newDate > maxDate ? maxDate : newDate;\n    },\n\n    /* Notify change of month/year. */\n    _notifyChange: function _notifyChange(inst) {\n      var onChange = this._get(inst, \"onChangeMonthYear\");\n\n      if (onChange) {\n        onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);\n      }\n    },\n\n    /* Determine the number of months to show. */\n    _getNumberOfMonths: function _getNumberOfMonths(inst) {\n      var numMonths = this._get(inst, \"numberOfMonths\");\n\n      return numMonths == null ? [1, 1] : typeof numMonths === \"number\" ? [1, numMonths] : numMonths;\n    },\n\n    /* Determine the current maximum date - ensure no time components are set. */\n    _getMinMaxDate: function _getMinMaxDate(inst, minMax) {\n      return this._determineDate(inst, this._get(inst, minMax + \"Date\"), null);\n    },\n\n    /* Find the number of days in a given month. */\n    _getDaysInMonth: function _getDaysInMonth(year, month) {\n      return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();\n    },\n\n    /* Find the day of the week of the first of a month. */\n    _getFirstDayOfMonth: function _getFirstDayOfMonth(year, month) {\n      return new Date(year, month, 1).getDay();\n    },\n\n    /* Determines if we should allow a \"next/prev\" month display change. */\n    _canAdjustMonth: function _canAdjustMonth(inst, offset, curYear, curMonth) {\n      var numMonths = this._getNumberOfMonths(inst),\n          date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));\n\n      if (offset < 0) {\n        date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));\n      }\n\n      return this._isInRange(inst, date);\n    },\n\n    /* Is the given date in the accepted range? */\n    _isInRange: function _isInRange(inst, date) {\n      var yearSplit,\n          currentYear,\n          minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          minYear = null,\n          maxYear = null,\n          years = this._get(inst, \"yearRange\");\n\n      if (years) {\n        yearSplit = years.split(\":\");\n        currentYear = new Date().getFullYear();\n        minYear = parseInt(yearSplit[0], 10);\n        maxYear = parseInt(yearSplit[1], 10);\n\n        if (yearSplit[0].match(/[+\\-].*/)) {\n          minYear += currentYear;\n        }\n\n        if (yearSplit[1].match(/[+\\-].*/)) {\n          maxYear += currentYear;\n        }\n      }\n\n      return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);\n    },\n\n    /* Provide the configuration settings for formatting/parsing. */\n    _getFormatConfig: function _getFormatConfig(inst) {\n      var shortYearCutoff = this._get(inst, \"shortYearCutoff\");\n\n      shortYearCutoff = typeof shortYearCutoff !== \"string\" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);\n      return {\n        shortYearCutoff: shortYearCutoff,\n        dayNamesShort: this._get(inst, \"dayNamesShort\"),\n        dayNames: this._get(inst, \"dayNames\"),\n        monthNamesShort: this._get(inst, \"monthNamesShort\"),\n        monthNames: this._get(inst, \"monthNames\")\n      };\n    },\n\n    /* Format the given date for display. */\n    _formatDate: function _formatDate(inst, day, month, year) {\n      if (!day) {\n        inst.currentDay = inst.selectedDay;\n        inst.currentMonth = inst.selectedMonth;\n        inst.currentYear = inst.selectedYear;\n      }\n\n      var date = day ? _typeof(day) === \"object\" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n      return this.formatDate(this._get(inst, \"dateFormat\"), date, this._getFormatConfig(inst));\n    }\n  });\n  /*\n   * Bind hover events for datepicker elements.\n   * Done via delegate so the binding only occurs once in the lifetime of the parent div.\n   * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\n   */\n\n  function datepicker_bindHover(dpDiv) {\n    var selector = \"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";\n    return dpDiv.delegate(selector, \"mouseout\", function () {\n      $(this).removeClass(\"ui-state-hover\");\n\n      if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n        $(this).removeClass(\"ui-datepicker-prev-hover\");\n      }\n\n      if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n        $(this).removeClass(\"ui-datepicker-next-hover\");\n      }\n    }).delegate(selector, \"mouseover\", datepicker_handleMouseover);\n  }\n\n  function datepicker_handleMouseover() {\n    if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {\n      $(this).parents(\".ui-datepicker-calendar\").find(\"a\").removeClass(\"ui-state-hover\");\n      $(this).addClass(\"ui-state-hover\");\n\n      if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n        $(this).addClass(\"ui-datepicker-prev-hover\");\n      }\n\n      if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n        $(this).addClass(\"ui-datepicker-next-hover\");\n      }\n    }\n  }\n  /* jQuery extend now ignores nulls! */\n\n\n  function datepicker_extendRemove(target, props) {\n    $.extend(target, props);\n\n    for (var name in props) {\n      if (props[name] == null) {\n        target[name] = props[name];\n      }\n    }\n\n    return target;\n  }\n  /* Invoke the datepicker functionality.\n     @param  options  string - a command, optionally followed by additional parameters or\n  \t\t\t\t\tObject - settings for attaching new datepicker functionality\n     @return  jQuery object */\n\n\n  $.fn.datepicker = function (options) {\n    /* Verify an empty collection wasn't passed - Fixes #6976 */\n    if (!this.length) {\n      return this;\n    }\n    /* Initialise the date picker. */\n\n\n    if (!$.datepicker.initialized) {\n      $(document).mousedown($.datepicker._checkExternalClick);\n      $.datepicker.initialized = true;\n    }\n    /* Append datepicker main container to body if not exist. */\n\n\n    if ($(\"#\" + $.datepicker._mainDivId).length === 0) {\n      $(\"body\").append($.datepicker.dpDiv);\n    }\n\n    var otherArgs = Array.prototype.slice.call(arguments, 1);\n\n    if (typeof options === \"string\" && (options === \"isDisabled\" || options === \"getDate\" || options === \"widget\")) {\n      return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n    }\n\n    if (options === \"option\" && arguments.length === 2 && typeof arguments[1] === \"string\") {\n      return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n    }\n\n    return this.each(function () {\n      typeof options === \"string\" ? $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);\n    });\n  };\n\n  $.datepicker = new Datepicker(); // singleton instance\n\n  $.datepicker.initialized = false;\n  $.datepicker.uuid = new Date().getTime();\n  $.datepicker.version = \"1.11.4\";\n  var datepicker = $.datepicker;\n  /*!\n   * jQuery UI Draggable 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/draggable/\n   */\n\n  $.widget(\"ui.draggable\", $.ui.mouse, {\n    version: \"1.11.4\",\n    widgetEventPrefix: \"drag\",\n    options: {\n      addClasses: true,\n      appendTo: \"parent\",\n      axis: false,\n      connectToSortable: false,\n      containment: false,\n      cursor: \"auto\",\n      cursorAt: false,\n      grid: false,\n      handle: false,\n      helper: \"original\",\n      iframeFix: false,\n      opacity: false,\n      refreshPositions: false,\n      revert: false,\n      revertDuration: 500,\n      scope: \"default\",\n      scroll: true,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      snap: false,\n      snapMode: \"both\",\n      snapTolerance: 20,\n      stack: false,\n      zIndex: false,\n      // callbacks\n      drag: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      if (this.options.helper === \"original\") {\n        this._setPositionRelative();\n      }\n\n      if (this.options.addClasses) {\n        this.element.addClass(\"ui-draggable\");\n      }\n\n      if (this.options.disabled) {\n        this.element.addClass(\"ui-draggable-disabled\");\n      }\n\n      this._setHandleClassName();\n\n      this._mouseInit();\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"handle\") {\n        this._removeHandleClassName();\n\n        this._setHandleClassName();\n      }\n    },\n    _destroy: function _destroy() {\n      if ((this.helper || this.element).is(\".ui-draggable-dragging\")) {\n        this.destroyOnClear = true;\n        return;\n      }\n\n      this.element.removeClass(\"ui-draggable ui-draggable-dragging ui-draggable-disabled\");\n\n      this._removeHandleClassName();\n\n      this._mouseDestroy();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var o = this.options;\n\n      this._blurActiveElement(event); // among others, prevent a drag on a resizable-handle\n\n\n      if (this.helper || o.disabled || $(event.target).closest(\".ui-resizable-handle\").length > 0) {\n        return false;\n      } //Quit if we're not on a valid handle\n\n\n      this.handle = this._getHandle(event);\n\n      if (!this.handle) {\n        return false;\n      }\n\n      this._blockFrames(o.iframeFix === true ? \"iframe\" : o.iframeFix);\n\n      return true;\n    },\n    _blockFrames: function _blockFrames(selector) {\n      this.iframeBlocks = this.document.find(selector).map(function () {\n        var iframe = $(this);\n        return $(\"<div>\").css(\"position\", \"absolute\").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];\n      });\n    },\n    _unblockFrames: function _unblockFrames() {\n      if (this.iframeBlocks) {\n        this.iframeBlocks.remove();\n        delete this.iframeBlocks;\n      }\n    },\n    _blurActiveElement: function _blurActiveElement(event) {\n      var document = this.document[0]; // Only need to blur if the event occurred on the draggable itself, see #10527\n\n      if (!this.handleElement.is(event.target)) {\n        return;\n      } // support: IE9\n      // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n\n\n      try {\n        // Support: IE9, IE10\n        // If the <body> is blurred, IE will switch windows, see #9520\n        if (document.activeElement && document.activeElement.nodeName.toLowerCase() !== \"body\") {\n          // Blur any element that currently has focus, see #4261\n          $(document.activeElement).blur();\n        }\n      } catch (error) {}\n    },\n    _mouseStart: function _mouseStart(event) {\n      var o = this.options; //Create and append the visible helper\n\n      this.helper = this._createHelper(event);\n      this.helper.addClass(\"ui-draggable-dragging\"); //Cache the helper size\n\n      this._cacheHelperProportions(); //If ddmanager is used for droppables, set the global draggable\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.current = this;\n      }\n      /*\n       * - Position generation -\n       * This block generates everything position related - it's the core of draggables.\n       */\n      //Cache the margins of the original element\n\n\n      this._cacheMargins(); //Store the helper's css position\n\n\n      this.cssPosition = this.helper.css(\"position\");\n      this.scrollParent = this.helper.scrollParent(true);\n      this.offsetParent = this.helper.offsetParent();\n      this.hasFixedAncestor = this.helper.parents().filter(function () {\n        return $(this).css(\"position\") === \"fixed\";\n      }).length > 0; //The element's absolute position on the page minus margins\n\n      this.positionAbs = this.element.offset();\n\n      this._refreshOffsets(event); //Generate the original position\n\n\n      this.originalPosition = this.position = this._generatePosition(event, false);\n      this.originalPageX = event.pageX;\n      this.originalPageY = event.pageY; //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\n      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt); //Set a containment if given in the options\n\n      this._setContainment(); //Trigger event + callbacks\n\n\n      if (this._trigger(\"start\", event) === false) {\n        this._clear();\n\n        return false;\n      } //Recache the helper size\n\n\n      this._cacheHelperProportions(); //Prepare the droppable offsets\n\n\n      if ($.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(this, event);\n      } // Reset helper's right/bottom css if they're set and set explicit width/height instead\n      // as this prevents resizing of elements with right/bottom set (see #7772)\n\n\n      this._normalizeRightBottom();\n\n      this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position\n      //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStart(this, event);\n      }\n\n      return true;\n    },\n    _refreshOffsets: function _refreshOffsets(event) {\n      this.offset = {\n        top: this.positionAbs.top - this.margins.top,\n        left: this.positionAbs.left - this.margins.left,\n        scroll: false,\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset()\n      };\n      this.offset.click = {\n        left: event.pageX - this.offset.left,\n        top: event.pageY - this.offset.top\n      };\n    },\n    _mouseDrag: function _mouseDrag(event, noPropagation) {\n      // reset any necessary cached properties (see #5009)\n      if (this.hasFixedAncestor) {\n        this.offset.parent = this._getParentOffset();\n      } //Compute the helpers position\n\n\n      this.position = this._generatePosition(event, true);\n      this.positionAbs = this._convertPositionTo(\"absolute\"); //Call plugins and callbacks and use the resulting position if something is returned\n\n      if (!noPropagation) {\n        var ui = this._uiHash();\n\n        if (this._trigger(\"drag\", event, ui) === false) {\n          this._mouseUp({});\n\n          return false;\n        }\n\n        this.position = ui.position;\n      }\n\n      this.helper[0].style.left = this.position.left + \"px\";\n      this.helper[0].style.top = this.position.top + \"px\";\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.drag(this, event);\n      }\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      //If we are using droppables, inform the manager about the drop\n      var that = this,\n          dropped = false;\n\n      if ($.ui.ddmanager && !this.options.dropBehaviour) {\n        dropped = $.ui.ddmanager.drop(this, event);\n      } //if a drop comes from outside (a sortable)\n\n\n      if (this.dropped) {\n        dropped = this.dropped;\n        this.dropped = false;\n      }\n\n      if (this.options.revert === \"invalid\" && !dropped || this.options.revert === \"valid\" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {\n        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {\n          if (that._trigger(\"stop\", event) !== false) {\n            that._clear();\n          }\n        });\n      } else {\n        if (this._trigger(\"stop\", event) !== false) {\n          this._clear();\n        }\n      }\n\n      return false;\n    },\n    _mouseUp: function _mouseUp(event) {\n      this._unblockFrames(); //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStop(this, event);\n      } // Only need to focus if the event occurred on the draggable itself, see #10527\n\n\n      if (this.handleElement.is(event.target)) {\n        // The interaction is over; whether or not the click resulted in a drag, focus the element\n        this.element.focus();\n      }\n\n      return $.ui.mouse.prototype._mouseUp.call(this, event);\n    },\n    cancel: function cancel() {\n      if (this.helper.is(\".ui-draggable-dragging\")) {\n        this._mouseUp({});\n      } else {\n        this._clear();\n      }\n\n      return this;\n    },\n    _getHandle: function _getHandle(event) {\n      return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;\n    },\n    _setHandleClassName: function _setHandleClassName() {\n      this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;\n      this.handleElement.addClass(\"ui-draggable-handle\");\n    },\n    _removeHandleClassName: function _removeHandleClassName() {\n      this.handleElement.removeClass(\"ui-draggable-handle\");\n    },\n    _createHelper: function _createHelper(event) {\n      var o = this.options,\n          helperIsFunction = $.isFunction(o.helper),\n          helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === \"clone\" ? this.element.clone().removeAttr(\"id\") : this.element;\n\n      if (!helper.parents(\"body\").length) {\n        helper.appendTo(o.appendTo === \"parent\" ? this.element[0].parentNode : o.appendTo);\n      } // http://bugs.jqueryui.com/ticket/9446\n      // a helper function can return the original element\n      // which wouldn't have been set to relative in _create\n\n\n      if (helperIsFunction && helper[0] === this.element[0]) {\n        this._setPositionRelative();\n      }\n\n      if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css(\"position\"))) {\n        helper.css(\"position\", \"absolute\");\n      }\n\n      return helper;\n    },\n    _setPositionRelative: function _setPositionRelative() {\n      if (!/^(?:r|a|f)/.test(this.element.css(\"position\"))) {\n        this.element[0].style.position = \"relative\";\n      }\n    },\n    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n      if (typeof obj === \"string\") {\n        obj = obj.split(\" \");\n      }\n\n      if ($.isArray(obj)) {\n        obj = {\n          left: +obj[0],\n          top: +obj[1] || 0\n        };\n      }\n\n      if (\"left\" in obj) {\n        this.offset.click.left = obj.left + this.margins.left;\n      }\n\n      if (\"right\" in obj) {\n        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n      }\n\n      if (\"top\" in obj) {\n        this.offset.click.top = obj.top + this.margins.top;\n      }\n\n      if (\"bottom\" in obj) {\n        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n      }\n    },\n    _isRootNode: function _isRootNode(element) {\n      return /(html|body)/i.test(element.tagName) || element === this.document[0];\n    },\n    _getParentOffset: function _getParentOffset() {\n      //Get the offsetParent and cache its position\n      var po = this.offsetParent.offset(),\n          document = this.document[0]; // This is a special case where we need to modify a offset calculated on start, since the following happened:\n      // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\n      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\n      //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\n\n      if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n        po.left += this.scrollParent.scrollLeft();\n        po.top += this.scrollParent.scrollTop();\n      }\n\n      if (this._isRootNode(this.offsetParent[0])) {\n        po = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      return {\n        top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function _getRelativeOffset() {\n      if (this.cssPosition !== \"relative\") {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n\n      var p = this.element.position(),\n          scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n\n      return {\n        top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),\n        left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)\n      };\n    },\n    _cacheMargins: function _cacheMargins() {\n      this.margins = {\n        left: parseInt(this.element.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.element.css(\"marginTop\"), 10) || 0,\n        right: parseInt(this.element.css(\"marginRight\"), 10) || 0,\n        bottom: parseInt(this.element.css(\"marginBottom\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function _cacheHelperProportions() {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function _setContainment() {\n      var isUserScrollable,\n          c,\n          ce,\n          o = this.options,\n          document = this.document[0];\n      this.relativeContainer = null;\n\n      if (!o.containment) {\n        this.containment = null;\n        return;\n      }\n\n      if (o.containment === \"window\") {\n        this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n        return;\n      }\n\n      if (o.containment === \"document\") {\n        this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n        return;\n      }\n\n      if (o.containment.constructor === Array) {\n        this.containment = o.containment;\n        return;\n      }\n\n      if (o.containment === \"parent\") {\n        o.containment = this.helper[0].parentNode;\n      }\n\n      c = $(o.containment);\n      ce = c[0];\n\n      if (!ce) {\n        return;\n      }\n\n      isUserScrollable = /(scroll|auto)/.test(c.css(\"overflow\"));\n      this.containment = [(parseInt(c.css(\"borderLeftWidth\"), 10) || 0) + (parseInt(c.css(\"paddingLeft\"), 10) || 0), (parseInt(c.css(\"borderTopWidth\"), 10) || 0) + (parseInt(c.css(\"paddingTop\"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css(\"borderRightWidth\"), 10) || 0) - (parseInt(c.css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css(\"borderBottomWidth\"), 10) || 0) - (parseInt(c.css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];\n      this.relativeContainer = c;\n    },\n    _convertPositionTo: function _convertPositionTo(d, pos) {\n      if (!pos) {\n        pos = this.position;\n      }\n\n      var mod = d === \"absolute\" ? 1 : -1,\n          scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n\n      return {\n        top: pos.top + // The absolute mouse position\n        this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,\n        left: pos.left + // The absolute mouse position\n        this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod\n      };\n    },\n    _generatePosition: function _generatePosition(event, constrainPosition) {\n      var containment,\n          co,\n          top,\n          left,\n          o = this.options,\n          scrollIsRootNode = this._isRootNode(this.scrollParent[0]),\n          pageX = event.pageX,\n          pageY = event.pageY; // Cache the scroll\n\n\n      if (!scrollIsRootNode || !this.offset.scroll) {\n        this.offset.scroll = {\n          top: this.scrollParent.scrollTop(),\n          left: this.scrollParent.scrollLeft()\n        };\n      }\n      /*\n       * - Position constraining -\n       * Constrain the position to a mix of grid, containment.\n       */\n      // If we are not dragging yet, we won't check for options\n\n\n      if (constrainPosition) {\n        if (this.containment) {\n          if (this.relativeContainer) {\n            co = this.relativeContainer.offset();\n            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];\n          } else {\n            containment = this.containment;\n          }\n\n          if (event.pageX - this.offset.click.left < containment[0]) {\n            pageX = containment[0] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top < containment[1]) {\n            pageY = containment[1] + this.offset.click.top;\n          }\n\n          if (event.pageX - this.offset.click.left > containment[2]) {\n            pageX = containment[2] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top > containment[3]) {\n            pageY = containment[3] + this.offset.click.top;\n          }\n        }\n\n        if (o.grid) {\n          //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)\n          top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;\n          pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n          left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;\n          pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n        }\n\n        if (o.axis === \"y\") {\n          pageX = this.originalPageX;\n        }\n\n        if (o.axis === \"x\") {\n          pageY = this.originalPageY;\n        }\n      }\n\n      return {\n        top: pageY - // The absolute mouse position\n        this.offset.click.top - // Click offset (relative to the element)\n        this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),\n        left: pageX - // The absolute mouse position\n        this.offset.click.left - // Click offset (relative to the element)\n        this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)\n      };\n    },\n    _clear: function _clear() {\n      this.helper.removeClass(\"ui-draggable-dragging\");\n\n      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {\n        this.helper.remove();\n      }\n\n      this.helper = null;\n      this.cancelHelperRemoval = false;\n\n      if (this.destroyOnClear) {\n        this.destroy();\n      }\n    },\n    _normalizeRightBottom: function _normalizeRightBottom() {\n      if (this.options.axis !== \"y\" && this.helper.css(\"right\") !== \"auto\") {\n        this.helper.width(this.helper.width());\n        this.helper.css(\"right\", \"auto\");\n      }\n\n      if (this.options.axis !== \"x\" && this.helper.css(\"bottom\") !== \"auto\") {\n        this.helper.height(this.helper.height());\n        this.helper.css(\"bottom\", \"auto\");\n      }\n    },\n    // From now on bulk stuff - mainly helpers\n    _trigger: function _trigger(type, event, ui) {\n      ui = ui || this._uiHash();\n      $.ui.plugin.call(this, type, [event, ui, this], true); // Absolute position and offset (see #6884 ) have to be recalculated after plugins\n\n      if (/^(drag|start|stop)/.test(type)) {\n        this.positionAbs = this._convertPositionTo(\"absolute\");\n        ui.offset = this.positionAbs;\n      }\n\n      return $.Widget.prototype._trigger.call(this, type, event, ui);\n    },\n    plugins: {},\n    _uiHash: function _uiHash() {\n      return {\n        helper: this.helper,\n        position: this.position,\n        originalPosition: this.originalPosition,\n        offset: this.positionAbs\n      };\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"connectToSortable\", {\n    start: function start(event, ui, draggable) {\n      var uiSortable = $.extend({}, ui, {\n        item: draggable.element\n      });\n      draggable.sortables = [];\n      $(draggable.options.connectToSortable).each(function () {\n        var sortable = $(this).sortable(\"instance\");\n\n        if (sortable && !sortable.options.disabled) {\n          draggable.sortables.push(sortable); // refreshPositions is called at drag start to refresh the containerCache\n          // which is used in drag. This ensures it's initialized and synchronized\n          // with any changes that might have happened on the page since initialization.\n\n          sortable.refreshPositions();\n\n          sortable._trigger(\"activate\", event, uiSortable);\n        }\n      });\n    },\n    stop: function stop(event, ui, draggable) {\n      var uiSortable = $.extend({}, ui, {\n        item: draggable.element\n      });\n      draggable.cancelHelperRemoval = false;\n      $.each(draggable.sortables, function () {\n        var sortable = this;\n\n        if (sortable.isOver) {\n          sortable.isOver = 0; // Allow this sortable to handle removing the helper\n\n          draggable.cancelHelperRemoval = true;\n          sortable.cancelHelperRemoval = false; // Use _storedCSS To restore properties in the sortable,\n          // as this also handles revert (#9675) since the draggable\n          // may have modified them in unexpected ways (#8809)\n\n          sortable._storedCSS = {\n            position: sortable.placeholder.css(\"position\"),\n            top: sortable.placeholder.css(\"top\"),\n            left: sortable.placeholder.css(\"left\")\n          };\n\n          sortable._mouseStop(event); // Once drag has ended, the sortable should return to using\n          // its original helper, not the shared helper from draggable\n\n\n          sortable.options.helper = sortable.options._helper;\n        } else {\n          // Prevent this Sortable from removing the helper.\n          // However, don't set the draggable to remove the helper\n          // either as another connected Sortable may yet handle the removal.\n          sortable.cancelHelperRemoval = true;\n\n          sortable._trigger(\"deactivate\", event, uiSortable);\n        }\n      });\n    },\n    drag: function drag(event, ui, draggable) {\n      $.each(draggable.sortables, function () {\n        var innermostIntersecting = false,\n            sortable = this; // Copy over variables that sortable's _intersectsWith uses\n\n        sortable.positionAbs = draggable.positionAbs;\n        sortable.helperProportions = draggable.helperProportions;\n        sortable.offset.click = draggable.offset.click;\n\n        if (sortable._intersectsWith(sortable.containerCache)) {\n          innermostIntersecting = true;\n          $.each(draggable.sortables, function () {\n            // Copy over variables that sortable's _intersectsWith uses\n            this.positionAbs = draggable.positionAbs;\n            this.helperProportions = draggable.helperProportions;\n            this.offset.click = draggable.offset.click;\n\n            if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {\n              innermostIntersecting = false;\n            }\n\n            return innermostIntersecting;\n          });\n        }\n\n        if (innermostIntersecting) {\n          // If it intersects, we use a little isOver variable and set it once,\n          // so that the move-in stuff gets fired only once.\n          if (!sortable.isOver) {\n            sortable.isOver = 1; // Store draggable's parent in case we need to reappend to it later.\n\n            draggable._parent = ui.helper.parent();\n            sortable.currentItem = ui.helper.appendTo(sortable.element).data(\"ui-sortable-item\", true); // Store helper option to later restore it\n\n            sortable.options._helper = sortable.options.helper;\n\n            sortable.options.helper = function () {\n              return ui.helper[0];\n            }; // Fire the start events of the sortable with our passed browser event,\n            // and our own helper (so it doesn't create a new one)\n\n\n            event.target = sortable.currentItem[0];\n\n            sortable._mouseCapture(event, true);\n\n            sortable._mouseStart(event, true, true); // Because the browser event is way off the new appended portlet,\n            // modify necessary variables to reflect the changes\n\n\n            sortable.offset.click.top = draggable.offset.click.top;\n            sortable.offset.click.left = draggable.offset.click.left;\n            sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;\n            sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;\n\n            draggable._trigger(\"toSortable\", event); // Inform draggable that the helper is in a valid drop zone,\n            // used solely in the revert option to handle \"valid/invalid\".\n\n\n            draggable.dropped = sortable.element; // Need to refreshPositions of all sortables in the case that\n            // adding to one sortable changes the location of the other sortables (#9675)\n\n            $.each(draggable.sortables, function () {\n              this.refreshPositions();\n            }); // hack so receive/update callbacks work (mostly)\n\n            draggable.currentItem = draggable.element;\n            sortable.fromOutside = draggable;\n          }\n\n          if (sortable.currentItem) {\n            sortable._mouseDrag(event); // Copy the sortable's position because the draggable's can potentially reflect\n            // a relative position, while sortable is always absolute, which the dragged\n            // element has now become. (#8809)\n\n\n            ui.position = sortable.position;\n          }\n        } else {\n          // If it doesn't intersect with the sortable, and it intersected before,\n          // we fake the drag stop of the sortable, but make sure it doesn't remove\n          // the helper by using cancelHelperRemoval.\n          if (sortable.isOver) {\n            sortable.isOver = 0;\n            sortable.cancelHelperRemoval = true; // Calling sortable's mouseStop would trigger a revert,\n            // so revert must be temporarily false until after mouseStop is called.\n\n            sortable.options._revert = sortable.options.revert;\n            sortable.options.revert = false;\n\n            sortable._trigger(\"out\", event, sortable._uiHash(sortable));\n\n            sortable._mouseStop(event, true); // restore sortable behaviors that were modfied\n            // when the draggable entered the sortable area (#9481)\n\n\n            sortable.options.revert = sortable.options._revert;\n            sortable.options.helper = sortable.options._helper;\n\n            if (sortable.placeholder) {\n              sortable.placeholder.remove();\n            } // Restore and recalculate the draggable's offset considering the sortable\n            // may have modified them in unexpected ways. (#8809, #10669)\n\n\n            ui.helper.appendTo(draggable._parent);\n\n            draggable._refreshOffsets(event);\n\n            ui.position = draggable._generatePosition(event, true);\n\n            draggable._trigger(\"fromSortable\", event); // Inform draggable that the helper is no longer in a valid drop zone\n\n\n            draggable.dropped = false; // Need to refreshPositions of all sortables just in case removing\n            // from one sortable changes the location of other sortables (#9675)\n\n            $.each(draggable.sortables, function () {\n              this.refreshPositions();\n            });\n          }\n        }\n      });\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"cursor\", {\n    start: function start(event, ui, instance) {\n      var t = $(\"body\"),\n          o = instance.options;\n\n      if (t.css(\"cursor\")) {\n        o._cursor = t.css(\"cursor\");\n      }\n\n      t.css(\"cursor\", o.cursor);\n    },\n    stop: function stop(event, ui, instance) {\n      var o = instance.options;\n\n      if (o._cursor) {\n        $(\"body\").css(\"cursor\", o._cursor);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"opacity\", {\n    start: function start(event, ui, instance) {\n      var t = $(ui.helper),\n          o = instance.options;\n\n      if (t.css(\"opacity\")) {\n        o._opacity = t.css(\"opacity\");\n      }\n\n      t.css(\"opacity\", o.opacity);\n    },\n    stop: function stop(event, ui, instance) {\n      var o = instance.options;\n\n      if (o._opacity) {\n        $(ui.helper).css(\"opacity\", o._opacity);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"scroll\", {\n    start: function start(event, ui, i) {\n      if (!i.scrollParentNotHidden) {\n        i.scrollParentNotHidden = i.helper.scrollParent(false);\n      }\n\n      if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== \"HTML\") {\n        i.overflowOffset = i.scrollParentNotHidden.offset();\n      }\n    },\n    drag: function drag(event, ui, i) {\n      var o = i.options,\n          scrolled = false,\n          scrollParent = i.scrollParentNotHidden[0],\n          document = i.document[0];\n\n      if (scrollParent !== document && scrollParent.tagName !== \"HTML\") {\n        if (!o.axis || o.axis !== \"x\") {\n          if (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {\n            scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;\n          } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {\n            scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;\n          }\n        }\n\n        if (!o.axis || o.axis !== \"y\") {\n          if (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {\n            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;\n          } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {\n            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;\n          }\n        }\n      } else {\n        if (!o.axis || o.axis !== \"x\") {\n          if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\n          } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\n          }\n        }\n\n        if (!o.axis || o.axis !== \"y\") {\n          if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\n          } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\n          }\n        }\n      }\n\n      if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(i, event);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"snap\", {\n    start: function start(event, ui, i) {\n      var o = i.options;\n      i.snapElements = [];\n      $(o.snap.constructor !== String ? o.snap.items || \":data(ui-draggable)\" : o.snap).each(function () {\n        var $t = $(this),\n            $o = $t.offset();\n\n        if (this !== i.element[0]) {\n          i.snapElements.push({\n            item: this,\n            width: $t.outerWidth(),\n            height: $t.outerHeight(),\n            top: $o.top,\n            left: $o.left\n          });\n        }\n      });\n    },\n    drag: function drag(event, ui, inst) {\n      var ts,\n          bs,\n          ls,\n          rs,\n          l,\n          r,\n          t,\n          b,\n          i,\n          first,\n          o = inst.options,\n          d = o.snapTolerance,\n          x1 = ui.offset.left,\n          x2 = x1 + inst.helperProportions.width,\n          y1 = ui.offset.top,\n          y2 = y1 + inst.helperProportions.height;\n\n      for (i = inst.snapElements.length - 1; i >= 0; i--) {\n        l = inst.snapElements[i].left - inst.margins.left;\n        r = l + inst.snapElements[i].width;\n        t = inst.snapElements[i].top - inst.margins.top;\n        b = t + inst.snapElements[i].height;\n\n        if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {\n          if (inst.snapElements[i].snapping) {\n            inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {\n              snapItem: inst.snapElements[i].item\n            }));\n          }\n\n          inst.snapElements[i].snapping = false;\n          continue;\n        }\n\n        if (o.snapMode !== \"inner\") {\n          ts = Math.abs(t - y2) <= d;\n          bs = Math.abs(b - y1) <= d;\n          ls = Math.abs(l - x2) <= d;\n          rs = Math.abs(r - x1) <= d;\n\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t - inst.helperProportions.height,\n              left: 0\n            }).top;\n          }\n\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b,\n              left: 0\n            }).top;\n          }\n\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l - inst.helperProportions.width\n            }).left;\n          }\n\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r\n            }).left;\n          }\n        }\n\n        first = ts || bs || ls || rs;\n\n        if (o.snapMode !== \"outer\") {\n          ts = Math.abs(t - y1) <= d;\n          bs = Math.abs(b - y2) <= d;\n          ls = Math.abs(l - x1) <= d;\n          rs = Math.abs(r - x2) <= d;\n\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t,\n              left: 0\n            }).top;\n          }\n\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b - inst.helperProportions.height,\n              left: 0\n            }).top;\n          }\n\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l\n            }).left;\n          }\n\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r - inst.helperProportions.width\n            }).left;\n          }\n        }\n\n        if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {\n          inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {\n            snapItem: inst.snapElements[i].item\n          }));\n        }\n\n        inst.snapElements[i].snapping = ts || bs || ls || rs || first;\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"stack\", {\n    start: function start(event, ui, instance) {\n      var min,\n          o = instance.options,\n          group = $.makeArray($(o.stack)).sort(function (a, b) {\n        return (parseInt($(a).css(\"zIndex\"), 10) || 0) - (parseInt($(b).css(\"zIndex\"), 10) || 0);\n      });\n\n      if (!group.length) {\n        return;\n      }\n\n      min = parseInt($(group[0]).css(\"zIndex\"), 10) || 0;\n      $(group).each(function (i) {\n        $(this).css(\"zIndex\", min + i);\n      });\n      this.css(\"zIndex\", min + group.length);\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"zIndex\", {\n    start: function start(event, ui, instance) {\n      var t = $(ui.helper),\n          o = instance.options;\n\n      if (t.css(\"zIndex\")) {\n        o._zIndex = t.css(\"zIndex\");\n      }\n\n      t.css(\"zIndex\", o.zIndex);\n    },\n    stop: function stop(event, ui, instance) {\n      var o = instance.options;\n\n      if (o._zIndex) {\n        $(ui.helper).css(\"zIndex\", o._zIndex);\n      }\n    }\n  });\n  var draggable = $.ui.draggable;\n  /*!\n   * jQuery UI Resizable 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/resizable/\n   */\n\n  $.widget(\"ui.resizable\", $.ui.mouse, {\n    version: \"1.11.4\",\n    widgetEventPrefix: \"resize\",\n    options: {\n      alsoResize: false,\n      animate: false,\n      animateDuration: \"slow\",\n      animateEasing: \"swing\",\n      aspectRatio: false,\n      autoHide: false,\n      containment: false,\n      ghost: false,\n      grid: false,\n      handles: \"e,s,se\",\n      helper: false,\n      maxHeight: null,\n      maxWidth: null,\n      minHeight: 10,\n      minWidth: 10,\n      // See #7960\n      zIndex: 90,\n      // callbacks\n      resize: null,\n      start: null,\n      stop: null\n    },\n    _num: function _num(value) {\n      return parseInt(value, 10) || 0;\n    },\n    _isNumber: function _isNumber(value) {\n      return !isNaN(parseInt(value, 10));\n    },\n    _hasScroll: function _hasScroll(el, a) {\n      if ($(el).css(\"overflow\") === \"hidden\") {\n        return false;\n      }\n\n      var scroll = a && a === \"left\" ? \"scrollLeft\" : \"scrollTop\",\n          has = false;\n\n      if (el[scroll] > 0) {\n        return true;\n      } // TODO: determine which cases actually cause this to happen\n      // if the element doesn't have the scroll set, see if it's possible to\n      // set the scroll\n\n\n      el[scroll] = 1;\n      has = el[scroll] > 0;\n      el[scroll] = 0;\n      return has;\n    },\n    _create: function _create() {\n      var n,\n          i,\n          handle,\n          axis,\n          hname,\n          that = this,\n          o = this.options;\n      this.element.addClass(\"ui-resizable\");\n      $.extend(this, {\n        _aspectRatio: !!o.aspectRatio,\n        aspectRatio: o.aspectRatio,\n        originalElement: this.element,\n        _proportionallyResizeElements: [],\n        _helper: o.helper || o.ghost || o.animate ? o.helper || \"ui-resizable-helper\" : null\n      }); // Wrap the element if it cannot hold child nodes\n\n      if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {\n        this.element.wrap($(\"<div class='ui-wrapper' style='overflow: hidden;'></div>\").css({\n          position: this.element.css(\"position\"),\n          width: this.element.outerWidth(),\n          height: this.element.outerHeight(),\n          top: this.element.css(\"top\"),\n          left: this.element.css(\"left\")\n        }));\n        this.element = this.element.parent().data(\"ui-resizable\", this.element.resizable(\"instance\"));\n        this.elementIsWrapper = true;\n        this.element.css({\n          marginLeft: this.originalElement.css(\"marginLeft\"),\n          marginTop: this.originalElement.css(\"marginTop\"),\n          marginRight: this.originalElement.css(\"marginRight\"),\n          marginBottom: this.originalElement.css(\"marginBottom\")\n        });\n        this.originalElement.css({\n          marginLeft: 0,\n          marginTop: 0,\n          marginRight: 0,\n          marginBottom: 0\n        }); // support: Safari\n        // Prevent Safari textarea resize\n\n        this.originalResizeStyle = this.originalElement.css(\"resize\");\n        this.originalElement.css(\"resize\", \"none\");\n\n        this._proportionallyResizeElements.push(this.originalElement.css({\n          position: \"static\",\n          zoom: 1,\n          display: \"block\"\n        })); // support: IE9\n        // avoid IE jump (hard set the margin)\n\n\n        this.originalElement.css({\n          margin: this.originalElement.css(\"margin\")\n        });\n\n        this._proportionallyResize();\n      }\n\n      this.handles = o.handles || (!$(\".ui-resizable-handle\", this.element).length ? \"e,s,se\" : {\n        n: \".ui-resizable-n\",\n        e: \".ui-resizable-e\",\n        s: \".ui-resizable-s\",\n        w: \".ui-resizable-w\",\n        se: \".ui-resizable-se\",\n        sw: \".ui-resizable-sw\",\n        ne: \".ui-resizable-ne\",\n        nw: \".ui-resizable-nw\"\n      });\n      this._handles = $();\n\n      if (this.handles.constructor === String) {\n        if (this.handles === \"all\") {\n          this.handles = \"n,e,s,w,se,sw,ne,nw\";\n        }\n\n        n = this.handles.split(\",\");\n        this.handles = {};\n\n        for (i = 0; i < n.length; i++) {\n          handle = $.trim(n[i]);\n          hname = \"ui-resizable-\" + handle;\n          axis = $(\"<div class='ui-resizable-handle \" + hname + \"'></div>\");\n          axis.css({\n            zIndex: o.zIndex\n          }); // TODO : What's going on here?\n\n          if (\"se\" === handle) {\n            axis.addClass(\"ui-icon ui-icon-gripsmall-diagonal-se\");\n          }\n\n          this.handles[handle] = \".ui-resizable-\" + handle;\n          this.element.append(axis);\n        }\n      }\n\n      this._renderAxis = function (target) {\n        var i, axis, padPos, padWrapper;\n        target = target || this.element;\n\n        for (i in this.handles) {\n          if (this.handles[i].constructor === String) {\n            this.handles[i] = this.element.children(this.handles[i]).first().show();\n          } else if (this.handles[i].jquery || this.handles[i].nodeType) {\n            this.handles[i] = $(this.handles[i]);\n\n            this._on(this.handles[i], {\n              \"mousedown\": that._mouseDown\n            });\n          }\n\n          if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {\n            axis = $(this.handles[i], this.element);\n            padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();\n            padPos = [\"padding\", /ne|nw|n/.test(i) ? \"Top\" : /se|sw|s/.test(i) ? \"Bottom\" : /^e$/.test(i) ? \"Right\" : \"Left\"].join(\"\");\n            target.css(padPos, padWrapper);\n\n            this._proportionallyResize();\n          }\n\n          this._handles = this._handles.add(this.handles[i]);\n        }\n      }; // TODO: make renderAxis a prototype function\n\n\n      this._renderAxis(this.element);\n\n      this._handles = this._handles.add(this.element.find(\".ui-resizable-handle\"));\n\n      this._handles.disableSelection();\n\n      this._handles.mouseover(function () {\n        if (!that.resizing) {\n          if (this.className) {\n            axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);\n          }\n\n          that.axis = axis && axis[1] ? axis[1] : \"se\";\n        }\n      });\n\n      if (o.autoHide) {\n        this._handles.hide();\n\n        $(this.element).addClass(\"ui-resizable-autohide\").mouseenter(function () {\n          if (o.disabled) {\n            return;\n          }\n\n          $(this).removeClass(\"ui-resizable-autohide\");\n\n          that._handles.show();\n        }).mouseleave(function () {\n          if (o.disabled) {\n            return;\n          }\n\n          if (!that.resizing) {\n            $(this).addClass(\"ui-resizable-autohide\");\n\n            that._handles.hide();\n          }\n        });\n      }\n\n      this._mouseInit();\n    },\n    _destroy: function _destroy() {\n      this._mouseDestroy();\n\n      var wrapper,\n          _destroy = function _destroy(exp) {\n        $(exp).removeClass(\"ui-resizable ui-resizable-disabled ui-resizable-resizing\").removeData(\"resizable\").removeData(\"ui-resizable\").unbind(\".resizable\").find(\".ui-resizable-handle\").remove();\n      }; // TODO: Unwrap at same DOM position\n\n\n      if (this.elementIsWrapper) {\n        _destroy(this.element);\n\n        wrapper = this.element;\n        this.originalElement.css({\n          position: wrapper.css(\"position\"),\n          width: wrapper.outerWidth(),\n          height: wrapper.outerHeight(),\n          top: wrapper.css(\"top\"),\n          left: wrapper.css(\"left\")\n        }).insertAfter(wrapper);\n        wrapper.remove();\n      }\n\n      this.originalElement.css(\"resize\", this.originalResizeStyle);\n\n      _destroy(this.originalElement);\n\n      return this;\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var i,\n          handle,\n          capture = false;\n\n      for (i in this.handles) {\n        handle = $(this.handles[i])[0];\n\n        if (handle === event.target || $.contains(handle, event.target)) {\n          capture = true;\n        }\n      }\n\n      return !this.options.disabled && capture;\n    },\n    _mouseStart: function _mouseStart(event) {\n      var curleft,\n          curtop,\n          cursor,\n          o = this.options,\n          el = this.element;\n      this.resizing = true;\n\n      this._renderProxy();\n\n      curleft = this._num(this.helper.css(\"left\"));\n      curtop = this._num(this.helper.css(\"top\"));\n\n      if (o.containment) {\n        curleft += $(o.containment).scrollLeft() || 0;\n        curtop += $(o.containment).scrollTop() || 0;\n      }\n\n      this.offset = this.helper.offset();\n      this.position = {\n        left: curleft,\n        top: curtop\n      };\n      this.size = this._helper ? {\n        width: this.helper.width(),\n        height: this.helper.height()\n      } : {\n        width: el.width(),\n        height: el.height()\n      };\n      this.originalSize = this._helper ? {\n        width: el.outerWidth(),\n        height: el.outerHeight()\n      } : {\n        width: el.width(),\n        height: el.height()\n      };\n      this.sizeDiff = {\n        width: el.outerWidth() - el.width(),\n        height: el.outerHeight() - el.height()\n      };\n      this.originalPosition = {\n        left: curleft,\n        top: curtop\n      };\n      this.originalMousePosition = {\n        left: event.pageX,\n        top: event.pageY\n      };\n      this.aspectRatio = typeof o.aspectRatio === \"number\" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;\n      cursor = $(\".ui-resizable-\" + this.axis).css(\"cursor\");\n      $(\"body\").css(\"cursor\", cursor === \"auto\" ? this.axis + \"-resize\" : cursor);\n      el.addClass(\"ui-resizable-resizing\");\n\n      this._propagate(\"start\", event);\n\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var data,\n          props,\n          smp = this.originalMousePosition,\n          a = this.axis,\n          dx = event.pageX - smp.left || 0,\n          dy = event.pageY - smp.top || 0,\n          trigger = this._change[a];\n\n      this._updatePrevProperties();\n\n      if (!trigger) {\n        return false;\n      }\n\n      data = trigger.apply(this, [event, dx, dy]);\n\n      this._updateVirtualBoundaries(event.shiftKey);\n\n      if (this._aspectRatio || event.shiftKey) {\n        data = this._updateRatio(data, event);\n      }\n\n      data = this._respectSize(data, event);\n\n      this._updateCache(data);\n\n      this._propagate(\"resize\", event);\n\n      props = this._applyChanges();\n\n      if (!this._helper && this._proportionallyResizeElements.length) {\n        this._proportionallyResize();\n      }\n\n      if (!$.isEmptyObject(props)) {\n        this._updatePrevProperties();\n\n        this._trigger(\"resize\", event, this.ui());\n\n        this._applyChanges();\n      }\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      this.resizing = false;\n      var pr,\n          ista,\n          soffseth,\n          soffsetw,\n          s,\n          left,\n          top,\n          o = this.options,\n          that = this;\n\n      if (this._helper) {\n        pr = this._proportionallyResizeElements;\n        ista = pr.length && /textarea/i.test(pr[0].nodeName);\n        soffseth = ista && this._hasScroll(pr[0], \"left\") ? 0 : that.sizeDiff.height;\n        soffsetw = ista ? 0 : that.sizeDiff.width;\n        s = {\n          width: that.helper.width() - soffsetw,\n          height: that.helper.height() - soffseth\n        };\n        left = parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left) || null;\n        top = parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top) || null;\n\n        if (!o.animate) {\n          this.element.css($.extend(s, {\n            top: top,\n            left: left\n          }));\n        }\n\n        that.helper.height(that.size.height);\n        that.helper.width(that.size.width);\n\n        if (this._helper && !o.animate) {\n          this._proportionallyResize();\n        }\n      }\n\n      $(\"body\").css(\"cursor\", \"auto\");\n      this.element.removeClass(\"ui-resizable-resizing\");\n\n      this._propagate(\"stop\", event);\n\n      if (this._helper) {\n        this.helper.remove();\n      }\n\n      return false;\n    },\n    _updatePrevProperties: function _updatePrevProperties() {\n      this.prevPosition = {\n        top: this.position.top,\n        left: this.position.left\n      };\n      this.prevSize = {\n        width: this.size.width,\n        height: this.size.height\n      };\n    },\n    _applyChanges: function _applyChanges() {\n      var props = {};\n\n      if (this.position.top !== this.prevPosition.top) {\n        props.top = this.position.top + \"px\";\n      }\n\n      if (this.position.left !== this.prevPosition.left) {\n        props.left = this.position.left + \"px\";\n      }\n\n      if (this.size.width !== this.prevSize.width) {\n        props.width = this.size.width + \"px\";\n      }\n\n      if (this.size.height !== this.prevSize.height) {\n        props.height = this.size.height + \"px\";\n      }\n\n      this.helper.css(props);\n      return props;\n    },\n    _updateVirtualBoundaries: function _updateVirtualBoundaries(forceAspectRatio) {\n      var pMinWidth,\n          pMaxWidth,\n          pMinHeight,\n          pMaxHeight,\n          b,\n          o = this.options;\n      b = {\n        minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,\n        maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,\n        minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,\n        maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity\n      };\n\n      if (this._aspectRatio || forceAspectRatio) {\n        pMinWidth = b.minHeight * this.aspectRatio;\n        pMinHeight = b.minWidth / this.aspectRatio;\n        pMaxWidth = b.maxHeight * this.aspectRatio;\n        pMaxHeight = b.maxWidth / this.aspectRatio;\n\n        if (pMinWidth > b.minWidth) {\n          b.minWidth = pMinWidth;\n        }\n\n        if (pMinHeight > b.minHeight) {\n          b.minHeight = pMinHeight;\n        }\n\n        if (pMaxWidth < b.maxWidth) {\n          b.maxWidth = pMaxWidth;\n        }\n\n        if (pMaxHeight < b.maxHeight) {\n          b.maxHeight = pMaxHeight;\n        }\n      }\n\n      this._vBoundaries = b;\n    },\n    _updateCache: function _updateCache(data) {\n      this.offset = this.helper.offset();\n\n      if (this._isNumber(data.left)) {\n        this.position.left = data.left;\n      }\n\n      if (this._isNumber(data.top)) {\n        this.position.top = data.top;\n      }\n\n      if (this._isNumber(data.height)) {\n        this.size.height = data.height;\n      }\n\n      if (this._isNumber(data.width)) {\n        this.size.width = data.width;\n      }\n    },\n    _updateRatio: function _updateRatio(data) {\n      var cpos = this.position,\n          csize = this.size,\n          a = this.axis;\n\n      if (this._isNumber(data.height)) {\n        data.width = data.height * this.aspectRatio;\n      } else if (this._isNumber(data.width)) {\n        data.height = data.width / this.aspectRatio;\n      }\n\n      if (a === \"sw\") {\n        data.left = cpos.left + (csize.width - data.width);\n        data.top = null;\n      }\n\n      if (a === \"nw\") {\n        data.top = cpos.top + (csize.height - data.height);\n        data.left = cpos.left + (csize.width - data.width);\n      }\n\n      return data;\n    },\n    _respectSize: function _respectSize(data) {\n      var o = this._vBoundaries,\n          a = this.axis,\n          ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width,\n          ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height,\n          isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width,\n          isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height,\n          dw = this.originalPosition.left + this.originalSize.width,\n          dh = this.position.top + this.size.height,\n          cw = /sw|nw|w/.test(a),\n          ch = /nw|ne|n/.test(a);\n\n      if (isminw) {\n        data.width = o.minWidth;\n      }\n\n      if (isminh) {\n        data.height = o.minHeight;\n      }\n\n      if (ismaxw) {\n        data.width = o.maxWidth;\n      }\n\n      if (ismaxh) {\n        data.height = o.maxHeight;\n      }\n\n      if (isminw && cw) {\n        data.left = dw - o.minWidth;\n      }\n\n      if (ismaxw && cw) {\n        data.left = dw - o.maxWidth;\n      }\n\n      if (isminh && ch) {\n        data.top = dh - o.minHeight;\n      }\n\n      if (ismaxh && ch) {\n        data.top = dh - o.maxHeight;\n      } // Fixing jump error on top/left - bug #2330\n\n\n      if (!data.width && !data.height && !data.left && data.top) {\n        data.top = null;\n      } else if (!data.width && !data.height && !data.top && data.left) {\n        data.left = null;\n      }\n\n      return data;\n    },\n    _getPaddingPlusBorderDimensions: function _getPaddingPlusBorderDimensions(element) {\n      var i = 0,\n          widths = [],\n          borders = [element.css(\"borderTopWidth\"), element.css(\"borderRightWidth\"), element.css(\"borderBottomWidth\"), element.css(\"borderLeftWidth\")],\n          paddings = [element.css(\"paddingTop\"), element.css(\"paddingRight\"), element.css(\"paddingBottom\"), element.css(\"paddingLeft\")];\n\n      for (; i < 4; i++) {\n        widths[i] = parseInt(borders[i], 10) || 0;\n        widths[i] += parseInt(paddings[i], 10) || 0;\n      }\n\n      return {\n        height: widths[0] + widths[2],\n        width: widths[1] + widths[3]\n      };\n    },\n    _proportionallyResize: function _proportionallyResize() {\n      if (!this._proportionallyResizeElements.length) {\n        return;\n      }\n\n      var prel,\n          i = 0,\n          element = this.helper || this.element;\n\n      for (; i < this._proportionallyResizeElements.length; i++) {\n        prel = this._proportionallyResizeElements[i]; // TODO: Seems like a bug to cache this.outerDimensions\n        // considering that we are in a loop.\n\n        if (!this.outerDimensions) {\n          this.outerDimensions = this._getPaddingPlusBorderDimensions(prel);\n        }\n\n        prel.css({\n          height: element.height() - this.outerDimensions.height || 0,\n          width: element.width() - this.outerDimensions.width || 0\n        });\n      }\n    },\n    _renderProxy: function _renderProxy() {\n      var el = this.element,\n          o = this.options;\n      this.elementOffset = el.offset();\n\n      if (this._helper) {\n        this.helper = this.helper || $(\"<div style='overflow:hidden;'></div>\");\n        this.helper.addClass(this._helper).css({\n          width: this.element.outerWidth() - 1,\n          height: this.element.outerHeight() - 1,\n          position: \"absolute\",\n          left: this.elementOffset.left + \"px\",\n          top: this.elementOffset.top + \"px\",\n          zIndex: ++o.zIndex //TODO: Don't modify option\n\n        });\n        this.helper.appendTo(\"body\").disableSelection();\n      } else {\n        this.helper = this.element;\n      }\n    },\n    _change: {\n      e: function e(event, dx) {\n        return {\n          width: this.originalSize.width + dx\n        };\n      },\n      w: function w(event, dx) {\n        var cs = this.originalSize,\n            sp = this.originalPosition;\n        return {\n          left: sp.left + dx,\n          width: cs.width - dx\n        };\n      },\n      n: function n(event, dx, dy) {\n        var cs = this.originalSize,\n            sp = this.originalPosition;\n        return {\n          top: sp.top + dy,\n          height: cs.height - dy\n        };\n      },\n      s: function s(event, dx, dy) {\n        return {\n          height: this.originalSize.height + dy\n        };\n      },\n      se: function se(event, dx, dy) {\n        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n      },\n      sw: function sw(event, dx, dy) {\n        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n      },\n      ne: function ne(event, dx, dy) {\n        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n      },\n      nw: function nw(event, dx, dy) {\n        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n      }\n    },\n    _propagate: function _propagate(n, event) {\n      $.ui.plugin.call(this, n, [event, this.ui()]);\n      n !== \"resize\" && this._trigger(n, event, this.ui());\n    },\n    plugins: {},\n    ui: function ui() {\n      return {\n        originalElement: this.originalElement,\n        element: this.element,\n        helper: this.helper,\n        position: this.position,\n        size: this.size,\n        originalSize: this.originalSize,\n        originalPosition: this.originalPosition\n      };\n    }\n  });\n  /*\n   * Resizable Extensions\n   */\n\n  $.ui.plugin.add(\"resizable\", \"animate\", {\n    stop: function stop(event) {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options,\n          pr = that._proportionallyResizeElements,\n          ista = pr.length && /textarea/i.test(pr[0].nodeName),\n          soffseth = ista && that._hasScroll(pr[0], \"left\") ? 0 : that.sizeDiff.height,\n          soffsetw = ista ? 0 : that.sizeDiff.width,\n          style = {\n        width: that.size.width - soffsetw,\n        height: that.size.height - soffseth\n      },\n          left = parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left) || null,\n          top = parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top) || null;\n      that.element.animate($.extend(style, top && left ? {\n        top: top,\n        left: left\n      } : {}), {\n        duration: o.animateDuration,\n        easing: o.animateEasing,\n        step: function step() {\n          var data = {\n            width: parseInt(that.element.css(\"width\"), 10),\n            height: parseInt(that.element.css(\"height\"), 10),\n            top: parseInt(that.element.css(\"top\"), 10),\n            left: parseInt(that.element.css(\"left\"), 10)\n          };\n\n          if (pr && pr.length) {\n            $(pr[0]).css({\n              width: data.width,\n              height: data.height\n            });\n          } // propagating resize, and updating values for each animation step\n\n\n          that._updateCache(data);\n\n          that._propagate(\"resize\", event);\n        }\n      });\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"containment\", {\n    start: function start() {\n      var element,\n          p,\n          co,\n          ch,\n          cw,\n          width,\n          height,\n          that = $(this).resizable(\"instance\"),\n          o = that.options,\n          el = that.element,\n          oc = o.containment,\n          ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;\n\n      if (!ce) {\n        return;\n      }\n\n      that.containerElement = $(ce);\n\n      if (/document/.test(oc) || oc === document) {\n        that.containerOffset = {\n          left: 0,\n          top: 0\n        };\n        that.containerPosition = {\n          left: 0,\n          top: 0\n        };\n        that.parentData = {\n          element: $(document),\n          left: 0,\n          top: 0,\n          width: $(document).width(),\n          height: $(document).height() || document.body.parentNode.scrollHeight\n        };\n      } else {\n        element = $(ce);\n        p = [];\n        $([\"Top\", \"Right\", \"Left\", \"Bottom\"]).each(function (i, name) {\n          p[i] = that._num(element.css(\"padding\" + name));\n        });\n        that.containerOffset = element.offset();\n        that.containerPosition = element.position();\n        that.containerSize = {\n          height: element.innerHeight() - p[3],\n          width: element.innerWidth() - p[1]\n        };\n        co = that.containerOffset;\n        ch = that.containerSize.height;\n        cw = that.containerSize.width;\n        width = that._hasScroll(ce, \"left\") ? ce.scrollWidth : cw;\n        height = that._hasScroll(ce) ? ce.scrollHeight : ch;\n        that.parentData = {\n          element: ce,\n          left: co.left,\n          top: co.top,\n          width: width,\n          height: height\n        };\n      }\n    },\n    resize: function resize(event) {\n      var woset,\n          hoset,\n          isParent,\n          isOffsetRelative,\n          that = $(this).resizable(\"instance\"),\n          o = that.options,\n          co = that.containerOffset,\n          cp = that.position,\n          pRatio = that._aspectRatio || event.shiftKey,\n          cop = {\n        top: 0,\n        left: 0\n      },\n          ce = that.containerElement,\n          continueResize = true;\n\n      if (ce[0] !== document && /static/.test(ce.css(\"position\"))) {\n        cop = co;\n      }\n\n      if (cp.left < (that._helper ? co.left : 0)) {\n        that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);\n\n        if (pRatio) {\n          that.size.height = that.size.width / that.aspectRatio;\n          continueResize = false;\n        }\n\n        that.position.left = o.helper ? co.left : 0;\n      }\n\n      if (cp.top < (that._helper ? co.top : 0)) {\n        that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);\n\n        if (pRatio) {\n          that.size.width = that.size.height * that.aspectRatio;\n          continueResize = false;\n        }\n\n        that.position.top = that._helper ? co.top : 0;\n      }\n\n      isParent = that.containerElement.get(0) === that.element.parent().get(0);\n      isOffsetRelative = /relative|absolute/.test(that.containerElement.css(\"position\"));\n\n      if (isParent && isOffsetRelative) {\n        that.offset.left = that.parentData.left + that.position.left;\n        that.offset.top = that.parentData.top + that.position.top;\n      } else {\n        that.offset.left = that.element.offset().left;\n        that.offset.top = that.element.offset().top;\n      }\n\n      woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));\n      hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));\n\n      if (woset + that.size.width >= that.parentData.width) {\n        that.size.width = that.parentData.width - woset;\n\n        if (pRatio) {\n          that.size.height = that.size.width / that.aspectRatio;\n          continueResize = false;\n        }\n      }\n\n      if (hoset + that.size.height >= that.parentData.height) {\n        that.size.height = that.parentData.height - hoset;\n\n        if (pRatio) {\n          that.size.width = that.size.height * that.aspectRatio;\n          continueResize = false;\n        }\n      }\n\n      if (!continueResize) {\n        that.position.left = that.prevPosition.left;\n        that.position.top = that.prevPosition.top;\n        that.size.width = that.prevSize.width;\n        that.size.height = that.prevSize.height;\n      }\n    },\n    stop: function stop() {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options,\n          co = that.containerOffset,\n          cop = that.containerPosition,\n          ce = that.containerElement,\n          helper = $(that.helper),\n          ho = helper.offset(),\n          w = helper.outerWidth() - that.sizeDiff.width,\n          h = helper.outerHeight() - that.sizeDiff.height;\n\n      if (that._helper && !o.animate && /relative/.test(ce.css(\"position\"))) {\n        $(this).css({\n          left: ho.left - cop.left - co.left,\n          width: w,\n          height: h\n        });\n      }\n\n      if (that._helper && !o.animate && /static/.test(ce.css(\"position\"))) {\n        $(this).css({\n          left: ho.left - cop.left - co.left,\n          width: w,\n          height: h\n        });\n      }\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"alsoResize\", {\n    start: function start() {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options;\n      $(o.alsoResize).each(function () {\n        var el = $(this);\n        el.data(\"ui-resizable-alsoresize\", {\n          width: parseInt(el.width(), 10),\n          height: parseInt(el.height(), 10),\n          left: parseInt(el.css(\"left\"), 10),\n          top: parseInt(el.css(\"top\"), 10)\n        });\n      });\n    },\n    resize: function resize(event, ui) {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options,\n          os = that.originalSize,\n          op = that.originalPosition,\n          delta = {\n        height: that.size.height - os.height || 0,\n        width: that.size.width - os.width || 0,\n        top: that.position.top - op.top || 0,\n        left: that.position.left - op.left || 0\n      };\n      $(o.alsoResize).each(function () {\n        var el = $(this),\n            start = $(this).data(\"ui-resizable-alsoresize\"),\n            style = {},\n            css = el.parents(ui.originalElement[0]).length ? [\"width\", \"height\"] : [\"width\", \"height\", \"top\", \"left\"];\n        $.each(css, function (i, prop) {\n          var sum = (start[prop] || 0) + (delta[prop] || 0);\n\n          if (sum && sum >= 0) {\n            style[prop] = sum || null;\n          }\n        });\n        el.css(style);\n      });\n    },\n    stop: function stop() {\n      $(this).removeData(\"resizable-alsoresize\");\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"ghost\", {\n    start: function start() {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options,\n          cs = that.size;\n      that.ghost = that.originalElement.clone();\n      that.ghost.css({\n        opacity: 0.25,\n        display: \"block\",\n        position: \"relative\",\n        height: cs.height,\n        width: cs.width,\n        margin: 0,\n        left: 0,\n        top: 0\n      }).addClass(\"ui-resizable-ghost\").addClass(typeof o.ghost === \"string\" ? o.ghost : \"\");\n      that.ghost.appendTo(that.helper);\n    },\n    resize: function resize() {\n      var that = $(this).resizable(\"instance\");\n\n      if (that.ghost) {\n        that.ghost.css({\n          position: \"relative\",\n          height: that.size.height,\n          width: that.size.width\n        });\n      }\n    },\n    stop: function stop() {\n      var that = $(this).resizable(\"instance\");\n\n      if (that.ghost && that.helper) {\n        that.helper.get(0).removeChild(that.ghost.get(0));\n      }\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"grid\", {\n    resize: function resize() {\n      var outerDimensions,\n          that = $(this).resizable(\"instance\"),\n          o = that.options,\n          cs = that.size,\n          os = that.originalSize,\n          op = that.originalPosition,\n          a = that.axis,\n          grid = typeof o.grid === \"number\" ? [o.grid, o.grid] : o.grid,\n          gridX = grid[0] || 1,\n          gridY = grid[1] || 1,\n          ox = Math.round((cs.width - os.width) / gridX) * gridX,\n          oy = Math.round((cs.height - os.height) / gridY) * gridY,\n          newWidth = os.width + ox,\n          newHeight = os.height + oy,\n          isMaxWidth = o.maxWidth && o.maxWidth < newWidth,\n          isMaxHeight = o.maxHeight && o.maxHeight < newHeight,\n          isMinWidth = o.minWidth && o.minWidth > newWidth,\n          isMinHeight = o.minHeight && o.minHeight > newHeight;\n      o.grid = grid;\n\n      if (isMinWidth) {\n        newWidth += gridX;\n      }\n\n      if (isMinHeight) {\n        newHeight += gridY;\n      }\n\n      if (isMaxWidth) {\n        newWidth -= gridX;\n      }\n\n      if (isMaxHeight) {\n        newHeight -= gridY;\n      }\n\n      if (/^(se|s|e)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n      } else if (/^(ne)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n        that.position.top = op.top - oy;\n      } else if (/^(sw)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n        that.position.left = op.left - ox;\n      } else {\n        if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {\n          outerDimensions = that._getPaddingPlusBorderDimensions(this);\n        }\n\n        if (newHeight - gridY > 0) {\n          that.size.height = newHeight;\n          that.position.top = op.top - oy;\n        } else {\n          newHeight = gridY - outerDimensions.height;\n          that.size.height = newHeight;\n          that.position.top = op.top + os.height - newHeight;\n        }\n\n        if (newWidth - gridX > 0) {\n          that.size.width = newWidth;\n          that.position.left = op.left - ox;\n        } else {\n          newWidth = gridX - outerDimensions.width;\n          that.size.width = newWidth;\n          that.position.left = op.left + os.width - newWidth;\n        }\n      }\n    }\n  });\n  var resizable = $.ui.resizable;\n  /*!\n   * jQuery UI Dialog 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/dialog/\n   */\n\n  var dialog = $.widget(\"ui.dialog\", {\n    version: \"1.11.4\",\n    options: {\n      appendTo: \"body\",\n      autoOpen: true,\n      buttons: [],\n      closeOnEscape: true,\n      closeText: \"Close\",\n      dialogClass: \"\",\n      draggable: true,\n      hide: null,\n      height: \"auto\",\n      maxHeight: null,\n      maxWidth: null,\n      minHeight: 150,\n      minWidth: 150,\n      modal: false,\n      position: {\n        my: \"center\",\n        at: \"center\",\n        of: window,\n        collision: \"fit\",\n        // Ensure the titlebar is always visible\n        using: function using(pos) {\n          var topOffset = $(this).css(pos).offset().top;\n\n          if (topOffset < 0) {\n            $(this).css(\"top\", pos.top - topOffset);\n          }\n        }\n      },\n      resizable: true,\n      show: null,\n      title: null,\n      width: 300,\n      // callbacks\n      beforeClose: null,\n      close: null,\n      drag: null,\n      dragStart: null,\n      dragStop: null,\n      focus: null,\n      open: null,\n      resize: null,\n      resizeStart: null,\n      resizeStop: null\n    },\n    sizeRelatedOptions: {\n      buttons: true,\n      height: true,\n      maxHeight: true,\n      maxWidth: true,\n      minHeight: true,\n      minWidth: true,\n      width: true\n    },\n    resizableRelatedOptions: {\n      maxHeight: true,\n      maxWidth: true,\n      minHeight: true,\n      minWidth: true\n    },\n    _create: function _create() {\n      this.originalCss = {\n        display: this.element[0].style.display,\n        width: this.element[0].style.width,\n        minHeight: this.element[0].style.minHeight,\n        maxHeight: this.element[0].style.maxHeight,\n        height: this.element[0].style.height\n      };\n      this.originalPosition = {\n        parent: this.element.parent(),\n        index: this.element.parent().children().index(this.element)\n      };\n      this.originalTitle = this.element.attr(\"title\");\n      this.options.title = this.options.title || this.originalTitle;\n\n      this._createWrapper();\n\n      this.element.show().removeAttr(\"title\").addClass(\"ui-dialog-content ui-widget-content\").appendTo(this.uiDialog);\n\n      this._createTitlebar();\n\n      this._createButtonPane();\n\n      if (this.options.draggable && $.fn.draggable) {\n        this._makeDraggable();\n      }\n\n      if (this.options.resizable && $.fn.resizable) {\n        this._makeResizable();\n      }\n\n      this._isOpen = false;\n\n      this._trackFocus();\n    },\n    _init: function _init() {\n      if (this.options.autoOpen) {\n        this.open();\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element && (element.jquery || element.nodeType)) {\n        return $(element);\n      }\n\n      return this.document.find(element || \"body\").eq(0);\n    },\n    _destroy: function _destroy() {\n      var next,\n          originalPosition = this.originalPosition;\n\n      this._untrackInstance();\n\n      this._destroyOverlay();\n\n      this.element.removeUniqueId().removeClass(\"ui-dialog-content ui-widget-content\").css(this.originalCss) // Without detaching first, the following becomes really slow\n      .detach();\n      this.uiDialog.stop(true, true).remove();\n\n      if (this.originalTitle) {\n        this.element.attr(\"title\", this.originalTitle);\n      }\n\n      next = originalPosition.parent.children().eq(originalPosition.index); // Don't try to place the dialog next to itself (#8613)\n\n      if (next.length && next[0] !== this.element[0]) {\n        next.before(this.element);\n      } else {\n        originalPosition.parent.append(this.element);\n      }\n    },\n    widget: function widget() {\n      return this.uiDialog;\n    },\n    disable: $.noop,\n    enable: $.noop,\n    close: function close(event) {\n      var activeElement,\n          that = this;\n\n      if (!this._isOpen || this._trigger(\"beforeClose\", event) === false) {\n        return;\n      }\n\n      this._isOpen = false;\n      this._focusedElement = null;\n\n      this._destroyOverlay();\n\n      this._untrackInstance();\n\n      if (!this.opener.filter(\":focusable\").focus().length) {\n        // support: IE9\n        // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n        try {\n          activeElement = this.document[0].activeElement; // Support: IE9, IE10\n          // If the <body> is blurred, IE will switch windows, see #4520\n\n          if (activeElement && activeElement.nodeName.toLowerCase() !== \"body\") {\n            // Hiding a focused element doesn't trigger blur in WebKit\n            // so in case we have nothing to focus on, explicitly blur the active element\n            // https://bugs.webkit.org/show_bug.cgi?id=47182\n            $(activeElement).blur();\n          }\n        } catch (error) {}\n      }\n\n      this._hide(this.uiDialog, this.options.hide, function () {\n        that._trigger(\"close\", event);\n      });\n    },\n    isOpen: function isOpen() {\n      return this._isOpen;\n    },\n    moveToTop: function moveToTop() {\n      this._moveToTop();\n    },\n    _moveToTop: function _moveToTop(event, silent) {\n      var moved = false,\n          zIndices = this.uiDialog.siblings(\".ui-front:visible\").map(function () {\n        return +$(this).css(\"z-index\");\n      }).get(),\n          zIndexMax = Math.max.apply(null, zIndices);\n\n      if (zIndexMax >= +this.uiDialog.css(\"z-index\")) {\n        this.uiDialog.css(\"z-index\", zIndexMax + 1);\n        moved = true;\n      }\n\n      if (moved && !silent) {\n        this._trigger(\"focus\", event);\n      }\n\n      return moved;\n    },\n    open: function open() {\n      var that = this;\n\n      if (this._isOpen) {\n        if (this._moveToTop()) {\n          this._focusTabbable();\n        }\n\n        return;\n      }\n\n      this._isOpen = true;\n      this.opener = $(this.document[0].activeElement);\n\n      this._size();\n\n      this._position();\n\n      this._createOverlay();\n\n      this._moveToTop(null, true); // Ensure the overlay is moved to the top with the dialog, but only when\n      // opening. The overlay shouldn't move after the dialog is open so that\n      // modeless dialogs opened after the modal dialog stack properly.\n\n\n      if (this.overlay) {\n        this.overlay.css(\"z-index\", this.uiDialog.css(\"z-index\") - 1);\n      }\n\n      this._show(this.uiDialog, this.options.show, function () {\n        that._focusTabbable();\n\n        that._trigger(\"focus\");\n      }); // Track the dialog immediately upon openening in case a focus event\n      // somehow occurs outside of the dialog before an element inside the\n      // dialog is focused (#10152)\n\n\n      this._makeFocusTarget();\n\n      this._trigger(\"open\");\n    },\n    _focusTabbable: function _focusTabbable() {\n      // Set focus to the first match:\n      // 1. An element that was focused previously\n      // 2. First element inside the dialog matching [autofocus]\n      // 3. Tabbable element inside the content element\n      // 4. Tabbable element inside the buttonpane\n      // 5. The close button\n      // 6. The dialog itself\n      var hasFocus = this._focusedElement;\n\n      if (!hasFocus) {\n        hasFocus = this.element.find(\"[autofocus]\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.element.find(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogButtonPane.find(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogTitlebarClose.filter(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialog;\n      }\n\n      hasFocus.eq(0).focus();\n    },\n    _keepFocus: function _keepFocus(event) {\n      function checkFocus() {\n        var activeElement = this.document[0].activeElement,\n            isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);\n\n        if (!isActive) {\n          this._focusTabbable();\n        }\n      }\n\n      event.preventDefault();\n      checkFocus.call(this); // support: IE\n      // IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n      // so we check again later\n\n      this._delay(checkFocus);\n    },\n    _createWrapper: function _createWrapper() {\n      this.uiDialog = $(\"<div>\").addClass(\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front \" + this.options.dialogClass).hide().attr({\n        // Setting tabIndex makes the div focusable\n        tabIndex: -1,\n        role: \"dialog\"\n      }).appendTo(this._appendTo());\n\n      this._on(this.uiDialog, {\n        keydown: function keydown(event) {\n          if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {\n            event.preventDefault();\n            this.close(event);\n            return;\n          } // prevent tabbing out of dialogs\n\n\n          if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {\n            return;\n          }\n\n          var tabbables = this.uiDialog.find(\":tabbable\"),\n              first = tabbables.filter(\":first\"),\n              last = tabbables.filter(\":last\");\n\n          if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {\n            this._delay(function () {\n              first.focus();\n            });\n\n            event.preventDefault();\n          } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {\n            this._delay(function () {\n              last.focus();\n            });\n\n            event.preventDefault();\n          }\n        },\n        mousedown: function mousedown(event) {\n          if (this._moveToTop(event)) {\n            this._focusTabbable();\n          }\n        }\n      }); // We assume that any existing aria-describedby attribute means\n      // that the dialog content is marked up properly\n      // otherwise we brute force the content as the description\n\n\n      if (!this.element.find(\"[aria-describedby]\").length) {\n        this.uiDialog.attr({\n          \"aria-describedby\": this.element.uniqueId().attr(\"id\")\n        });\n      }\n    },\n    _createTitlebar: function _createTitlebar() {\n      var uiDialogTitle;\n      this.uiDialogTitlebar = $(\"<div>\").addClass(\"ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix\").prependTo(this.uiDialog);\n\n      this._on(this.uiDialogTitlebar, {\n        mousedown: function mousedown(event) {\n          // Don't prevent click on close button (#8838)\n          // Focusing a dialog that is partially scrolled out of view\n          // causes the browser to scroll it into view, preventing the click event\n          if (!$(event.target).closest(\".ui-dialog-titlebar-close\")) {\n            // Dialog isn't getting focus when dragging (#8063)\n            this.uiDialog.focus();\n          }\n        }\n      }); // support: IE\n      // Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n      // dialog in IE (#9312)\n\n\n      this.uiDialogTitlebarClose = $(\"<button type='button'></button>\").button({\n        label: this.options.closeText,\n        icons: {\n          primary: \"ui-icon-closethick\"\n        },\n        text: false\n      }).addClass(\"ui-dialog-titlebar-close\").appendTo(this.uiDialogTitlebar);\n\n      this._on(this.uiDialogTitlebarClose, {\n        click: function click(event) {\n          event.preventDefault();\n          this.close(event);\n        }\n      });\n\n      uiDialogTitle = $(\"<span>\").uniqueId().addClass(\"ui-dialog-title\").prependTo(this.uiDialogTitlebar);\n\n      this._title(uiDialogTitle);\n\n      this.uiDialog.attr({\n        \"aria-labelledby\": uiDialogTitle.attr(\"id\")\n      });\n    },\n    _title: function _title(title) {\n      if (!this.options.title) {\n        title.html(\"&#160;\");\n      }\n\n      title.text(this.options.title);\n    },\n    _createButtonPane: function _createButtonPane() {\n      this.uiDialogButtonPane = $(\"<div>\").addClass(\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\");\n      this.uiButtonSet = $(\"<div>\").addClass(\"ui-dialog-buttonset\").appendTo(this.uiDialogButtonPane);\n\n      this._createButtons();\n    },\n    _createButtons: function _createButtons() {\n      var that = this,\n          buttons = this.options.buttons; // if we already have a button pane, remove it\n\n      this.uiDialogButtonPane.remove();\n      this.uiButtonSet.empty();\n\n      if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {\n        this.uiDialog.removeClass(\"ui-dialog-buttons\");\n        return;\n      }\n\n      $.each(buttons, function (name, props) {\n        var click, buttonOptions;\n        props = $.isFunction(props) ? {\n          click: props,\n          text: name\n        } : props; // Default to a non-submitting button\n\n        props = $.extend({\n          type: \"button\"\n        }, props); // Change the context for the click callback to be the main element\n\n        click = props.click;\n\n        props.click = function () {\n          click.apply(that.element[0], arguments);\n        };\n\n        buttonOptions = {\n          icons: props.icons,\n          text: props.showText\n        };\n        delete props.icons;\n        delete props.showText;\n        $(\"<button></button>\", props).button(buttonOptions).appendTo(that.uiButtonSet);\n      });\n      this.uiDialog.addClass(\"ui-dialog-buttons\");\n      this.uiDialogButtonPane.appendTo(this.uiDialog);\n    },\n    _makeDraggable: function _makeDraggable() {\n      var that = this,\n          options = this.options;\n\n      function filteredUi(ui) {\n        return {\n          position: ui.position,\n          offset: ui.offset\n        };\n      }\n\n      this.uiDialog.draggable({\n        cancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n        handle: \".ui-dialog-titlebar\",\n        containment: \"document\",\n        start: function start(event, ui) {\n          $(this).addClass(\"ui-dialog-dragging\");\n\n          that._blockFrames();\n\n          that._trigger(\"dragStart\", event, filteredUi(ui));\n        },\n        drag: function drag(event, ui) {\n          that._trigger(\"drag\", event, filteredUi(ui));\n        },\n        stop: function stop(event, ui) {\n          var left = ui.offset.left - that.document.scrollLeft(),\n              top = ui.offset.top - that.document.scrollTop();\n          options.position = {\n            my: \"left top\",\n            at: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n            of: that.window\n          };\n          $(this).removeClass(\"ui-dialog-dragging\");\n\n          that._unblockFrames();\n\n          that._trigger(\"dragStop\", event, filteredUi(ui));\n        }\n      });\n    },\n    _makeResizable: function _makeResizable() {\n      var that = this,\n          options = this.options,\n          handles = options.resizable,\n          // .ui-resizable has position: relative defined in the stylesheet\n      // but dialogs have to use absolute or fixed positioning\n      position = this.uiDialog.css(\"position\"),\n          resizeHandles = typeof handles === \"string\" ? handles : \"n,e,s,w,se,sw,ne,nw\";\n\n      function filteredUi(ui) {\n        return {\n          originalPosition: ui.originalPosition,\n          originalSize: ui.originalSize,\n          position: ui.position,\n          size: ui.size\n        };\n      }\n\n      this.uiDialog.resizable({\n        cancel: \".ui-dialog-content\",\n        containment: \"document\",\n        alsoResize: this.element,\n        maxWidth: options.maxWidth,\n        maxHeight: options.maxHeight,\n        minWidth: options.minWidth,\n        minHeight: this._minHeight(),\n        handles: resizeHandles,\n        start: function start(event, ui) {\n          $(this).addClass(\"ui-dialog-resizing\");\n\n          that._blockFrames();\n\n          that._trigger(\"resizeStart\", event, filteredUi(ui));\n        },\n        resize: function resize(event, ui) {\n          that._trigger(\"resize\", event, filteredUi(ui));\n        },\n        stop: function stop(event, ui) {\n          var offset = that.uiDialog.offset(),\n              left = offset.left - that.document.scrollLeft(),\n              top = offset.top - that.document.scrollTop();\n          options.height = that.uiDialog.height();\n          options.width = that.uiDialog.width();\n          options.position = {\n            my: \"left top\",\n            at: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n            of: that.window\n          };\n          $(this).removeClass(\"ui-dialog-resizing\");\n\n          that._unblockFrames();\n\n          that._trigger(\"resizeStop\", event, filteredUi(ui));\n        }\n      }).css(\"position\", position);\n    },\n    _trackFocus: function _trackFocus() {\n      this._on(this.widget(), {\n        focusin: function focusin(event) {\n          this._makeFocusTarget();\n\n          this._focusedElement = $(event.target);\n        }\n      });\n    },\n    _makeFocusTarget: function _makeFocusTarget() {\n      this._untrackInstance();\n\n      this._trackingInstances().unshift(this);\n    },\n    _untrackInstance: function _untrackInstance() {\n      var instances = this._trackingInstances(),\n          exists = $.inArray(this, instances);\n\n      if (exists !== -1) {\n        instances.splice(exists, 1);\n      }\n    },\n    _trackingInstances: function _trackingInstances() {\n      var instances = this.document.data(\"ui-dialog-instances\");\n\n      if (!instances) {\n        instances = [];\n        this.document.data(\"ui-dialog-instances\", instances);\n      }\n\n      return instances;\n    },\n    _minHeight: function _minHeight() {\n      var options = this.options;\n      return options.height === \"auto\" ? options.minHeight : Math.min(options.minHeight, options.height);\n    },\n    _position: function _position() {\n      // Need to show the dialog to get the actual offset in the position plugin\n      var isVisible = this.uiDialog.is(\":visible\");\n\n      if (!isVisible) {\n        this.uiDialog.show();\n      }\n\n      this.uiDialog.position(this.options.position);\n\n      if (!isVisible) {\n        this.uiDialog.hide();\n      }\n    },\n    _setOptions: function _setOptions(options) {\n      var that = this,\n          resize = false,\n          resizableOptions = {};\n      $.each(options, function (key, value) {\n        that._setOption(key, value);\n\n        if (key in that.sizeRelatedOptions) {\n          resize = true;\n        }\n\n        if (key in that.resizableRelatedOptions) {\n          resizableOptions[key] = value;\n        }\n      });\n\n      if (resize) {\n        this._size();\n\n        this._position();\n      }\n\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", resizableOptions);\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      var isDraggable,\n          isResizable,\n          uiDialog = this.uiDialog;\n\n      if (key === \"dialogClass\") {\n        uiDialog.removeClass(this.options.dialogClass).addClass(value);\n      }\n\n      if (key === \"disabled\") {\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"appendTo\") {\n        this.uiDialog.appendTo(this._appendTo());\n      }\n\n      if (key === \"buttons\") {\n        this._createButtons();\n      }\n\n      if (key === \"closeText\") {\n        this.uiDialogTitlebarClose.button({\n          // Ensure that we always pass a string\n          label: \"\" + value\n        });\n      }\n\n      if (key === \"draggable\") {\n        isDraggable = uiDialog.is(\":data(ui-draggable)\");\n\n        if (isDraggable && !value) {\n          uiDialog.draggable(\"destroy\");\n        }\n\n        if (!isDraggable && value) {\n          this._makeDraggable();\n        }\n      }\n\n      if (key === \"position\") {\n        this._position();\n      }\n\n      if (key === \"resizable\") {\n        // currently resizable, becoming non-resizable\n        isResizable = uiDialog.is(\":data(ui-resizable)\");\n\n        if (isResizable && !value) {\n          uiDialog.resizable(\"destroy\");\n        } // currently resizable, changing handles\n\n\n        if (isResizable && typeof value === \"string\") {\n          uiDialog.resizable(\"option\", \"handles\", value);\n        } // currently non-resizable, becoming resizable\n\n\n        if (!isResizable && value !== false) {\n          this._makeResizable();\n        }\n      }\n\n      if (key === \"title\") {\n        this._title(this.uiDialogTitlebar.find(\".ui-dialog-title\"));\n      }\n    },\n    _size: function _size() {\n      // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n      // divs will both have width and height set, so we need to reset them\n      var nonContentHeight,\n          minContentHeight,\n          maxContentHeight,\n          options = this.options; // Reset content sizing\n\n      this.element.show().css({\n        width: \"auto\",\n        minHeight: 0,\n        maxHeight: \"none\",\n        height: 0\n      });\n\n      if (options.minWidth > options.width) {\n        options.width = options.minWidth;\n      } // reset wrapper sizing\n      // determine the height of all the non-content elements\n\n\n      nonContentHeight = this.uiDialog.css({\n        height: \"auto\",\n        width: options.width\n      }).outerHeight();\n      minContentHeight = Math.max(0, options.minHeight - nonContentHeight);\n      maxContentHeight = typeof options.maxHeight === \"number\" ? Math.max(0, options.maxHeight - nonContentHeight) : \"none\";\n\n      if (options.height === \"auto\") {\n        this.element.css({\n          minHeight: minContentHeight,\n          maxHeight: maxContentHeight,\n          height: \"auto\"\n        });\n      } else {\n        this.element.height(Math.max(0, options.height - nonContentHeight));\n      }\n\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", \"minHeight\", this._minHeight());\n      }\n    },\n    _blockFrames: function _blockFrames() {\n      this.iframeBlocks = this.document.find(\"iframe\").map(function () {\n        var iframe = $(this);\n        return $(\"<div>\").css({\n          position: \"absolute\",\n          width: iframe.outerWidth(),\n          height: iframe.outerHeight()\n        }).appendTo(iframe.parent()).offset(iframe.offset())[0];\n      });\n    },\n    _unblockFrames: function _unblockFrames() {\n      if (this.iframeBlocks) {\n        this.iframeBlocks.remove();\n        delete this.iframeBlocks;\n      }\n    },\n    _allowInteraction: function _allowInteraction(event) {\n      if ($(event.target).closest(\".ui-dialog\").length) {\n        return true;\n      } // TODO: Remove hack when datepicker implements\n      // the .ui-front logic (#8989)\n\n\n      return !!$(event.target).closest(\".ui-datepicker\").length;\n    },\n    _createOverlay: function _createOverlay() {\n      if (!this.options.modal) {\n        return;\n      } // We use a delay in case the overlay is created from an\n      // event that we're going to be cancelling (#2804)\n\n\n      var isOpening = true;\n\n      this._delay(function () {\n        isOpening = false;\n      });\n\n      if (!this.document.data(\"ui-dialog-overlays\")) {\n        // Prevent use of anchors and inputs\n        // Using _on() for an event handler shared across many instances is\n        // safe because the dialogs stack and must be closed in reverse order\n        this._on(this.document, {\n          focusin: function focusin(event) {\n            if (isOpening) {\n              return;\n            }\n\n            if (!this._allowInteraction(event)) {\n              event.preventDefault();\n\n              this._trackingInstances()[0]._focusTabbable();\n            }\n          }\n        });\n      }\n\n      this.overlay = $(\"<div>\").addClass(\"ui-widget-overlay ui-front\").appendTo(this._appendTo());\n\n      this._on(this.overlay, {\n        mousedown: \"_keepFocus\"\n      });\n\n      this.document.data(\"ui-dialog-overlays\", (this.document.data(\"ui-dialog-overlays\") || 0) + 1);\n    },\n    _destroyOverlay: function _destroyOverlay() {\n      if (!this.options.modal) {\n        return;\n      }\n\n      if (this.overlay) {\n        var overlays = this.document.data(\"ui-dialog-overlays\") - 1;\n\n        if (!overlays) {\n          this.document.unbind(\"focusin\").removeData(\"ui-dialog-overlays\");\n        } else {\n          this.document.data(\"ui-dialog-overlays\", overlays);\n        }\n\n        this.overlay.remove();\n        this.overlay = null;\n      }\n    }\n  });\n  /*!\n   * jQuery UI Droppable 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/droppable/\n   */\n\n  $.widget(\"ui.droppable\", {\n    version: \"1.11.4\",\n    widgetEventPrefix: \"drop\",\n    options: {\n      accept: \"*\",\n      activeClass: false,\n      addClasses: true,\n      greedy: false,\n      hoverClass: false,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      // callbacks\n      activate: null,\n      deactivate: null,\n      drop: null,\n      out: null,\n      over: null\n    },\n    _create: function _create() {\n      var proportions,\n          o = this.options,\n          accept = o.accept;\n      this.isover = false;\n      this.isout = true;\n      this.accept = $.isFunction(accept) ? accept : function (d) {\n        return d.is(accept);\n      };\n\n      this.proportions = function ()\n      /* valueToWrite */\n      {\n        if (arguments.length) {\n          // Store the droppable's proportions\n          proportions = arguments[0];\n        } else {\n          // Retrieve or derive the droppable's proportions\n          return proportions ? proportions : proportions = {\n            width: this.element[0].offsetWidth,\n            height: this.element[0].offsetHeight\n          };\n        }\n      };\n\n      this._addToManager(o.scope);\n\n      o.addClasses && this.element.addClass(\"ui-droppable\");\n    },\n    _addToManager: function _addToManager(scope) {\n      // Add the reference and positions to the manager\n      $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];\n      $.ui.ddmanager.droppables[scope].push(this);\n    },\n    _splice: function _splice(drop) {\n      var i = 0;\n\n      for (; i < drop.length; i++) {\n        if (drop[i] === this) {\n          drop.splice(i, 1);\n        }\n      }\n    },\n    _destroy: function _destroy() {\n      var drop = $.ui.ddmanager.droppables[this.options.scope];\n\n      this._splice(drop);\n\n      this.element.removeClass(\"ui-droppable ui-droppable-disabled\");\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"accept\") {\n        this.accept = $.isFunction(value) ? value : function (d) {\n          return d.is(value);\n        };\n      } else if (key === \"scope\") {\n        var drop = $.ui.ddmanager.droppables[this.options.scope];\n\n        this._splice(drop);\n\n        this._addToManager(value);\n      }\n\n      this._super(key, value);\n    },\n    _activate: function _activate(event) {\n      var draggable = $.ui.ddmanager.current;\n\n      if (this.options.activeClass) {\n        this.element.addClass(this.options.activeClass);\n      }\n\n      if (draggable) {\n        this._trigger(\"activate\", event, this.ui(draggable));\n      }\n    },\n    _deactivate: function _deactivate(event) {\n      var draggable = $.ui.ddmanager.current;\n\n      if (this.options.activeClass) {\n        this.element.removeClass(this.options.activeClass);\n      }\n\n      if (draggable) {\n        this._trigger(\"deactivate\", event, this.ui(draggable));\n      }\n    },\n    _over: function _over(event) {\n      var draggable = $.ui.ddmanager.current; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        if (this.options.hoverClass) {\n          this.element.addClass(this.options.hoverClass);\n        }\n\n        this._trigger(\"over\", event, this.ui(draggable));\n      }\n    },\n    _out: function _out(event) {\n      var draggable = $.ui.ddmanager.current; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        if (this.options.hoverClass) {\n          this.element.removeClass(this.options.hoverClass);\n        }\n\n        this._trigger(\"out\", event, this.ui(draggable));\n      }\n    },\n    _drop: function _drop(event, custom) {\n      var draggable = custom || $.ui.ddmanager.current,\n          childrenIntersection = false; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return false;\n      }\n\n      this.element.find(\":data(ui-droppable)\").not(\".ui-draggable-dragging\").each(function () {\n        var inst = $(this).droppable(\"instance\");\n\n        if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {\n          offset: inst.element.offset()\n        }), inst.options.tolerance, event)) {\n          childrenIntersection = true;\n          return false;\n        }\n      });\n\n      if (childrenIntersection) {\n        return false;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        if (this.options.activeClass) {\n          this.element.removeClass(this.options.activeClass);\n        }\n\n        if (this.options.hoverClass) {\n          this.element.removeClass(this.options.hoverClass);\n        }\n\n        this._trigger(\"drop\", event, this.ui(draggable));\n\n        return this.element;\n      }\n\n      return false;\n    },\n    ui: function ui(c) {\n      return {\n        draggable: c.currentItem || c.element,\n        helper: c.helper,\n        position: c.position,\n        offset: c.positionAbs\n      };\n    }\n  });\n\n  $.ui.intersect = function () {\n    function isOverAxis(x, reference, size) {\n      return x >= reference && x < reference + size;\n    }\n\n    return function (draggable, droppable, toleranceMode, event) {\n      if (!droppable.offset) {\n        return false;\n      }\n\n      var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left,\n          y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top,\n          x2 = x1 + draggable.helperProportions.width,\n          y2 = y1 + draggable.helperProportions.height,\n          l = droppable.offset.left,\n          t = droppable.offset.top,\n          r = l + droppable.proportions().width,\n          b = t + droppable.proportions().height;\n\n      switch (toleranceMode) {\n        case \"fit\":\n          return l <= x1 && x2 <= r && t <= y1 && y2 <= b;\n\n        case \"intersect\":\n          return l < x1 + draggable.helperProportions.width / 2 && // Right Half\n          x2 - draggable.helperProportions.width / 2 < r && // Left Half\n          t < y1 + draggable.helperProportions.height / 2 && // Bottom Half\n          y2 - draggable.helperProportions.height / 2 < b;\n        // Top Half\n\n        case \"pointer\":\n          return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);\n\n        case \"touch\":\n          return (y1 >= t && y1 <= b || // Top edge touching\n          y2 >= t && y2 <= b || // Bottom edge touching\n          y1 < t && y2 > b // Surrounded vertically\n          ) && (x1 >= l && x1 <= r || // Left edge touching\n          x2 >= l && x2 <= r || // Right edge touching\n          x1 < l && x2 > r // Surrounded horizontally\n          );\n\n        default:\n          return false;\n      }\n    };\n  }();\n  /*\n  \tThis manager tracks offsets of draggables and droppables\n  */\n\n\n  $.ui.ddmanager = {\n    current: null,\n    droppables: {\n      \"default\": []\n    },\n    prepareOffsets: function prepareOffsets(t, event) {\n      var i,\n          j,\n          m = $.ui.ddmanager.droppables[t.options.scope] || [],\n          type = event ? event.type : null,\n          // workaround for #2317\n      list = (t.currentItem || t.element).find(\":data(ui-droppable)\").addBack();\n\n      droppablesLoop: for (i = 0; i < m.length; i++) {\n        // No disabled and non-accepted\n        if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {\n          continue;\n        } // Filter out elements in the current dragged item\n\n\n        for (j = 0; j < list.length; j++) {\n          if (list[j] === m[i].element[0]) {\n            m[i].proportions().height = 0;\n            continue droppablesLoop;\n          }\n        }\n\n        m[i].visible = m[i].element.css(\"display\") !== \"none\";\n\n        if (!m[i].visible) {\n          continue;\n        } // Activate the droppable if used directly from draggables\n\n\n        if (type === \"mousedown\") {\n          m[i]._activate.call(m[i], event);\n        }\n\n        m[i].offset = m[i].element.offset();\n        m[i].proportions({\n          width: m[i].element[0].offsetWidth,\n          height: m[i].element[0].offsetHeight\n        });\n      }\n    },\n    drop: function drop(draggable, event) {\n      var dropped = false; // Create a copy of the droppables in case the list changes during the drop (#9116)\n\n      $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {\n        if (!this.options) {\n          return;\n        }\n\n        if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event)) {\n          dropped = this._drop.call(this, event) || dropped;\n        }\n\n        if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n          this.isout = true;\n          this.isover = false;\n\n          this._deactivate.call(this, event);\n        }\n      });\n      return dropped;\n    },\n    dragStart: function dragStart(draggable, event) {\n      // Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)\n      draggable.element.parentsUntil(\"body\").bind(\"scroll.droppable\", function () {\n        if (!draggable.options.refreshPositions) {\n          $.ui.ddmanager.prepareOffsets(draggable, event);\n        }\n      });\n    },\n    drag: function drag(draggable, event) {\n      // If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.\n      if (draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      } // Run through all droppables and check their positions based on specific tolerance options\n\n\n      $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {\n        if (this.options.disabled || this.greedyChild || !this.visible) {\n          return;\n        }\n\n        var parentInstance,\n            scope,\n            parent,\n            intersects = $.ui.intersect(draggable, this, this.options.tolerance, event),\n            c = !intersects && this.isover ? \"isout\" : intersects && !this.isover ? \"isover\" : null;\n\n        if (!c) {\n          return;\n        }\n\n        if (this.options.greedy) {\n          // find droppable parents with same scope\n          scope = this.options.scope;\n          parent = this.element.parents(\":data(ui-droppable)\").filter(function () {\n            return $(this).droppable(\"instance\").options.scope === scope;\n          });\n\n          if (parent.length) {\n            parentInstance = $(parent[0]).droppable(\"instance\");\n            parentInstance.greedyChild = c === \"isover\";\n          }\n        } // we just moved into a greedy child\n\n\n        if (parentInstance && c === \"isover\") {\n          parentInstance.isover = false;\n          parentInstance.isout = true;\n\n          parentInstance._out.call(parentInstance, event);\n        }\n\n        this[c] = true;\n        this[c === \"isout\" ? \"isover\" : \"isout\"] = false;\n        this[c === \"isover\" ? \"_over\" : \"_out\"].call(this, event); // we just moved out of a greedy child\n\n        if (parentInstance && c === \"isout\") {\n          parentInstance.isout = false;\n          parentInstance.isover = true;\n\n          parentInstance._over.call(parentInstance, event);\n        }\n      });\n    },\n    dragStop: function dragStop(draggable, event) {\n      draggable.element.parentsUntil(\"body\").unbind(\"scroll.droppable\"); // Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)\n\n      if (!draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      }\n    }\n  };\n  var droppable = $.ui.droppable;\n  /*!\n   * jQuery UI Effects 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/category/effects-core/\n   */\n\n  var dataSpace = \"ui-effects-\",\n      // Create a local jQuery because jQuery Color relies on it and the\n  // global may not exist with AMD and a custom build (#10199)\n  jQuery = $;\n  $.effects = {\n    effect: {}\n  };\n  /*!\n   * jQuery Color Animations v2.1.2\n   * https://github.com/jquery/jquery-color\n   *\n   * Copyright 2014 jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * Date: Wed Jan 16 08:47:09 2013 -0600\n   */\n\n  (function (jQuery, undefined) {\n    var stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n        // plusequals test for += 100 -= 100\n    rplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n        // a set of RE's that can match strings and generate color tuples.\n    stringParsers = [{\n      re: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2], execResult[3], execResult[4]];\n      }\n    }, {\n      re: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];\n      }\n    }, {\n      // this regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)];\n      }\n    }, {\n      // this regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)];\n      }\n    }, {\n      re: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      space: \"hsla\",\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];\n      }\n    }],\n        // jQuery.Color( )\n    color = jQuery.Color = function (color, green, blue, alpha) {\n      return new jQuery.Color.fn.parse(color, green, blue, alpha);\n    },\n        spaces = {\n      rgba: {\n        props: {\n          red: {\n            idx: 0,\n            type: \"byte\"\n          },\n          green: {\n            idx: 1,\n            type: \"byte\"\n          },\n          blue: {\n            idx: 2,\n            type: \"byte\"\n          }\n        }\n      },\n      hsla: {\n        props: {\n          hue: {\n            idx: 0,\n            type: \"degrees\"\n          },\n          saturation: {\n            idx: 1,\n            type: \"percent\"\n          },\n          lightness: {\n            idx: 2,\n            type: \"percent\"\n          }\n        }\n      }\n    },\n        propTypes = {\n      \"byte\": {\n        floor: true,\n        max: 255\n      },\n      \"percent\": {\n        max: 1\n      },\n      \"degrees\": {\n        mod: 360,\n        floor: true\n      }\n    },\n        support = color.support = {},\n        // element for support tests\n    supportElem = jQuery(\"<p>\")[0],\n        // colors = jQuery.Color.names\n    colors,\n        // local aliases of functions called often\n    each = jQuery.each; // determine rgba support immediately\n\n\n    supportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\n    support.rgba = supportElem.style.backgroundColor.indexOf(\"rgba\") > -1; // define cache name and alpha properties\n    // for rgba and hsla spaces\n\n    each(spaces, function (spaceName, space) {\n      space.cache = \"_\" + spaceName;\n      space.props.alpha = {\n        idx: 3,\n        type: \"percent\",\n        def: 1\n      };\n    });\n\n    function clamp(value, prop, allowEmpty) {\n      var type = propTypes[prop.type] || {};\n\n      if (value == null) {\n        return allowEmpty || !prop.def ? null : prop.def;\n      } // ~~ is an short way of doing floor for positive numbers\n\n\n      value = type.floor ? ~~value : parseFloat(value); // IE will pass in empty strings as value for alpha,\n      // which will hit this case\n\n      if (isNaN(value)) {\n        return prop.def;\n      }\n\n      if (type.mod) {\n        // we add mod before modding to make sure that negatives values\n        // get converted properly: -10 -> 350\n        return (value + type.mod) % type.mod;\n      } // for now all property types without mod have min and max\n\n\n      return 0 > value ? 0 : type.max < value ? type.max : value;\n    }\n\n    function stringParse(string) {\n      var inst = color(),\n          rgba = inst._rgba = [];\n      string = string.toLowerCase();\n      each(stringParsers, function (i, parser) {\n        var parsed,\n            match = parser.re.exec(string),\n            values = match && parser.parse(match),\n            spaceName = parser.space || \"rgba\";\n\n        if (values) {\n          parsed = inst[spaceName](values); // if this was an rgba parse the assignment might happen twice\n          // oh well....\n\n          inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];\n          rgba = inst._rgba = parsed._rgba; // exit each( stringParsers ) here because we matched\n\n          return false;\n        }\n      }); // Found a stringParser that handled it\n\n      if (rgba.length) {\n        // if this came from a parsed string, force \"transparent\" when alpha is 0\n        // chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n        if (rgba.join() === \"0,0,0,0\") {\n          jQuery.extend(rgba, colors.transparent);\n        }\n\n        return inst;\n      } // named colors\n\n\n      return colors[string];\n    }\n\n    color.fn = jQuery.extend(color.prototype, {\n      parse: function parse(red, green, blue, alpha) {\n        if (red === undefined) {\n          this._rgba = [null, null, null, null];\n          return this;\n        }\n\n        if (red.jquery || red.nodeType) {\n          red = jQuery(red).css(green);\n          green = undefined;\n        }\n\n        var inst = this,\n            type = jQuery.type(red),\n            rgba = this._rgba = []; // more than 1 argument specified - assume ( red, green, blue, alpha )\n\n        if (green !== undefined) {\n          red = [red, green, blue, alpha];\n          type = \"array\";\n        }\n\n        if (type === \"string\") {\n          return this.parse(stringParse(red) || colors._default);\n        }\n\n        if (type === \"array\") {\n          each(spaces.rgba.props, function (key, prop) {\n            rgba[prop.idx] = clamp(red[prop.idx], prop);\n          });\n          return this;\n        }\n\n        if (type === \"object\") {\n          if (red instanceof color) {\n            each(spaces, function (spaceName, space) {\n              if (red[space.cache]) {\n                inst[space.cache] = red[space.cache].slice();\n              }\n            });\n          } else {\n            each(spaces, function (spaceName, space) {\n              var cache = space.cache;\n              each(space.props, function (key, prop) {\n                // if the cache doesn't exist, and we know how to convert\n                if (!inst[cache] && space.to) {\n                  // if the value was null, we don't need to copy it\n                  // if the key was alpha, we don't need to copy it either\n                  if (key === \"alpha\" || red[key] == null) {\n                    return;\n                  }\n\n                  inst[cache] = space.to(inst._rgba);\n                } // this is the only case where we allow nulls for ALL properties.\n                // call clamp with alwaysAllowEmpty\n\n\n                inst[cache][prop.idx] = clamp(red[key], prop, true);\n              }); // everything defined but alpha?\n\n              if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {\n                // use the default of 1\n                inst[cache][3] = 1;\n\n                if (space.from) {\n                  inst._rgba = space.from(inst[cache]);\n                }\n              }\n            });\n          }\n\n          return this;\n        }\n      },\n      is: function is(compare) {\n        var is = color(compare),\n            same = true,\n            inst = this;\n        each(spaces, function (_, space) {\n          var localCache,\n              isCache = is[space.cache];\n\n          if (isCache) {\n            localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];\n            each(space.props, function (_, prop) {\n              if (isCache[prop.idx] != null) {\n                same = isCache[prop.idx] === localCache[prop.idx];\n                return same;\n              }\n            });\n          }\n\n          return same;\n        });\n        return same;\n      },\n      _space: function _space() {\n        var used = [],\n            inst = this;\n        each(spaces, function (spaceName, space) {\n          if (inst[space.cache]) {\n            used.push(spaceName);\n          }\n        });\n        return used.pop();\n      },\n      transition: function transition(other, distance) {\n        var end = color(other),\n            spaceName = end._space(),\n            space = spaces[spaceName],\n            startColor = this.alpha() === 0 ? color(\"transparent\") : this,\n            start = startColor[space.cache] || space.to(startColor._rgba),\n            result = start.slice();\n\n        end = end[space.cache];\n        each(space.props, function (key, prop) {\n          var index = prop.idx,\n              startValue = start[index],\n              endValue = end[index],\n              type = propTypes[prop.type] || {}; // if null, don't override start value\n\n          if (endValue === null) {\n            return;\n          } // if null - use end\n\n\n          if (startValue === null) {\n            result[index] = endValue;\n          } else {\n            if (type.mod) {\n              if (endValue - startValue > type.mod / 2) {\n                startValue += type.mod;\n              } else if (startValue - endValue > type.mod / 2) {\n                startValue -= type.mod;\n              }\n            }\n\n            result[index] = clamp((endValue - startValue) * distance + startValue, prop);\n          }\n        });\n        return this[spaceName](result);\n      },\n      blend: function blend(opaque) {\n        // if we are already opaque - return ourself\n        if (this._rgba[3] === 1) {\n          return this;\n        }\n\n        var rgb = this._rgba.slice(),\n            a = rgb.pop(),\n            blend = color(opaque)._rgba;\n\n        return color(jQuery.map(rgb, function (v, i) {\n          return (1 - a) * blend[i] + a * v;\n        }));\n      },\n      toRgbaString: function toRgbaString() {\n        var prefix = \"rgba(\",\n            rgba = jQuery.map(this._rgba, function (v, i) {\n          return v == null ? i > 2 ? 1 : 0 : v;\n        });\n\n        if (rgba[3] === 1) {\n          rgba.pop();\n          prefix = \"rgb(\";\n        }\n\n        return prefix + rgba.join() + \")\";\n      },\n      toHslaString: function toHslaString() {\n        var prefix = \"hsla(\",\n            hsla = jQuery.map(this.hsla(), function (v, i) {\n          if (v == null) {\n            v = i > 2 ? 1 : 0;\n          } // catch 1 and 2\n\n\n          if (i && i < 3) {\n            v = Math.round(v * 100) + \"%\";\n          }\n\n          return v;\n        });\n\n        if (hsla[3] === 1) {\n          hsla.pop();\n          prefix = \"hsl(\";\n        }\n\n        return prefix + hsla.join() + \")\";\n      },\n      toHexString: function toHexString(includeAlpha) {\n        var rgba = this._rgba.slice(),\n            alpha = rgba.pop();\n\n        if (includeAlpha) {\n          rgba.push(~~(alpha * 255));\n        }\n\n        return \"#\" + jQuery.map(rgba, function (v) {\n          // default to 0 when nulls exist\n          v = (v || 0).toString(16);\n          return v.length === 1 ? \"0\" + v : v;\n        }).join(\"\");\n      },\n      toString: function toString() {\n        return this._rgba[3] === 0 ? \"transparent\" : this.toRgbaString();\n      }\n    });\n    color.fn.parse.prototype = color.fn; // hsla conversions adapted from:\n    // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\n    function hue2rgb(p, q, h) {\n      h = (h + 1) % 1;\n\n      if (h * 6 < 1) {\n        return p + (q - p) * h * 6;\n      }\n\n      if (h * 2 < 1) {\n        return q;\n      }\n\n      if (h * 3 < 2) {\n        return p + (q - p) * (2 / 3 - h) * 6;\n      }\n\n      return p;\n    }\n\n    spaces.hsla.to = function (rgba) {\n      if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {\n        return [null, null, null, rgba[3]];\n      }\n\n      var r = rgba[0] / 255,\n          g = rgba[1] / 255,\n          b = rgba[2] / 255,\n          a = rgba[3],\n          max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          diff = max - min,\n          add = max + min,\n          l = add * 0.5,\n          h,\n          s;\n\n      if (min === max) {\n        h = 0;\n      } else if (r === max) {\n        h = 60 * (g - b) / diff + 360;\n      } else if (g === max) {\n        h = 60 * (b - r) / diff + 120;\n      } else {\n        h = 60 * (r - g) / diff + 240;\n      } // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n      // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n\n\n      if (diff === 0) {\n        s = 0;\n      } else if (l <= 0.5) {\n        s = diff / add;\n      } else {\n        s = diff / (2 - add);\n      }\n\n      return [Math.round(h) % 360, s, l, a == null ? 1 : a];\n    };\n\n    spaces.hsla.from = function (hsla) {\n      if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {\n        return [null, null, null, hsla[3]];\n      }\n\n      var h = hsla[0] / 360,\n          s = hsla[1],\n          l = hsla[2],\n          a = hsla[3],\n          q = l <= 0.5 ? l * (1 + s) : l + s - l * s,\n          p = 2 * l - q;\n      return [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a];\n    };\n\n    each(spaces, function (spaceName, space) {\n      var props = space.props,\n          cache = space.cache,\n          to = space.to,\n          from = space.from; // makes rgba() and hsla()\n\n      color.fn[spaceName] = function (value) {\n        // generate a cache for this space if it doesn't exist\n        if (to && !this[cache]) {\n          this[cache] = to(this._rgba);\n        }\n\n        if (value === undefined) {\n          return this[cache].slice();\n        }\n\n        var ret,\n            type = jQuery.type(value),\n            arr = type === \"array\" || type === \"object\" ? value : arguments,\n            local = this[cache].slice();\n        each(props, function (key, prop) {\n          var val = arr[type === \"object\" ? key : prop.idx];\n\n          if (val == null) {\n            val = local[prop.idx];\n          }\n\n          local[prop.idx] = clamp(val, prop);\n        });\n\n        if (from) {\n          ret = color(from(local));\n          ret[cache] = local;\n          return ret;\n        } else {\n          return color(local);\n        }\n      }; // makes red() green() blue() alpha() hue() saturation() lightness()\n\n\n      each(props, function (key, prop) {\n        // alpha is included in more than one space\n        if (color.fn[key]) {\n          return;\n        }\n\n        color.fn[key] = function (value) {\n          var vtype = jQuery.type(value),\n              fn = key === \"alpha\" ? this._hsla ? \"hsla\" : \"rgba\" : spaceName,\n              local = this[fn](),\n              cur = local[prop.idx],\n              match;\n\n          if (vtype === \"undefined\") {\n            return cur;\n          }\n\n          if (vtype === \"function\") {\n            value = value.call(this, cur);\n            vtype = jQuery.type(value);\n          }\n\n          if (value == null && prop.empty) {\n            return this;\n          }\n\n          if (vtype === \"string\") {\n            match = rplusequals.exec(value);\n\n            if (match) {\n              value = cur + parseFloat(match[2]) * (match[1] === \"+\" ? 1 : -1);\n            }\n          }\n\n          local[prop.idx] = value;\n          return this[fn](local);\n        };\n      });\n    }); // add cssHook and .fx.step function for each named hook.\n    // accept a space separated string of properties\n\n    color.hook = function (hook) {\n      var hooks = hook.split(\" \");\n      each(hooks, function (i, hook) {\n        jQuery.cssHooks[hook] = {\n          set: function set(elem, value) {\n            var parsed,\n                curElem,\n                backgroundColor = \"\";\n\n            if (value !== \"transparent\" && (jQuery.type(value) !== \"string\" || (parsed = stringParse(value)))) {\n              value = color(parsed || value);\n\n              if (!support.rgba && value._rgba[3] !== 1) {\n                curElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n\n                while ((backgroundColor === \"\" || backgroundColor === \"transparent\") && curElem && curElem.style) {\n                  try {\n                    backgroundColor = jQuery.css(curElem, \"backgroundColor\");\n                    curElem = curElem.parentNode;\n                  } catch (e) {}\n                }\n\n                value = value.blend(backgroundColor && backgroundColor !== \"transparent\" ? backgroundColor : \"_default\");\n              }\n\n              value = value.toRgbaString();\n            }\n\n            try {\n              elem.style[hook] = value;\n            } catch (e) {// wrapped to prevent IE from throwing errors on \"invalid\" values like 'auto' or 'inherit'\n            }\n          }\n        };\n\n        jQuery.fx.step[hook] = function (fx) {\n          if (!fx.colorInit) {\n            fx.start = color(fx.elem, hook);\n            fx.end = color(fx.end);\n            fx.colorInit = true;\n          }\n\n          jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));\n        };\n      });\n    };\n\n    color.hook(stepHooks);\n    jQuery.cssHooks.borderColor = {\n      expand: function expand(value) {\n        var expanded = {};\n        each([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (i, part) {\n          expanded[\"border\" + part + \"Color\"] = value;\n        });\n        return expanded;\n      }\n    }; // Basic color names only.\n    // Usage of any of the other color names requires adding yourself or including\n    // jquery.color.svg-names.js.\n\n    colors = jQuery.Color.names = {\n      // 4.1. Basic color keywords\n      aqua: \"#00ffff\",\n      black: \"#000000\",\n      blue: \"#0000ff\",\n      fuchsia: \"#ff00ff\",\n      gray: \"#808080\",\n      green: \"#008000\",\n      lime: \"#00ff00\",\n      maroon: \"#800000\",\n      navy: \"#000080\",\n      olive: \"#808000\",\n      purple: \"#800080\",\n      red: \"#ff0000\",\n      silver: \"#c0c0c0\",\n      teal: \"#008080\",\n      white: \"#ffffff\",\n      yellow: \"#ffff00\",\n      // 4.2.3. \"transparent\" color keyword\n      transparent: [null, null, null, 0],\n      _default: \"#ffffff\"\n    };\n  })(jQuery);\n  /******************************************************************************/\n\n  /****************************** CLASS ANIMATIONS ******************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    var classAnimationActions = [\"add\", \"remove\", \"toggle\"],\n        shorthandStyles = {\n      border: 1,\n      borderBottom: 1,\n      borderColor: 1,\n      borderLeft: 1,\n      borderRight: 1,\n      borderTop: 1,\n      borderWidth: 1,\n      margin: 1,\n      padding: 1\n    };\n    $.each([\"borderLeftStyle\", \"borderRightStyle\", \"borderBottomStyle\", \"borderTopStyle\"], function (_, prop) {\n      $.fx.step[prop] = function (fx) {\n        if (fx.end !== \"none\" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {\n          jQuery.style(fx.elem, prop, fx.end);\n          fx.setAttr = true;\n        }\n      };\n    });\n\n    function getElementStyles(elem) {\n      var key,\n          len,\n          style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle,\n          styles = {};\n\n      if (style && style.length && style[0] && style[style[0]]) {\n        len = style.length;\n\n        while (len--) {\n          key = style[len];\n\n          if (typeof style[key] === \"string\") {\n            styles[$.camelCase(key)] = style[key];\n          }\n        } // support: Opera, IE <9\n\n      } else {\n        for (key in style) {\n          if (typeof style[key] === \"string\") {\n            styles[key] = style[key];\n          }\n        }\n      }\n\n      return styles;\n    }\n\n    function styleDifference(oldStyle, newStyle) {\n      var diff = {},\n          name,\n          value;\n\n      for (name in newStyle) {\n        value = newStyle[name];\n\n        if (oldStyle[name] !== value) {\n          if (!shorthandStyles[name]) {\n            if ($.fx.step[name] || !isNaN(parseFloat(value))) {\n              diff[name] = value;\n            }\n          }\n        }\n      }\n\n      return diff;\n    } // support: jQuery <1.8\n\n\n    if (!$.fn.addBack) {\n      $.fn.addBack = function (selector) {\n        return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n      };\n    }\n\n    $.effects.animateClass = function (value, duration, easing, callback) {\n      var o = $.speed(duration, easing, callback);\n      return this.queue(function () {\n        var animated = $(this),\n            baseClass = animated.attr(\"class\") || \"\",\n            applyClassChange,\n            allAnimations = o.children ? animated.find(\"*\").addBack() : animated; // map the animated objects to store the original styles.\n\n        allAnimations = allAnimations.map(function () {\n          var el = $(this);\n          return {\n            el: el,\n            start: getElementStyles(this)\n          };\n        }); // apply class change\n\n        applyClassChange = function applyClassChange() {\n          $.each(classAnimationActions, function (i, action) {\n            if (value[action]) {\n              animated[action + \"Class\"](value[action]);\n            }\n          });\n        };\n\n        applyClassChange(); // map all animated objects again - calculate new styles and diff\n\n        allAnimations = allAnimations.map(function () {\n          this.end = getElementStyles(this.el[0]);\n          this.diff = styleDifference(this.start, this.end);\n          return this;\n        }); // apply original class\n\n        animated.attr(\"class\", baseClass); // map all animated objects again - this time collecting a promise\n\n        allAnimations = allAnimations.map(function () {\n          var styleInfo = this,\n              dfd = $.Deferred(),\n              opts = $.extend({}, o, {\n            queue: false,\n            complete: function complete() {\n              dfd.resolve(styleInfo);\n            }\n          });\n          this.el.animate(this.diff, opts);\n          return dfd.promise();\n        }); // once all animations have completed:\n\n        $.when.apply($, allAnimations.get()).done(function () {\n          // set the final class\n          applyClassChange(); // for each animated element,\n          // clear all css properties that were animated\n\n          $.each(arguments, function () {\n            var el = this.el;\n            $.each(this.diff, function (key) {\n              el.css(key, \"\");\n            });\n          }); // this is guarnteed to be there if you use jQuery.speed()\n          // it also handles dequeuing the next anim...\n\n          o.complete.call(animated[0]);\n        });\n      });\n    };\n\n    $.fn.extend({\n      addClass: function (orig) {\n        return function (classNames, speed, easing, callback) {\n          return speed ? $.effects.animateClass.call(this, {\n            add: classNames\n          }, speed, easing, callback) : orig.apply(this, arguments);\n        };\n      }($.fn.addClass),\n      removeClass: function (orig) {\n        return function (classNames, speed, easing, callback) {\n          return arguments.length > 1 ? $.effects.animateClass.call(this, {\n            remove: classNames\n          }, speed, easing, callback) : orig.apply(this, arguments);\n        };\n      }($.fn.removeClass),\n      toggleClass: function (orig) {\n        return function (classNames, force, speed, easing, callback) {\n          if (typeof force === \"boolean\" || force === undefined) {\n            if (!speed) {\n              // without speed parameter\n              return orig.apply(this, arguments);\n            } else {\n              return $.effects.animateClass.call(this, force ? {\n                add: classNames\n              } : {\n                remove: classNames\n              }, speed, easing, callback);\n            }\n          } else {\n            // without force parameter\n            return $.effects.animateClass.call(this, {\n              toggle: classNames\n            }, force, speed, easing);\n          }\n        };\n      }($.fn.toggleClass),\n      switchClass: function switchClass(remove, add, speed, easing, callback) {\n        return $.effects.animateClass.call(this, {\n          add: add,\n          remove: remove\n        }, speed, easing, callback);\n      }\n    });\n  })();\n  /******************************************************************************/\n\n  /*********************************** EFFECTS **********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    $.extend($.effects, {\n      version: \"1.11.4\",\n      // Saves a set of properties in a data storage\n      save: function save(element, set) {\n        for (var i = 0; i < set.length; i++) {\n          if (set[i] !== null) {\n            element.data(dataSpace + set[i], element[0].style[set[i]]);\n          }\n        }\n      },\n      // Restores a set of previously saved properties from a data storage\n      restore: function restore(element, set) {\n        var val, i;\n\n        for (i = 0; i < set.length; i++) {\n          if (set[i] !== null) {\n            val = element.data(dataSpace + set[i]); // support: jQuery 1.6.2\n            // http://bugs.jquery.com/ticket/9917\n            // jQuery 1.6.2 incorrectly returns undefined for any falsy value.\n            // We can't differentiate between \"\" and 0 here, so we just assume\n            // empty string since it's likely to be a more common value...\n\n            if (val === undefined) {\n              val = \"\";\n            }\n\n            element.css(set[i], val);\n          }\n        }\n      },\n      setMode: function setMode(el, mode) {\n        if (mode === \"toggle\") {\n          mode = el.is(\":hidden\") ? \"show\" : \"hide\";\n        }\n\n        return mode;\n      },\n      // Translates a [top,left] array into a baseline value\n      // this should be a little more flexible in the future to handle a string & hash\n      getBaseline: function getBaseline(origin, original) {\n        var y, x;\n\n        switch (origin[0]) {\n          case \"top\":\n            y = 0;\n            break;\n\n          case \"middle\":\n            y = 0.5;\n            break;\n\n          case \"bottom\":\n            y = 1;\n            break;\n\n          default:\n            y = origin[0] / original.height;\n        }\n\n        switch (origin[1]) {\n          case \"left\":\n            x = 0;\n            break;\n\n          case \"center\":\n            x = 0.5;\n            break;\n\n          case \"right\":\n            x = 1;\n            break;\n\n          default:\n            x = origin[1] / original.width;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n      // Wraps the element around a wrapper that copies position properties\n      createWrapper: function createWrapper(element) {\n        // if the element is already wrapped, return it\n        if (element.parent().is(\".ui-effects-wrapper\")) {\n          return element.parent();\n        } // wrap the element\n\n\n        var props = {\n          width: element.outerWidth(true),\n          height: element.outerHeight(true),\n          \"float\": element.css(\"float\")\n        },\n            wrapper = $(\"<div></div>\").addClass(\"ui-effects-wrapper\").css({\n          fontSize: \"100%\",\n          background: \"transparent\",\n          border: \"none\",\n          margin: 0,\n          padding: 0\n        }),\n            // Store the size in case width/height are defined in % - Fixes #5245\n        size = {\n          width: element.width(),\n          height: element.height()\n        },\n            active = document.activeElement; // support: Firefox\n        // Firefox incorrectly exposes anonymous content\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=561664\n\n        try {\n          active.id;\n        } catch (e) {\n          active = document.body;\n        }\n\n        element.wrap(wrapper); // Fixes #7595 - Elements lose focus when wrapped.\n\n        if (element[0] === active || $.contains(element[0], active)) {\n          $(active).focus();\n        }\n\n        wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element\n        // transfer positioning properties to the wrapper\n\n        if (element.css(\"position\") === \"static\") {\n          wrapper.css({\n            position: \"relative\"\n          });\n          element.css({\n            position: \"relative\"\n          });\n        } else {\n          $.extend(props, {\n            position: element.css(\"position\"),\n            zIndex: element.css(\"z-index\")\n          });\n          $.each([\"top\", \"left\", \"bottom\", \"right\"], function (i, pos) {\n            props[pos] = element.css(pos);\n\n            if (isNaN(parseInt(props[pos], 10))) {\n              props[pos] = \"auto\";\n            }\n          });\n          element.css({\n            position: \"relative\",\n            top: 0,\n            left: 0,\n            right: \"auto\",\n            bottom: \"auto\"\n          });\n        }\n\n        element.css(size);\n        return wrapper.css(props).show();\n      },\n      removeWrapper: function removeWrapper(element) {\n        var active = document.activeElement;\n\n        if (element.parent().is(\".ui-effects-wrapper\")) {\n          element.parent().replaceWith(element); // Fixes #7595 - Elements lose focus when wrapped.\n\n          if (element[0] === active || $.contains(element[0], active)) {\n            $(active).focus();\n          }\n        }\n\n        return element;\n      },\n      setTransition: function setTransition(element, list, factor, value) {\n        value = value || {};\n        $.each(list, function (i, x) {\n          var unit = element.cssUnit(x);\n\n          if (unit[0] > 0) {\n            value[x] = unit[0] * factor + unit[1];\n          }\n        });\n        return value;\n      }\n    }); // return an effect options object for the given parameters:\n\n    function _normalizeArguments(effect, options, speed, callback) {\n      // allow passing all options as the first parameter\n      if ($.isPlainObject(effect)) {\n        options = effect;\n        effect = effect.effect;\n      } // convert to an object\n\n\n      effect = {\n        effect: effect\n      }; // catch (effect, null, ...)\n\n      if (options == null) {\n        options = {};\n      } // catch (effect, callback)\n\n\n      if ($.isFunction(options)) {\n        callback = options;\n        speed = null;\n        options = {};\n      } // catch (effect, speed, ?)\n\n\n      if (typeof options === \"number\" || $.fx.speeds[options]) {\n        callback = speed;\n        speed = options;\n        options = {};\n      } // catch (effect, options, callback)\n\n\n      if ($.isFunction(speed)) {\n        callback = speed;\n        speed = null;\n      } // add options to effect\n\n\n      if (options) {\n        $.extend(effect, options);\n      }\n\n      speed = speed || options.duration;\n      effect.duration = $.fx.off ? 0 : typeof speed === \"number\" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;\n      effect.complete = callback || options.complete;\n      return effect;\n    }\n\n    function standardAnimationOption(option) {\n      // Valid standard speeds (nothing, number, named speed)\n      if (!option || typeof option === \"number\" || $.fx.speeds[option]) {\n        return true;\n      } // Invalid strings - treat as \"normal\" speed\n\n\n      if (typeof option === \"string\" && !$.effects.effect[option]) {\n        return true;\n      } // Complete callback\n\n\n      if ($.isFunction(option)) {\n        return true;\n      } // Options hash (but not naming an effect)\n\n\n      if (_typeof(option) === \"object\" && !option.effect) {\n        return true;\n      } // Didn't match any standard API\n\n\n      return false;\n    }\n\n    $.fn.extend({\n      effect: function effect()\n      /* effect, options, speed, callback */\n      {\n        var args = _normalizeArguments.apply(this, arguments),\n            mode = args.mode,\n            queue = args.queue,\n            effectMethod = $.effects.effect[args.effect];\n\n        if ($.fx.off || !effectMethod) {\n          // delegate to the original method (e.g., .show()) if possible\n          if (mode) {\n            return this[mode](args.duration, args.complete);\n          } else {\n            return this.each(function () {\n              if (args.complete) {\n                args.complete.call(this);\n              }\n            });\n          }\n        }\n\n        function run(next) {\n          var elem = $(this),\n              complete = args.complete,\n              mode = args.mode;\n\n          function done() {\n            if ($.isFunction(complete)) {\n              complete.call(elem[0]);\n            }\n\n            if ($.isFunction(next)) {\n              next();\n            }\n          } // If the element already has the correct final state, delegate to\n          // the core methods so the internal tracking of \"olddisplay\" works.\n\n\n          if (elem.is(\":hidden\") ? mode === \"hide\" : mode === \"show\") {\n            elem[mode]();\n            done();\n          } else {\n            effectMethod.call(elem[0], args, done);\n          }\n        }\n\n        return queue === false ? this.each(run) : this.queue(queue || \"fx\", run);\n      },\n      show: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option)) {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"show\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.show),\n      hide: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option)) {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"hide\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.hide),\n      toggle: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option) || typeof option === \"boolean\") {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"toggle\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.toggle),\n      // helper functions\n      cssUnit: function cssUnit(key) {\n        var style = this.css(key),\n            val = [];\n        $.each([\"em\", \"px\", \"%\", \"pt\"], function (i, unit) {\n          if (style.indexOf(unit) > 0) {\n            val = [parseFloat(style), unit];\n          }\n        });\n        return val;\n      }\n    });\n  })();\n  /******************************************************************************/\n\n  /*********************************** EASING ***********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    // based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\n    var baseEasings = {};\n    $.each([\"Quad\", \"Cubic\", \"Quart\", \"Quint\", \"Expo\"], function (i, name) {\n      baseEasings[name] = function (p) {\n        return Math.pow(p, i + 2);\n      };\n    });\n    $.extend(baseEasings, {\n      Sine: function Sine(p) {\n        return 1 - Math.cos(p * Math.PI / 2);\n      },\n      Circ: function Circ(p) {\n        return 1 - Math.sqrt(1 - p * p);\n      },\n      Elastic: function Elastic(p) {\n        return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);\n      },\n      Back: function Back(p) {\n        return p * p * (3 * p - 2);\n      },\n      Bounce: function Bounce(p) {\n        var pow2,\n            bounce = 4;\n\n        while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}\n\n        return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);\n      }\n    });\n    $.each(baseEasings, function (name, easeIn) {\n      $.easing[\"easeIn\" + name] = easeIn;\n\n      $.easing[\"easeOut\" + name] = function (p) {\n        return 1 - easeIn(1 - p);\n      };\n\n      $.easing[\"easeInOut\" + name] = function (p) {\n        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;\n      };\n    });\n  })();\n\n  var effect = $.effects;\n  /*!\n   * jQuery UI Effects Blind 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/blind-effect/\n   */\n\n  var effectBlind = $.effects.effect.blind = function (o, done) {\n    // Create element\n    var el = $(this),\n        rvertical = /up|down|vertical/,\n        rpositivemotion = /up|left|vertical|horizontal/,\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        direction = o.direction || \"up\",\n        vertical = rvertical.test(direction),\n        ref = vertical ? \"height\" : \"width\",\n        ref2 = vertical ? \"top\" : \"left\",\n        motion = rpositivemotion.test(direction),\n        animation = {},\n        show = mode === \"show\",\n        wrapper,\n        distance,\n        margin; // if already wrapped, the wrapper's properties are my property. #6245\n\n    if (el.parent().is(\".ui-effects-wrapper\")) {\n      $.effects.save(el.parent(), props);\n    } else {\n      $.effects.save(el, props);\n    }\n\n    el.show();\n    wrapper = $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n    distance = wrapper[ref]();\n    margin = parseFloat(wrapper.css(ref2)) || 0;\n    animation[ref] = show ? distance : 0;\n\n    if (!motion) {\n      el.css(vertical ? \"bottom\" : \"right\", 0).css(vertical ? \"top\" : \"left\", \"auto\").css({\n        position: \"absolute\"\n      });\n      animation[ref2] = show ? margin : distance + margin;\n    } // start at 0 if we are showing\n\n\n    if (show) {\n      wrapper.css(ref, 0);\n\n      if (!motion) {\n        wrapper.css(ref2, margin + distance);\n      }\n    } // Animate\n\n\n    wrapper.animate(animation, {\n      duration: o.duration,\n      easing: o.easing,\n      queue: false,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n  /*!\n   * jQuery UI Effects Bounce 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/bounce-effect/\n   */\n\n\n  var effectBounce = $.effects.effect.bounce = function (o, done) {\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        // defaults:\n    mode = $.effects.setMode(el, o.mode || \"effect\"),\n        hide = mode === \"hide\",\n        show = mode === \"show\",\n        direction = o.direction || \"up\",\n        distance = o.distance,\n        times = o.times || 5,\n        // number of internal animations\n    anims = times * 2 + (show || hide ? 1 : 0),\n        speed = o.duration / anims,\n        easing = o.easing,\n        // utility:\n    ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        motion = direction === \"up\" || direction === \"left\",\n        i,\n        upAnim,\n        downAnim,\n        // we will need to re-assemble the queue to stack our animations in place\n    queue = el.queue(),\n        queuelen = queue.length; // Avoid touching opacity to prevent clearType and PNG issues in IE\n\n    if (show || hide) {\n      props.push(\"opacity\");\n    }\n\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el); // Create Wrapper\n    // default distance for the BIGGEST bounce is the outer Distance / 3\n\n    if (!distance) {\n      distance = el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"]() / 3;\n    }\n\n    if (show) {\n      downAnim = {\n        opacity: 1\n      };\n      downAnim[ref] = 0; // if we are showing, force opacity 0 and set the initial position\n      // then do the \"first\" animation\n\n      el.css(\"opacity\", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);\n    } // start at the smallest distance if we are hiding\n\n\n    if (hide) {\n      distance = distance / Math.pow(2, times - 1);\n    }\n\n    downAnim = {};\n    downAnim[ref] = 0; // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\n\n    for (i = 0; i < times; i++) {\n      upAnim = {};\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);\n      distance = hide ? distance * 2 : distance / 2;\n    } // Last Bounce when Hiding\n\n\n    if (hide) {\n      upAnim = {\n        opacity: 0\n      };\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      el.animate(upAnim, speed, easing);\n    }\n\n    el.queue(function () {\n      if (hide) {\n        el.hide();\n      }\n\n      $.effects.restore(el, props);\n      $.effects.removeWrapper(el);\n      done();\n    }); // inject all the animations we just queued to be first in line (after \"inprogress\")\n\n    if (queuelen > 1) {\n      queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n    }\n\n    el.dequeue();\n  };\n  /*!\n   * jQuery UI Effects Clip 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/clip-effect/\n   */\n\n\n  var effectClip = $.effects.effect.clip = function (o, done) {\n    // Create element\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        direction = o.direction || \"vertical\",\n        vert = direction === \"vertical\",\n        size = vert ? \"height\" : \"width\",\n        position = vert ? \"top\" : \"left\",\n        animation = {},\n        wrapper,\n        animate,\n        distance; // Save & Show\n\n    $.effects.save(el, props);\n    el.show(); // Create Wrapper\n\n    wrapper = $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n    animate = el[0].tagName === \"IMG\" ? wrapper : el;\n    distance = animate[size](); // Shift\n\n    if (show) {\n      animate.css(size, 0);\n      animate.css(position, distance / 2);\n    } // Create Animation Object:\n\n\n    animation[size] = show ? distance : 0;\n    animation[position] = show ? 0 : distance / 2; // Animate\n\n    animate.animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (!show) {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n  /*!\n   * jQuery UI Effects Drop 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/drop-effect/\n   */\n\n\n  var effectDrop = $.effects.effect.drop = function (o, done) {\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"opacity\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        direction = o.direction || \"left\",\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        motion = direction === \"up\" || direction === \"left\" ? \"pos\" : \"neg\",\n        animation = {\n      opacity: show ? 1 : 0\n    },\n        distance; // Adjust\n\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el);\n    distance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true) / 2;\n\n    if (show) {\n      el.css(\"opacity\", 0).css(ref, motion === \"pos\" ? -distance : distance);\n    } // Animation\n\n\n    animation[ref] = (show ? motion === \"pos\" ? \"+=\" : \"-=\" : motion === \"pos\" ? \"-=\" : \"+=\") + distance; // Animate\n\n    el.animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n  /*!\n   * jQuery UI Effects Explode 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/explode-effect/\n   */\n\n\n  var effectExplode = $.effects.effect.explode = function (o, done) {\n    var rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3,\n        cells = rows,\n        el = $(this),\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        // show and then visibility:hidden the element before calculating offset\n    offset = el.show().css(\"visibility\", \"hidden\").offset(),\n        // width and height of a piece\n    width = Math.ceil(el.outerWidth() / cells),\n        height = Math.ceil(el.outerHeight() / rows),\n        pieces = [],\n        // loop\n    i,\n        j,\n        left,\n        top,\n        mx,\n        my; // children animate complete:\n\n    function childComplete() {\n      pieces.push(this);\n\n      if (pieces.length === rows * cells) {\n        animComplete();\n      }\n    } // clone the element for each row and cell.\n\n\n    for (i = 0; i < rows; i++) {\n      // ===>\n      top = offset.top + i * height;\n      my = i - (rows - 1) / 2;\n\n      for (j = 0; j < cells; j++) {\n        // |||\n        left = offset.left + j * width;\n        mx = j - (cells - 1) / 2; // Create a clone of the now hidden main element that will be absolute positioned\n        // within a wrapper div off the -left and -top equal to size of our pieces\n\n        el.clone().appendTo(\"body\").wrap(\"<div></div>\").css({\n          position: \"absolute\",\n          visibility: \"visible\",\n          left: -j * width,\n          top: -i * height\n        }) // select the wrapper - make it overflow: hidden and absolute positioned based on\n        // where the original was located +left and +top equal to the size of pieces\n        .parent().addClass(\"ui-effects-explode\").css({\n          position: \"absolute\",\n          overflow: \"hidden\",\n          width: width,\n          height: height,\n          left: left + (show ? mx * width : 0),\n          top: top + (show ? my * height : 0),\n          opacity: show ? 0 : 1\n        }).animate({\n          left: left + (show ? 0 : mx * width),\n          top: top + (show ? 0 : my * height),\n          opacity: show ? 1 : 0\n        }, o.duration || 500, o.easing, childComplete);\n      }\n    }\n\n    function animComplete() {\n      el.css({\n        visibility: \"visible\"\n      });\n      $(pieces).remove();\n\n      if (!show) {\n        el.hide();\n      }\n\n      done();\n    }\n  };\n  /*!\n   * jQuery UI Effects Fade 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/fade-effect/\n   */\n\n\n  var effectFade = $.effects.effect.fade = function (o, done) {\n    var el = $(this),\n        mode = $.effects.setMode(el, o.mode || \"toggle\");\n    el.animate({\n      opacity: mode\n    }, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: done\n    });\n  };\n  /*!\n   * jQuery UI Effects Fold 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/fold-effect/\n   */\n\n\n  var effectFold = $.effects.effect.fold = function (o, done) {\n    // Create element\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"hide\"),\n        show = mode === \"show\",\n        hide = mode === \"hide\",\n        size = o.size || 15,\n        percent = /([0-9]+)%/.exec(size),\n        horizFirst = !!o.horizFirst,\n        widthFirst = show !== horizFirst,\n        ref = widthFirst ? [\"width\", \"height\"] : [\"height\", \"width\"],\n        duration = o.duration / 2,\n        wrapper,\n        distance,\n        animation1 = {},\n        animation2 = {};\n    $.effects.save(el, props);\n    el.show(); // Create Wrapper\n\n    wrapper = $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n    distance = widthFirst ? [wrapper.width(), wrapper.height()] : [wrapper.height(), wrapper.width()];\n\n    if (percent) {\n      size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];\n    }\n\n    if (show) {\n      wrapper.css(horizFirst ? {\n        height: 0,\n        width: size\n      } : {\n        height: size,\n        width: 0\n      });\n    } // Animation\n\n\n    animation1[ref[0]] = show ? distance[0] : size;\n    animation2[ref[1]] = show ? distance[1] : 0; // Animate\n\n    wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function () {\n      if (hide) {\n        el.hide();\n      }\n\n      $.effects.restore(el, props);\n      $.effects.removeWrapper(el);\n      done();\n    });\n  };\n  /*!\n   * jQuery UI Effects Highlight 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/highlight-effect/\n   */\n\n\n  var effectHighlight = $.effects.effect.highlight = function (o, done) {\n    var elem = $(this),\n        props = [\"backgroundImage\", \"backgroundColor\", \"opacity\"],\n        mode = $.effects.setMode(elem, o.mode || \"show\"),\n        animation = {\n      backgroundColor: elem.css(\"backgroundColor\")\n    };\n\n    if (mode === \"hide\") {\n      animation.opacity = 0;\n    }\n\n    $.effects.save(elem, props);\n    elem.show().css({\n      backgroundImage: \"none\",\n      backgroundColor: o.color || \"#ffff99\"\n    }).animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          elem.hide();\n        }\n\n        $.effects.restore(elem, props);\n        done();\n      }\n    });\n  };\n  /*!\n   * jQuery UI Effects Size 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/size-effect/\n   */\n\n\n  var effectSize = $.effects.effect.size = function (o, done) {\n    // Create element\n    var original,\n        baseline,\n        factor,\n        el = $(this),\n        props0 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\", \"overflow\", \"opacity\"],\n        // Always restore\n    props1 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"overflow\", \"opacity\"],\n        // Copy for children\n    props2 = [\"width\", \"height\", \"overflow\"],\n        cProps = [\"fontSize\"],\n        vProps = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"],\n        hProps = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"],\n        // Set options\n    mode = $.effects.setMode(el, o.mode || \"effect\"),\n        restore = o.restore || mode !== \"effect\",\n        scale = o.scale || \"both\",\n        origin = o.origin || [\"middle\", \"center\"],\n        position = el.css(\"position\"),\n        props = restore ? props0 : props1,\n        zero = {\n      height: 0,\n      width: 0,\n      outerHeight: 0,\n      outerWidth: 0\n    };\n\n    if (mode === \"show\") {\n      el.show();\n    }\n\n    original = {\n      height: el.height(),\n      width: el.width(),\n      outerHeight: el.outerHeight(),\n      outerWidth: el.outerWidth()\n    };\n\n    if (o.mode === \"toggle\" && mode === \"show\") {\n      el.from = o.to || zero;\n      el.to = o.from || original;\n    } else {\n      el.from = o.from || (mode === \"show\" ? zero : original);\n      el.to = o.to || (mode === \"hide\" ? zero : original);\n    } // Set scaling factor\n\n\n    factor = {\n      from: {\n        y: el.from.height / original.height,\n        x: el.from.width / original.width\n      },\n      to: {\n        y: el.to.height / original.height,\n        x: el.to.width / original.width\n      }\n    }; // Scale the css box\n\n    if (scale === \"box\" || scale === \"both\") {\n      // Vertical props scaling\n      if (factor.from.y !== factor.to.y) {\n        props = props.concat(vProps);\n        el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);\n        el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);\n      } // Horizontal props scaling\n\n\n      if (factor.from.x !== factor.to.x) {\n        props = props.concat(hProps);\n        el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);\n        el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);\n      }\n    } // Scale the content\n\n\n    if (scale === \"content\" || scale === \"both\") {\n      // Vertical props scaling\n      if (factor.from.y !== factor.to.y) {\n        props = props.concat(cProps).concat(props2);\n        el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);\n        el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);\n      }\n    }\n\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el);\n    el.css(\"overflow\", \"hidden\").css(el.from); // Adjust\n\n    if (origin) {\n      // Calculate baseline shifts\n      baseline = $.effects.getBaseline(origin, original);\n      el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;\n      el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;\n      el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;\n      el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;\n    }\n\n    el.css(el.from); // set top & left\n    // Animate\n\n    if (scale === \"content\" || scale === \"both\") {\n      // Scale the children\n      // Add margins/font-size\n      vProps = vProps.concat([\"marginTop\", \"marginBottom\"]).concat(cProps);\n      hProps = hProps.concat([\"marginLeft\", \"marginRight\"]);\n      props2 = props0.concat(vProps).concat(hProps);\n      el.find(\"*[width]\").each(function () {\n        var child = $(this),\n            c_original = {\n          height: child.height(),\n          width: child.width(),\n          outerHeight: child.outerHeight(),\n          outerWidth: child.outerWidth()\n        };\n\n        if (restore) {\n          $.effects.save(child, props2);\n        }\n\n        child.from = {\n          height: c_original.height * factor.from.y,\n          width: c_original.width * factor.from.x,\n          outerHeight: c_original.outerHeight * factor.from.y,\n          outerWidth: c_original.outerWidth * factor.from.x\n        };\n        child.to = {\n          height: c_original.height * factor.to.y,\n          width: c_original.width * factor.to.x,\n          outerHeight: c_original.height * factor.to.y,\n          outerWidth: c_original.width * factor.to.x\n        }; // Vertical props scaling\n\n        if (factor.from.y !== factor.to.y) {\n          child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);\n          child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);\n        } // Horizontal props scaling\n\n\n        if (factor.from.x !== factor.to.x) {\n          child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);\n          child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);\n        } // Animate children\n\n\n        child.css(child.from);\n        child.animate(child.to, o.duration, o.easing, function () {\n          // Restore children\n          if (restore) {\n            $.effects.restore(child, props2);\n          }\n        });\n      });\n    } // Animate\n\n\n    el.animate(el.to, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (el.to.opacity === 0) {\n          el.css(\"opacity\", el.from.opacity);\n        }\n\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n\n        if (!restore) {\n          // we need to calculate our new positioning based on the scaling\n          if (position === \"static\") {\n            el.css({\n              position: \"relative\",\n              top: el.to.top,\n              left: el.to.left\n            });\n          } else {\n            $.each([\"top\", \"left\"], function (idx, pos) {\n              el.css(pos, function (_, str) {\n                var val = parseInt(str, 10),\n                    toRef = idx ? el.to.left : el.to.top; // if original was \"auto\", recalculate the new value from wrapper\n\n                if (str === \"auto\") {\n                  return toRef + \"px\";\n                }\n\n                return val + toRef + \"px\";\n              });\n            });\n          }\n        }\n\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n  /*!\n   * jQuery UI Effects Scale 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/scale-effect/\n   */\n\n\n  var effectScale = $.effects.effect.scale = function (o, done) {\n    // Create element\n    var el = $(this),\n        options = $.extend(true, {}, o),\n        mode = $.effects.setMode(el, o.mode || \"effect\"),\n        percent = parseInt(o.percent, 10) || (parseInt(o.percent, 10) === 0 ? 0 : mode === \"hide\" ? 0 : 100),\n        direction = o.direction || \"both\",\n        origin = o.origin,\n        original = {\n      height: el.height(),\n      width: el.width(),\n      outerHeight: el.outerHeight(),\n      outerWidth: el.outerWidth()\n    },\n        factor = {\n      y: direction !== \"horizontal\" ? percent / 100 : 1,\n      x: direction !== \"vertical\" ? percent / 100 : 1\n    }; // We are going to pass this effect to the size effect:\n\n    options.effect = \"size\";\n    options.queue = false;\n    options.complete = done; // Set default origin and restore for show/hide\n\n    if (mode !== \"effect\") {\n      options.origin = origin || [\"middle\", \"center\"];\n      options.restore = true;\n    }\n\n    options.from = o.from || (mode === \"show\" ? {\n      height: 0,\n      width: 0,\n      outerHeight: 0,\n      outerWidth: 0\n    } : original);\n    options.to = {\n      height: original.height * factor.y,\n      width: original.width * factor.x,\n      outerHeight: original.outerHeight * factor.y,\n      outerWidth: original.outerWidth * factor.x\n    }; // Fade option to support puff\n\n    if (options.fade) {\n      if (mode === \"show\") {\n        options.from.opacity = 0;\n        options.to.opacity = 1;\n      }\n\n      if (mode === \"hide\") {\n        options.from.opacity = 1;\n        options.to.opacity = 0;\n      }\n    } // Animate\n\n\n    el.effect(options);\n  };\n  /*!\n   * jQuery UI Effects Puff 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/puff-effect/\n   */\n\n\n  var effectPuff = $.effects.effect.puff = function (o, done) {\n    var elem = $(this),\n        mode = $.effects.setMode(elem, o.mode || \"hide\"),\n        hide = mode === \"hide\",\n        percent = parseInt(o.percent, 10) || 150,\n        factor = percent / 100,\n        original = {\n      height: elem.height(),\n      width: elem.width(),\n      outerHeight: elem.outerHeight(),\n      outerWidth: elem.outerWidth()\n    };\n    $.extend(o, {\n      effect: \"scale\",\n      queue: false,\n      fade: true,\n      mode: mode,\n      complete: done,\n      percent: hide ? percent : 100,\n      from: hide ? original : {\n        height: original.height * factor,\n        width: original.width * factor,\n        outerHeight: original.outerHeight * factor,\n        outerWidth: original.outerWidth * factor\n      }\n    });\n    elem.effect(o);\n  };\n  /*!\n   * jQuery UI Effects Pulsate 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/pulsate-effect/\n   */\n\n\n  var effectPulsate = $.effects.effect.pulsate = function (o, done) {\n    var elem = $(this),\n        mode = $.effects.setMode(elem, o.mode || \"show\"),\n        show = mode === \"show\",\n        hide = mode === \"hide\",\n        showhide = show || mode === \"hide\",\n        // showing or hiding leaves of the \"last\" animation\n    anims = (o.times || 5) * 2 + (showhide ? 1 : 0),\n        duration = o.duration / anims,\n        animateTo = 0,\n        queue = elem.queue(),\n        queuelen = queue.length,\n        i;\n\n    if (show || !elem.is(\":visible\")) {\n      elem.css(\"opacity\", 0).show();\n      animateTo = 1;\n    } // anims - 1 opacity \"toggles\"\n\n\n    for (i = 1; i < anims; i++) {\n      elem.animate({\n        opacity: animateTo\n      }, duration, o.easing);\n      animateTo = 1 - animateTo;\n    }\n\n    elem.animate({\n      opacity: animateTo\n    }, duration, o.easing);\n    elem.queue(function () {\n      if (hide) {\n        elem.hide();\n      }\n\n      done();\n    }); // We just queued up \"anims\" animations, we need to put them next in the queue\n\n    if (queuelen > 1) {\n      queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n    }\n\n    elem.dequeue();\n  };\n  /*!\n   * jQuery UI Effects Shake 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/shake-effect/\n   */\n\n\n  var effectShake = $.effects.effect.shake = function (o, done) {\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n        mode = $.effects.setMode(el, o.mode || \"effect\"),\n        direction = o.direction || \"left\",\n        distance = o.distance || 20,\n        times = o.times || 3,\n        anims = times * 2 + 1,\n        speed = Math.round(o.duration / anims),\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        positiveMotion = direction === \"up\" || direction === \"left\",\n        animation = {},\n        animation1 = {},\n        animation2 = {},\n        i,\n        // we will need to re-assemble the queue to stack our animations in place\n    queue = el.queue(),\n        queuelen = queue.length;\n    $.effects.save(el, props);\n    el.show();\n    $.effects.createWrapper(el); // Animation\n\n    animation[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance;\n    animation1[ref] = (positiveMotion ? \"+=\" : \"-=\") + distance * 2;\n    animation2[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance * 2; // Animate\n\n    el.animate(animation, speed, o.easing); // Shakes\n\n    for (i = 1; i < times; i++) {\n      el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);\n    }\n\n    el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function () {\n      if (mode === \"hide\") {\n        el.hide();\n      }\n\n      $.effects.restore(el, props);\n      $.effects.removeWrapper(el);\n      done();\n    }); // inject all the animations we just queued to be first in line (after \"inprogress\")\n\n    if (queuelen > 1) {\n      queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));\n    }\n\n    el.dequeue();\n  };\n  /*!\n   * jQuery UI Effects Slide 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/slide-effect/\n   */\n\n\n  var effectSlide = $.effects.effect.slide = function (o, done) {\n    // Create element\n    var el = $(this),\n        props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\"],\n        mode = $.effects.setMode(el, o.mode || \"show\"),\n        show = mode === \"show\",\n        direction = o.direction || \"left\",\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        positiveMotion = direction === \"up\" || direction === \"left\",\n        distance,\n        animation = {}; // Adjust\n\n    $.effects.save(el, props);\n    el.show();\n    distance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true);\n    $.effects.createWrapper(el).css({\n      overflow: \"hidden\"\n    });\n\n    if (show) {\n      el.css(ref, positiveMotion ? isNaN(distance) ? \"-\" + distance : -distance : distance);\n    } // Animation\n\n\n    animation[ref] = (show ? positiveMotion ? \"+=\" : \"-=\" : positiveMotion ? \"-=\" : \"+=\") + distance; // Animate\n\n    el.animate(animation, {\n      queue: false,\n      duration: o.duration,\n      easing: o.easing,\n      complete: function complete() {\n        if (mode === \"hide\") {\n          el.hide();\n        }\n\n        $.effects.restore(el, props);\n        $.effects.removeWrapper(el);\n        done();\n      }\n    });\n  };\n  /*!\n   * jQuery UI Effects Transfer 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/transfer-effect/\n   */\n\n\n  var effectTransfer = $.effects.effect.transfer = function (o, done) {\n    var elem = $(this),\n        target = $(o.to),\n        targetFixed = target.css(\"position\") === \"fixed\",\n        body = $(\"body\"),\n        fixTop = targetFixed ? body.scrollTop() : 0,\n        fixLeft = targetFixed ? body.scrollLeft() : 0,\n        endPosition = target.offset(),\n        animation = {\n      top: endPosition.top - fixTop,\n      left: endPosition.left - fixLeft,\n      height: target.innerHeight(),\n      width: target.innerWidth()\n    },\n        startPosition = elem.offset(),\n        transfer = $(\"<div class='ui-effects-transfer'></div>\").appendTo(document.body).addClass(o.className).css({\n      top: startPosition.top - fixTop,\n      left: startPosition.left - fixLeft,\n      height: elem.innerHeight(),\n      width: elem.innerWidth(),\n      position: targetFixed ? \"fixed\" : \"absolute\"\n    }).animate(animation, o.duration, o.easing, function () {\n      transfer.remove();\n      done();\n    });\n  };\n  /*!\n   * jQuery UI Progressbar 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/progressbar/\n   */\n\n\n  var progressbar = $.widget(\"ui.progressbar\", {\n    version: \"1.11.4\",\n    options: {\n      max: 100,\n      value: 0,\n      change: null,\n      complete: null\n    },\n    min: 0,\n    _create: function _create() {\n      // Constrain initial value\n      this.oldValue = this.options.value = this._constrainedValue();\n      this.element.addClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\").attr({\n        // Only set static values, aria-valuenow and aria-valuemax are\n        // set inside _refreshValue()\n        role: \"progressbar\",\n        \"aria-valuemin\": this.min\n      });\n      this.valueDiv = $(\"<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>\").appendTo(this.element);\n\n      this._refreshValue();\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\").removeAttr(\"role\").removeAttr(\"aria-valuemin\").removeAttr(\"aria-valuemax\").removeAttr(\"aria-valuenow\");\n      this.valueDiv.remove();\n    },\n    value: function value(newValue) {\n      if (newValue === undefined) {\n        return this.options.value;\n      }\n\n      this.options.value = this._constrainedValue(newValue);\n\n      this._refreshValue();\n    },\n    _constrainedValue: function _constrainedValue(newValue) {\n      if (newValue === undefined) {\n        newValue = this.options.value;\n      }\n\n      this.indeterminate = newValue === false; // sanitize value\n\n      if (typeof newValue !== \"number\") {\n        newValue = 0;\n      }\n\n      return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));\n    },\n    _setOptions: function _setOptions(options) {\n      // Ensure \"value\" option is set after other values (like max)\n      var value = options.value;\n      delete options.value;\n\n      this._super(options);\n\n      this.options.value = this._constrainedValue(value);\n\n      this._refreshValue();\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"max\") {\n        // Don't allow a max less than min\n        value = Math.max(this.min, value);\n      }\n\n      if (key === \"disabled\") {\n        this.element.toggleClass(\"ui-state-disabled\", !!value).attr(\"aria-disabled\", value);\n      }\n\n      this._super(key, value);\n    },\n    _percentage: function _percentage() {\n      return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);\n    },\n    _refreshValue: function _refreshValue() {\n      var value = this.options.value,\n          percentage = this._percentage();\n\n      this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass(\"ui-corner-right\", value === this.options.max).width(percentage.toFixed(0) + \"%\");\n      this.element.toggleClass(\"ui-progressbar-indeterminate\", this.indeterminate);\n\n      if (this.indeterminate) {\n        this.element.removeAttr(\"aria-valuenow\");\n\n        if (!this.overlayDiv) {\n          this.overlayDiv = $(\"<div class='ui-progressbar-overlay'></div>\").appendTo(this.valueDiv);\n        }\n      } else {\n        this.element.attr({\n          \"aria-valuemax\": this.options.max,\n          \"aria-valuenow\": value\n        });\n\n        if (this.overlayDiv) {\n          this.overlayDiv.remove();\n          this.overlayDiv = null;\n        }\n      }\n\n      if (this.oldValue !== value) {\n        this.oldValue = value;\n\n        this._trigger(\"change\");\n      }\n\n      if (value === this.options.max) {\n        this._trigger(\"complete\");\n      }\n    }\n  });\n  /*!\n   * jQuery UI Selectable 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/selectable/\n   */\n\n  var selectable = $.widget(\"ui.selectable\", $.ui.mouse, {\n    version: \"1.11.4\",\n    options: {\n      appendTo: \"body\",\n      autoRefresh: true,\n      distance: 0,\n      filter: \"*\",\n      tolerance: \"touch\",\n      // callbacks\n      selected: null,\n      selecting: null,\n      start: null,\n      stop: null,\n      unselected: null,\n      unselecting: null\n    },\n    _create: function _create() {\n      var selectees,\n          that = this;\n      this.element.addClass(\"ui-selectable\");\n      this.dragged = false; // cache selectee children based on filter\n\n      this.refresh = function () {\n        selectees = $(that.options.filter, that.element[0]);\n        selectees.addClass(\"ui-selectee\");\n        selectees.each(function () {\n          var $this = $(this),\n              pos = $this.offset();\n          $.data(this, \"selectable-item\", {\n            element: this,\n            $element: $this,\n            left: pos.left,\n            top: pos.top,\n            right: pos.left + $this.outerWidth(),\n            bottom: pos.top + $this.outerHeight(),\n            startselected: false,\n            selected: $this.hasClass(\"ui-selected\"),\n            selecting: $this.hasClass(\"ui-selecting\"),\n            unselecting: $this.hasClass(\"ui-unselecting\")\n          });\n        });\n      };\n\n      this.refresh();\n      this.selectees = selectees.addClass(\"ui-selectee\");\n\n      this._mouseInit();\n\n      this.helper = $(\"<div class='ui-selectable-helper'></div>\");\n    },\n    _destroy: function _destroy() {\n      this.selectees.removeClass(\"ui-selectee\").removeData(\"selectable-item\");\n      this.element.removeClass(\"ui-selectable ui-selectable-disabled\");\n\n      this._mouseDestroy();\n    },\n    _mouseStart: function _mouseStart(event) {\n      var that = this,\n          options = this.options;\n      this.opos = [event.pageX, event.pageY];\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      this.selectees = $(options.filter, this.element[0]);\n\n      this._trigger(\"start\", event);\n\n      $(options.appendTo).append(this.helper); // position helper (lasso)\n\n      this.helper.css({\n        \"left\": event.pageX,\n        \"top\": event.pageY,\n        \"width\": 0,\n        \"height\": 0\n      });\n\n      if (options.autoRefresh) {\n        this.refresh();\n      }\n\n      this.selectees.filter(\".ui-selected\").each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.startselected = true;\n\n        if (!event.metaKey && !event.ctrlKey) {\n          selectee.$element.removeClass(\"ui-selected\");\n          selectee.selected = false;\n          selectee.$element.addClass(\"ui-unselecting\");\n          selectee.unselecting = true; // selectable UNSELECTING callback\n\n          that._trigger(\"unselecting\", event, {\n            unselecting: selectee.element\n          });\n        }\n      });\n      $(event.target).parents().addBack().each(function () {\n        var doSelect,\n            selectee = $.data(this, \"selectable-item\");\n\n        if (selectee) {\n          doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass(\"ui-selected\");\n          selectee.$element.removeClass(doSelect ? \"ui-unselecting\" : \"ui-selected\").addClass(doSelect ? \"ui-selecting\" : \"ui-unselecting\");\n          selectee.unselecting = !doSelect;\n          selectee.selecting = doSelect;\n          selectee.selected = doSelect; // selectable (UN)SELECTING callback\n\n          if (doSelect) {\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          } else {\n            that._trigger(\"unselecting\", event, {\n              unselecting: selectee.element\n            });\n          }\n\n          return false;\n        }\n      });\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      this.dragged = true;\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      var tmp,\n          that = this,\n          options = this.options,\n          x1 = this.opos[0],\n          y1 = this.opos[1],\n          x2 = event.pageX,\n          y2 = event.pageY;\n\n      if (x1 > x2) {\n        tmp = x2;\n        x2 = x1;\n        x1 = tmp;\n      }\n\n      if (y1 > y2) {\n        tmp = y2;\n        y2 = y1;\n        y1 = tmp;\n      }\n\n      this.helper.css({\n        left: x1,\n        top: y1,\n        width: x2 - x1,\n        height: y2 - y1\n      });\n      this.selectees.each(function () {\n        var selectee = $.data(this, \"selectable-item\"),\n            hit = false; //prevent helper from being selected if appendTo: selectable\n\n        if (!selectee || selectee.element === that.element[0]) {\n          return;\n        }\n\n        if (options.tolerance === \"touch\") {\n          hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1);\n        } else if (options.tolerance === \"fit\") {\n          hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2;\n        }\n\n        if (hit) {\n          // SELECT\n          if (selectee.selected) {\n            selectee.$element.removeClass(\"ui-selected\");\n            selectee.selected = false;\n          }\n\n          if (selectee.unselecting) {\n            selectee.$element.removeClass(\"ui-unselecting\");\n            selectee.unselecting = false;\n          }\n\n          if (!selectee.selecting) {\n            selectee.$element.addClass(\"ui-selecting\");\n            selectee.selecting = true; // selectable SELECTING callback\n\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          }\n        } else {\n          // UNSELECT\n          if (selectee.selecting) {\n            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {\n              selectee.$element.removeClass(\"ui-selecting\");\n              selectee.selecting = false;\n              selectee.$element.addClass(\"ui-selected\");\n              selectee.selected = true;\n            } else {\n              selectee.$element.removeClass(\"ui-selecting\");\n              selectee.selecting = false;\n\n              if (selectee.startselected) {\n                selectee.$element.addClass(\"ui-unselecting\");\n                selectee.unselecting = true;\n              } // selectable UNSELECTING callback\n\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n\n          if (selectee.selected) {\n            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {\n              selectee.$element.removeClass(\"ui-selected\");\n              selectee.selected = false;\n              selectee.$element.addClass(\"ui-unselecting\");\n              selectee.unselecting = true; // selectable UNSELECTING callback\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n        }\n      });\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      var that = this;\n      this.dragged = false;\n      $(\".ui-unselecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.$element.removeClass(\"ui-unselecting\");\n        selectee.unselecting = false;\n        selectee.startselected = false;\n\n        that._trigger(\"unselected\", event, {\n          unselected: selectee.element\n        });\n      });\n      $(\".ui-selecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.$element.removeClass(\"ui-selecting\").addClass(\"ui-selected\");\n        selectee.selecting = false;\n        selectee.selected = true;\n        selectee.startselected = true;\n\n        that._trigger(\"selected\", event, {\n          selected: selectee.element\n        });\n      });\n\n      this._trigger(\"stop\", event);\n\n      this.helper.remove();\n      return false;\n    }\n  });\n  /*!\n   * jQuery UI Selectmenu 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/selectmenu\n   */\n\n  var selectmenu = $.widget(\"ui.selectmenu\", {\n    version: \"1.11.4\",\n    defaultElement: \"<select>\",\n    options: {\n      appendTo: null,\n      disabled: null,\n      icons: {\n        button: \"ui-icon-triangle-1-s\"\n      },\n      position: {\n        my: \"left top\",\n        at: \"left bottom\",\n        collision: \"none\"\n      },\n      width: null,\n      // callbacks\n      change: null,\n      close: null,\n      focus: null,\n      open: null,\n      select: null\n    },\n    _create: function _create() {\n      var selectmenuId = this.element.uniqueId().attr(\"id\");\n      this.ids = {\n        element: selectmenuId,\n        button: selectmenuId + \"-button\",\n        menu: selectmenuId + \"-menu\"\n      };\n\n      this._drawButton();\n\n      this._drawMenu();\n\n      if (this.options.disabled) {\n        this.disable();\n      }\n    },\n    _drawButton: function _drawButton() {\n      var that = this; // Associate existing label with the new button\n\n      this.label = $(\"label[for='\" + this.ids.element + \"']\").attr(\"for\", this.ids.button);\n\n      this._on(this.label, {\n        click: function click(event) {\n          this.button.focus();\n          event.preventDefault();\n        }\n      }); // Hide original select element\n\n\n      this.element.hide(); // Create button\n\n      this.button = $(\"<span>\", {\n        \"class\": \"ui-selectmenu-button ui-widget ui-state-default ui-corner-all\",\n        tabindex: this.options.disabled ? -1 : 0,\n        id: this.ids.button,\n        role: \"combobox\",\n        \"aria-expanded\": \"false\",\n        \"aria-autocomplete\": \"list\",\n        \"aria-owns\": this.ids.menu,\n        \"aria-haspopup\": \"true\"\n      }).insertAfter(this.element);\n      $(\"<span>\", {\n        \"class\": \"ui-icon \" + this.options.icons.button\n      }).prependTo(this.button);\n      this.buttonText = $(\"<span>\", {\n        \"class\": \"ui-selectmenu-text\"\n      }).appendTo(this.button);\n\n      this._setText(this.buttonText, this.element.find(\"option:selected\").text());\n\n      this._resizeButton();\n\n      this._on(this.button, this._buttonEvents);\n\n      this.button.one(\"focusin\", function () {\n        // Delay rendering the menu items until the button receives focus.\n        // The menu may have already been rendered via a programmatic open.\n        if (!that.menuItems) {\n          that._refreshMenu();\n        }\n      });\n\n      this._hoverable(this.button);\n\n      this._focusable(this.button);\n    },\n    _drawMenu: function _drawMenu() {\n      var that = this; // Create menu\n\n      this.menu = $(\"<ul>\", {\n        \"aria-hidden\": \"true\",\n        \"aria-labelledby\": this.ids.button,\n        id: this.ids.menu\n      }); // Wrap menu\n\n      this.menuWrap = $(\"<div>\", {\n        \"class\": \"ui-selectmenu-menu ui-front\"\n      }).append(this.menu).appendTo(this._appendTo()); // Initialize menu widget\n\n      this.menuInstance = this.menu.menu({\n        role: \"listbox\",\n        select: function select(event, ui) {\n          event.preventDefault(); // support: IE8\n          // If the item was selected via a click, the text selection\n          // will be destroyed in IE\n\n          that._setSelection();\n\n          that._select(ui.item.data(\"ui-selectmenu-item\"), event);\n        },\n        focus: function focus(event, ui) {\n          var item = ui.item.data(\"ui-selectmenu-item\"); // Prevent inital focus from firing and check if its a newly focused item\n\n          if (that.focusIndex != null && item.index !== that.focusIndex) {\n            that._trigger(\"focus\", event, {\n              item: item\n            });\n\n            if (!that.isOpen) {\n              that._select(item, event);\n            }\n          }\n\n          that.focusIndex = item.index;\n          that.button.attr(\"aria-activedescendant\", that.menuItems.eq(item.index).attr(\"id\"));\n        }\n      }).menu(\"instance\"); // Adjust menu styles to dropdown\n\n      this.menu.addClass(\"ui-corner-bottom\").removeClass(\"ui-corner-all\"); // Don't close the menu on mouseleave\n\n      this.menuInstance._off(this.menu, \"mouseleave\"); // Cancel the menu's collapseAll on document click\n\n\n      this.menuInstance._closeOnDocumentClick = function () {\n        return false;\n      }; // Selects often contain empty items, but never contain dividers\n\n\n      this.menuInstance._isDivider = function () {\n        return false;\n      };\n    },\n    refresh: function refresh() {\n      this._refreshMenu();\n\n      this._setText(this.buttonText, this._getSelectedItem().text());\n\n      if (!this.options.width) {\n        this._resizeButton();\n      }\n    },\n    _refreshMenu: function _refreshMenu() {\n      this.menu.empty();\n      var item,\n          options = this.element.find(\"option\");\n\n      if (!options.length) {\n        return;\n      }\n\n      this._parseOptions(options);\n\n      this._renderMenu(this.menu, this.items);\n\n      this.menuInstance.refresh();\n      this.menuItems = this.menu.find(\"li\").not(\".ui-selectmenu-optgroup\");\n      item = this._getSelectedItem(); // Update the menu to have the correct item focused\n\n      this.menuInstance.focus(null, item);\n\n      this._setAria(item.data(\"ui-selectmenu-item\")); // Set disabled state\n\n\n      this._setOption(\"disabled\", this.element.prop(\"disabled\"));\n    },\n    open: function open(event) {\n      if (this.options.disabled) {\n        return;\n      } // If this is the first time the menu is being opened, render the items\n\n\n      if (!this.menuItems) {\n        this._refreshMenu();\n      } else {\n        // Menu clears focus on close, reset focus to selected item\n        this.menu.find(\".ui-state-focus\").removeClass(\"ui-state-focus\");\n        this.menuInstance.focus(null, this._getSelectedItem());\n      }\n\n      this.isOpen = true;\n\n      this._toggleAttr();\n\n      this._resizeMenu();\n\n      this._position();\n\n      this._on(this.document, this._documentClick);\n\n      this._trigger(\"open\", event);\n    },\n    _position: function _position() {\n      this.menuWrap.position($.extend({\n        of: this.button\n      }, this.options.position));\n    },\n    close: function close(event) {\n      if (!this.isOpen) {\n        return;\n      }\n\n      this.isOpen = false;\n\n      this._toggleAttr();\n\n      this.range = null;\n\n      this._off(this.document);\n\n      this._trigger(\"close\", event);\n    },\n    widget: function widget() {\n      return this.button;\n    },\n    menuWidget: function menuWidget() {\n      return this.menu;\n    },\n    _renderMenu: function _renderMenu(ul, items) {\n      var that = this,\n          currentOptgroup = \"\";\n      $.each(items, function (index, item) {\n        if (item.optgroup !== currentOptgroup) {\n          $(\"<li>\", {\n            \"class\": \"ui-selectmenu-optgroup ui-menu-divider\" + (item.element.parent(\"optgroup\").prop(\"disabled\") ? \" ui-state-disabled\" : \"\"),\n            text: item.optgroup\n          }).appendTo(ul);\n          currentOptgroup = item.optgroup;\n        }\n\n        that._renderItemData(ul, item);\n      });\n    },\n    _renderItemData: function _renderItemData(ul, item) {\n      return this._renderItem(ul, item).data(\"ui-selectmenu-item\", item);\n    },\n    _renderItem: function _renderItem(ul, item) {\n      var li = $(\"<li>\");\n\n      if (item.disabled) {\n        li.addClass(\"ui-state-disabled\");\n      }\n\n      this._setText(li, item.label);\n\n      return li.appendTo(ul);\n    },\n    _setText: function _setText(element, value) {\n      if (value) {\n        element.text(value);\n      } else {\n        element.html(\"&#160;\");\n      }\n    },\n    _move: function _move(direction, event) {\n      var item,\n          next,\n          filter = \".ui-menu-item\";\n\n      if (this.isOpen) {\n        item = this.menuItems.eq(this.focusIndex);\n      } else {\n        item = this.menuItems.eq(this.element[0].selectedIndex);\n        filter += \":not(.ui-state-disabled)\";\n      }\n\n      if (direction === \"first\" || direction === \"last\") {\n        next = item[direction === \"first\" ? \"prevAll\" : \"nextAll\"](filter).eq(-1);\n      } else {\n        next = item[direction + \"All\"](filter).eq(0);\n      }\n\n      if (next.length) {\n        this.menuInstance.focus(event, next);\n      }\n    },\n    _getSelectedItem: function _getSelectedItem() {\n      return this.menuItems.eq(this.element[0].selectedIndex);\n    },\n    _toggle: function _toggle(event) {\n      this[this.isOpen ? \"close\" : \"open\"](event);\n    },\n    _setSelection: function _setSelection() {\n      var selection;\n\n      if (!this.range) {\n        return;\n      }\n\n      if (window.getSelection) {\n        selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this.range); // support: IE8\n      } else {\n        this.range.select();\n      } // support: IE\n      // Setting the text selection kills the button focus in IE, but\n      // restoring the focus doesn't kill the selection.\n\n\n      this.button.focus();\n    },\n    _documentClick: {\n      mousedown: function mousedown(event) {\n        if (!this.isOpen) {\n          return;\n        }\n\n        if (!$(event.target).closest(\".ui-selectmenu-menu, #\" + this.ids.button).length) {\n          this.close(event);\n        }\n      }\n    },\n    _buttonEvents: {\n      // Prevent text selection from being reset when interacting with the selectmenu (#10144)\n      mousedown: function mousedown() {\n        var selection;\n\n        if (window.getSelection) {\n          selection = window.getSelection();\n\n          if (selection.rangeCount) {\n            this.range = selection.getRangeAt(0);\n          } // support: IE8\n\n        } else {\n          this.range = document.selection.createRange();\n        }\n      },\n      click: function click(event) {\n        this._setSelection();\n\n        this._toggle(event);\n      },\n      keydown: function keydown(event) {\n        var preventDefault = true;\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.TAB:\n          case $.ui.keyCode.ESCAPE:\n            this.close(event);\n            preventDefault = false;\n            break;\n\n          case $.ui.keyCode.ENTER:\n            if (this.isOpen) {\n              this._selectFocusedItem(event);\n            }\n\n            break;\n\n          case $.ui.keyCode.UP:\n            if (event.altKey) {\n              this._toggle(event);\n            } else {\n              this._move(\"prev\", event);\n            }\n\n            break;\n\n          case $.ui.keyCode.DOWN:\n            if (event.altKey) {\n              this._toggle(event);\n            } else {\n              this._move(\"next\", event);\n            }\n\n            break;\n\n          case $.ui.keyCode.SPACE:\n            if (this.isOpen) {\n              this._selectFocusedItem(event);\n            } else {\n              this._toggle(event);\n            }\n\n            break;\n\n          case $.ui.keyCode.LEFT:\n            this._move(\"prev\", event);\n\n            break;\n\n          case $.ui.keyCode.RIGHT:\n            this._move(\"next\", event);\n\n            break;\n\n          case $.ui.keyCode.HOME:\n          case $.ui.keyCode.PAGE_UP:\n            this._move(\"first\", event);\n\n            break;\n\n          case $.ui.keyCode.END:\n          case $.ui.keyCode.PAGE_DOWN:\n            this._move(\"last\", event);\n\n            break;\n\n          default:\n            this.menu.trigger(event);\n            preventDefault = false;\n        }\n\n        if (preventDefault) {\n          event.preventDefault();\n        }\n      }\n    },\n    _selectFocusedItem: function _selectFocusedItem(event) {\n      var item = this.menuItems.eq(this.focusIndex);\n\n      if (!item.hasClass(\"ui-state-disabled\")) {\n        this._select(item.data(\"ui-selectmenu-item\"), event);\n      }\n    },\n    _select: function _select(item, event) {\n      var oldIndex = this.element[0].selectedIndex; // Change native select element\n\n      this.element[0].selectedIndex = item.index;\n\n      this._setText(this.buttonText, item.label);\n\n      this._setAria(item);\n\n      this._trigger(\"select\", event, {\n        item: item\n      });\n\n      if (item.index !== oldIndex) {\n        this._trigger(\"change\", event, {\n          item: item\n        });\n      }\n\n      this.close(event);\n    },\n    _setAria: function _setAria(item) {\n      var id = this.menuItems.eq(item.index).attr(\"id\");\n      this.button.attr({\n        \"aria-labelledby\": id,\n        \"aria-activedescendant\": id\n      });\n      this.menu.attr(\"aria-activedescendant\", id);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icons\") {\n        this.button.find(\"span.ui-icon\").removeClass(this.options.icons.button).addClass(value.button);\n      }\n\n      this._super(key, value);\n\n      if (key === \"appendTo\") {\n        this.menuWrap.appendTo(this._appendTo());\n      }\n\n      if (key === \"disabled\") {\n        this.menuInstance.option(\"disabled\", value);\n        this.button.toggleClass(\"ui-state-disabled\", value).attr(\"aria-disabled\", value);\n        this.element.prop(\"disabled\", value);\n\n        if (value) {\n          this.button.attr(\"tabindex\", -1);\n          this.close();\n        } else {\n          this.button.attr(\"tabindex\", 0);\n        }\n      }\n\n      if (key === \"width\") {\n        this._resizeButton();\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element) {\n        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n      }\n\n      if (!element || !element[0]) {\n        element = this.element.closest(\".ui-front\");\n      }\n\n      if (!element.length) {\n        element = this.document[0].body;\n      }\n\n      return element;\n    },\n    _toggleAttr: function _toggleAttr() {\n      this.button.toggleClass(\"ui-corner-top\", this.isOpen).toggleClass(\"ui-corner-all\", !this.isOpen).attr(\"aria-expanded\", this.isOpen);\n      this.menuWrap.toggleClass(\"ui-selectmenu-open\", this.isOpen);\n      this.menu.attr(\"aria-hidden\", !this.isOpen);\n    },\n    _resizeButton: function _resizeButton() {\n      var width = this.options.width;\n\n      if (!width) {\n        width = this.element.show().outerWidth();\n        this.element.hide();\n      }\n\n      this.button.outerWidth(width);\n    },\n    _resizeMenu: function _resizeMenu() {\n      this.menu.outerWidth(Math.max(this.button.outerWidth(), // support: IE10\n      // IE10 wraps long text (possibly a rounding bug)\n      // so we add 1px to avoid the wrapping\n      this.menu.width(\"\").outerWidth() + 1));\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      return {\n        disabled: this.element.prop(\"disabled\")\n      };\n    },\n    _parseOptions: function _parseOptions(options) {\n      var data = [];\n      options.each(function (index, item) {\n        var option = $(item),\n            optgroup = option.parent(\"optgroup\");\n        data.push({\n          element: option,\n          index: index,\n          value: option.val(),\n          label: option.text(),\n          optgroup: optgroup.attr(\"label\") || \"\",\n          disabled: optgroup.prop(\"disabled\") || option.prop(\"disabled\")\n        });\n      });\n      this.items = data;\n    },\n    _destroy: function _destroy() {\n      this.menuWrap.remove();\n      this.button.remove();\n      this.element.show();\n      this.element.removeUniqueId();\n      this.label.attr(\"for\", this.ids.element);\n    }\n  });\n  /*!\n   * jQuery UI Slider 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/slider/\n   */\n\n  var slider = $.widget(\"ui.slider\", $.ui.mouse, {\n    version: \"1.11.4\",\n    widgetEventPrefix: \"slide\",\n    options: {\n      animate: false,\n      distance: 0,\n      max: 100,\n      min: 0,\n      orientation: \"horizontal\",\n      range: false,\n      step: 1,\n      value: 0,\n      values: null,\n      // callbacks\n      change: null,\n      slide: null,\n      start: null,\n      stop: null\n    },\n    // number of pages in a slider\n    // (how many times can you page up/down to go through the whole range)\n    numPages: 5,\n    _create: function _create() {\n      this._keySliding = false;\n      this._mouseSliding = false;\n      this._animateOff = true;\n      this._handleIndex = null;\n\n      this._detectOrientation();\n\n      this._mouseInit();\n\n      this._calculateNewMax();\n\n      this.element.addClass(\"ui-slider\" + \" ui-slider-\" + this.orientation + \" ui-widget\" + \" ui-widget-content\" + \" ui-corner-all\");\n\n      this._refresh();\n\n      this._setOption(\"disabled\", this.options.disabled);\n\n      this._animateOff = false;\n    },\n    _refresh: function _refresh() {\n      this._createRange();\n\n      this._createHandles();\n\n      this._setupEvents();\n\n      this._refreshValue();\n    },\n    _createHandles: function _createHandles() {\n      var i,\n          handleCount,\n          options = this.options,\n          existingHandles = this.element.find(\".ui-slider-handle\").addClass(\"ui-state-default ui-corner-all\"),\n          handle = \"<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>\",\n          handles = [];\n      handleCount = options.values && options.values.length || 1;\n\n      if (existingHandles.length > handleCount) {\n        existingHandles.slice(handleCount).remove();\n        existingHandles = existingHandles.slice(0, handleCount);\n      }\n\n      for (i = existingHandles.length; i < handleCount; i++) {\n        handles.push(handle);\n      }\n\n      this.handles = existingHandles.add($(handles.join(\"\")).appendTo(this.element));\n      this.handle = this.handles.eq(0);\n      this.handles.each(function (i) {\n        $(this).data(\"ui-slider-handle-index\", i);\n      });\n    },\n    _createRange: function _createRange() {\n      var options = this.options,\n          classes = \"\";\n\n      if (options.range) {\n        if (options.range === true) {\n          if (!options.values) {\n            options.values = [this._valueMin(), this._valueMin()];\n          } else if (options.values.length && options.values.length !== 2) {\n            options.values = [options.values[0], options.values[0]];\n          } else if ($.isArray(options.values)) {\n            options.values = options.values.slice(0);\n          }\n        }\n\n        if (!this.range || !this.range.length) {\n          this.range = $(\"<div></div>\").appendTo(this.element);\n          classes = \"ui-slider-range\" + // note: this isn't the most fittingly semantic framework class for this element,\n          // but worked best visually with a variety of themes\n          \" ui-widget-header ui-corner-all\";\n        } else {\n          this.range.removeClass(\"ui-slider-range-min ui-slider-range-max\") // Handle range switching from true to min/max\n          .css({\n            \"left\": \"\",\n            \"bottom\": \"\"\n          });\n        }\n\n        this.range.addClass(classes + (options.range === \"min\" || options.range === \"max\" ? \" ui-slider-range-\" + options.range : \"\"));\n      } else {\n        if (this.range) {\n          this.range.remove();\n        }\n\n        this.range = null;\n      }\n    },\n    _setupEvents: function _setupEvents() {\n      this._off(this.handles);\n\n      this._on(this.handles, this._handleEvents);\n\n      this._hoverable(this.handles);\n\n      this._focusable(this.handles);\n    },\n    _destroy: function _destroy() {\n      this.handles.remove();\n\n      if (this.range) {\n        this.range.remove();\n      }\n\n      this.element.removeClass(\"ui-slider\" + \" ui-slider-horizontal\" + \" ui-slider-vertical\" + \" ui-widget\" + \" ui-widget-content\" + \" ui-corner-all\");\n\n      this._mouseDestroy();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var position,\n          normValue,\n          distance,\n          closestHandle,\n          index,\n          allowed,\n          offset,\n          mouseOverHandle,\n          that = this,\n          o = this.options;\n\n      if (o.disabled) {\n        return false;\n      }\n\n      this.elementSize = {\n        width: this.element.outerWidth(),\n        height: this.element.outerHeight()\n      };\n      this.elementOffset = this.element.offset();\n      position = {\n        x: event.pageX,\n        y: event.pageY\n      };\n      normValue = this._normValueFromMouse(position);\n      distance = this._valueMax() - this._valueMin() + 1;\n      this.handles.each(function (i) {\n        var thisDistance = Math.abs(normValue - that.values(i));\n\n        if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {\n          distance = thisDistance;\n          closestHandle = $(this);\n          index = i;\n        }\n      });\n      allowed = this._start(event, index);\n\n      if (allowed === false) {\n        return false;\n      }\n\n      this._mouseSliding = true;\n      this._handleIndex = index;\n      closestHandle.addClass(\"ui-state-active\").focus();\n      offset = closestHandle.offset();\n      mouseOverHandle = !$(event.target).parents().addBack().is(\".ui-slider-handle\");\n      this._clickOffset = mouseOverHandle ? {\n        left: 0,\n        top: 0\n      } : {\n        left: event.pageX - offset.left - closestHandle.width() / 2,\n        top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css(\"borderTopWidth\"), 10) || 0) - (parseInt(closestHandle.css(\"borderBottomWidth\"), 10) || 0) + (parseInt(closestHandle.css(\"marginTop\"), 10) || 0)\n      };\n\n      if (!this.handles.hasClass(\"ui-state-hover\")) {\n        this._slide(event, index, normValue);\n      }\n\n      this._animateOff = true;\n      return true;\n    },\n    _mouseStart: function _mouseStart() {\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var position = {\n        x: event.pageX,\n        y: event.pageY\n      },\n          normValue = this._normValueFromMouse(position);\n\n      this._slide(event, this._handleIndex, normValue);\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      this.handles.removeClass(\"ui-state-active\");\n      this._mouseSliding = false;\n\n      this._stop(event, this._handleIndex);\n\n      this._change(event, this._handleIndex);\n\n      this._handleIndex = null;\n      this._clickOffset = null;\n      this._animateOff = false;\n      return false;\n    },\n    _detectOrientation: function _detectOrientation() {\n      this.orientation = this.options.orientation === \"vertical\" ? \"vertical\" : \"horizontal\";\n    },\n    _normValueFromMouse: function _normValueFromMouse(position) {\n      var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;\n\n      if (this.orientation === \"horizontal\") {\n        pixelTotal = this.elementSize.width;\n        pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\n      } else {\n        pixelTotal = this.elementSize.height;\n        pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\n      }\n\n      percentMouse = pixelMouse / pixelTotal;\n\n      if (percentMouse > 1) {\n        percentMouse = 1;\n      }\n\n      if (percentMouse < 0) {\n        percentMouse = 0;\n      }\n\n      if (this.orientation === \"vertical\") {\n        percentMouse = 1 - percentMouse;\n      }\n\n      valueTotal = this._valueMax() - this._valueMin();\n      valueMouse = this._valueMin() + percentMouse * valueTotal;\n      return this._trimAlignValue(valueMouse);\n    },\n    _start: function _start(event, index) {\n      var uiHash = {\n        handle: this.handles[index],\n        value: this.value()\n      };\n\n      if (this.options.values && this.options.values.length) {\n        uiHash.value = this.values(index);\n        uiHash.values = this.values();\n      }\n\n      return this._trigger(\"start\", event, uiHash);\n    },\n    _slide: function _slide(event, index, newVal) {\n      var otherVal, newValues, allowed;\n\n      if (this.options.values && this.options.values.length) {\n        otherVal = this.values(index ? 0 : 1);\n\n        if (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {\n          newVal = otherVal;\n        }\n\n        if (newVal !== this.values(index)) {\n          newValues = this.values();\n          newValues[index] = newVal; // A slide can be canceled by returning false from the slide callback\n\n          allowed = this._trigger(\"slide\", event, {\n            handle: this.handles[index],\n            value: newVal,\n            values: newValues\n          });\n          otherVal = this.values(index ? 0 : 1);\n\n          if (allowed !== false) {\n            this.values(index, newVal);\n          }\n        }\n      } else {\n        if (newVal !== this.value()) {\n          // A slide can be canceled by returning false from the slide callback\n          allowed = this._trigger(\"slide\", event, {\n            handle: this.handles[index],\n            value: newVal\n          });\n\n          if (allowed !== false) {\n            this.value(newVal);\n          }\n        }\n      }\n    },\n    _stop: function _stop(event, index) {\n      var uiHash = {\n        handle: this.handles[index],\n        value: this.value()\n      };\n\n      if (this.options.values && this.options.values.length) {\n        uiHash.value = this.values(index);\n        uiHash.values = this.values();\n      }\n\n      this._trigger(\"stop\", event, uiHash);\n    },\n    _change: function _change(event, index) {\n      if (!this._keySliding && !this._mouseSliding) {\n        var uiHash = {\n          handle: this.handles[index],\n          value: this.value()\n        };\n\n        if (this.options.values && this.options.values.length) {\n          uiHash.value = this.values(index);\n          uiHash.values = this.values();\n        } //store the last changed value index for reference when handles overlap\n\n\n        this._lastChangedValue = index;\n\n        this._trigger(\"change\", event, uiHash);\n      }\n    },\n    value: function value(newValue) {\n      if (arguments.length) {\n        this.options.value = this._trimAlignValue(newValue);\n\n        this._refreshValue();\n\n        this._change(null, 0);\n\n        return;\n      }\n\n      return this._value();\n    },\n    values: function values(index, newValue) {\n      var vals, newValues, i;\n\n      if (arguments.length > 1) {\n        this.options.values[index] = this._trimAlignValue(newValue);\n\n        this._refreshValue();\n\n        this._change(null, index);\n\n        return;\n      }\n\n      if (arguments.length) {\n        if ($.isArray(arguments[0])) {\n          vals = this.options.values;\n          newValues = arguments[0];\n\n          for (i = 0; i < vals.length; i += 1) {\n            vals[i] = this._trimAlignValue(newValues[i]);\n\n            this._change(null, i);\n          }\n\n          this._refreshValue();\n        } else {\n          if (this.options.values && this.options.values.length) {\n            return this._values(index);\n          } else {\n            return this.value();\n          }\n        }\n      } else {\n        return this._values();\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      var i,\n          valsLength = 0;\n\n      if (key === \"range\" && this.options.range === true) {\n        if (value === \"min\") {\n          this.options.value = this._values(0);\n          this.options.values = null;\n        } else if (value === \"max\") {\n          this.options.value = this._values(this.options.values.length - 1);\n          this.options.values = null;\n        }\n      }\n\n      if ($.isArray(this.options.values)) {\n        valsLength = this.options.values.length;\n      }\n\n      if (key === \"disabled\") {\n        this.element.toggleClass(\"ui-state-disabled\", !!value);\n      }\n\n      this._super(key, value);\n\n      switch (key) {\n        case \"orientation\":\n          this._detectOrientation();\n\n          this.element.removeClass(\"ui-slider-horizontal ui-slider-vertical\").addClass(\"ui-slider-\" + this.orientation);\n\n          this._refreshValue(); // Reset positioning from previous orientation\n\n\n          this.handles.css(value === \"horizontal\" ? \"bottom\" : \"left\", \"\");\n          break;\n\n        case \"value\":\n          this._animateOff = true;\n\n          this._refreshValue();\n\n          this._change(null, 0);\n\n          this._animateOff = false;\n          break;\n\n        case \"values\":\n          this._animateOff = true;\n\n          this._refreshValue();\n\n          for (i = 0; i < valsLength; i += 1) {\n            this._change(null, i);\n          }\n\n          this._animateOff = false;\n          break;\n\n        case \"step\":\n        case \"min\":\n        case \"max\":\n          this._animateOff = true;\n\n          this._calculateNewMax();\n\n          this._refreshValue();\n\n          this._animateOff = false;\n          break;\n\n        case \"range\":\n          this._animateOff = true;\n\n          this._refresh();\n\n          this._animateOff = false;\n          break;\n      }\n    },\n    //internal value getter\n    // _value() returns value trimmed by min and max, aligned by step\n    _value: function _value() {\n      var val = this.options.value;\n      val = this._trimAlignValue(val);\n      return val;\n    },\n    //internal values getter\n    // _values() returns array of values trimmed by min and max, aligned by step\n    // _values( index ) returns single value trimmed by min and max, aligned by step\n    _values: function _values(index) {\n      var val, vals, i;\n\n      if (arguments.length) {\n        val = this.options.values[index];\n        val = this._trimAlignValue(val);\n        return val;\n      } else if (this.options.values && this.options.values.length) {\n        // .slice() creates a copy of the array\n        // this copy gets trimmed by min and max and then returned\n        vals = this.options.values.slice();\n\n        for (i = 0; i < vals.length; i += 1) {\n          vals[i] = this._trimAlignValue(vals[i]);\n        }\n\n        return vals;\n      } else {\n        return [];\n      }\n    },\n    // returns the step-aligned value that val is closest to, between (inclusive) min and max\n    _trimAlignValue: function _trimAlignValue(val) {\n      if (val <= this._valueMin()) {\n        return this._valueMin();\n      }\n\n      if (val >= this._valueMax()) {\n        return this._valueMax();\n      }\n\n      var step = this.options.step > 0 ? this.options.step : 1,\n          valModStep = (val - this._valueMin()) % step,\n          alignValue = val - valModStep;\n\n      if (Math.abs(valModStep) * 2 >= step) {\n        alignValue += valModStep > 0 ? step : -step;\n      } // Since JavaScript has problems with large floats, round\n      // the final value to 5 digits after the decimal point (see #4124)\n\n\n      return parseFloat(alignValue.toFixed(5));\n    },\n    _calculateNewMax: function _calculateNewMax() {\n      var max = this.options.max,\n          min = this._valueMin(),\n          step = this.options.step,\n          aboveMin = Math.floor(+(max - min).toFixed(this._precision()) / step) * step;\n\n      max = aboveMin + min;\n      this.max = parseFloat(max.toFixed(this._precision()));\n    },\n    _precision: function _precision() {\n      var precision = this._precisionOf(this.options.step);\n\n      if (this.options.min !== null) {\n        precision = Math.max(precision, this._precisionOf(this.options.min));\n      }\n\n      return precision;\n    },\n    _precisionOf: function _precisionOf(num) {\n      var str = num.toString(),\n          decimal = str.indexOf(\".\");\n      return decimal === -1 ? 0 : str.length - decimal - 1;\n    },\n    _valueMin: function _valueMin() {\n      return this.options.min;\n    },\n    _valueMax: function _valueMax() {\n      return this.max;\n    },\n    _refreshValue: function _refreshValue() {\n      var lastValPercent,\n          valPercent,\n          value,\n          valueMin,\n          valueMax,\n          oRange = this.options.range,\n          o = this.options,\n          that = this,\n          animate = !this._animateOff ? o.animate : false,\n          _set = {};\n\n      if (this.options.values && this.options.values.length) {\n        this.handles.each(function (i) {\n          valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;\n          _set[that.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n          $(this).stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n          if (that.options.range === true) {\n            if (that.orientation === \"horizontal\") {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  left: valPercent + \"%\"\n                }, o.animate);\n              }\n\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  width: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            } else {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  bottom: valPercent + \"%\"\n                }, o.animate);\n              }\n\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  height: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            }\n          }\n\n          lastValPercent = valPercent;\n        });\n      } else {\n        value = this.value();\n        valueMin = this._valueMin();\n        valueMax = this._valueMax();\n        valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;\n        _set[this.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n        this.handle.stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n        if (oRange === \"min\" && this.orientation === \"horizontal\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            width: valPercent + \"%\"\n          }, o.animate);\n        }\n\n        if (oRange === \"max\" && this.orientation === \"horizontal\") {\n          this.range[animate ? \"animate\" : \"css\"]({\n            width: 100 - valPercent + \"%\"\n          }, {\n            queue: false,\n            duration: o.animate\n          });\n        }\n\n        if (oRange === \"min\" && this.orientation === \"vertical\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            height: valPercent + \"%\"\n          }, o.animate);\n        }\n\n        if (oRange === \"max\" && this.orientation === \"vertical\") {\n          this.range[animate ? \"animate\" : \"css\"]({\n            height: 100 - valPercent + \"%\"\n          }, {\n            queue: false,\n            duration: o.animate\n          });\n        }\n      }\n    },\n    _handleEvents: {\n      keydown: function keydown(event) {\n        var allowed,\n            curVal,\n            newVal,\n            step,\n            index = $(event.target).data(\"ui-slider-handle-index\");\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n          case $.ui.keyCode.END:\n          case $.ui.keyCode.PAGE_UP:\n          case $.ui.keyCode.PAGE_DOWN:\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            event.preventDefault();\n\n            if (!this._keySliding) {\n              this._keySliding = true;\n              $(event.target).addClass(\"ui-state-active\");\n              allowed = this._start(event, index);\n\n              if (allowed === false) {\n                return;\n              }\n            }\n\n            break;\n        }\n\n        step = this.options.step;\n\n        if (this.options.values && this.options.values.length) {\n          curVal = newVal = this.values(index);\n        } else {\n          curVal = newVal = this.value();\n        }\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n            newVal = this._valueMin();\n            break;\n\n          case $.ui.keyCode.END:\n            newVal = this._valueMax();\n            break;\n\n          case $.ui.keyCode.PAGE_UP:\n            newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);\n            break;\n\n          case $.ui.keyCode.PAGE_DOWN:\n            newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);\n            break;\n\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n            if (curVal === this._valueMax()) {\n              return;\n            }\n\n            newVal = this._trimAlignValue(curVal + step);\n            break;\n\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            if (curVal === this._valueMin()) {\n              return;\n            }\n\n            newVal = this._trimAlignValue(curVal - step);\n            break;\n        }\n\n        this._slide(event, index, newVal);\n      },\n      keyup: function keyup(event) {\n        var index = $(event.target).data(\"ui-slider-handle-index\");\n\n        if (this._keySliding) {\n          this._keySliding = false;\n\n          this._stop(event, index);\n\n          this._change(event, index);\n\n          $(event.target).removeClass(\"ui-state-active\");\n        }\n      }\n    }\n  });\n  /*!\n   * jQuery UI Sortable 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/sortable/\n   */\n\n  var sortable = $.widget(\"ui.sortable\", $.ui.mouse, {\n    version: \"1.11.4\",\n    widgetEventPrefix: \"sort\",\n    ready: false,\n    options: {\n      appendTo: \"parent\",\n      axis: false,\n      connectWith: false,\n      containment: false,\n      cursor: \"auto\",\n      cursorAt: false,\n      dropOnEmpty: true,\n      forcePlaceholderSize: false,\n      forceHelperSize: false,\n      grid: false,\n      handle: false,\n      helper: \"original\",\n      items: \"> *\",\n      opacity: false,\n      placeholder: false,\n      revert: false,\n      scroll: true,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      zIndex: 1000,\n      // callbacks\n      activate: null,\n      beforeStop: null,\n      change: null,\n      deactivate: null,\n      out: null,\n      over: null,\n      receive: null,\n      remove: null,\n      sort: null,\n      start: null,\n      stop: null,\n      update: null\n    },\n    _isOverAxis: function _isOverAxis(x, reference, size) {\n      return x >= reference && x < reference + size;\n    },\n    _isFloating: function _isFloating(item) {\n      return /left|right/.test(item.css(\"float\")) || /inline|table-cell/.test(item.css(\"display\"));\n    },\n    _create: function _create() {\n      this.containerCache = {};\n      this.element.addClass(\"ui-sortable\"); //Get the items\n\n      this.refresh(); //Let's determine the parent's offset\n\n      this.offset = this.element.offset(); //Initialize mouse events for interaction\n\n      this._mouseInit();\n\n      this._setHandleClassName(); //We're ready to go\n\n\n      this.ready = true;\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"handle\") {\n        this._setHandleClassName();\n      }\n    },\n    _setHandleClassName: function _setHandleClassName() {\n      this.element.find(\".ui-sortable-handle\").removeClass(\"ui-sortable-handle\");\n      $.each(this.items, function () {\n        (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass(\"ui-sortable-handle\");\n      });\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-sortable ui-sortable-disabled\").find(\".ui-sortable-handle\").removeClass(\"ui-sortable-handle\");\n\n      this._mouseDestroy();\n\n      for (var i = this.items.length - 1; i >= 0; i--) {\n        this.items[i].item.removeData(this.widgetName + \"-item\");\n      }\n\n      return this;\n    },\n    _mouseCapture: function _mouseCapture(event, overrideHandle) {\n      var currentItem = null,\n          validHandle = false,\n          that = this;\n\n      if (this.reverting) {\n        return false;\n      }\n\n      if (this.options.disabled || this.options.type === \"static\") {\n        return false;\n      } //We have to refresh the items data once first\n\n\n      this._refreshItems(event); //Find out if the clicked node (or one of its parents) is a actual item in this.items\n\n\n      $(event.target).parents().each(function () {\n        if ($.data(this, that.widgetName + \"-item\") === that) {\n          currentItem = $(this);\n          return false;\n        }\n      });\n\n      if ($.data(event.target, that.widgetName + \"-item\") === that) {\n        currentItem = $(event.target);\n      }\n\n      if (!currentItem) {\n        return false;\n      }\n\n      if (this.options.handle && !overrideHandle) {\n        $(this.options.handle, currentItem).find(\"*\").addBack().each(function () {\n          if (this === event.target) {\n            validHandle = true;\n          }\n        });\n\n        if (!validHandle) {\n          return false;\n        }\n      }\n\n      this.currentItem = currentItem;\n\n      this._removeCurrentsFromItems();\n\n      return true;\n    },\n    _mouseStart: function _mouseStart(event, overrideHandle, noActivation) {\n      var i,\n          body,\n          o = this.options;\n      this.currentContainer = this; //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture\n\n      this.refreshPositions(); //Create and append the visible helper\n\n      this.helper = this._createHelper(event); //Cache the helper size\n\n      this._cacheHelperProportions();\n      /*\n       * - Position generation -\n       * This block generates everything position related - it's the core of draggables.\n       */\n      //Cache the margins of the original element\n\n\n      this._cacheMargins(); //Get the next scrolling parent\n\n\n      this.scrollParent = this.helper.scrollParent(); //The element's absolute position on the page minus margins\n\n      this.offset = this.currentItem.offset();\n      this.offset = {\n        top: this.offset.top - this.margins.top,\n        left: this.offset.left - this.margins.left\n      };\n      $.extend(this.offset, {\n        click: {\n          //Where the click happened, relative to the element\n          left: event.pageX - this.offset.left,\n          top: event.pageY - this.offset.top\n        },\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper\n\n      }); // Only after we got the offset, we can change the helper's position to absolute\n      // TODO: Still need to figure out a way to make relative sorting possible\n\n      this.helper.css(\"position\", \"absolute\");\n      this.cssPosition = this.helper.css(\"position\"); //Generate the original position\n\n      this.originalPosition = this._generatePosition(event);\n      this.originalPageX = event.pageX;\n      this.originalPageY = event.pageY; //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\n      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt); //Cache the former DOM position\n\n      this.domPosition = {\n        prev: this.currentItem.prev()[0],\n        parent: this.currentItem.parent()[0]\n      }; //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way\n\n      if (this.helper[0] !== this.currentItem[0]) {\n        this.currentItem.hide();\n      } //Create the placeholder\n\n\n      this._createPlaceholder(); //Set a containment if given in the options\n\n\n      if (o.containment) {\n        this._setContainment();\n      }\n\n      if (o.cursor && o.cursor !== \"auto\") {\n        // cursor option\n        body = this.document.find(\"body\"); // support: IE\n\n        this.storedCursor = body.css(\"cursor\");\n        body.css(\"cursor\", o.cursor);\n        this.storedStylesheet = $(\"<style>*{ cursor: \" + o.cursor + \" !important; }</style>\").appendTo(body);\n      }\n\n      if (o.opacity) {\n        // opacity option\n        if (this.helper.css(\"opacity\")) {\n          this._storedOpacity = this.helper.css(\"opacity\");\n        }\n\n        this.helper.css(\"opacity\", o.opacity);\n      }\n\n      if (o.zIndex) {\n        // zIndex option\n        if (this.helper.css(\"zIndex\")) {\n          this._storedZIndex = this.helper.css(\"zIndex\");\n        }\n\n        this.helper.css(\"zIndex\", o.zIndex);\n      } //Prepare scrolling\n\n\n      if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== \"HTML\") {\n        this.overflowOffset = this.scrollParent.offset();\n      } //Call callbacks\n\n\n      this._trigger(\"start\", event, this._uiHash()); //Recache the helper size\n\n\n      if (!this._preserveHelperProportions) {\n        this._cacheHelperProportions();\n      } //Post \"activate\" events to possible containers\n\n\n      if (!noActivation) {\n        for (i = this.containers.length - 1; i >= 0; i--) {\n          this.containers[i]._trigger(\"activate\", event, this._uiHash(this));\n        }\n      } //Prepare possible droppables\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.current = this;\n      }\n\n      if ($.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(this, event);\n      }\n\n      this.dragging = true;\n      this.helper.addClass(\"ui-sortable-helper\");\n\n      this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position\n\n\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var i,\n          item,\n          itemElement,\n          intersection,\n          o = this.options,\n          scrolled = false; //Compute the helpers position\n\n      this.position = this._generatePosition(event);\n      this.positionAbs = this._convertPositionTo(\"absolute\");\n\n      if (!this.lastPositionAbs) {\n        this.lastPositionAbs = this.positionAbs;\n      } //Do scrolling\n\n\n      if (this.options.scroll) {\n        if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== \"HTML\") {\n          if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {\n            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;\n          } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {\n            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;\n          }\n\n          if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {\n            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;\n          } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {\n            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;\n          }\n        } else {\n          if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {\n            scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);\n          } else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {\n            scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);\n          }\n\n          if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {\n            scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);\n          } else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {\n            scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);\n          }\n        }\n\n        if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n          $.ui.ddmanager.prepareOffsets(this, event);\n        }\n      } //Regenerate the absolute position used for position checks\n\n\n      this.positionAbs = this._convertPositionTo(\"absolute\"); //Set the helper position\n\n      if (!this.options.axis || this.options.axis !== \"y\") {\n        this.helper[0].style.left = this.position.left + \"px\";\n      }\n\n      if (!this.options.axis || this.options.axis !== \"x\") {\n        this.helper[0].style.top = this.position.top + \"px\";\n      } //Rearrange\n\n\n      for (i = this.items.length - 1; i >= 0; i--) {\n        //Cache variables and intersection, continue if no intersection\n        item = this.items[i];\n        itemElement = item.item[0];\n        intersection = this._intersectsWithPointer(item);\n\n        if (!intersection) {\n          continue;\n        } // Only put the placeholder inside the current Container, skip all\n        // items from other containers. This works because when moving\n        // an item from one container to another the\n        // currentContainer is switched before the placeholder is moved.\n        //\n        // Without this, moving items in \"sub-sortables\" can cause\n        // the placeholder to jitter between the outer and inner container.\n\n\n        if (item.instance !== this.currentContainer) {\n          continue;\n        } // cannot intersect with itself\n        // no useless actions that have been done before\n        // no action if the item moved is the parent of the item checked\n\n\n        if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? \"next\" : \"prev\"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === \"semi-dynamic\" ? !$.contains(this.element[0], itemElement) : true)) {\n          this.direction = intersection === 1 ? \"down\" : \"up\";\n\n          if (this.options.tolerance === \"pointer\" || this._intersectsWithSides(item)) {\n            this._rearrange(event, item);\n          } else {\n            break;\n          }\n\n          this._trigger(\"change\", event, this._uiHash());\n\n          break;\n        }\n      } //Post events to containers\n\n\n      this._contactContainers(event); //Interconnect with droppables\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.drag(this, event);\n      } //Call callbacks\n\n\n      this._trigger(\"sort\", event, this._uiHash());\n\n      this.lastPositionAbs = this.positionAbs;\n      return false;\n    },\n    _mouseStop: function _mouseStop(event, noPropagation) {\n      if (!event) {\n        return;\n      } //If we are using droppables, inform the manager about the drop\n\n\n      if ($.ui.ddmanager && !this.options.dropBehaviour) {\n        $.ui.ddmanager.drop(this, event);\n      }\n\n      if (this.options.revert) {\n        var that = this,\n            cur = this.placeholder.offset(),\n            axis = this.options.axis,\n            animation = {};\n\n        if (!axis || axis === \"x\") {\n          animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);\n        }\n\n        if (!axis || axis === \"y\") {\n          animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);\n        }\n\n        this.reverting = true;\n        $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function () {\n          that._clear(event);\n        });\n      } else {\n        this._clear(event, noPropagation);\n      }\n\n      return false;\n    },\n    cancel: function cancel() {\n      if (this.dragging) {\n        this._mouseUp({\n          target: null\n        });\n\n        if (this.options.helper === \"original\") {\n          this.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\n        } else {\n          this.currentItem.show();\n        } //Post deactivating events to containers\n\n\n        for (var i = this.containers.length - 1; i >= 0; i--) {\n          this.containers[i]._trigger(\"deactivate\", null, this._uiHash(this));\n\n          if (this.containers[i].containerCache.over) {\n            this.containers[i]._trigger(\"out\", null, this._uiHash(this));\n\n            this.containers[i].containerCache.over = 0;\n          }\n        }\n      }\n\n      if (this.placeholder) {\n        //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\n        if (this.placeholder[0].parentNode) {\n          this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n        }\n\n        if (this.options.helper !== \"original\" && this.helper && this.helper[0].parentNode) {\n          this.helper.remove();\n        }\n\n        $.extend(this, {\n          helper: null,\n          dragging: false,\n          reverting: false,\n          _noFinalSort: null\n        });\n\n        if (this.domPosition.prev) {\n          $(this.domPosition.prev).after(this.currentItem);\n        } else {\n          $(this.domPosition.parent).prepend(this.currentItem);\n        }\n      }\n\n      return this;\n    },\n    serialize: function serialize(o) {\n      var items = this._getItemsAsjQuery(o && o.connected),\n          str = [];\n\n      o = o || {};\n      $(items).each(function () {\n        var res = ($(o.item || this).attr(o.attribute || \"id\") || \"\").match(o.expression || /(.+)[\\-=_](.+)/);\n\n        if (res) {\n          str.push((o.key || res[1] + \"[]\") + \"=\" + (o.key && o.expression ? res[1] : res[2]));\n        }\n      });\n\n      if (!str.length && o.key) {\n        str.push(o.key + \"=\");\n      }\n\n      return str.join(\"&\");\n    },\n    toArray: function toArray(o) {\n      var items = this._getItemsAsjQuery(o && o.connected),\n          ret = [];\n\n      o = o || {};\n      items.each(function () {\n        ret.push($(o.item || this).attr(o.attribute || \"id\") || \"\");\n      });\n      return ret;\n    },\n\n    /* Be careful with the following core functions */\n    _intersectsWith: function _intersectsWith(item) {\n      var x1 = this.positionAbs.left,\n          x2 = x1 + this.helperProportions.width,\n          y1 = this.positionAbs.top,\n          y2 = y1 + this.helperProportions.height,\n          l = item.left,\n          r = l + item.width,\n          t = item.top,\n          b = t + item.height,\n          dyClick = this.offset.click.top,\n          dxClick = this.offset.click.left,\n          isOverElementHeight = this.options.axis === \"x\" || y1 + dyClick > t && y1 + dyClick < b,\n          isOverElementWidth = this.options.axis === \"y\" || x1 + dxClick > l && x1 + dxClick < r,\n          isOverElement = isOverElementHeight && isOverElementWidth;\n\n      if (this.options.tolerance === \"pointer\" || this.options.forcePointerForContainers || this.options.tolerance !== \"pointer\" && this.helperProportions[this.floating ? \"width\" : \"height\"] > item[this.floating ? \"width\" : \"height\"]) {\n        return isOverElement;\n      } else {\n        return l < x1 + this.helperProportions.width / 2 && // Right Half\n        x2 - this.helperProportions.width / 2 < r && // Left Half\n        t < y1 + this.helperProportions.height / 2 && // Bottom Half\n        y2 - this.helperProportions.height / 2 < b; // Top Half\n      }\n    },\n    _intersectsWithPointer: function _intersectsWithPointer(item) {\n      var isOverElementHeight = this.options.axis === \"x\" || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),\n          isOverElementWidth = this.options.axis === \"y\" || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),\n          isOverElement = isOverElementHeight && isOverElementWidth,\n          verticalDirection = this._getDragVerticalDirection(),\n          horizontalDirection = this._getDragHorizontalDirection();\n\n      if (!isOverElement) {\n        return false;\n      }\n\n      return this.floating ? horizontalDirection && horizontalDirection === \"right\" || verticalDirection === \"down\" ? 2 : 1 : verticalDirection && (verticalDirection === \"down\" ? 2 : 1);\n    },\n    _intersectsWithSides: function _intersectsWithSides(item) {\n      var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height),\n          isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width),\n          verticalDirection = this._getDragVerticalDirection(),\n          horizontalDirection = this._getDragHorizontalDirection();\n\n      if (this.floating && horizontalDirection) {\n        return horizontalDirection === \"right\" && isOverRightHalf || horizontalDirection === \"left\" && !isOverRightHalf;\n      } else {\n        return verticalDirection && (verticalDirection === \"down\" && isOverBottomHalf || verticalDirection === \"up\" && !isOverBottomHalf);\n      }\n    },\n    _getDragVerticalDirection: function _getDragVerticalDirection() {\n      var delta = this.positionAbs.top - this.lastPositionAbs.top;\n      return delta !== 0 && (delta > 0 ? \"down\" : \"up\");\n    },\n    _getDragHorizontalDirection: function _getDragHorizontalDirection() {\n      var delta = this.positionAbs.left - this.lastPositionAbs.left;\n      return delta !== 0 && (delta > 0 ? \"right\" : \"left\");\n    },\n    refresh: function refresh(event) {\n      this._refreshItems(event);\n\n      this._setHandleClassName();\n\n      this.refreshPositions();\n      return this;\n    },\n    _connectWith: function _connectWith() {\n      var options = this.options;\n      return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;\n    },\n    _getItemsAsjQuery: function _getItemsAsjQuery(connected) {\n      var i,\n          j,\n          cur,\n          inst,\n          items = [],\n          queries = [],\n          connectWith = this._connectWith();\n\n      if (connectWith && connected) {\n        for (i = connectWith.length - 1; i >= 0; i--) {\n          cur = $(connectWith[i], this.document[0]);\n\n          for (j = cur.length - 1; j >= 0; j--) {\n            inst = $.data(cur[j], this.widgetFullName);\n\n            if (inst && inst !== this && !inst.options.disabled) {\n              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), inst]);\n            }\n          }\n        }\n      }\n\n      queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {\n        options: this.options,\n        item: this.currentItem\n      }) : $(this.options.items, this.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), this]);\n\n      function addItems() {\n        items.push(this);\n      }\n\n      for (i = queries.length - 1; i >= 0; i--) {\n        queries[i][0].each(addItems);\n      }\n\n      return $(items);\n    },\n    _removeCurrentsFromItems: function _removeCurrentsFromItems() {\n      var list = this.currentItem.find(\":data(\" + this.widgetName + \"-item)\");\n      this.items = $.grep(this.items, function (item) {\n        for (var j = 0; j < list.length; j++) {\n          if (list[j] === item.item[0]) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    },\n    _refreshItems: function _refreshItems(event) {\n      this.items = [];\n      this.containers = [this];\n\n      var i,\n          j,\n          cur,\n          inst,\n          targetData,\n          _queries,\n          item,\n          queriesLength,\n          items = this.items,\n          queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {\n        item: this.currentItem\n      }) : $(this.options.items, this.element), this]],\n          connectWith = this._connectWith();\n\n      if (connectWith && this.ready) {\n        //Shouldn't be run the first time through due to massive slow-down\n        for (i = connectWith.length - 1; i >= 0; i--) {\n          cur = $(connectWith[i], this.document[0]);\n\n          for (j = cur.length - 1; j >= 0; j--) {\n            inst = $.data(cur[j], this.widgetFullName);\n\n            if (inst && inst !== this && !inst.options.disabled) {\n              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {\n                item: this.currentItem\n              }) : $(inst.options.items, inst.element), inst]);\n              this.containers.push(inst);\n            }\n          }\n        }\n      }\n\n      for (i = queries.length - 1; i >= 0; i--) {\n        targetData = queries[i][1];\n        _queries = queries[i][0];\n\n        for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {\n          item = $(_queries[j]);\n          item.data(this.widgetName + \"-item\", targetData); // Data for target checking (mouse manager)\n\n          items.push({\n            item: item,\n            instance: targetData,\n            width: 0,\n            height: 0,\n            left: 0,\n            top: 0\n          });\n        }\n      }\n    },\n    refreshPositions: function refreshPositions(fast) {\n      // Determine whether items are being displayed horizontally\n      this.floating = this.items.length ? this.options.axis === \"x\" || this._isFloating(this.items[0].item) : false; //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change\n\n      if (this.offsetParent && this.helper) {\n        this.offset.parent = this._getParentOffset();\n      }\n\n      var i, item, t, p;\n\n      for (i = this.items.length - 1; i >= 0; i--) {\n        item = this.items[i]; //We ignore calculating positions of all connected containers when we're not over them\n\n        if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {\n          continue;\n        }\n\n        t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;\n\n        if (!fast) {\n          item.width = t.outerWidth();\n          item.height = t.outerHeight();\n        }\n\n        p = t.offset();\n        item.left = p.left;\n        item.top = p.top;\n      }\n\n      if (this.options.custom && this.options.custom.refreshContainers) {\n        this.options.custom.refreshContainers.call(this);\n      } else {\n        for (i = this.containers.length - 1; i >= 0; i--) {\n          p = this.containers[i].element.offset();\n          this.containers[i].containerCache.left = p.left;\n          this.containers[i].containerCache.top = p.top;\n          this.containers[i].containerCache.width = this.containers[i].element.outerWidth();\n          this.containers[i].containerCache.height = this.containers[i].element.outerHeight();\n        }\n      }\n\n      return this;\n    },\n    _createPlaceholder: function _createPlaceholder(that) {\n      that = that || this;\n      var className,\n          o = that.options;\n\n      if (!o.placeholder || o.placeholder.constructor === String) {\n        className = o.placeholder;\n        o.placeholder = {\n          element: function element() {\n            var nodeName = that.currentItem[0].nodeName.toLowerCase(),\n                element = $(\"<\" + nodeName + \">\", that.document[0]).addClass(className || that.currentItem[0].className + \" ui-sortable-placeholder\").removeClass(\"ui-sortable-helper\");\n\n            if (nodeName === \"tbody\") {\n              that._createTrPlaceholder(that.currentItem.find(\"tr\").eq(0), $(\"<tr>\", that.document[0]).appendTo(element));\n            } else if (nodeName === \"tr\") {\n              that._createTrPlaceholder(that.currentItem, element);\n            } else if (nodeName === \"img\") {\n              element.attr(\"src\", that.currentItem.attr(\"src\"));\n            }\n\n            if (!className) {\n              element.css(\"visibility\", \"hidden\");\n            }\n\n            return element;\n          },\n          update: function update(container, p) {\n            // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that\n            // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified\n            if (className && !o.forcePlaceholderSize) {\n              return;\n            } //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item\n\n\n            if (!p.height()) {\n              p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css(\"paddingTop\") || 0, 10) - parseInt(that.currentItem.css(\"paddingBottom\") || 0, 10));\n            }\n\n            if (!p.width()) {\n              p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css(\"paddingLeft\") || 0, 10) - parseInt(that.currentItem.css(\"paddingRight\") || 0, 10));\n            }\n          }\n        };\n      } //Create the placeholder\n\n\n      that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem)); //Append it after the actual current item\n\n      that.currentItem.after(that.placeholder); //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)\n\n      o.placeholder.update(that, that.placeholder);\n    },\n    _createTrPlaceholder: function _createTrPlaceholder(sourceTr, targetTr) {\n      var that = this;\n      sourceTr.children().each(function () {\n        $(\"<td>&#160;</td>\", that.document[0]).attr(\"colspan\", $(this).attr(\"colspan\") || 1).appendTo(targetTr);\n      });\n    },\n    _contactContainers: function _contactContainers(event) {\n      var i,\n          j,\n          dist,\n          itemWithLeastDistance,\n          posProperty,\n          sizeProperty,\n          cur,\n          nearBottom,\n          floating,\n          axis,\n          innermostContainer = null,\n          innermostIndex = null; // get innermost container that intersects with item\n\n      for (i = this.containers.length - 1; i >= 0; i--) {\n        // never consider a container that's located within the item itself\n        if ($.contains(this.currentItem[0], this.containers[i].element[0])) {\n          continue;\n        }\n\n        if (this._intersectsWith(this.containers[i].containerCache)) {\n          // if we've already found a container and it's more \"inner\" than this, then continue\n          if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {\n            continue;\n          }\n\n          innermostContainer = this.containers[i];\n          innermostIndex = i;\n        } else {\n          // container doesn't intersect. trigger \"out\" event if necessary\n          if (this.containers[i].containerCache.over) {\n            this.containers[i]._trigger(\"out\", event, this._uiHash(this));\n\n            this.containers[i].containerCache.over = 0;\n          }\n        }\n      } // if no intersecting containers found, return\n\n\n      if (!innermostContainer) {\n        return;\n      } // move the item into the container if it's not there already\n\n\n      if (this.containers.length === 1) {\n        if (!this.containers[innermostIndex].containerCache.over) {\n          this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\n          this.containers[innermostIndex].containerCache.over = 1;\n        }\n      } else {\n        //When entering a new container, we will find the item with the least distance and append our item near it\n        dist = 10000;\n        itemWithLeastDistance = null;\n        floating = innermostContainer.floating || this._isFloating(this.currentItem);\n        posProperty = floating ? \"left\" : \"top\";\n        sizeProperty = floating ? \"width\" : \"height\";\n        axis = floating ? \"clientX\" : \"clientY\";\n\n        for (j = this.items.length - 1; j >= 0; j--) {\n          if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {\n            continue;\n          }\n\n          if (this.items[j].item[0] === this.currentItem[0]) {\n            continue;\n          }\n\n          cur = this.items[j].item.offset()[posProperty];\n          nearBottom = false;\n\n          if (event[axis] - cur > this.items[j][sizeProperty] / 2) {\n            nearBottom = true;\n          }\n\n          if (Math.abs(event[axis] - cur) < dist) {\n            dist = Math.abs(event[axis] - cur);\n            itemWithLeastDistance = this.items[j];\n            this.direction = nearBottom ? \"up\" : \"down\";\n          }\n        } //Check if dropOnEmpty is enabled\n\n\n        if (!itemWithLeastDistance && !this.options.dropOnEmpty) {\n          return;\n        }\n\n        if (this.currentContainer === this.containers[innermostIndex]) {\n          if (!this.currentContainer.containerCache.over) {\n            this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash());\n\n            this.currentContainer.containerCache.over = 1;\n          }\n\n          return;\n        }\n\n        itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);\n\n        this._trigger(\"change\", event, this._uiHash());\n\n        this.containers[innermostIndex]._trigger(\"change\", event, this._uiHash(this));\n\n        this.currentContainer = this.containers[innermostIndex]; //Update the placeholder\n\n        this.options.placeholder.update(this.currentContainer, this.placeholder);\n\n        this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\n        this.containers[innermostIndex].containerCache.over = 1;\n      }\n    },\n    _createHelper: function _createHelper(event) {\n      var o = this.options,\n          helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : o.helper === \"clone\" ? this.currentItem.clone() : this.currentItem; //Add the helper to the DOM if that didn't happen already\n\n      if (!helper.parents(\"body\").length) {\n        $(o.appendTo !== \"parent\" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);\n      }\n\n      if (helper[0] === this.currentItem[0]) {\n        this._storedCSS = {\n          width: this.currentItem[0].style.width,\n          height: this.currentItem[0].style.height,\n          position: this.currentItem.css(\"position\"),\n          top: this.currentItem.css(\"top\"),\n          left: this.currentItem.css(\"left\")\n        };\n      }\n\n      if (!helper[0].style.width || o.forceHelperSize) {\n        helper.width(this.currentItem.width());\n      }\n\n      if (!helper[0].style.height || o.forceHelperSize) {\n        helper.height(this.currentItem.height());\n      }\n\n      return helper;\n    },\n    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n      if (typeof obj === \"string\") {\n        obj = obj.split(\" \");\n      }\n\n      if ($.isArray(obj)) {\n        obj = {\n          left: +obj[0],\n          top: +obj[1] || 0\n        };\n      }\n\n      if (\"left\" in obj) {\n        this.offset.click.left = obj.left + this.margins.left;\n      }\n\n      if (\"right\" in obj) {\n        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n      }\n\n      if (\"top\" in obj) {\n        this.offset.click.top = obj.top + this.margins.top;\n      }\n\n      if (\"bottom\" in obj) {\n        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n      }\n    },\n    _getParentOffset: function _getParentOffset() {\n      //Get the offsetParent and cache its position\n      this.offsetParent = this.helper.offsetParent();\n      var po = this.offsetParent.offset(); // This is a special case where we need to modify a offset calculated on start, since the following happened:\n      // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\n      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\n      //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\n\n      if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n        po.left += this.scrollParent.scrollLeft();\n        po.top += this.scrollParent.scrollTop();\n      } // This needs to be actually done for all browsers, since pageX/pageY includes this information\n      // with an ugly IE fix\n\n\n      if (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === \"html\" && $.ui.ie) {\n        po = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      return {\n        top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function _getRelativeOffset() {\n      if (this.cssPosition === \"relative\") {\n        var p = this.currentItem.position();\n        return {\n          top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\n          left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\n        };\n      } else {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n    },\n    _cacheMargins: function _cacheMargins() {\n      this.margins = {\n        left: parseInt(this.currentItem.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.currentItem.css(\"marginTop\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function _cacheHelperProportions() {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function _setContainment() {\n      var ce,\n          co,\n          over,\n          o = this.options;\n\n      if (o.containment === \"parent\") {\n        o.containment = this.helper[0].parentNode;\n      }\n\n      if (o.containment === \"document\" || o.containment === \"window\") {\n        this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, o.containment === \"document\" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (o.containment === \"document\" ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n      }\n\n      if (!/^(document|window|parent)$/.test(o.containment)) {\n        ce = $(o.containment)[0];\n        co = $(o.containment).offset();\n        over = $(ce).css(\"overflow\") !== \"hidden\";\n        this.containment = [co.left + (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingLeft\"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingTop\"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top];\n      }\n    },\n    _convertPositionTo: function _convertPositionTo(d, pos) {\n      if (!pos) {\n        pos = this.position;\n      }\n\n      var mod = d === \"absolute\" ? 1 : -1,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);\n      return {\n        top: pos.top + // The absolute mouse position\n        this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,\n        left: pos.left + // The absolute mouse position\n        this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)\n        (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod\n      };\n    },\n    _generatePosition: function _generatePosition(event) {\n      var top,\n          left,\n          o = this.options,\n          pageX = event.pageX,\n          pageY = event.pageY,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName); // This is another very weird special case that only happens for relative elements:\n      // 1. If the css position is relative\n      // 2. and the scroll parent is the document or similar to the offset parent\n      // we have to refresh the relative offset during the scroll so there are no jumps\n\n      if (this.cssPosition === \"relative\" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {\n        this.offset.relative = this._getRelativeOffset();\n      }\n      /*\n       * - Position constraining -\n       * Constrain the position to a mix of grid, containment.\n       */\n\n\n      if (this.originalPosition) {\n        //If we are not dragging yet, we won't check for options\n        if (this.containment) {\n          if (event.pageX - this.offset.click.left < this.containment[0]) {\n            pageX = this.containment[0] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top < this.containment[1]) {\n            pageY = this.containment[1] + this.offset.click.top;\n          }\n\n          if (event.pageX - this.offset.click.left > this.containment[2]) {\n            pageX = this.containment[2] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top > this.containment[3]) {\n            pageY = this.containment[3] + this.offset.click.top;\n          }\n        }\n\n        if (o.grid) {\n          top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];\n          pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n          left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];\n          pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n        }\n      }\n\n      return {\n        top: pageY - // The absolute mouse position\n        this.offset.click.top - // Click offset (relative to the element)\n        this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),\n        left: pageX - // The absolute mouse position\n        this.offset.click.left - // Click offset (relative to the element)\n        this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)\n        this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())\n      };\n    },\n    _rearrange: function _rearrange(event, i, a, hardRefresh) {\n      a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === \"down\" ? i.item[0] : i.item[0].nextSibling); //Various things done here to improve the performance:\n      // 1. we create a setTimeout, that calls refreshPositions\n      // 2. on the instance, we have a counter variable, that get's higher after every append\n      // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same\n      // 4. this lets only the last addition to the timeout stack through\n\n      this.counter = this.counter ? ++this.counter : 1;\n      var counter = this.counter;\n\n      this._delay(function () {\n        if (counter === this.counter) {\n          this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove\n        }\n      });\n    },\n    _clear: function _clear(event, noPropagation) {\n      this.reverting = false; // We delay all events that have to be triggered to after the point where the placeholder has been removed and\n      // everything else normalized again\n\n      var i,\n          delayedTriggers = []; // We first have to update the dom position of the actual currentItem\n      // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)\n\n      if (!this._noFinalSort && this.currentItem.parent().length) {\n        this.placeholder.before(this.currentItem);\n      }\n\n      this._noFinalSort = null;\n\n      if (this.helper[0] === this.currentItem[0]) {\n        for (i in this._storedCSS) {\n          if (this._storedCSS[i] === \"auto\" || this._storedCSS[i] === \"static\") {\n            this._storedCSS[i] = \"\";\n          }\n        }\n\n        this.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\n      } else {\n        this.currentItem.show();\n      }\n\n      if (this.fromOutside && !noPropagation) {\n        delayedTriggers.push(function (event) {\n          this._trigger(\"receive\", event, this._uiHash(this.fromOutside));\n        });\n      }\n\n      if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(\".ui-sortable-helper\")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {\n        delayedTriggers.push(function (event) {\n          this._trigger(\"update\", event, this._uiHash());\n        }); //Trigger update callback if the DOM position has changed\n      } // Check if the items Container has Changed and trigger appropriate\n      // events.\n\n\n      if (this !== this.currentContainer) {\n        if (!noPropagation) {\n          delayedTriggers.push(function (event) {\n            this._trigger(\"remove\", event, this._uiHash());\n          });\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"receive\", event, this._uiHash(this));\n            };\n          }.call(this, this.currentContainer));\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"update\", event, this._uiHash(this));\n            };\n          }.call(this, this.currentContainer));\n        }\n      } //Post events to containers\n\n\n      function delayEvent(type, instance, container) {\n        return function (event) {\n          container._trigger(type, event, instance._uiHash(instance));\n        };\n      }\n\n      for (i = this.containers.length - 1; i >= 0; i--) {\n        if (!noPropagation) {\n          delayedTriggers.push(delayEvent(\"deactivate\", this, this.containers[i]));\n        }\n\n        if (this.containers[i].containerCache.over) {\n          delayedTriggers.push(delayEvent(\"out\", this, this.containers[i]));\n          this.containers[i].containerCache.over = 0;\n        }\n      } //Do what was originally in plugins\n\n\n      if (this.storedCursor) {\n        this.document.find(\"body\").css(\"cursor\", this.storedCursor);\n        this.storedStylesheet.remove();\n      }\n\n      if (this._storedOpacity) {\n        this.helper.css(\"opacity\", this._storedOpacity);\n      }\n\n      if (this._storedZIndex) {\n        this.helper.css(\"zIndex\", this._storedZIndex === \"auto\" ? \"\" : this._storedZIndex);\n      }\n\n      this.dragging = false;\n\n      if (!noPropagation) {\n        this._trigger(\"beforeStop\", event, this._uiHash());\n      } //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\n\n\n      this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n\n      if (!this.cancelHelperRemoval) {\n        if (this.helper[0] !== this.currentItem[0]) {\n          this.helper.remove();\n        }\n\n        this.helper = null;\n      }\n\n      if (!noPropagation) {\n        for (i = 0; i < delayedTriggers.length; i++) {\n          delayedTriggers[i].call(this, event);\n        } //Trigger all delayed events\n\n\n        this._trigger(\"stop\", event, this._uiHash());\n      }\n\n      this.fromOutside = false;\n      return !this.cancelHelperRemoval;\n    },\n    _trigger: function _trigger() {\n      if ($.Widget.prototype._trigger.apply(this, arguments) === false) {\n        this.cancel();\n      }\n    },\n    _uiHash: function _uiHash(_inst) {\n      var inst = _inst || this;\n      return {\n        helper: inst.helper,\n        placeholder: inst.placeholder || $([]),\n        position: inst.position,\n        originalPosition: inst.originalPosition,\n        offset: inst.positionAbs,\n        item: inst.currentItem,\n        sender: _inst ? _inst.element : null\n      };\n    }\n  });\n  /*!\n   * jQuery UI Spinner 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/spinner/\n   */\n\n  function spinner_modifier(fn) {\n    return function () {\n      var previous = this.element.val();\n      fn.apply(this, arguments);\n\n      this._refresh();\n\n      if (previous !== this.element.val()) {\n        this._trigger(\"change\");\n      }\n    };\n  }\n\n  var spinner = $.widget(\"ui.spinner\", {\n    version: \"1.11.4\",\n    defaultElement: \"<input>\",\n    widgetEventPrefix: \"spin\",\n    options: {\n      culture: null,\n      icons: {\n        down: \"ui-icon-triangle-1-s\",\n        up: \"ui-icon-triangle-1-n\"\n      },\n      incremental: true,\n      max: null,\n      min: null,\n      numberFormat: null,\n      page: 10,\n      step: 1,\n      change: null,\n      spin: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      // handle string values that need to be parsed\n      this._setOption(\"max\", this.options.max);\n\n      this._setOption(\"min\", this.options.min);\n\n      this._setOption(\"step\", this.options.step); // Only format if there is a value, prevents the field from being marked\n      // as invalid in Firefox, see #9573.\n\n\n      if (this.value() !== \"\") {\n        // Format the value, but don't constrain.\n        this._value(this.element.val(), true);\n      }\n\n      this._draw();\n\n      this._on(this._events);\n\n      this._refresh(); // turning off autocomplete prevents the browser from remembering the\n      // value when navigating through history, so we re-enable autocomplete\n      // if the page is unloaded before the widget is destroyed. #7790\n\n\n      this._on(this.window, {\n        beforeunload: function beforeunload() {\n          this.element.removeAttr(\"autocomplete\");\n        }\n      });\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var options = {},\n          element = this.element;\n      $.each([\"min\", \"max\", \"step\"], function (i, option) {\n        var value = element.attr(option);\n\n        if (value !== undefined && value.length) {\n          options[option] = value;\n        }\n      });\n      return options;\n    },\n    _events: {\n      keydown: function keydown(event) {\n        if (this._start(event) && this._keydown(event)) {\n          event.preventDefault();\n        }\n      },\n      keyup: \"_stop\",\n      focus: function focus() {\n        this.previous = this.element.val();\n      },\n      blur: function blur(event) {\n        if (this.cancelBlur) {\n          delete this.cancelBlur;\n          return;\n        }\n\n        this._stop();\n\n        this._refresh();\n\n        if (this.previous !== this.element.val()) {\n          this._trigger(\"change\", event);\n        }\n      },\n      mousewheel: function mousewheel(event, delta) {\n        if (!delta) {\n          return;\n        }\n\n        if (!this.spinning && !this._start(event)) {\n          return false;\n        }\n\n        this._spin((delta > 0 ? 1 : -1) * this.options.step, event);\n\n        clearTimeout(this.mousewheelTimer);\n        this.mousewheelTimer = this._delay(function () {\n          if (this.spinning) {\n            this._stop(event);\n          }\n        }, 100);\n        event.preventDefault();\n      },\n      \"mousedown .ui-spinner-button\": function mousedownUiSpinnerButton(event) {\n        var previous; // We never want the buttons to have focus; whenever the user is\n        // interacting with the spinner, the focus should be on the input.\n        // If the input is focused then this.previous is properly set from\n        // when the input first received focus. If the input is not focused\n        // then we need to set this.previous based on the value before spinning.\n\n        previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();\n\n        function checkFocus() {\n          var isActive = this.element[0] === this.document[0].activeElement;\n\n          if (!isActive) {\n            this.element.focus();\n            this.previous = previous; // support: IE\n            // IE sets focus asynchronously, so we need to check if focus\n            // moved off of the input because the user clicked on the button.\n\n            this._delay(function () {\n              this.previous = previous;\n            });\n          }\n        } // ensure focus is on (or stays on) the text field\n\n\n        event.preventDefault();\n        checkFocus.call(this); // support: IE\n        // IE doesn't prevent moving focus even with event.preventDefault()\n        // so we set a flag to know when we should ignore the blur event\n        // and check (again) if focus moved off of the input.\n\n        this.cancelBlur = true;\n\n        this._delay(function () {\n          delete this.cancelBlur;\n          checkFocus.call(this);\n        });\n\n        if (this._start(event) === false) {\n          return;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      \"mouseup .ui-spinner-button\": \"_stop\",\n      \"mouseenter .ui-spinner-button\": function mouseenterUiSpinnerButton(event) {\n        // button will add ui-state-active if mouse was down while mouseleave and kept down\n        if (!$(event.currentTarget).hasClass(\"ui-state-active\")) {\n          return;\n        }\n\n        if (this._start(event) === false) {\n          return false;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      // TODO: do we really want to consider this a stop?\n      // shouldn't we just stop the repeater and wait until mouseup before\n      // we trigger the stop event?\n      \"mouseleave .ui-spinner-button\": \"_stop\"\n    },\n    _draw: function _draw() {\n      var uiSpinner = this.uiSpinner = this.element.addClass(\"ui-spinner-input\").attr(\"autocomplete\", \"off\").wrap(this._uiSpinnerHtml()).parent() // add buttons\n      .append(this._buttonHtml());\n      this.element.attr(\"role\", \"spinbutton\"); // button bindings\n\n      this.buttons = uiSpinner.find(\".ui-spinner-button\").attr(\"tabIndex\", -1).button().removeClass(\"ui-corner-all\"); // IE 6 doesn't understand height: 50% for the buttons\n      // unless the wrapper has an explicit height\n\n      if (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) && uiSpinner.height() > 0) {\n        uiSpinner.height(uiSpinner.height());\n      } // disable spinner if element was already disabled\n\n\n      if (this.options.disabled) {\n        this.disable();\n      }\n    },\n    _keydown: function _keydown(event) {\n      var options = this.options,\n          keyCode = $.ui.keyCode;\n\n      switch (event.keyCode) {\n        case keyCode.UP:\n          this._repeat(null, 1, event);\n\n          return true;\n\n        case keyCode.DOWN:\n          this._repeat(null, -1, event);\n\n          return true;\n\n        case keyCode.PAGE_UP:\n          this._repeat(null, options.page, event);\n\n          return true;\n\n        case keyCode.PAGE_DOWN:\n          this._repeat(null, -options.page, event);\n\n          return true;\n      }\n\n      return false;\n    },\n    _uiSpinnerHtml: function _uiSpinnerHtml() {\n      return \"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>\";\n    },\n    _buttonHtml: function _buttonHtml() {\n      return \"\" + \"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>\" + \"<span class='ui-icon \" + this.options.icons.up + \"'>&#9650;</span>\" + \"</a>\" + \"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>\" + \"<span class='ui-icon \" + this.options.icons.down + \"'>&#9660;</span>\" + \"</a>\";\n    },\n    _start: function _start(event) {\n      if (!this.spinning && this._trigger(\"start\", event) === false) {\n        return false;\n      }\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      this.spinning = true;\n      return true;\n    },\n    _repeat: function _repeat(i, steps, event) {\n      i = i || 500;\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        this._repeat(40, steps, event);\n      }, i);\n\n      this._spin(steps * this.options.step, event);\n    },\n    _spin: function _spin(step, event) {\n      var value = this.value() || 0;\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      value = this._adjustValue(value + step * this._increment(this.counter));\n\n      if (!this.spinning || this._trigger(\"spin\", event, {\n        value: value\n      }) !== false) {\n        this._value(value);\n\n        this.counter++;\n      }\n    },\n    _increment: function _increment(i) {\n      var incremental = this.options.incremental;\n\n      if (incremental) {\n        return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);\n      }\n\n      return 1;\n    },\n    _precision: function _precision() {\n      var precision = this._precisionOf(this.options.step);\n\n      if (this.options.min !== null) {\n        precision = Math.max(precision, this._precisionOf(this.options.min));\n      }\n\n      return precision;\n    },\n    _precisionOf: function _precisionOf(num) {\n      var str = num.toString(),\n          decimal = str.indexOf(\".\");\n      return decimal === -1 ? 0 : str.length - decimal - 1;\n    },\n    _adjustValue: function _adjustValue(value) {\n      var base,\n          aboveMin,\n          options = this.options; // make sure we're at a valid step\n      // - find out where we are relative to the base (min or 0)\n\n      base = options.min !== null ? options.min : 0;\n      aboveMin = value - base; // - round to the nearest step\n\n      aboveMin = Math.round(aboveMin / options.step) * options.step; // - rounding is based on 0, so adjust back to our base\n\n      value = base + aboveMin; // fix precision from bad JS floating point math\n\n      value = parseFloat(value.toFixed(this._precision())); // clamp the value\n\n      if (options.max !== null && value > options.max) {\n        return options.max;\n      }\n\n      if (options.min !== null && value < options.min) {\n        return options.min;\n      }\n\n      return value;\n    },\n    _stop: function _stop(event) {\n      if (!this.spinning) {\n        return;\n      }\n\n      clearTimeout(this.timer);\n      clearTimeout(this.mousewheelTimer);\n      this.counter = 0;\n      this.spinning = false;\n\n      this._trigger(\"stop\", event);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"culture\" || key === \"numberFormat\") {\n        var prevValue = this._parse(this.element.val());\n\n        this.options[key] = value;\n        this.element.val(this._format(prevValue));\n        return;\n      }\n\n      if (key === \"max\" || key === \"min\" || key === \"step\") {\n        if (typeof value === \"string\") {\n          value = this._parse(value);\n        }\n      }\n\n      if (key === \"icons\") {\n        this.buttons.first().find(\".ui-icon\").removeClass(this.options.icons.up).addClass(value.up);\n        this.buttons.last().find(\".ui-icon\").removeClass(this.options.icons.down).addClass(value.down);\n      }\n\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        this.widget().toggleClass(\"ui-state-disabled\", !!value);\n        this.element.prop(\"disabled\", !!value);\n        this.buttons.button(value ? \"disable\" : \"enable\");\n      }\n    },\n    _setOptions: spinner_modifier(function (options) {\n      this._super(options);\n    }),\n    _parse: function _parse(val) {\n      if (typeof val === \"string\" && val !== \"\") {\n        val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;\n      }\n\n      return val === \"\" || isNaN(val) ? null : val;\n    },\n    _format: function _format(value) {\n      if (value === \"\") {\n        return \"\";\n      }\n\n      return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;\n    },\n    _refresh: function _refresh() {\n      this.element.attr({\n        \"aria-valuemin\": this.options.min,\n        \"aria-valuemax\": this.options.max,\n        // TODO: what should we do with values that can't be parsed?\n        \"aria-valuenow\": this._parse(this.element.val())\n      });\n    },\n    isValid: function isValid() {\n      var value = this.value(); // null is invalid\n\n      if (value === null) {\n        return false;\n      } // if value gets adjusted, it's invalid\n\n\n      return value === this._adjustValue(value);\n    },\n    // update the value without triggering change\n    _value: function _value(value, allowAny) {\n      var parsed;\n\n      if (value !== \"\") {\n        parsed = this._parse(value);\n\n        if (parsed !== null) {\n          if (!allowAny) {\n            parsed = this._adjustValue(parsed);\n          }\n\n          value = this._format(parsed);\n        }\n      }\n\n      this.element.val(value);\n\n      this._refresh();\n    },\n    _destroy: function _destroy() {\n      this.element.removeClass(\"ui-spinner-input\").prop(\"disabled\", false).removeAttr(\"autocomplete\").removeAttr(\"role\").removeAttr(\"aria-valuemin\").removeAttr(\"aria-valuemax\").removeAttr(\"aria-valuenow\");\n      this.uiSpinner.replaceWith(this.element);\n    },\n    stepUp: spinner_modifier(function (steps) {\n      this._stepUp(steps);\n    }),\n    _stepUp: function _stepUp(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * this.options.step);\n\n        this._stop();\n      }\n    },\n    stepDown: spinner_modifier(function (steps) {\n      this._stepDown(steps);\n    }),\n    _stepDown: function _stepDown(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * -this.options.step);\n\n        this._stop();\n      }\n    },\n    pageUp: spinner_modifier(function (pages) {\n      this._stepUp((pages || 1) * this.options.page);\n    }),\n    pageDown: spinner_modifier(function (pages) {\n      this._stepDown((pages || 1) * this.options.page);\n    }),\n    value: function value(newVal) {\n      if (!arguments.length) {\n        return this._parse(this.element.val());\n      }\n\n      spinner_modifier(this._value).call(this, newVal);\n    },\n    widget: function widget() {\n      return this.uiSpinner;\n    }\n  });\n  /*!\n   * jQuery UI Tabs 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/tabs/\n   */\n\n  var tabs = $.widget(\"ui.tabs\", {\n    version: \"1.11.4\",\n    delay: 300,\n    options: {\n      active: null,\n      collapsible: false,\n      event: \"click\",\n      heightStyle: \"content\",\n      hide: null,\n      show: null,\n      // callbacks\n      activate: null,\n      beforeActivate: null,\n      beforeLoad: null,\n      load: null\n    },\n    _isLocal: function () {\n      var rhash = /#.*$/;\n      return function (anchor) {\n        var anchorUrl, locationUrl; // support: IE7\n        // IE7 doesn't normalize the href property when set via script (#9317)\n\n        anchor = anchor.cloneNode(false);\n        anchorUrl = anchor.href.replace(rhash, \"\");\n        locationUrl = location.href.replace(rhash, \"\"); // decoding may throw an error if the URL isn't UTF-8 (#9518)\n\n        try {\n          anchorUrl = decodeURIComponent(anchorUrl);\n        } catch (error) {}\n\n        try {\n          locationUrl = decodeURIComponent(locationUrl);\n        } catch (error) {}\n\n        return anchor.hash.length > 1 && anchorUrl === locationUrl;\n      };\n    }(),\n    _create: function _create() {\n      var that = this,\n          options = this.options;\n      this.running = false;\n      this.element.addClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all\").toggleClass(\"ui-tabs-collapsible\", options.collapsible);\n\n      this._processTabs();\n\n      options.active = this._initialActive(); // Take disabling tabs via class attribute from HTML\n      // into account and update option properly.\n\n      if ($.isArray(options.disabled)) {\n        options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(\".ui-state-disabled\"), function (li) {\n          return that.tabs.index(li);\n        }))).sort();\n      } // check for length avoids error when initializing empty list\n\n\n      if (this.options.active !== false && this.anchors.length) {\n        this.active = this._findActive(options.active);\n      } else {\n        this.active = $();\n      }\n\n      this._refresh();\n\n      if (this.active.length) {\n        this.load(options.active);\n      }\n    },\n    _initialActive: function _initialActive() {\n      var active = this.options.active,\n          collapsible = this.options.collapsible,\n          locationHash = location.hash.substring(1);\n\n      if (active === null) {\n        // check the fragment identifier in the URL\n        if (locationHash) {\n          this.tabs.each(function (i, tab) {\n            if ($(tab).attr(\"aria-controls\") === locationHash) {\n              active = i;\n              return false;\n            }\n          });\n        } // check for a tab marked active via a class\n\n\n        if (active === null) {\n          active = this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));\n        } // no active tab, set to false\n\n\n        if (active === null || active === -1) {\n          active = this.tabs.length ? 0 : false;\n        }\n      } // handle numbers: negative, out of range\n\n\n      if (active !== false) {\n        active = this.tabs.index(this.tabs.eq(active));\n\n        if (active === -1) {\n          active = collapsible ? false : 0;\n        }\n      } // don't allow collapsible: false and active: false\n\n\n      if (!collapsible && active === false && this.anchors.length) {\n        active = 0;\n      }\n\n      return active;\n    },\n    _getCreateEventData: function _getCreateEventData() {\n      return {\n        tab: this.active,\n        panel: !this.active.length ? $() : this._getPanelForTab(this.active)\n      };\n    },\n    _tabKeydown: function _tabKeydown(event) {\n      var focusedTab = $(this.document[0].activeElement).closest(\"li\"),\n          selectedIndex = this.tabs.index(focusedTab),\n          goingForward = true;\n\n      if (this._handlePageNav(event)) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case $.ui.keyCode.RIGHT:\n        case $.ui.keyCode.DOWN:\n          selectedIndex++;\n          break;\n\n        case $.ui.keyCode.UP:\n        case $.ui.keyCode.LEFT:\n          goingForward = false;\n          selectedIndex--;\n          break;\n\n        case $.ui.keyCode.END:\n          selectedIndex = this.anchors.length - 1;\n          break;\n\n        case $.ui.keyCode.HOME:\n          selectedIndex = 0;\n          break;\n\n        case $.ui.keyCode.SPACE:\n          // Activate only, no collapsing\n          event.preventDefault();\n          clearTimeout(this.activating);\n\n          this._activate(selectedIndex);\n\n          return;\n\n        case $.ui.keyCode.ENTER:\n          // Toggle (cancel delayed activation, allow collapsing)\n          event.preventDefault();\n          clearTimeout(this.activating); // Determine if we should collapse or activate\n\n          this._activate(selectedIndex === this.options.active ? false : selectedIndex);\n\n          return;\n\n        default:\n          return;\n      } // Focus the appropriate tab, based on which key was pressed\n\n\n      event.preventDefault();\n      clearTimeout(this.activating);\n      selectedIndex = this._focusNextTab(selectedIndex, goingForward); // Navigating with control/command key will prevent automatic activation\n\n      if (!event.ctrlKey && !event.metaKey) {\n        // Update aria-selected immediately so that AT think the tab is already selected.\n        // Otherwise AT may confuse the user by stating that they need to activate the tab,\n        // but the tab will already be activated by the time the announcement finishes.\n        focusedTab.attr(\"aria-selected\", \"false\");\n        this.tabs.eq(selectedIndex).attr(\"aria-selected\", \"true\");\n        this.activating = this._delay(function () {\n          this.option(\"active\", selectedIndex);\n        }, this.delay);\n      }\n    },\n    _panelKeydown: function _panelKeydown(event) {\n      if (this._handlePageNav(event)) {\n        return;\n      } // Ctrl+up moves focus to the current tab\n\n\n      if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {\n        event.preventDefault();\n        this.active.focus();\n      }\n    },\n    // Alt+page up/down moves focus to the previous/next tab (and activates)\n    _handlePageNav: function _handlePageNav(event) {\n      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {\n        this._activate(this._focusNextTab(this.options.active - 1, false));\n\n        return true;\n      }\n\n      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {\n        this._activate(this._focusNextTab(this.options.active + 1, true));\n\n        return true;\n      }\n    },\n    _findNextTab: function _findNextTab(index, goingForward) {\n      var lastTabIndex = this.tabs.length - 1;\n\n      function constrain() {\n        if (index > lastTabIndex) {\n          index = 0;\n        }\n\n        if (index < 0) {\n          index = lastTabIndex;\n        }\n\n        return index;\n      }\n\n      while ($.inArray(constrain(), this.options.disabled) !== -1) {\n        index = goingForward ? index + 1 : index - 1;\n      }\n\n      return index;\n    },\n    _focusNextTab: function _focusNextTab(index, goingForward) {\n      index = this._findNextTab(index, goingForward);\n      this.tabs.eq(index).focus();\n      return index;\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"active\") {\n        // _activate() will handle invalid values and update this.options\n        this._activate(value);\n\n        return;\n      }\n\n      if (key === \"disabled\") {\n        // don't use the widget factory's disabled handling\n        this._setupDisabled(value);\n\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"collapsible\") {\n        this.element.toggleClass(\"ui-tabs-collapsible\", value); // Setting collapsible: false while collapsed; open first panel\n\n        if (!value && this.options.active === false) {\n          this._activate(0);\n        }\n      }\n\n      if (key === \"event\") {\n        this._setupEvents(value);\n      }\n\n      if (key === \"heightStyle\") {\n        this._setupHeightStyle(value);\n      }\n    },\n    _sanitizeSelector: function _sanitizeSelector(hash) {\n      return hash ? hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\") : \"\";\n    },\n    refresh: function refresh() {\n      var options = this.options,\n          lis = this.tablist.children(\":has(a[href])\"); // get disabled tabs from class attribute from HTML\n      // this will get converted to a boolean if needed in _refresh()\n\n      options.disabled = $.map(lis.filter(\".ui-state-disabled\"), function (tab) {\n        return lis.index(tab);\n      });\n\n      this._processTabs(); // was collapsed or no tabs\n\n\n      if (options.active === false || !this.anchors.length) {\n        options.active = false;\n        this.active = $(); // was active, but active tab is gone\n      } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {\n        // all remaining tabs are disabled\n        if (this.tabs.length === options.disabled.length) {\n          options.active = false;\n          this.active = $(); // activate previous tab\n        } else {\n          this._activate(this._findNextTab(Math.max(0, options.active - 1), false));\n        } // was active, active tab still exists\n\n      } else {\n        // make sure active index is correct\n        options.active = this.tabs.index(this.active);\n      }\n\n      this._refresh();\n    },\n    _refresh: function _refresh() {\n      this._setupDisabled(this.options.disabled);\n\n      this._setupEvents(this.options.event);\n\n      this._setupHeightStyle(this.options.heightStyle);\n\n      this.tabs.not(this.active).attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\",\n        tabIndex: -1\n      });\n      this.panels.not(this._getPanelForTab(this.active)).hide().attr({\n        \"aria-hidden\": \"true\"\n      }); // Make sure one tab is in the tab order\n\n      if (!this.active.length) {\n        this.tabs.eq(0).attr(\"tabIndex\", 0);\n      } else {\n        this.active.addClass(\"ui-tabs-active ui-state-active\").attr({\n          \"aria-selected\": \"true\",\n          \"aria-expanded\": \"true\",\n          tabIndex: 0\n        });\n\n        this._getPanelForTab(this.active).show().attr({\n          \"aria-hidden\": \"false\"\n        });\n      }\n    },\n    _processTabs: function _processTabs() {\n      var that = this,\n          prevTabs = this.tabs,\n          prevAnchors = this.anchors,\n          prevPanels = this.panels;\n      this.tablist = this._getList().addClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\").attr(\"role\", \"tablist\") // Prevent users from focusing disabled tabs via click\n      .delegate(\"> li\", \"mousedown\" + this.eventNamespace, function (event) {\n        if ($(this).is(\".ui-state-disabled\")) {\n          event.preventDefault();\n        }\n      }) // support: IE <9\n      // Preventing the default action in mousedown doesn't prevent IE\n      // from focusing the element, so if the anchor gets focused, blur.\n      // We don't have to worry about focusing the previously focused\n      // element since clicking on a non-focusable element should focus\n      // the body anyway.\n      .delegate(\".ui-tabs-anchor\", \"focus\" + this.eventNamespace, function () {\n        if ($(this).closest(\"li\").is(\".ui-state-disabled\")) {\n          this.blur();\n        }\n      });\n      this.tabs = this.tablist.find(\"> li:has(a[href])\").addClass(\"ui-state-default ui-corner-top\").attr({\n        role: \"tab\",\n        tabIndex: -1\n      });\n      this.anchors = this.tabs.map(function () {\n        return $(\"a\", this)[0];\n      }).addClass(\"ui-tabs-anchor\").attr({\n        role: \"presentation\",\n        tabIndex: -1\n      });\n      this.panels = $();\n      this.anchors.each(function (i, anchor) {\n        var selector,\n            panel,\n            panelId,\n            anchorId = $(anchor).uniqueId().attr(\"id\"),\n            tab = $(anchor).closest(\"li\"),\n            originalAriaControls = tab.attr(\"aria-controls\"); // inline tab\n\n        if (that._isLocal(anchor)) {\n          selector = anchor.hash;\n          panelId = selector.substring(1);\n          panel = that.element.find(that._sanitizeSelector(selector)); // remote tab\n        } else {\n          // If the tab doesn't already have aria-controls,\n          // generate an id by using a throw-away element\n          panelId = tab.attr(\"aria-controls\") || $({}).uniqueId()[0].id;\n          selector = \"#\" + panelId;\n          panel = that.element.find(selector);\n\n          if (!panel.length) {\n            panel = that._createPanel(panelId);\n            panel.insertAfter(that.panels[i - 1] || that.tablist);\n          }\n\n          panel.attr(\"aria-live\", \"polite\");\n        }\n\n        if (panel.length) {\n          that.panels = that.panels.add(panel);\n        }\n\n        if (originalAriaControls) {\n          tab.data(\"ui-tabs-aria-controls\", originalAriaControls);\n        }\n\n        tab.attr({\n          \"aria-controls\": panelId,\n          \"aria-labelledby\": anchorId\n        });\n        panel.attr(\"aria-labelledby\", anchorId);\n      });\n      this.panels.addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\").attr(\"role\", \"tabpanel\"); // Avoid memory leaks (#10056)\n\n      if (prevTabs) {\n        this._off(prevTabs.not(this.tabs));\n\n        this._off(prevAnchors.not(this.anchors));\n\n        this._off(prevPanels.not(this.panels));\n      }\n    },\n    // allow overriding how to find the list for rare usage scenarios (#7715)\n    _getList: function _getList() {\n      return this.tablist || this.element.find(\"ol,ul\").eq(0);\n    },\n    _createPanel: function _createPanel(id) {\n      return $(\"<div>\").attr(\"id\", id).addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\").data(\"ui-tabs-destroy\", true);\n    },\n    _setupDisabled: function _setupDisabled(disabled) {\n      if ($.isArray(disabled)) {\n        if (!disabled.length) {\n          disabled = false;\n        } else if (disabled.length === this.anchors.length) {\n          disabled = true;\n        }\n      } // disable tabs\n\n\n      for (var i = 0, li; li = this.tabs[i]; i++) {\n        if (disabled === true || $.inArray(i, disabled) !== -1) {\n          $(li).addClass(\"ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n        } else {\n          $(li).removeClass(\"ui-state-disabled\").removeAttr(\"aria-disabled\");\n        }\n      }\n\n      this.options.disabled = disabled;\n    },\n    _setupEvents: function _setupEvents(event) {\n      var events = {};\n\n      if (event) {\n        $.each(event.split(\" \"), function (index, eventName) {\n          events[eventName] = \"_eventHandler\";\n        });\n      }\n\n      this._off(this.anchors.add(this.tabs).add(this.panels)); // Always prevent the default action, even when disabled\n\n\n      this._on(true, this.anchors, {\n        click: function click(event) {\n          event.preventDefault();\n        }\n      });\n\n      this._on(this.anchors, events);\n\n      this._on(this.tabs, {\n        keydown: \"_tabKeydown\"\n      });\n\n      this._on(this.panels, {\n        keydown: \"_panelKeydown\"\n      });\n\n      this._focusable(this.tabs);\n\n      this._hoverable(this.tabs);\n    },\n    _setupHeightStyle: function _setupHeightStyle(heightStyle) {\n      var maxHeight,\n          parent = this.element.parent();\n\n      if (heightStyle === \"fill\") {\n        maxHeight = parent.height();\n        maxHeight -= this.element.outerHeight() - this.element.height();\n        this.element.siblings(\":visible\").each(function () {\n          var elem = $(this),\n              position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"fixed\") {\n            return;\n          }\n\n          maxHeight -= elem.outerHeight(true);\n        });\n        this.element.children().not(this.panels).each(function () {\n          maxHeight -= $(this).outerHeight(true);\n        });\n        this.panels.each(function () {\n          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n        }).css(\"overflow\", \"auto\");\n      } else if (heightStyle === \"auto\") {\n        maxHeight = 0;\n        this.panels.each(function () {\n          maxHeight = Math.max(maxHeight, $(this).height(\"\").height());\n        }).height(maxHeight);\n      }\n    },\n    _eventHandler: function _eventHandler(event) {\n      var options = this.options,\n          active = this.active,\n          anchor = $(event.currentTarget),\n          tab = anchor.closest(\"li\"),\n          clickedIsActive = tab[0] === active[0],\n          collapsing = clickedIsActive && options.collapsible,\n          toShow = collapsing ? $() : this._getPanelForTab(tab),\n          toHide = !active.length ? $() : this._getPanelForTab(active),\n          eventData = {\n        oldTab: active,\n        oldPanel: toHide,\n        newTab: collapsing ? $() : tab,\n        newPanel: toShow\n      };\n      event.preventDefault();\n\n      if (tab.hasClass(\"ui-state-disabled\") || // tab is already loading\n      tab.hasClass(\"ui-tabs-loading\") || // can't switch durning an animation\n      this.running || // click on active header, but not collapsible\n      clickedIsActive && !options.collapsible || // allow canceling activation\n      this._trigger(\"beforeActivate\", event, eventData) === false) {\n        return;\n      }\n\n      options.active = collapsing ? false : this.tabs.index(tab);\n      this.active = clickedIsActive ? $() : tab;\n\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n\n      if (!toHide.length && !toShow.length) {\n        $.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");\n      }\n\n      if (toShow.length) {\n        this.load(this.tabs.index(tab), event);\n      }\n\n      this._toggle(event, eventData);\n    },\n    // handles show/hide for selecting tabs\n    _toggle: function _toggle(event, eventData) {\n      var that = this,\n          toShow = eventData.newPanel,\n          toHide = eventData.oldPanel;\n      this.running = true;\n\n      function complete() {\n        that.running = false;\n\n        that._trigger(\"activate\", event, eventData);\n      }\n\n      function show() {\n        eventData.newTab.closest(\"li\").addClass(\"ui-tabs-active ui-state-active\");\n\n        if (toShow.length && that.options.show) {\n          that._show(toShow, that.options.show, complete);\n        } else {\n          toShow.show();\n          complete();\n        }\n      } // start out by hiding, then showing, then completing\n\n\n      if (toHide.length && this.options.hide) {\n        this._hide(toHide, this.options.hide, function () {\n          eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n          show();\n        });\n      } else {\n        eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n        toHide.hide();\n        show();\n      }\n\n      toHide.attr(\"aria-hidden\", \"true\");\n      eventData.oldTab.attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\"\n      }); // If we're switching tabs, remove the old tab from the tab order.\n      // If we're opening from collapsed state, remove the previous tab from the tab order.\n      // If we're collapsing, then keep the collapsing tab in the tab order.\n\n      if (toShow.length && toHide.length) {\n        eventData.oldTab.attr(\"tabIndex\", -1);\n      } else if (toShow.length) {\n        this.tabs.filter(function () {\n          return $(this).attr(\"tabIndex\") === 0;\n        }).attr(\"tabIndex\", -1);\n      }\n\n      toShow.attr(\"aria-hidden\", \"false\");\n      eventData.newTab.attr({\n        \"aria-selected\": \"true\",\n        \"aria-expanded\": \"true\",\n        tabIndex: 0\n      });\n    },\n    _activate: function _activate(index) {\n      var anchor,\n          active = this._findActive(index); // trying to activate the already active panel\n\n\n      if (active[0] === this.active[0]) {\n        return;\n      } // trying to collapse, simulate a click on the current active header\n\n\n      if (!active.length) {\n        active = this.active;\n      }\n\n      anchor = active.find(\".ui-tabs-anchor\")[0];\n\n      this._eventHandler({\n        target: anchor,\n        currentTarget: anchor,\n        preventDefault: $.noop\n      });\n    },\n    _findActive: function _findActive(index) {\n      return index === false ? $() : this.tabs.eq(index);\n    },\n    _getIndex: function _getIndex(index) {\n      // meta-function to give users option to provide a href string instead of a numerical index.\n      if (typeof index === \"string\") {\n        index = this.anchors.index(this.anchors.filter(\"[href$='\" + index + \"']\"));\n      }\n\n      return index;\n    },\n    _destroy: function _destroy() {\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n\n      this.element.removeClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible\");\n      this.tablist.removeClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\").removeAttr(\"role\");\n      this.anchors.removeClass(\"ui-tabs-anchor\").removeAttr(\"role\").removeAttr(\"tabIndex\").removeUniqueId();\n      this.tablist.unbind(this.eventNamespace);\n      this.tabs.add(this.panels).each(function () {\n        if ($.data(this, \"ui-tabs-destroy\")) {\n          $(this).remove();\n        } else {\n          $(this).removeClass(\"ui-state-default ui-state-active ui-state-disabled \" + \"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel\").removeAttr(\"tabIndex\").removeAttr(\"aria-live\").removeAttr(\"aria-busy\").removeAttr(\"aria-selected\").removeAttr(\"aria-labelledby\").removeAttr(\"aria-hidden\").removeAttr(\"aria-expanded\").removeAttr(\"role\");\n        }\n      });\n      this.tabs.each(function () {\n        var li = $(this),\n            prev = li.data(\"ui-tabs-aria-controls\");\n\n        if (prev) {\n          li.attr(\"aria-controls\", prev).removeData(\"ui-tabs-aria-controls\");\n        } else {\n          li.removeAttr(\"aria-controls\");\n        }\n      });\n      this.panels.show();\n\n      if (this.options.heightStyle !== \"content\") {\n        this.panels.css(\"height\", \"\");\n      }\n    },\n    enable: function enable(index) {\n      var disabled = this.options.disabled;\n\n      if (disabled === false) {\n        return;\n      }\n\n      if (index === undefined) {\n        disabled = false;\n      } else {\n        index = this._getIndex(index);\n\n        if ($.isArray(disabled)) {\n          disabled = $.map(disabled, function (num) {\n            return num !== index ? num : null;\n          });\n        } else {\n          disabled = $.map(this.tabs, function (li, num) {\n            return num !== index ? num : null;\n          });\n        }\n      }\n\n      this._setupDisabled(disabled);\n    },\n    disable: function disable(index) {\n      var disabled = this.options.disabled;\n\n      if (disabled === true) {\n        return;\n      }\n\n      if (index === undefined) {\n        disabled = true;\n      } else {\n        index = this._getIndex(index);\n\n        if ($.inArray(index, disabled) !== -1) {\n          return;\n        }\n\n        if ($.isArray(disabled)) {\n          disabled = $.merge([index], disabled).sort();\n        } else {\n          disabled = [index];\n        }\n      }\n\n      this._setupDisabled(disabled);\n    },\n    load: function load(index, event) {\n      index = this._getIndex(index);\n\n      var that = this,\n          tab = this.tabs.eq(index),\n          anchor = tab.find(\".ui-tabs-anchor\"),\n          panel = this._getPanelForTab(tab),\n          eventData = {\n        tab: tab,\n        panel: panel\n      },\n          complete = function complete(jqXHR, status) {\n        if (status === \"abort\") {\n          that.panels.stop(false, true);\n        }\n\n        tab.removeClass(\"ui-tabs-loading\");\n        panel.removeAttr(\"aria-busy\");\n\n        if (jqXHR === that.xhr) {\n          delete that.xhr;\n        }\n      }; // not remote\n\n\n      if (this._isLocal(anchor[0])) {\n        return;\n      }\n\n      this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData)); // support: jQuery <1.8\n      // jQuery <1.8 returns false if the request is canceled in beforeSend,\n      // but as of 1.8, $.ajax() always returns a jqXHR object.\n\n      if (this.xhr && this.xhr.statusText !== \"canceled\") {\n        tab.addClass(\"ui-tabs-loading\");\n        panel.attr(\"aria-busy\", \"true\");\n        this.xhr.done(function (response, status, jqXHR) {\n          // support: jQuery <1.8\n          // http://bugs.jquery.com/ticket/11778\n          setTimeout(function () {\n            panel.html(response);\n\n            that._trigger(\"load\", event, eventData);\n\n            complete(jqXHR, status);\n          }, 1);\n        }).fail(function (jqXHR, status) {\n          // support: jQuery <1.8\n          // http://bugs.jquery.com/ticket/11778\n          setTimeout(function () {\n            complete(jqXHR, status);\n          }, 1);\n        });\n      }\n    },\n    _ajaxSettings: function _ajaxSettings(anchor, event, eventData) {\n      var that = this;\n      return {\n        url: anchor.attr(\"href\"),\n        beforeSend: function beforeSend(jqXHR, settings) {\n          return that._trigger(\"beforeLoad\", event, $.extend({\n            jqXHR: jqXHR,\n            ajaxSettings: settings\n          }, eventData));\n        }\n      };\n    },\n    _getPanelForTab: function _getPanelForTab(tab) {\n      var id = $(tab).attr(\"aria-controls\");\n      return this.element.find(this._sanitizeSelector(\"#\" + id));\n    }\n  });\n  /*!\n   * jQuery UI Tooltip 1.11.4\n   * http://jqueryui.com\n   *\n   * Copyright jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * http://api.jqueryui.com/tooltip/\n   */\n\n  var tooltip = $.widget(\"ui.tooltip\", {\n    version: \"1.11.4\",\n    options: {\n      content: function content() {\n        // support: IE<9, Opera in jQuery <1.7\n        // .text() can't accept undefined, so coerce to a string\n        var title = $(this).attr(\"title\") || \"\"; // Escape title, since we're going from an attribute to raw HTML\n\n        return $(\"<a>\").text(title).html();\n      },\n      hide: true,\n      // Disabled elements have inconsistent behavior across browsers (#8661)\n      items: \"[title]:not([disabled])\",\n      position: {\n        my: \"left top+15\",\n        at: \"left bottom\",\n        collision: \"flipfit flip\"\n      },\n      show: true,\n      tooltipClass: null,\n      track: false,\n      // callbacks\n      close: null,\n      open: null\n    },\n    _addDescribedBy: function _addDescribedBy(elem, id) {\n      var describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/);\n      describedby.push(id);\n      elem.data(\"ui-tooltip-id\", id).attr(\"aria-describedby\", $.trim(describedby.join(\" \")));\n    },\n    _removeDescribedBy: function _removeDescribedBy(elem) {\n      var id = elem.data(\"ui-tooltip-id\"),\n          describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/),\n          index = $.inArray(id, describedby);\n\n      if (index !== -1) {\n        describedby.splice(index, 1);\n      }\n\n      elem.removeData(\"ui-tooltip-id\");\n      describedby = $.trim(describedby.join(\" \"));\n\n      if (describedby) {\n        elem.attr(\"aria-describedby\", describedby);\n      } else {\n        elem.removeAttr(\"aria-describedby\");\n      }\n    },\n    _create: function _create() {\n      this._on({\n        mouseover: \"open\",\n        focusin: \"open\"\n      }); // IDs of generated tooltips, needed for destroy\n\n\n      this.tooltips = {}; // IDs of parent tooltips where we removed the title attribute\n\n      this.parents = {};\n\n      if (this.options.disabled) {\n        this._disable();\n      } // Append the aria-live region so tooltips announce correctly\n\n\n      this.liveRegion = $(\"<div>\").attr({\n        role: \"log\",\n        \"aria-live\": \"assertive\",\n        \"aria-relevant\": \"additions\"\n      }).addClass(\"ui-helper-hidden-accessible\").appendTo(this.document[0].body);\n    },\n    _setOption: function _setOption(key, value) {\n      var that = this;\n\n      if (key === \"disabled\") {\n        this[value ? \"_disable\" : \"_enable\"]();\n        this.options[key] = value; // disable element style changes\n\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"content\") {\n        $.each(this.tooltips, function (id, tooltipData) {\n          that._updateContent(tooltipData.element);\n        });\n      }\n    },\n    _disable: function _disable() {\n      var that = this; // close open tooltips\n\n      $.each(this.tooltips, function (id, tooltipData) {\n        var event = $.Event(\"blur\");\n        event.target = event.currentTarget = tooltipData.element[0];\n        that.close(event, true);\n      }); // remove title attributes to prevent native tooltips\n\n      this.element.find(this.options.items).addBack().each(function () {\n        var element = $(this);\n\n        if (element.is(\"[title]\")) {\n          element.data(\"ui-tooltip-title\", element.attr(\"title\")).removeAttr(\"title\");\n        }\n      });\n    },\n    _enable: function _enable() {\n      // restore title attributes\n      this.element.find(this.options.items).addBack().each(function () {\n        var element = $(this);\n\n        if (element.data(\"ui-tooltip-title\")) {\n          element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n        }\n      });\n    },\n    open: function open(event) {\n      var that = this,\n          target = $(event ? event.target : this.element) // we need closest here due to mouseover bubbling,\n      // but always pointing at the same event target\n      .closest(this.options.items); // No element to show a tooltip for or the tooltip is already open\n\n      if (!target.length || target.data(\"ui-tooltip-id\")) {\n        return;\n      }\n\n      if (target.attr(\"title\")) {\n        target.data(\"ui-tooltip-title\", target.attr(\"title\"));\n      }\n\n      target.data(\"ui-tooltip-open\", true); // kill parent tooltips, custom or native, for hover\n\n      if (event && event.type === \"mouseover\") {\n        target.parents().each(function () {\n          var parent = $(this),\n              blurEvent;\n\n          if (parent.data(\"ui-tooltip-open\")) {\n            blurEvent = $.Event(\"blur\");\n            blurEvent.target = blurEvent.currentTarget = this;\n            that.close(blurEvent, true);\n          }\n\n          if (parent.attr(\"title\")) {\n            parent.uniqueId();\n            that.parents[this.id] = {\n              element: this,\n              title: parent.attr(\"title\")\n            };\n            parent.attr(\"title\", \"\");\n          }\n        });\n      }\n\n      this._registerCloseHandlers(event, target);\n\n      this._updateContent(target, event);\n    },\n    _updateContent: function _updateContent(target, event) {\n      var content,\n          contentOption = this.options.content,\n          that = this,\n          eventType = event ? event.type : null;\n\n      if (typeof contentOption === \"string\") {\n        return this._open(event, target, contentOption);\n      }\n\n      content = contentOption.call(target[0], function (response) {\n        // IE may instantly serve a cached response for ajax requests\n        // delay this call to _open so the other call to _open runs first\n        that._delay(function () {\n          // Ignore async response if tooltip was closed already\n          if (!target.data(\"ui-tooltip-open\")) {\n            return;\n          } // jQuery creates a special event for focusin when it doesn't\n          // exist natively. To improve performance, the native event\n          // object is reused and the type is changed. Therefore, we can't\n          // rely on the type being correct after the event finished\n          // bubbling, so we set it back to the previous value. (#8740)\n\n\n          if (event) {\n            event.type = eventType;\n          }\n\n          this._open(event, target, response);\n        });\n      });\n\n      if (content) {\n        this._open(event, target, content);\n      }\n    },\n    _open: function _open(event, target, content) {\n      var tooltipData,\n          tooltip,\n          delayedShow,\n          a11yContent,\n          positionOption = $.extend({}, this.options.position);\n\n      if (!content) {\n        return;\n      } // Content can be updated multiple times. If the tooltip already\n      // exists, then just update the content and bail.\n\n\n      tooltipData = this._find(target);\n\n      if (tooltipData) {\n        tooltipData.tooltip.find(\".ui-tooltip-content\").html(content);\n        return;\n      } // if we have a title, clear it to prevent the native tooltip\n      // we have to check first to avoid defining a title if none exists\n      // (we don't want to cause an element to start matching [title])\n      //\n      // We use removeAttr only for key events, to allow IE to export the correct\n      // accessible attributes. For mouse events, set to empty string to avoid\n      // native tooltip showing up (happens only when removing inside mouseover).\n\n\n      if (target.is(\"[title]\")) {\n        if (event && event.type === \"mouseover\") {\n          target.attr(\"title\", \"\");\n        } else {\n          target.removeAttr(\"title\");\n        }\n      }\n\n      tooltipData = this._tooltip(target);\n      tooltip = tooltipData.tooltip;\n\n      this._addDescribedBy(target, tooltip.attr(\"id\"));\n\n      tooltip.find(\".ui-tooltip-content\").html(content); // Support: Voiceover on OS X, JAWS on IE <= 9\n      // JAWS announces deletions even when aria-relevant=\"additions\"\n      // Voiceover will sometimes re-read the entire log region's contents from the beginning\n\n      this.liveRegion.children().hide();\n\n      if (content.clone) {\n        a11yContent = content.clone();\n        a11yContent.removeAttr(\"id\").find(\"[id]\").removeAttr(\"id\");\n      } else {\n        a11yContent = content;\n      }\n\n      $(\"<div>\").html(a11yContent).appendTo(this.liveRegion);\n\n      function position(event) {\n        positionOption.of = event;\n\n        if (tooltip.is(\":hidden\")) {\n          return;\n        }\n\n        tooltip.position(positionOption);\n      }\n\n      if (this.options.track && event && /^mouse/.test(event.type)) {\n        this._on(this.document, {\n          mousemove: position\n        }); // trigger once to override element-relative positioning\n\n\n        position(event);\n      } else {\n        tooltip.position($.extend({\n          of: target\n        }, this.options.position));\n      }\n\n      tooltip.hide();\n\n      this._show(tooltip, this.options.show); // Handle tracking tooltips that are shown with a delay (#8644). As soon\n      // as the tooltip is visible, position the tooltip using the most recent\n      // event.\n\n\n      if (this.options.show && this.options.show.delay) {\n        delayedShow = this.delayedShow = setInterval(function () {\n          if (tooltip.is(\":visible\")) {\n            position(positionOption.of);\n            clearInterval(delayedShow);\n          }\n        }, $.fx.interval);\n      }\n\n      this._trigger(\"open\", event, {\n        tooltip: tooltip\n      });\n    },\n    _registerCloseHandlers: function _registerCloseHandlers(event, target) {\n      var events = {\n        keyup: function keyup(event) {\n          if (event.keyCode === $.ui.keyCode.ESCAPE) {\n            var fakeEvent = $.Event(event);\n            fakeEvent.currentTarget = target[0];\n            this.close(fakeEvent, true);\n          }\n        }\n      }; // Only bind remove handler for delegated targets. Non-delegated\n      // tooltips will handle this in destroy.\n\n      if (target[0] !== this.element[0]) {\n        events.remove = function () {\n          this._removeTooltip(this._find(target).tooltip);\n        };\n      }\n\n      if (!event || event.type === \"mouseover\") {\n        events.mouseleave = \"close\";\n      }\n\n      if (!event || event.type === \"focusin\") {\n        events.focusout = \"close\";\n      }\n\n      this._on(true, target, events);\n    },\n    close: function close(event) {\n      var tooltip,\n          that = this,\n          target = $(event ? event.currentTarget : this.element),\n          tooltipData = this._find(target); // The tooltip may already be closed\n\n\n      if (!tooltipData) {\n        // We set ui-tooltip-open immediately upon open (in open()), but only set the\n        // additional data once there's actually content to show (in _open()). So even if the\n        // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in\n        // the period between open() and _open().\n        target.removeData(\"ui-tooltip-open\");\n        return;\n      }\n\n      tooltip = tooltipData.tooltip; // disabling closes the tooltip, so we need to track when we're closing\n      // to avoid an infinite loop in case the tooltip becomes disabled on close\n\n      if (tooltipData.closing) {\n        return;\n      } // Clear the interval for delayed tracking tooltips\n\n\n      clearInterval(this.delayedShow); // only set title if we had one before (see comment in _open())\n      // If the title attribute has changed since open(), don't restore\n\n      if (target.data(\"ui-tooltip-title\") && !target.attr(\"title\")) {\n        target.attr(\"title\", target.data(\"ui-tooltip-title\"));\n      }\n\n      this._removeDescribedBy(target);\n\n      tooltipData.hiding = true;\n      tooltip.stop(true);\n\n      this._hide(tooltip, this.options.hide, function () {\n        that._removeTooltip($(this));\n      });\n\n      target.removeData(\"ui-tooltip-open\");\n\n      this._off(target, \"mouseleave focusout keyup\"); // Remove 'remove' binding only on delegated targets\n\n\n      if (target[0] !== this.element[0]) {\n        this._off(target, \"remove\");\n      }\n\n      this._off(this.document, \"mousemove\");\n\n      if (event && event.type === \"mouseleave\") {\n        $.each(this.parents, function (id, parent) {\n          $(parent.element).attr(\"title\", parent.title);\n          delete that.parents[id];\n        });\n      }\n\n      tooltipData.closing = true;\n\n      this._trigger(\"close\", event, {\n        tooltip: tooltip\n      });\n\n      if (!tooltipData.hiding) {\n        tooltipData.closing = false;\n      }\n    },\n    _tooltip: function _tooltip(element) {\n      var tooltip = $(\"<div>\").attr(\"role\", \"tooltip\").addClass(\"ui-tooltip ui-widget ui-corner-all ui-widget-content \" + (this.options.tooltipClass || \"\")),\n          id = tooltip.uniqueId().attr(\"id\");\n      $(\"<div>\").addClass(\"ui-tooltip-content\").appendTo(tooltip);\n      tooltip.appendTo(this.document[0].body);\n      return this.tooltips[id] = {\n        element: element,\n        tooltip: tooltip\n      };\n    },\n    _find: function _find(target) {\n      var id = target.data(\"ui-tooltip-id\");\n      return id ? this.tooltips[id] : null;\n    },\n    _removeTooltip: function _removeTooltip(tooltip) {\n      tooltip.remove();\n      delete this.tooltips[tooltip.attr(\"id\")];\n    },\n    _destroy: function _destroy() {\n      var that = this; // close open tooltips\n\n      $.each(this.tooltips, function (id, tooltipData) {\n        // Delegate to close method to handle common cleanup\n        var event = $.Event(\"blur\"),\n            element = tooltipData.element;\n        event.target = event.currentTarget = element[0];\n        that.close(event, true); // Remove immediately; destroying an open tooltip doesn't use the\n        // hide animation\n\n        $(\"#\" + id).remove(); // Restore the title\n\n        if (element.data(\"ui-tooltip-title\")) {\n          // If the title attribute has changed since open(), don't restore\n          if (!element.attr(\"title\")) {\n            element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n          }\n\n          element.removeData(\"ui-tooltip-title\");\n        }\n      });\n      this.liveRegion.remove();\n    }\n  });\n});"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.uploadfile-4.0.11.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.uploadfile-4.0.11.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*!\n * jQuery Upload File Plugin\n * version: 4.0.11\n * @requires jQuery v1.5 or later & form plugin\n * Copyright (c) 2013 Ravishanker Kusuma\n * http://hayageek.com/\n */\n(function ($) {\n  if ($.fn.ajaxForm == undefined) {\n    $.getScript((\"https:\" == document.location.protocol ? \"https://\" : \"http://\") + \"malsup.github.io/jquery.form.js\");\n  }\n\n  var feature = {};\n  feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined;\n  feature.formdata = window.FormData !== undefined;\n\n  $.fn.uploadFile = function (options) {\n    // This is the easiest way to have default options.\n    var s = $.extend({\n      // These are the defaults.\n      url: \"\",\n      method: \"POST\",\n      enctype: \"multipart/form-data\",\n      returnType: null,\n      allowDuplicates: true,\n      duplicateStrict: false,\n      allowedTypes: \"*\",\n      //For list of acceptFiles\n      // http://stackoverflow.com/questions/11832930/html-input-file-accept-attribute-file-type-csv\n      acceptFiles: \"*\",\n      fileName: \"file\",\n      formData: false,\n      dynamicFormData: false,\n      maxFileSize: -1,\n      maxFileCount: -1,\n      multiple: true,\n      dragDrop: true,\n      autoSubmit: true,\n      showCancel: true,\n      showAbort: true,\n      showDone: false,\n      showDelete: false,\n      showError: true,\n      showStatusAfterSuccess: true,\n      showStatusAfterError: true,\n      showFileCounter: true,\n      fileCounterStyle: \"). \",\n      showFileSize: true,\n      showProgress: false,\n      nestedForms: true,\n      showDownload: false,\n      onLoad: function onLoad(obj) {},\n      onSelect: function onSelect(files) {\n        return true;\n      },\n      onSubmit: function onSubmit(files, xhr) {},\n      onSuccess: function onSuccess(files, response, xhr, pd) {},\n      onError: function onError(files, status, message, pd) {},\n      onCancel: function onCancel(files, pd) {},\n      onAbort: function onAbort(files, pd) {},\n      downloadCallback: false,\n      deleteCallback: false,\n      afterUploadAll: false,\n      serialize: true,\n      sequential: false,\n      sequentialCount: 2,\n      customProgressBar: false,\n      abortButtonClass: \"ajax-file-upload-abort\",\n      cancelButtonClass: \"ajax-file-upload-cancel\",\n      dragDropContainerClass: \"ajax-upload-dragdrop\",\n      dragDropHoverClass: \"state-hover\",\n      errorClass: \"ajax-file-upload-error\",\n      uploadButtonClass: \"ajax-file-upload\",\n      dragDropStr: \"<span><b>Drag &amp; Drop Files</b></span>\",\n      uploadStr: \"Upload\",\n      abortStr: \"Abort\",\n      cancelStr: \"Cancel\",\n      deleteStr: \"Delete\",\n      doneStr: \"Done\",\n      multiDragErrorStr: \"Multiple File Drag &amp; Drop is not allowed.\",\n      extErrorStr: \"is not allowed. Allowed extensions: \",\n      duplicateErrorStr: \"is not allowed. File already exists.\",\n      sizeErrorStr: \"is not allowed. Allowed Max size: \",\n      uploadErrorStr: \"Upload is not allowed\",\n      maxFileCountErrorStr: \" is not allowed. Maximum allowed files are:\",\n      downloadStr: \"Download\",\n      customErrorKeyStr: \"jquery-upload-file-error\",\n      showQueueDiv: false,\n      statusBarWidth: 400,\n      dragdropWidth: 400,\n      showPreview: false,\n      previewHeight: \"auto\",\n      previewWidth: \"100%\",\n      extraHTML: false,\n      uploadQueueOrder: 'top',\n      headers: {}\n    }, options);\n    this.fileCounter = 1;\n    this.selectedFiles = 0;\n    var formGroup = \"ajax-file-upload-\" + new Date().getTime();\n    this.formGroup = formGroup;\n    this.errorLog = $(\"<div></div>\"); //Writing errors\n\n    this.responses = [];\n    this.existingFileNames = [];\n\n    if (!feature.formdata) //check drag drop enabled.\n      {\n        s.dragDrop = false;\n      }\n\n    if (!feature.formdata || s.maxFileCount === 1) {\n      s.multiple = false;\n    }\n\n    $(this).html(\"\");\n    var obj = this;\n    var uploadLabel = $('<div>' + s.uploadStr + '</div>');\n    $(uploadLabel).addClass(s.uploadButtonClass); // wait form ajax Form plugin and initialize\n\n    (function checkAjaxFormLoaded() {\n      if ($.fn.ajaxForm) {\n        if (s.dragDrop) {\n          var dragDrop = $('<div class=\"' + s.dragDropContainerClass + '\" style=\"vertical-align:top;\"></div>').width(s.dragdropWidth);\n          $(obj).append(dragDrop);\n          $(dragDrop).append(uploadLabel);\n          $(dragDrop).append($(s.dragDropStr));\n          setDragDropHandlers(obj, s, dragDrop);\n        } else {\n          $(obj).append(uploadLabel);\n        }\n\n        $(obj).append(obj.errorLog);\n        if (s.showQueueDiv) obj.container = $(\"#\" + s.showQueueDiv);else obj.container = $(\"<div class='ajax-file-upload-container'></div>\").insertAfter($(obj));\n        s.onLoad.call(this, obj);\n        createCustomInputFile(obj, formGroup, s, uploadLabel);\n      } else window.setTimeout(checkAjaxFormLoaded, 10);\n    })();\n\n    this.startUpload = function () {\n      $(\"form\").each(function (i, items) {\n        if ($(this).hasClass(obj.formGroup)) {\n          mainQ.push($(this));\n        }\n      });\n      if (mainQ.length >= 1) submitPendingUploads();\n    };\n\n    this.getFileCount = function () {\n      return obj.selectedFiles;\n    };\n\n    this.stopUpload = function () {\n      $(\".\" + s.abortButtonClass).each(function (i, items) {\n        if ($(this).hasClass(obj.formGroup)) $(this).click();\n      });\n      $(\".\" + s.cancelButtonClass).each(function (i, items) {\n        if ($(this).hasClass(obj.formGroup)) $(this).click();\n      });\n    };\n\n    this.cancelAll = function () {\n      $(\".\" + s.cancelButtonClass).each(function (i, items) {\n        if ($(this).hasClass(obj.formGroup)) $(this).click();\n      });\n    };\n\n    this.update = function (settings) {\n      //update new settings\n      s = $.extend(s, settings); //We need to update action for already created Form.            \n\n      if (settings.hasOwnProperty('url')) {\n        $(\"form\").each(function (i, items) {\n          $(this).attr('action', settings['url']);\n        });\n      }\n    };\n\n    this.enqueueFile = function (file) {\n      if (!(file instanceof File)) return;\n      var files = [file];\n      serializeAndUploadFiles(s, obj, files);\n    };\n\n    this.reset = function (removeStatusBars) {\n      obj.fileCounter = 1;\n      obj.selectedFiles = 0;\n      obj.errorLog.html(\"\"); //remove all the status bars.\n\n      if (removeStatusBars != false) {\n        obj.container.html(\"\");\n      }\n    };\n\n    this.remove = function () {\n      obj.container.html(\"\");\n      $(obj).remove();\n    }; //This is for showing Old files to user.\n\n\n    this.createProgress = function (filename, filepath, filesize) {\n      var pd = new createProgressDiv(this, s);\n      pd.progressDiv.show();\n      pd.progressbar.width('100%');\n      var fileNameStr = \"\";\n      if (s.showFileCounter) fileNameStr = obj.fileCounter + s.fileCounterStyle + filename;else fileNameStr = filename;\n      if (s.showFileSize) fileNameStr += \" (\" + getSizeStr(filesize) + \")\";\n      pd.filename.html(fileNameStr);\n      obj.fileCounter++;\n      obj.selectedFiles++;\n\n      if (s.showPreview) {\n        pd.preview.attr('src', filepath);\n        pd.preview.show();\n      }\n\n      if (s.showDownload) {\n        pd.download.show();\n        pd.download.click(function () {\n          if (s.downloadCallback) s.downloadCallback.call(obj, [filename], pd);\n        });\n      }\n\n      if (s.showDelete) {\n        pd.del.show();\n        pd.del.click(function () {\n          pd.statusbar.hide().remove();\n          var arr = [filename];\n          if (s.deleteCallback) s.deleteCallback.call(this, arr, pd);\n          obj.selectedFiles -= 1;\n          updateFileCounter(s, obj);\n        });\n      }\n\n      return pd;\n    };\n\n    this.getResponses = function () {\n      return this.responses;\n    };\n\n    var mainQ = [];\n    var progressQ = [];\n    var running = false;\n\n    function submitPendingUploads() {\n      if (running) return;\n      running = true;\n\n      (function checkPendingForms() {\n        //if not sequential upload all files\n        if (!s.sequential) s.sequentialCount = 99999;\n\n        if (mainQ.length == 0 && progressQ.length == 0) {\n          if (s.afterUploadAll) s.afterUploadAll(obj);\n          running = false;\n        } else {\n          if (progressQ.length < s.sequentialCount) {\n            var frm = mainQ.shift();\n\n            if (frm != undefined) {\n              progressQ.push(frm); //Remove the class group.\n\n              frm.removeClass(obj.formGroup);\n              frm.submit();\n            }\n          }\n\n          window.setTimeout(checkPendingForms, 100);\n        }\n      })();\n    }\n\n    function setDragDropHandlers(obj, s, ddObj) {\n      ddObj.on('dragenter', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        $(this).addClass(s.dragDropHoverClass);\n      });\n      ddObj.on('dragover', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        var that = $(this);\n\n        if (that.hasClass(s.dragDropContainerClass) && !that.hasClass(s.dragDropHoverClass)) {\n          that.addClass(s.dragDropHoverClass);\n        }\n      });\n      ddObj.on('drop', function (e) {\n        e.preventDefault();\n        $(this).removeClass(s.dragDropHoverClass);\n        obj.errorLog.html(\"\");\n        var files = e.originalEvent.dataTransfer.files;\n\n        if (!s.multiple && files.length > 1) {\n          if (s.showError) $(\"<div class='\" + s.errorClass + \"'>\" + s.multiDragErrorStr + \"</div>\").appendTo(obj.errorLog);\n          return;\n        }\n\n        if (s.onSelect(files) == false) return;\n        serializeAndUploadFiles(s, obj, files);\n      });\n      ddObj.on('dragleave', function (e) {\n        $(this).removeClass(s.dragDropHoverClass);\n      });\n      $(document).on('dragenter', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n      $(document).on('dragover', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        var that = $(this);\n\n        if (!that.hasClass(s.dragDropContainerClass)) {\n          that.removeClass(s.dragDropHoverClass);\n        }\n      });\n      $(document).on('drop', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        $(this).removeClass(s.dragDropHoverClass);\n      });\n    }\n\n    function getSizeStr(size) {\n      var sizeStr = \"\";\n      var sizeKB = size / 1024;\n\n      if (parseInt(sizeKB) > 1024) {\n        var sizeMB = sizeKB / 1024;\n        sizeStr = sizeMB.toFixed(2) + \" MB\";\n      } else {\n        sizeStr = sizeKB.toFixed(2) + \" KB\";\n      }\n\n      return sizeStr;\n    }\n\n    function serializeData(extraData) {\n      var serialized = [];\n\n      if (jQuery.type(extraData) == \"string\") {\n        serialized = extraData.split('&');\n      } else {\n        serialized = $.param(extraData).split('&');\n      }\n\n      var len = serialized.length;\n      var result = [];\n      var i, part;\n\n      for (i = 0; i < len; i++) {\n        serialized[i] = serialized[i].replace(/\\+/g, ' ');\n        part = serialized[i].split('=');\n        result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\n      }\n\n      return result;\n    }\n\n    function noserializeAndUploadFiles(s, obj, files) {\n      var ts = $.extend({}, s);\n      var fd = new FormData();\n      var fileArray = [];\n      var fileName = s.fileName.replace(\"[]\", \"\");\n      var fileListStr = \"\";\n\n      for (var i = 0; i < files.length; i++) {\n        if (!isFileTypeAllowed(obj, s, files[i].name)) {\n          if (s.showError) $(\"<div><font color='red'><b>\" + files[i].name + \"</b> \" + s.extErrorStr + s.allowedTypes + \"</font></div>\").appendTo(obj.errorLog);\n          continue;\n        }\n\n        if (s.maxFileSize != -1 && files[i].size > s.maxFileSize) {\n          if (s.showError) $(\"<div><font color='red'><b>\" + files[i].name + \"</b> \" + s.sizeErrorStr + getSizeStr(s.maxFileSize) + \"</font></div>\").appendTo(obj.errorLog);\n          continue;\n        }\n\n        fd.append(fileName + \"[]\", files[i]);\n        fileArray.push(files[i].name);\n        fileListStr += obj.fileCounter + \"). \" + files[i].name + \"<br>\";\n        obj.fileCounter++;\n      }\n\n      if (fileArray.length == 0) return;\n      var extraData = s.formData;\n\n      if (extraData) {\n        var sData = serializeData(extraData);\n\n        for (var j = 0; j < sData.length; j++) {\n          if (sData[j]) {\n            fd.append(sData[j][0], sData[j][1]);\n          }\n        }\n      }\n\n      ts.fileData = fd;\n      var pd = new createProgressDiv(obj, s);\n      pd.filename.html(fileListStr);\n      var form = $(\"<form style='display:block; position:absolute;left: 150px;' class='\" + obj.formGroup + \"' method='\" + s.method + \"' action='\" + s.url + \"' enctype='\" + s.enctype + \"'></form>\");\n      form.appendTo('body');\n      ajaxFormSubmit(form, ts, pd, fileArray, obj);\n    }\n\n    function serializeAndUploadFiles(s, obj, files) {\n      for (var i = 0; i < files.length; i++) {\n        if (!isFileTypeAllowed(obj, s, files[i].name)) {\n          if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.extErrorStr + s.allowedTypes + \"</div>\").appendTo(obj.errorLog);\n          continue;\n        }\n\n        if (!s.allowDuplicates && isFileDuplicate(obj, files[i].name)) {\n          if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.duplicateErrorStr + \"</div>\").appendTo(obj.errorLog);\n          continue;\n        }\n\n        if (s.maxFileSize != -1 && files[i].size > s.maxFileSize) {\n          if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.sizeErrorStr + getSizeStr(s.maxFileSize) + \"</div>\").appendTo(obj.errorLog);\n          continue;\n        }\n\n        if (s.maxFileCount != -1 && obj.selectedFiles >= s.maxFileCount) {\n          if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + files[i].name + \"</b> \" + s.maxFileCountErrorStr + s.maxFileCount + \"</div>\").appendTo(obj.errorLog);\n          continue;\n        }\n\n        obj.selectedFiles++;\n        obj.existingFileNames.push(files[i].name); // Make object immutable\n\n        var ts = $.extend({}, s);\n        var fd = new FormData();\n        var fileName = s.fileName.replace(\"[]\", \"\");\n        fd.append(fileName, files[i]);\n        var extraData = s.formData;\n\n        if (extraData) {\n          var sData = serializeData(extraData);\n\n          for (var j = 0; j < sData.length; j++) {\n            if (sData[j]) {\n              fd.append(sData[j][0], sData[j][1]);\n            }\n          }\n        }\n\n        ts.fileData = fd;\n        var pd = new createProgressDiv(obj, s);\n        var fileNameStr = \"\";\n        if (s.showFileCounter) fileNameStr = obj.fileCounter + s.fileCounterStyle + files[i].name;else fileNameStr = files[i].name;\n        if (s.showFileSize) fileNameStr += \" (\" + getSizeStr(files[i].size) + \")\";\n        pd.filename.html(fileNameStr);\n        var form = $(\"<form style='display:block; position:absolute;left: 150px;' class='\" + obj.formGroup + \"' method='\" + s.method + \"' action='\" + s.url + \"' enctype='\" + s.enctype + \"'></form>\");\n        form.appendTo('body');\n        var fileArray = [];\n        fileArray.push(files[i].name);\n        ajaxFormSubmit(form, ts, pd, fileArray, obj, files[i]);\n        obj.fileCounter++;\n      }\n    }\n\n    function isFileTypeAllowed(obj, s, fileName) {\n      var fileExtensions = s.allowedTypes.toLowerCase().split(/[\\s,]+/g);\n      var ext = fileName.split('.').pop().toLowerCase();\n\n      if (s.allowedTypes != \"*\" && jQuery.inArray(ext, fileExtensions) < 0) {\n        return false;\n      }\n\n      return true;\n    }\n\n    function isFileDuplicate(obj, filename) {\n      var duplicate = false;\n\n      if (obj.existingFileNames.length) {\n        for (var x = 0; x < obj.existingFileNames.length; x++) {\n          if (obj.existingFileNames[x] == filename || s.duplicateStrict && obj.existingFileNames[x].toLowerCase() == filename.toLowerCase()) {\n            duplicate = true;\n          }\n        }\n      }\n\n      return duplicate;\n    }\n\n    function removeExistingFileName(obj, fileArr) {\n      if (obj.existingFileNames.length) {\n        for (var x = 0; x < fileArr.length; x++) {\n          var pos = obj.existingFileNames.indexOf(fileArr[x]);\n\n          if (pos != -1) {\n            obj.existingFileNames.splice(pos, 1);\n          }\n        }\n      }\n    }\n\n    function getSrcToPreview(file, obj) {\n      if (file) {\n        obj.show();\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          obj.attr('src', e.target.result);\n        };\n\n        reader.readAsDataURL(file);\n      }\n    }\n\n    function updateFileCounter(s, obj) {\n      if (s.showFileCounter) {\n        var count = $(obj.container).find(\".ajax-file-upload-filename\").length;\n        obj.fileCounter = count + 1;\n        $(obj.container).find(\".ajax-file-upload-filename\").each(function (i, items) {\n          var arr = $(this).html().split(s.fileCounterStyle);\n          var fileNum = parseInt(arr[0]) - 1; //decrement;\n\n          var name = count + s.fileCounterStyle + arr[1];\n          $(this).html(name);\n          count--;\n        });\n      }\n    }\n\n    function createCustomInputFile(obj, group, s, uploadLabel) {\n      var fileUploadId = \"ajax-upload-id-\" + new Date().getTime();\n      var form = $(\"<form method='\" + s.method + \"' action='\" + s.url + \"' enctype='\" + s.enctype + \"'></form>\");\n      var fileInputStr = \"<input type='file' id='\" + fileUploadId + \"' name='\" + s.fileName + \"' accept='\" + s.acceptFiles + \"'/>\";\n\n      if (s.multiple) {\n        if (s.fileName.indexOf(\"[]\") != s.fileName.length - 2) // if it does not endwith\n          {\n            s.fileName += \"[]\";\n          }\n\n        fileInputStr = \"<input type='file' id='\" + fileUploadId + \"' name='\" + s.fileName + \"' accept='\" + s.acceptFiles + \"' multiple/>\";\n      }\n\n      var fileInput = $(fileInputStr).appendTo(form);\n      fileInput.change(function () {\n        obj.errorLog.html(\"\");\n        var fileExtensions = s.allowedTypes.toLowerCase().split(\",\");\n        var fileArray = [];\n\n        if (this.files) //support reading files\n          {\n            for (i = 0; i < this.files.length; i++) {\n              fileArray.push(this.files[i].name);\n            }\n\n            if (s.onSelect(this.files) == false) return;\n          } else {\n          var filenameStr = $(this).val();\n          var flist = [];\n          fileArray.push(filenameStr);\n\n          if (!isFileTypeAllowed(obj, s, filenameStr)) {\n            if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + filenameStr + \"</b> \" + s.extErrorStr + s.allowedTypes + \"</div>\").appendTo(obj.errorLog);\n            return;\n          } //fallback for browser without FileAPI\n\n\n          flist.push({\n            name: filenameStr,\n            size: 'NA'\n          });\n          if (s.onSelect(flist) == false) return;\n        }\n\n        updateFileCounter(s, obj);\n        uploadLabel.unbind(\"click\");\n        form.hide();\n        createCustomInputFile(obj, group, s, uploadLabel);\n        form.addClass(group);\n\n        if (s.serialize && feature.fileapi && feature.formdata) //use HTML5 support and split file submission\n          {\n            form.removeClass(group); //Stop Submitting when.\n\n            var files = this.files;\n            form.remove();\n            serializeAndUploadFiles(s, obj, files);\n          } else {\n          var fileList = \"\";\n\n          for (var i = 0; i < fileArray.length; i++) {\n            if (s.showFileCounter) fileList += obj.fileCounter + s.fileCounterStyle + fileArray[i] + \"<br>\";else fileList += fileArray[i] + \"<br>\";\n            ;\n            obj.fileCounter++;\n          }\n\n          if (s.maxFileCount != -1 && obj.selectedFiles + fileArray.length > s.maxFileCount) {\n            if (s.showError) $(\"<div class='\" + s.errorClass + \"'><b>\" + fileList + \"</b> \" + s.maxFileCountErrorStr + s.maxFileCount + \"</div>\").appendTo(obj.errorLog);\n            return;\n          }\n\n          obj.selectedFiles += fileArray.length;\n          var pd = new createProgressDiv(obj, s);\n          pd.filename.html(fileList);\n          ajaxFormSubmit(form, s, pd, fileArray, obj, null);\n        }\n      });\n\n      if (s.nestedForms) {\n        form.css({\n          'margin': 0,\n          'padding': 0\n        });\n        uploadLabel.css({\n          position: 'relative',\n          overflow: 'hidden',\n          cursor: 'default'\n        });\n        fileInput.css({\n          position: 'absolute',\n          'cursor': 'pointer',\n          'top': '0px',\n          'width': '100%',\n          'height': '100%',\n          'left': '0px',\n          'z-index': '100',\n          'opacity': '0.0',\n          'filter': 'alpha(opacity=0)',\n          '-ms-filter': \"alpha(opacity=0)\",\n          '-khtml-opacity': '0.0',\n          '-moz-opacity': '0.0'\n        });\n        form.appendTo(uploadLabel);\n      } else {\n        form.appendTo($('body'));\n        form.css({\n          margin: 0,\n          padding: 0,\n          display: 'block',\n          position: 'absolute',\n          left: '-250px'\n        });\n\n        if (navigator.appVersion.indexOf(\"MSIE \") != -1) //IE Browser\n          {\n            uploadLabel.attr('for', fileUploadId);\n          } else {\n          uploadLabel.click(function () {\n            fileInput.click();\n          });\n        }\n      }\n    }\n\n    function defaultProgressBar(obj, s) {\n      this.statusbar = $(\"<div class='ajax-file-upload-statusbar'></div>\").width(s.statusBarWidth);\n      this.preview = $(\"<img class='ajax-file-upload-preview' />\").width(s.previewWidth).height(s.previewHeight).appendTo(this.statusbar).hide();\n      this.filename = $(\"<div class='ajax-file-upload-filename'></div>\").appendTo(this.statusbar);\n      this.progressDiv = $(\"<div class='ajax-file-upload-progress'>\").appendTo(this.statusbar).hide();\n      this.progressbar = $(\"<div class='ajax-file-upload-bar'></div>\").appendTo(this.progressDiv);\n      this.abort = $(\"<div>\" + s.abortStr + \"</div>\").appendTo(this.statusbar).hide();\n      this.cancel = $(\"<div>\" + s.cancelStr + \"</div>\").appendTo(this.statusbar).hide();\n      this.done = $(\"<div>\" + s.doneStr + \"</div>\").appendTo(this.statusbar).hide();\n      this.download = $(\"<div>\" + s.downloadStr + \"</div>\").appendTo(this.statusbar).hide();\n      this.del = $(\"<div>\" + s.deleteStr + \"</div>\").appendTo(this.statusbar).hide();\n      this.abort.addClass(\"ajax-file-upload-red\");\n      this.done.addClass(\"ajax-file-upload-green\");\n      this.download.addClass(\"ajax-file-upload-green\");\n      this.cancel.addClass(\"ajax-file-upload-red\");\n      this.del.addClass(\"ajax-file-upload-red\");\n      return this;\n    }\n\n    function createProgressDiv(obj, s) {\n      var bar = null;\n      if (s.customProgressBar) bar = new s.customProgressBar(obj, s);else bar = new defaultProgressBar(obj, s);\n      bar.abort.addClass(obj.formGroup);\n      bar.abort.addClass(s.abortButtonClass);\n      bar.cancel.addClass(obj.formGroup);\n      bar.cancel.addClass(s.cancelButtonClass);\n      if (s.extraHTML) bar.extraHTML = $(\"<div class='extrahtml'>\" + s.extraHTML() + \"</div>\").insertAfter(bar.filename);\n      if (s.uploadQueueOrder == 'bottom') $(obj.container).append(bar.statusbar);else $(obj.container).prepend(bar.statusbar);\n      return bar;\n    }\n\n    function ajaxFormSubmit(form, s, pd, fileArray, obj, file) {\n      var currentXHR = null;\n      var options = {\n        cache: false,\n        contentType: false,\n        processData: false,\n        forceSync: false,\n        type: s.method,\n        data: s.formData,\n        formData: s.fileData,\n        dataType: s.returnType,\n        headers: s.headers,\n        beforeSubmit: function beforeSubmit(formData, $form, options) {\n          if (s.onSubmit.call(this, fileArray) != false) {\n            if (s.dynamicFormData) {\n              var sData = serializeData(s.dynamicFormData());\n\n              if (sData) {\n                for (var j = 0; j < sData.length; j++) {\n                  if (sData[j]) {\n                    if (s.serialize && s.fileData != undefined) options.formData.append(sData[j][0], sData[j][1]);else options.data[sData[j][0]] = sData[j][1];\n                  }\n                }\n              }\n            }\n\n            if (s.extraHTML) {\n              $(pd.extraHTML).find(\"input,select,textarea\").each(function (i, items) {\n                if (s.serialize && s.fileData != undefined) options.formData.append($(this).attr('name'), $(this).val());else options.data[$(this).attr('name')] = $(this).val();\n              });\n            }\n\n            return true;\n          }\n\n          pd.statusbar.append(\"<div class='\" + s.errorClass + \"'>\" + s.uploadErrorStr + \"</div>\");\n          pd.cancel.show();\n          form.remove();\n          pd.cancel.click(function () {\n            mainQ.splice(mainQ.indexOf(form), 1);\n            removeExistingFileName(obj, fileArray);\n            pd.statusbar.remove();\n            s.onCancel.call(obj, fileArray, pd);\n            obj.selectedFiles -= fileArray.length; //reduce selected File count\n\n            updateFileCounter(s, obj);\n          });\n          return false;\n        },\n        beforeSend: function beforeSend(xhr, o) {\n          for (var key in o.headers) {\n            xhr.setRequestHeader(key, o.headers[key]);\n          }\n\n          pd.progressDiv.show();\n          pd.cancel.hide();\n          pd.done.hide();\n\n          if (s.showAbort) {\n            pd.abort.show();\n            pd.abort.click(function () {\n              removeExistingFileName(obj, fileArray);\n              xhr.abort();\n              obj.selectedFiles -= fileArray.length; //reduce selected File count\n\n              s.onAbort.call(obj, fileArray, pd);\n            });\n          }\n\n          if (!feature.formdata) //For iframe based push\n            {\n              pd.progressbar.width('5%');\n            } else pd.progressbar.width('1%'); //Fix for small files\n\n        },\n        uploadProgress: function uploadProgress(event, position, total, percentComplete) {\n          //Fix for smaller file uploads in MAC\n          if (percentComplete > 98) percentComplete = 98;\n          var percentVal = percentComplete + '%';\n          if (percentComplete > 1) pd.progressbar.width(percentVal);\n\n          if (s.showProgress) {\n            pd.progressbar.html(percentVal);\n            pd.progressbar.css('text-align', 'center');\n          }\n        },\n        success: function success(data, message, xhr) {\n          pd.cancel.remove();\n          progressQ.pop(); //For custom errors.\n\n          if (s.returnType == \"json\" && $.type(data) == \"object\" && data.hasOwnProperty(s.customErrorKeyStr)) {\n            pd.abort.hide();\n            var msg = data[s.customErrorKeyStr];\n            s.onError.call(this, fileArray, 200, msg, pd);\n\n            if (s.showStatusAfterError) {\n              pd.progressDiv.hide();\n              pd.statusbar.append(\"<span class='\" + s.errorClass + \"'>ERROR: \" + msg + \"</span>\");\n            } else {\n              pd.statusbar.hide();\n              pd.statusbar.remove();\n            }\n\n            obj.selectedFiles -= fileArray.length; //reduce selected File count\n\n            form.remove();\n            return;\n          }\n\n          obj.responses.push(data);\n          pd.progressbar.width('100%');\n\n          if (s.showProgress) {\n            pd.progressbar.html('100%');\n            pd.progressbar.css('text-align', 'center');\n          }\n\n          pd.abort.hide();\n          s.onSuccess.call(this, fileArray, data, xhr, pd);\n\n          if (s.showStatusAfterSuccess) {\n            if (s.showDone) {\n              pd.done.show();\n              pd.done.click(function () {\n                pd.statusbar.hide(\"slow\");\n                pd.statusbar.remove();\n              });\n            } else {\n              pd.done.hide();\n            }\n\n            if (s.showDelete) {\n              pd.del.show();\n              pd.del.click(function () {\n                removeExistingFileName(obj, fileArray);\n                pd.statusbar.hide().remove();\n                if (s.deleteCallback) s.deleteCallback.call(this, data, pd);\n                obj.selectedFiles -= fileArray.length; //reduce selected File count\n\n                updateFileCounter(s, obj);\n              });\n            } else {\n              pd.del.hide();\n            }\n          } else {\n            pd.statusbar.hide(\"slow\");\n            pd.statusbar.remove();\n          }\n\n          if (s.showDownload) {\n            pd.download.show();\n            pd.download.click(function () {\n              if (s.downloadCallback) s.downloadCallback(data, pd);\n            });\n          }\n\n          form.remove();\n        },\n        error: function error(xhr, status, errMsg) {\n          pd.cancel.remove();\n          progressQ.pop();\n          pd.abort.hide();\n\n          if (xhr.statusText == \"abort\") //we aborted it\n            {\n              pd.statusbar.hide(\"slow\").remove();\n              updateFileCounter(s, obj);\n            } else {\n            s.onError.call(this, fileArray, status, errMsg, pd);\n\n            if (s.showStatusAfterError) {\n              pd.progressDiv.hide();\n              pd.statusbar.append(\"<span class='\" + s.errorClass + \"'>ERROR: \" + errMsg + \"</span>\");\n            } else {\n              pd.statusbar.hide();\n              pd.statusbar.remove();\n            }\n\n            obj.selectedFiles -= fileArray.length; //reduce selected File count\n          }\n\n          form.remove();\n        }\n      };\n\n      if (s.showPreview && file != null) {\n        if (file.type.toLowerCase().split(\"/\").shift() == \"image\") getSrcToPreview(file, pd.preview);\n      }\n\n      if (s.autoSubmit) {\n        form.ajaxForm(options);\n        mainQ.push(form);\n        submitPendingUploads();\n      } else {\n        if (s.showCancel) {\n          pd.cancel.show();\n          pd.cancel.click(function () {\n            mainQ.splice(mainQ.indexOf(form), 1);\n            removeExistingFileName(obj, fileArray);\n            form.remove();\n            pd.statusbar.remove();\n            s.onCancel.call(obj, fileArray, pd);\n            obj.selectedFiles -= fileArray.length; //reduce selected File count\n\n            updateFileCounter(s, obj);\n          });\n        }\n\n        form.ajaxForm(options);\n      }\n    }\n\n    return this;\n  };\n})(jQuery);"

/***/ }),

/***/ "./node_modules/script-loader/addScript.js":
/*!*************************************************!*\
  !*** ./node_modules/script-loader/addScript.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	function log(error) {
		(typeof console !== "undefined")
		&& (console.error || console.log)("[Script Loader]", error);
	}

	// Check for IE =< 8
	function isIE() {
		return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
	}

	try {
		if (typeof execScript !== "undefined" && isIE()) {
			execScript(src);
		} else if (typeof eval !== "undefined") {
			eval.call(null, src);
		} else {
			log("EvalError: No eval function available");
		}
	} catch (error) {
		log(error);
	}
}


/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/bowser.js":
/*!**********************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/bowser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/bowser.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/bowser.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--4-0!/home/osboxes/workspace/mlab.local.test/assets/js/bowser.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery-2.1.4.js":
/*!****************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery-2.1.4.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery-2.1.4.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery-2.1.4.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--4-0!/home/osboxes/workspace/mlab.local.test/assets/js/jquery-2.1.4.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.form.js":
/*!***************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.form.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.form.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.form.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--4-0!/home/osboxes/workspace/mlab.local.test/assets/js/jquery.form.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.qtip.nightly.js":
/*!***********************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.qtip.nightly.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.qtip.nightly.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.qtip.nightly.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--4-0!/home/osboxes/workspace/mlab.local.test/assets/js/jquery.qtip.nightly.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.ui-1.11.4.js":
/*!********************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.ui-1.11.4.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.ui-1.11.4.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.ui-1.11.4.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--4-0!/home/osboxes/workspace/mlab.local.test/assets/js/jquery.ui-1.11.4.js")

/***/ }),

/***/ "./node_modules/script-loader/index.js!./assets/js/jquery.uploadfile-4.0.11.js":
/*!****************************************************************************!*\
  !*** ./node_modules/script-loader!./assets/js/jquery.uploadfile-4.0.11.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! !./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !./node_modules/raw-loader!./node_modules/babel-loader/lib??ref--4-0!./assets/js/jquery.uploadfile-4.0.11.js */ "./node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js?!./assets/js/jquery.uploadfile-4.0.11.js")+"\n\n// SCRIPT-LOADER FOOTER\n//# sourceURL=script:///home/osboxes/workspace/mlab.local.test/node_modules/babel-loader/lib/index.js%3F?ref--4-0!/home/osboxes/workspace/mlab.local.test/assets/js/jquery.uploadfile-4.0.11.js")

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,