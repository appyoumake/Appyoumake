<?php
/*******************************************************************************************************************************
@copyright Copyright (c) 2013-2016, Norwegian Defence Research Establishment (FFI) - All Rights Reserved
@license Proprietary and confidential
@author Arild Bergh/Sinett 3.0 programme (firstname.lastname@ffi.no)

Unauthorized copying of this file, via any medium is strictly prohibited

For the full copyright and license information, please view the LICENSE_MLAB file that was distributed with this source code.
*******************************************************************************************************************************/

namespace Sinett\MLAB\BuilderBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AppRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppRepository extends EntityRepository
{

	/**
	 * Returns a list of all apps that is allowed for the specified groups
	 * @param collection of Sinett\MLAB\BuilderBundle\Entity\Group $groups
	 */
	public function findAllByGroups ( $groups ) {
		$apps = array();
		foreach ($groups as $group) {
			$temp_apps = $group->getApps();
			foreach ($temp_apps as $temp_app) {
                $temp_app->getAppVersions();
				$apps[$temp_app->getId()] = $temp_app->getArray();
			}
		}
		return $apps;
	}
    
	/**
	 * Returns a list of all apps that is allowed for the specified groups
     * In addition it sorts by the update field
	 * @param collection of Sinett\MLAB\BuilderBundle\Entity\Group $groups
	 */
	public function findAllByGroupsSortUpdated ( $groups ) {
		$apps = array();
		foreach ($groups as $group) {
			$temp_apps = $group->getApps();
			foreach ($temp_apps as $temp_app) {
                $temp_app->getAppVersions();
				$apps[$temp_app->getId()] = $temp_app->getArray();
			}
		}
        
//here we sort it, we need to have this AFTER the code above as we use the ID to avoid duplicates
        $sorted_apps = array();
        foreach ($apps as $app) {
            $sorted_apps[$app["updated"]->format('Y-m-d H:i:s')] = $app;
        }
        krsort($sorted_apps);
        
		return $sorted_apps;
	}

    /**
	 * Returns an array of *paths* of all components that is allowed for the specified groups
	 * This path = the internal component type/name which = the folder name of the component
	 * @param collection of Sinett\MLAB\BuilderBundle\Entity\Group $groups
	 */
	public function checkAccessByGroups ( $app_id, $groups ) {
        foreach ($groups as $group) {
			$temp_apps = $group->getApps();
			foreach ($temp_apps as $temp_app) {
                if ($temp_app->getEnabled() && $temp_app->getId() == $app_id) {
                    return true;
                }
			}
		}
		return false;
	}
    
    public function findAllSortLastModified()
    {
        return $this->findBy(array(), array('updated' => 'ASC'));
    }
	
}
