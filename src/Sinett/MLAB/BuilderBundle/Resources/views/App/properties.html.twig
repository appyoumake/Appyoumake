{% extends "::ajax.html.twig" %}

{% block body -%}

<div id="build_app_properties">
    <ul>
        {% if mode == 'add' %}
            <li><a href="#builder_app_property_tabs-1">{% trans %}builder.new.app.basedon.tab{% endtrans %}</a></li>
            <li><a href="#builder_app_property_tabs-2">{% trans %}builder.new.app.select_base.tab{% endtrans %}</a></li>
        {% endif %}
        <li><a href="#builder_app_property_tabs-3">{% trans %}builder.new.app.name.tab{% endtrans %}</a></li>
        <li><a href="#builder_app_property_tabs-4">{% trans %}builder.new.app.classification.tab{% endtrans %}</a></li>
        <li><a href="#builder_app_property_tabs-5">{% trans %}builder.new.app.submit.tab{% endtrans %}</a></li>
      </ul>
      
    {{ form_start(form) }}
        {% if mode == 'add' %}
            {% form_theme form.template 'SinettMLABBuilderBundle:Form:fields.html.twig' %}
        {% endif %}
<!-- output list of templates and apps -->
        {% if mode == 'add' %}

            <div class="mlab_form_tab" id="builder_app_property_tabs-1">
                <p>{% trans %}builder.new.app.select_base.description{% endtrans %}</p>
                <label for="select_base_template">builder.new.app.select_base.template</label> 
                <input type="radio" name="select_base" id="select_base_template" value="template">
                <label for="select_base_existing_app">builder.new.app.select_base.existing_app</label> 
                <input type="radio" name="select_base" id="select_base_existing_app" value="existing_app">
                <label for="select_base_office_file">builder.new.app.select_base.office_file</label> 
                <input type="radio" name="select_base" id="select_base_office_file" value="office_file">
            </div>

            <div class="mlab_form_tab" id="builder_app_property_tabs-2">
                    
                <p>{% trans %}builder.new.app.basedon.description{% endtrans %}</p>

                <div id="div_base_template" class="mlab_div_base">
                    {{ form_row(form.template, {'url_templates': url_templates}) }}
                </div>
                
                <div id="div_base_existing_app" class="mlab_div_base">   
                    <label for="mlab_builder_app_copy_from">Copy app</label>
                    <select id="mlab_builder_app_copy_from" name="mlab_builder_app_copy_from" onclick='baseOn("app");'>
                        <option value=""></option>
                        {% for app in apps %}
                            <option data-imagesrc="{{ url_apps ~ app.path ~ '/' ~ app.version ~ '/' ~ app_icon_path }}" data-description="{{ app.description }}" value="{{ app.id }}">{{ app.name }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div id="div_base_office_file" class="mlab_div_base">   
                    <label for="mlab_builder_file_import_from">Import PPT or DOC file</label>
                    <input type="file" id="mlab_builder_file_import_from" name="mlab_builder_file_import_from" >
                </div>
                            
            </div>
        {% endif %}
        
<!-- name etc -->
        <div class="mlab_form_tab" id="builder_app_property_tabs-3">
            
            <p>{% trans %}builder.new.app.name.description{% endtrans %}</p>
            
            <div class="new_line">
                {{ form_label(form.name, null, {'label': 'builder.new.app.name.name'|trans}) }}
                {{ form_errors(form.name) }}
                {{ form_widget(form.name) }}
            </div>
            
            <div class="new_line">
                {{ form_label(form.description, null, {'label': 'builder.new.app.name.descriptionLab'|trans}) }}
                {{ form_errors(form.description) }}
                {{ form_widget(form.description) }}
            </div>
            
            <div class="new_line">
                {{ form_label(form.splashFile, null, {'label': 'builder.new.app.name.splashFile'|trans}) }}
                {{ form_errors(form.splashFile) }}
                {{ form_widget(form.splashFile) }}
            </div>

            
            <fieldset class="new_line">
                {{ form_widget(form.iconFile) }}
                <legend>Design icon:</legend>
                <canvas id="app_icon_designer" height="256" width="256">
                </canvas>                
                <div class="left">
                    <p>Select background</p>
                    <select id="mlab_select_background" name="mlab_select_background" >
                        <option value=""></option>
                        {% for icon, path in backgrounds %}
                            <option data-imagesrc="{{ path }}" value="{{ path }}">{{ icon }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="left">
                    <p>Select foreground</p>
                    <select id="mlab_select_foreground" name="mlab_select_foreground" >
                        <option value=""></option>
                        {% for icon, path in foregrounds %}
                            <option data-imagesrc="{{ path }}" value="{{ path }}">{{ icon }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="left">
                    <label for="mlab_local_iconfile">{% trans %}builder.new.app.name.iconFile{% endtrans %}</label>
                    <input id="mlab_local_iconfile" name="mlab_local_iconfile" type="file">
                    <div onclick="createIcon.buildIcon('server');">Add image</div>
                </div>
                <div class="left">
                    <label for="mlab_icon_text">{% trans %}builder.new.app.name.iconText{% endtrans %}</label>
                    <input id="mlab_icon_text" name="mlab_icon_text" maxlength="{{icon_text_maxlength}}">
                    <div onclick="createIcon.buildIcon(foreground_image_src)">Add text</div>
                </div>
            </fieldset>

            
        </div>
        
<!-- classification etc -->
        <div class="mlab_form_tab" id="builder_app_property_tabs-4">

            <p>{% trans %}builder.new.app.classification.description{% endtrans %}</p>
            
            <div>
                {{ form_label(form.keywords, null, {'label': 'builder.new.app.classification.keywords'|trans}) }}
                {{ form_errors(form.keywords) }}
                {{ form_widget(form.keywords) }}
            </div>
            
            <div class="">
                {{ form_label(form.categoryOne, null, {'label': 'builder.new.app.classification.categoryOne'|trans}) }}
                {{ form_errors(form.categoryOne) }}
                {{ form_widget(form.categoryOne) }}
            </div>

            <div class="">
                {{ form_label(form.categoryTwo, null, {'label': 'builder.new.app.classification.categoryTwo'|trans}) }}
                {{ form_errors(form.categoryTwo) }}
                {{ form_widget(form.categoryTwo) }}
            </div>

            <div class="">
                {{ form_label(form.categoryThree, null, {'label': 'builder.new.app.classification.categoryThree'|trans}) }}
                {{ form_errors(form.categoryThree) }}
                {{ form_widget(form.categoryThree) }}
            </div>
                        
        </div>
        
<!-- summary -->
        <div class="mlab_form_tab" id="builder_app_property_tabs-5">
            <p>{% trans %}builder.new.app.submit.description{% endtrans %}</p>
            {{ form_errors(form) }}
            <div id="mlab_app_new_summary"></div>
        </div>
        {{ form_widget(form._token) }}
    {{ form_end(form, {'render_rest': false}) }}
</div>

<button class="hidden button_wizard" id="mlab_app_new_previous" onclick="mlab_app_new_move(-1);">{% trans %}app.wizard.button.previous{% endtrans %}</button>
<button class="button_wizard" id="mlab_app_new_next" onclick="mlab_app_new_move(1);">{% trans %}app.wizard.button.next{% endtrans %}</button>

<script type="text/javascript">
    var icon_created = false;
    
//run various jQuery plugins which enhances the user interaction when dialog box is filled in
    $(document).ready(function () {
        
//this variable stores the icon functionality
        createIcon = new iconFunctions();
        var foreground_image_src = 'server';
        
        $( "#build_app_properties" ).tabs();
        $( "#build_app_properties ul" ).css("pointer-events", "none");
        

        $('#mlab_builder_app_copy_from').ddslick({
            width: 300,
            imagePosition: "left",
            selectText: "{% trans %}app.select.app.to.copy{% endtrans %}",
            onSelected: function (data) {
                if (data.selectedIndex > 0) {
                    $('#form_template').ddslick('select', {index: 0 });
                }
            }
        });
        
        $('#mlab_select_background').ddslick({
            width: 90,
            height: 200,
            imagePosition: "left",
            selectText: "{% trans %}app.select.icon.background{% endtrans %}",
            onSelected: function (data) {
                if (data.selectedIndex > 0) {
                    createIcon.buildIcon(foreground_image_src);
                }
            }
        });
        
        $('#mlab_select_foreground').ddslick({
            width: 90,
            height: 200,
            imagePosition: "left",
            selectText: "{% trans %}app.select.icon.foreground{% endtrans %}",
            onSelected: function (data) {
                if (data.selectedIndex > 0) {
                    createIcon.buildIcon('local');
                }
            }
        });

        $('#form_template').ddslick({
            width: 300,
            height: 110,
            imagePosition: "left",
            selectText: "{% trans %}app.select.template{% endtrans %}",
            onSelected: function (data) {
                if (data.selectedIndex > 0) {
                    $('#mlab_builder_app_copy_from').ddslick('select', {index: 0 });
                }
            }
        });
        
    }); //end onready
    
//functions to build an icon
    function iconFunctions() {
        var funcs = new Object();
        
/**
 * This function is called whenever the background, foreground or text is changed
 * 
 * @param {type} direction
 * @returns {undefined|Boolean}
 */
        function buildIcon(source) {
            icon_created = true;
            var canvas = document.getElementById("app_icon_designer");
            var ctx = canvas.getContext("2d");
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            foreground_image_src = source;

//first we draw background, regardless of what has been changed
            drawImage(getBackgroundFromServerFile(), false);
            
//next we draw foreground, if it i 
            if (foreground_image_src == 'server' && typeof document.getElementById('mlab_local_iconfile').files != "undefined" && typeof document.getElementById('mlab_local_iconfile').files.length) {
                getForegroundFromFile();

            } else if (foreground_image_src == 'local' && $('#mlab_select_foreground').data('ddslick').selectedData.value != "") {
                drawImage(getForegroundFromServerFile(), true);
                if ($("#mlab_icon_text").val() != "") {
                    outputText();
                }
                
            } 
        }

        function getForegroundFromFile() {
            var input, file, fr;

            if (typeof window.FileReader !== 'function') {
                alert("This browser does not support local images, get your technical support to upload you images");
                return;
            }

            input = document.getElementById('mlab_local_iconfile');
            if (!input.files) {
                alert("This browser doesn't seem to support the `files` property of file inputs.");
            } else if (!input.files[0]) {
                alert("Please select a file before clicking 'Load'");
            } else {
                var local_img = new Image;
                local_img.onload = function() {
                    drawImage(local_img, true);
                    outputText();
                    URL.revokeObjectURL(local_img.src);
                }
                local_img.src = URL.createObjectURL(input.files[0]);
            }
        }
        
//loads background icon into canvas    
        function drawImage(img, isForeground) {
            var canvas = document.getElementById("app_icon_designer");
            var ctx = canvas.getContext("2d");
            if (isForeground) {
                if (img.naturalWidth >= (canvas.width * .8) || img.naturalHeight >= (canvas.height * .8)) {
                    var l = canvas.width * .25;
                    var t = canvas.height * .25;
                    var w = canvas.width * .5;
                    var h = canvas.height * .5;
                } else {
                    var l = (canvas.width - img.naturalWidth) / 2;
                    var t = (canvas.height - img.naturalHeight) / 2;
//image is smaller than what we want, so no need to indicate size parameters                    
                    ctx.drawImage(img, l, t);
                    return;
                }
            } else {
                var l = 0;
                var t = 0;
                var w = canvas.width;
                var h = canvas.height;
            }    

            ctx.drawImage(img, l, t, w, h);
        }
        
        function drawText() {
            var canvas = document.getElementById("app_icon_designer");
            var ctx = canvas.getContext("2d");
        
            var x = canvas.width / 2;
            var y = canvas.height;

            ctx.font = '30pt MlabIconFont';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'bottom';
            ctx.fillStyle = 'black';
            ctx.fillText($("#mlab_icon_text").val(), x, y);
        }        
        
//using a trick from here to load font first time: http://stackoverflow.com/questions/2635814/javascript-capturing-load-event-on-link/5371426#5371426
//if it is already loaded, then we skip loading it and draw text as normal
        function outputText() {
            if (!$("#mlab_icon_font_style").length) {
                $('head').append("<style id='mlab_icon_font_style' type='text/css'>@font-face { font-family: 'MlabIconFont'; font-style: normal; font-weight: 700; src: url('{{ icon_font_url }}') format('truetype'); }</style>");

//original trick from http://stackoverflow.com/questions/2635814/
                var image = new Image;
                image.src = "{{ icon_font_url }}";
                image.onerror = function() { drawText(); };
                
            } else {
                drawText();
                
            }
        }
        
        function getBackgroundFromServerFile() {
            var background = new Image();
            background.src = $('#mlab_select_background').data('ddslick').selectedData.value;
            return background;
        }

        function getForegroundFromServerFile() {
            var foreground = new Image();
            foreground.src = $('#mlab_select_foreground').data('ddslick').selectedData.value;
            return foreground;
        }

        funcs.buildIcon = buildIcon;
        
        return funcs;
    } //end buildIcon
    
//function to load sub categories when a higher level category is selected
    function loadCategories(el, level) {
        if ( parseInt($(el).val()) == 0 || isNaN(parseInt($(el).val())) )  {
            if (level == 1 ) {
                $("#sinett_mlab_builderbundle_user_categoryTwo").html("");
                $("#sinett_mlab_builderbundle_user_categoryThree").html("");
            } else {
                $("#sinett_mlab_builderbundle_user_categoryThree").html("");
            }
            return; 
        }
        if (level == 1 ) {
            $("#sinett_mlab_builderbundle_user_categoryTwo").html("<option>...loading...</option>");
            $("#sinett_mlab_builderbundle_user_categoryThree").html("<option>...loading...</option>");
        } else {
            $("#sinett_mlab_builderbundle_user_categoryThree").html("<option>...loading...</option>");
        }
        var url = "{{ path('category_load_categories', {id: '_ID_', level: '_LEVEL_'}) }}";
        url = url.replace("_ID_", $(el).val());
        url = url.replace("_LEVEL_", level);
        $.getJSON(url, function( data ) {
            if (data.result == "SUCCESS" ) {
                if (data.level == 1 ) {
                    $("#sinett_mlab_builderbundle_user_categoryTwo").html(data.categories);
                    $("#sinett_mlab_builderbundle_user_categoryThree").html("");
                } else {
                    $("#sinett_mlab_builderbundle_user_categoryThree").html(data.categories);
                }
            }
        });
    }
    
//function to move back and forth in new app/properties wizard 
//this first checks if relevant selections/input is done, then displays next or previous tab
    function mlab_app_new_move(direction) {
        var caption_next = "{% trans %}app.wizard.button.next{% endtrans %}";
        var caption_finished = "{% trans %}app.wizard.button.finished{% endtrans %}";
        var curr_tab = $('#build_app_properties').tabs('option', 'active');
        var tot_tabs = $('#build_app_properties >ul >li').size();
 
//going forward: verify data, if ok: display previous button, change title of next button if on last page 
        if (direction > 0) {
            var msg = '';
            if (curr_tab == 0) {
                var sel_val = "";
                var selected = $("input[type='radio'][name='select_base']:checked");
                
                if (selected.length > 0) {
                    sel_val = selected.val();
                    $('.mlab_div_base').addClass("hidden");
                    $('#div_base_' + sel_val).removeClass("hidden");
                } else {
                    msg = msg + "{% trans %}You must select what to base the new app on{% endtrans %}\n";
                }
                
            } else if (curr_tab == 1) {
                var action = $("input[type='radio'][name='select_base']:checked").val();
                
                switch(action) {
                    case "template":
                        if ($('#form_template').data('ddslick').selectedIndex == 0) {
                            msg = msg + "{% trans %}You must select a template to use{% endtrans %}\n";
                        }  
                        break;
                    case "existing_app":
                        if ($('#mlab_builder_app_copy_from').data('ddslick').selectedIndex == 0) {
                            msg = msg + "{% trans %}You must select an app to copy{% endtrans %}\n";
                        }
                        break;
                    case "office_file":
                        if ($("#mlab_builder_file_import_from").val() == "") {
                            msg = msg + "{% trans %}You must select a document to convert{% endtrans %}\n";
                        } else {
                            var file_name = $("#mlab_builder_file_import_from").val();
                            var file_type = file_name.substr(file_name.lastIndexOf('.') + 1).toLowerCase();
                            var regex = /ppt|pptx|doc|docx/g;
                            if (!regex.test(file_type)) {
                                msg = msg + "{% trans %}Document to convert must be PowerPoint or Word format{% endtrans %}\n";
                            }
                        }
                        break;
                        
                }

            } else if (curr_tab == 2) {
                if ($('#form_name').val().trim() == "") {
                    msg = msg + "{% trans %}You must enter a name for this app{% endtrans %}\n";
                }
                
                if ($('#form_description').val().trim() == "") {
                    msg = msg + "{% trans %}You must enter a description for this app{% endtrans %}\n";
                }  
                
                if (icon_created) {
                    $("#form_iconFile").val(document.getElementById("app_icon_designer").toDataURL());
                } else {
                    $("#form_iconFile").val("");
                }
                
                var file_name = $("#form_splashFile").val();
                var file_type = file_name.substr(file_name.lastIndexOf('.') + 1).toLowerCase();
                var regex = /png|jpg|jpeg/g;
                if (!regex.test(file_type)) {
                    msg = msg + "{% trans %}Splash file must be in PNG or JPEG format{% endtrans %}\n";
                }

            } else if (curr_tab == 3) {
                if ($('#form_keywords').val().trim() == "") {
                    msg = msg + "{% trans %}You must enter one or more keywords for this app{% endtrans %}\n";
                }
                
                if ($('#form_categoryOne').val() == '') {
                    msg = msg + "{% trans %}You must select a main category for this app{% endtrans %}\n";
                }  

                if ($('#form_categoryTwo').val() == '') {
                    msg = msg + "{% trans %}You must select a secondary category for this app{% endtrans %}\n";
                }  

                if ($('#form_categoryThree').val() == '') {
                    msg = msg + "{% trans %}You must select a final category for this app{% endtrans %}\n";
                } 
                
//last page, here we submit the data via AJAX 
                if (msg == '') {
                    $("#form_copy_app").val($('#mlab_builder_app_copy_from').data('ddslick').selectedData.value);
                    $("#mlab_app_new_summary").html(
                            "<span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.basedon{% endtrans %}:</span> " + $('#form_template').data('ddslick').selectedData.text + $('#mlab_builder_app_copy_from').data('ddslick').selectedData.text +
                            "<br><span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.name{% endtrans %}:</span> " + $('#form_name').val() +
                            "<br><span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.descriptionLab{% endtrans %}:</span> " + $('#form_description').val() +
                            "<br><span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.keywords{% endtrans %}:</span> " + $('#form_keywords').val() 
                            + "<br><span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.category{% endtrans %}:</span> " + 
                            $('#form_categoryOne option:selected').html() + " - " +
                            $('#form_categoryTwo option:selected').html() + " - " +
                            $('#form_categoryThree option:selected').html() 
                            //"<br><span class='mlab_app_new_summary'>{% trans %}form.app.categoryTwo{% endtrans %}:</span> " + $('#form_categoryTwo option:selected').html() +
                            //"<br><span class='mlab_app_new_summary'>{% trans %}form.app.categoryThree{% endtrans %}:</span> " + $('#form_categoryThree option:selected').html() 
                    );
                }
            } else if (curr_tab == (tot_tabs - 1)) { 

//reset the template select box so it returns value properly
                $('#form_template').ddslick('destroy');
//call function that must be in page that this dialog is called up in!                  
                mlab_app_submit_properties($("#mlab_form_app"));
                
            } 

            if (msg != '') {
                alert(msg);
                return false;
            }
            
            $("#mlab_app_new_previous").removeClass("hidden");
            
//operning final tab 
            if (curr_tab == (tot_tabs - 2)) {
                $("#mlab_app_new_next").text(caption_finished);
            }
            
//going backward: hide previous button if first page, rename next button 
        } else {
            if (curr_tab == 1) {
                $("#mlab_app_new_previous").addClass("hidden");
            }
            $("#mlab_app_new_next").text(caption_next);
        }
        $('#build_app_properties').tabs('option', 'active', curr_tab + direction);
        
    }

</script>
{% endblock %}