{#
@copyright Copyright (c) 2013-2016, Norwegian Defence Research Establishment (FFI) - All Rights Reserved
@license Proprietary and confidential
@author Arild Bergh/Sinett 3.0 programme (firstname.lastname@ffi.no)
@author Cecilie Jackbo Gran/Sinett 3.0 programme (firstname.middlename.lastname@ffi.no)

Unauthorized copying of this file, via any medium is strictly prohibited 

For the full copyright and license information, please view the LICENSE_MLAB file that was distributed with this source code.
#}
{% extends "::ajax.html.twig" %}

{% block body -%}

<div id="build_app_properties">
    <ul>
        {% if mode == 'create' %}
            <li><a href="#builder_app_property_tabs-1">{% trans %}builder.new.app.basedon.tab{% endtrans %}</a></li>
            <li><a href="#builder_app_property_tabs-2">{% trans %}builder.new.app.select_base.tab{% endtrans %}</a></li>
        {% endif %}
        <li><a href="#builder_app_property_tabs-3">{% trans %}builder.new.app.name.tab{% endtrans %}</a></li>
        <li><a href="#builder_app_property_tabs-4">{% trans %}builder.new.app.classification.tab{% endtrans %}</a></li>
        <li><a href="#builder_app_property_tabs-5">{% trans %}builder.new.app.submit.tab{% endtrans %}</a></li>
      </ul>
      
    {{ form_start(form) }}
        {% if mode == 'create' %}
            {% form_theme form.template 'SinettMLABBuilderBundle:Form:ddslick_template.html.twig' %}
            {% form_theme form.copyApp 'SinettMLABBuilderBundle:Form:ddslick_copyApp.html.twig' %}
<!-- output list of templates and apps -->

            <div class="mlab_form_tab" id="builder_app_property_tabs-1">
                <p>{% trans %}builder.new.app.select_base.description{% endtrans %}</p>
                <label for="select_base_template">{% trans %}builder.new.app.select_base.template{% endtrans %}</label> 
                <input type="radio" name="select_base" id="select_base_template" value="template">
                <label for="select_base_existing_app">{% trans %}builder.new.app.select_base.existing_app{% endtrans %}</label> 
                <input type="radio" name="select_base" id="select_base_existing_app" value="existing_app">
<!--                <label for="select_base_office_file">{% trans %}builder.new.app.select_base.office_file{% endtrans %}</label> 
                <input type="radio" name="select_base" id="select_base_office_file" value="office_file"> -->
            </div>

            <div class="mlab_form_tab" id="builder_app_property_tabs-2">
                    
                <p>{% trans %}builder.new.app.basedon.description{% endtrans %}</p>

                <div id="div_base_existing_app" class="mlab_div_base">
                    {{ form_row(form.copyApp, {'url_apps': url_apps, 'app_icon_path': app_icon_path, 'apps': apps}) }}
                </div>
                
                <div id="div_base_template" class="mlab_div_base">
                    {{ form_row(form.template, {'url_templates': url_templates, 'templates': templates}) }}
                </div>
                
                <div id="div_base_office_file" class="mlab_div_base">   
                    {{ form_label(form.importFile, null, {'label': 'properties.build.app.import.ppt.doc'|trans}) }}
                    {{ form_errors(form.importFile) }}
                    {{ form_widget(form.importFile) }}
                </div>
                            
            </div>
        {% endif %}
        
<!-- name etc -->
        <div class="mlab_form_tab" id="builder_app_property_tabs-3">
            
            <p>{% trans %}builder.new.app.name.description{% endtrans %}</p>
            
            <div class="new_line">
                {{ form_label(form.name, null, {'label': 'builder.new.app.name.name'|trans}) }}
                {{ form_errors(form.name) }}
                {{ form_widget(form.name) }}
            </div>
            
            <div class="new_line">
                {{ form_label(form.active_version, null, {'label': 'builder.new.app.active_version.number'|trans}) }}
                {{ form_errors(form.active_version) }}
                {% if mode == 'create' %}
                    {{ form_widget(form.active_version, {'disabled': 'disabled'} ) }}
                {% else %}
                    {{ form_widget(form.active_version) }}
                {% endif %}
            </div>
            
            
            <div class="new_line hidden">
                {{ form_label(form.splashFile, null, {'label': 'builder.new.app.name.splashFile'|trans}) }}
                {{ form_errors(form.splashFile) }}
                {{ form_widget(form.splashFile) }}
            </div>

            
            <fieldset id="mlab_make_icon" class="new_line">
                {{ form_widget(form.iconFile) }}
                <legend>{% trans %}properties.build.app.design.icon.legend{% endtrans %}:</legend>
                <canvas id="app_icon_designer" height="256" width="256">
                </canvas>                
                <div class="left mlab_icon_design_input">
                    <label for="mlab_select_background">{% trans %}builder.new.app.name.selectBackground{% endtrans %}</label>
                    <select id="mlab_select_background" name="mlab_select_background" >
                        <option value=""></option>
                        {% for icon, path in backgrounds %}
                            <option data-imagesrc="{{ path }}" value="{{ path }}">{{ icon }}</option>
                        {% endfor %}
                    </select>
                
                    <label for="mlab_select_background">{% trans %}builder.new.app.name.selectForground{% endtrans %}</label>
                    <select id="mlab_select_foreground" name="mlab_select_foreground" >
                        <option value=""></option>
                        {% for icon, path in foregrounds %}
                            <option data-imagesrc="{{ path }}" value="{{ path }}">{{ icon }}</option>
                        {% endfor %}
                    </select>
                
                    
                    <label for="mlab_local_iconfile">{% trans %}builder.new.app.name.iconFile{% endtrans %}</label>
                    <input id="mlab_local_iconfile" name="mlab_local_iconfile" type="file">
                    
                    <label class="hidden" for="mlab_icon_text ">{% trans %}builder.new.app.name.iconText{% endtrans %}</label>
                    <input class="hidden" id="mlab_icon_text" name="mlab_icon_text" maxlength="{{icon_text_maxlength}}">
                    <button class="hidden button_wizard mlab_button_new_icon" onclick="createIcon.buildIcon();">{% trans %}builder.new.app.name.addIconText{% endtrans %}</button>
                </div>
            </fieldset>

            
        </div>
        
<!-- classification etc -->
        <div class="mlab_form_tab" id="builder_app_property_tabs-4">

            <p>{% trans %}builder.new.app.classification.description{% endtrans %}</p>
            
            <div>
                {{ form_label(form.description, null, {'label': 'builder.new.app.name.descriptionLab'|trans}) }}
                {{ form_errors(form.description) }}
                {{ form_widget(form.description) }}
            </div>

            <div>
                {{ form_label(form.keywords, null, {'label': 'builder.new.app.classification.keywords'|trans}) }}
                {{ form_errors(form.keywords) }}
                {{ form_widget(form.keywords) }}
            </div>

            {% for i in [1,2,3] %}
                <div>
                    <label for="mlab_tag_{{i}}">{{ ('builder.new.app.classification.category' ~ i)|trans }}</label>
                    <select id="mlab_tag_{{i}}" onclick="loadTags(this, {{i}})">
                        {% if i == 1 %}
                            {{tag_level_1|join('')|raw}}
                        {% endif %}
                    </select>
                </div>
            {% endfor %}
            {{ form_widget(form.tags) }}
                        
        </div>
        
<!-- summary -->
        <div class="mlab_form_tab" id="builder_app_property_tabs-5">
            {{ form_errors(form) }}
            <div id="mlab_app_new_summary"></div>
        </div>
        {{ form_widget(form._token) }}
    {{ form_end(form, {'render_rest': false}) }}
</div>

<button class="hidden button_wizard" id="mlab_app_new_previous" onclick="mlab_app_new_move(-1);">{% trans %}app.wizard.button.previous{% endtrans %}</button>
<button class="button_wizard" id="mlab_app_new_next" onclick="mlab_app_new_move(1);">{% trans %}app.wizard.button.next{% endtrans %}</button>

<script type="text/javascript">
    var icon_created = false;
    var mlab_app_tags = JSON.parse('{{tags|raw}}');
    
//run various jQuery plugins which enhances the user interaction when dialog box is filled in
    $(document).ready(function () {
        
//store mode as indicated by PHP variables. if in edit mode we do not display (or check for)
//what they want to base the app on
        mlab_edit_mode = "{{mode}}";
        
//this variable stores the icon functionality
        createIcon = new iconFunctions();
        
//create tabs and make sure they can only move between them using the next/previous buttons
        $( "#build_app_properties" ).tabs();
        $( "#build_app_properties ul" ).css("pointer-events", "none");
        

        $('#form_copyApp').ddslick({
            width: 300,
            imagePosition: "left",
            selectText: "{% trans %}app.select.app.to.copy{% endtrans %}"
        });
        
        $('#form_template').ddslick({
            width: 300,
            height: 110,
            imagePosition: "left",
            selectText: "{% trans %}app.select.template{% endtrans %}"
        });
        
        $('#mlab_select_background').ddslick({
            width: 90,
            height: 200,
            imagePosition: "left",
            selectText: "{% trans %}app.select.icon.background{% endtrans %}",
            onSelected: function (data) {
                if (data.selectedIndex > 0) {
                    createIcon.buildIcon();
                }
            }
        });
        
        $('#mlab_select_foreground').ddslick({
            width: 90,
            height: 200,
            imagePosition: "left",
            selectText: "{% trans %}app.select.icon.foreground{% endtrans %}",
            onSelected: function (data) {
                if (data.selectedIndex > 0) {
                    $("#mlab_local_iconfile").val("");
                    createIcon.buildIcon();
                }
            }
        });
        
        $("#mlab_local_iconfile").on("change", function () {
            $('#mlab_select_foreground').ddslick('select', {index: 0 });
            createIcon.buildIcon();
        });
        
    }); //end onready
    
//functions to build an icon
    function iconFunctions() {
        var funcs = new Object();
        
/**
 * This function is called whenever the background, foreground or text is changed
 * 
 * @param {type} direction
 * @returns {undefined|Boolean}
 */
        function buildIcon() {
            icon_created = true;
            var canvas = document.getElementById("app_icon_designer");
            var ctx = canvas.getContext("2d");
            ctx.clearRect(0, 0, canvas.width, canvas.height);

//first we draw background, regardless of what has been changed
            drawImage(getBackgroundFromServerFile(), false);
            
//next we draw foreground, if it i 
            if (typeof document.getElementById('mlab_local_iconfile').files != "undefined" && document.getElementById('mlab_local_iconfile').files.length > 0) {
                if (!getForegroundFromFile()) {
                    if ($("#mlab_icon_text").val() != "") {
                        outputText();
                    }
                }

            } else if ($('#mlab_select_foreground').data('ddslick').selectedData.value != "") {
                drawImage(getForegroundFromServerFile(), true);
                if ($("#mlab_icon_text").val() != "") {
                    outputText();
                }
                
            } 
        }

        function getForegroundFromFile() {
            var input, file, fr;

            if (typeof window.FileReader !== 'function') {
                alert("{% trans %}properties.build.app.design.icon.foreground.img.error.1{% endtrans %}");
                return false;
            }

            input = document.getElementById('mlab_local_iconfile');
            if (!input.files) {
                alert("{% trans %}properties.build.app.design.icon.foreground.img.error.2{% endtrans %}");
                return false;
            } else if (!input.files[0]) {
                return false;
            } else {
                var local_img = new Image;
                local_img.onload = function() {
                    drawImage(local_img, true);
                    outputText();
                    URL.revokeObjectURL(local_img.src);
                }
                local_img.src = URL.createObjectURL(input.files[0]);
                return true;
            }
        }
        
//loads background icon into canvas    
        function drawImage(img, isForeground) {
            var canvas = document.getElementById("app_icon_designer");
            var ctx = canvas.getContext("2d");
            if (isForeground) {
                if (img.naturalWidth >= (canvas.width * .8) || img.naturalHeight >= (canvas.height * .8)) {
                    var l = canvas.width * .25;
                    var t = canvas.height * .25;
                    var w = canvas.width * .5;
                    var h = canvas.height * .5;
                } else {
                    var l = (canvas.width - img.naturalWidth) / 2;
                    var t = (canvas.height - img.naturalHeight) / 2;
//image is smaller than what we want, so no need to indicate size parameters                    
                    ctx.drawImage(img, l, t);
                    return;
                }
            } else {
                var l = 0;
                var t = 0;
                var w = canvas.width;
                var h = canvas.height;
            }    

            ctx.drawImage(img, l, t, w, h);
        }
        
        function drawText() {
            var canvas = document.getElementById("app_icon_designer");
            var ctx = canvas.getContext("2d");
        
            var x = canvas.width / 2;
            var y = canvas.height;

            ctx.font = '30pt MlabIconFont';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'bottom';
            ctx.fillStyle = 'black';
            ctx.fillText($("#mlab_icon_text").val(), x, y);
        }        
        
//using a trick from here to load font first time: http://stackoverflow.com/questions/2635814/javascript-capturing-load-event-on-link/5371426#5371426
//if it is already loaded, then we skip loading it and draw text as normal
        function outputText() {
            if (!$("#mlab_icon_font_style").length) {
                $('head').append("<style id='mlab_icon_font_style' type='text/css'>@font-face { font-family: 'MlabIconFont'; font-style: normal; font-weight: 700; src: url('{{ icon_font_url }}') format('truetype'); }</style>");

//original trick from http://stackoverflow.com/questions/2635814/
                var image = new Image;
                image.src = "{{ icon_font_url }}";
                image.onerror = function() { drawText(); };
                
            } else {
                drawText();
                
            }
        }
        
        function getBackgroundFromServerFile() {
            var background = new Image();
            background.src = $('#mlab_select_background').data('ddslick').selectedData.value;
            return background;
        }

        function getForegroundFromServerFile() {
            var foreground = new Image();
            foreground.src = $('#mlab_select_foreground').data('ddslick').selectedData.value;
            return foreground;
        }

        funcs.buildIcon = buildIcon;
        
        return funcs;
    } //end buildIcon
    
//utility function to add child entries to categories level 2 or 3
    function addOptions(tags, level) {
        for (i in tags) {
            $("#mlab_tag_" + level).append("<option value='" + tags[i].text + "'>" + tags[i].text + "</option>");
        }
    }

//function to load sub categories when a higher level category is selected
    function loadTags(el, level) {
        if (level == 3) {
            return;
        }

        var sel_val = $(el).val();
//if they select the empty one we clear out the select boxes below this level
        if ( parseInt(sel_val) == 0 || isNaN(parseInt(sel_val)) )  {
            if (level == 1 ) {
                $("#mlab_tag_2").html("");
                $("#mlab_tag_3").html("");
            } else if (level == 2 ) {
                $("#mlab_tag_3").html("");
            }
            return; 
        }
        
//we get the correct children to populate with by using the index of each select element
//for the first one the user may belong to multiple groups, so we need to determine which of the top level elements it belongs to
        $("#mlab_tag_" + (level + 1)).html("<option></option>");
        var top_index = $("#mlab_tag_1").prop('selectedIndex');
        var start_index = 0;
        for (tagSets in mlab_app_tags) {
            if (top_index <= start_index + mlab_app_tags[tagSets].length) {
                var tags = mlab_app_tags[tagSets][$("#mlab_tag_1").prop('selectedIndex') - (start_index + 1)].children;
                if (level == 1) {
                    addOptions(tags, level + 1);
                } else {
                    addOptions(tags[$("#mlab_tag_2").prop('selectedIndex') - 1].children, level + 1);
                }
            } else {
                start_index = start_index + mlab_app_tags[tagSets].length;
            }
        }

    }
    
//function to move back and forth in new app/properties wizard 
//this first checks if relevant selections/input is done, then displays next or previous tab
    function mlab_app_new_move(direction) {
        var caption_next = "{% trans %}app.wizard.button.next{% endtrans %}";
        var caption_finished = "{% trans %}app.wizard.button.finished{% endtrans %}";
        var curr_tab = eval_tab = $('#build_app_properties').tabs('option', 'active');
        var tot_tabs = $('#build_app_properties >ul >li').size();
        
//if in update mode we hide first two tabs, hence these numbers are a bit different
        if (mlab_edit_mode == 'update') {
            eval_tab = eval_tab + 2;
        } 
            
 
//going forward: verify data, if ok: display previous button, change title of next button if on last page 
        if (direction > 0) {
            var msg = '';
            
            switch(eval_tab) {
                case 0:
                    var sel_val = "";
                    var selected = $("input[type='radio'][name='select_base']:checked");

                    if (selected.length > 0) {
                        sel_val = selected.val();
                        $('.mlab_div_base').addClass("hidden");
                        $('#div_base_' + sel_val).removeClass("hidden");
                        
//if they want to import data then we also need to have a template, otherwise the app will never work
                        if (sel_val == "office_file") {
                            $('#div_base_template').removeClass("hidden");
                        }
                    } else {
                        msg = msg + "{% trans %}properties.build.app.fill.base.on{% endtrans %}\n";
                    }
                    break;
                
                case 1:
                    var action = $("input[type='radio'][name='select_base']:checked").val();
                    switch(action) {
                        case "office_file":
                            if ($("#form_importFile").val() == "") {
                                msg = msg + "{% trans %}properties.build.app.fill.doc.convert{% endtrans %}\n";
                            } else {
                                var file_name = $("#form_importFile").val();
                                var file_type = file_name.substr(file_name.lastIndexOf('.') + 1).toLowerCase();
                                var regex = /ppt|pptx|doc|docx/g;
                                if (!regex.test(file_type)) {
                                    msg = msg + "{% trans %}properties.build.app.fill.doc.convert.format{% endtrans %}\n";
                                }
                            }

                        case "template":
                            if ($('#form_template').data('ddslick').selectedIndex == 0) {
                                msg = msg + "{% trans %}properties.build.app.fill.template{% endtrans %}\n";
                            }  
                            break;
                            
                        case "existing_app":
                            if ($('#form_copyApp').data('ddslick').selectedIndex == 0) {
                                msg = msg + "{% trans %}properties.build.app.fill.app.copy{% endtrans %}\n";
                            } else {
                                $("#form_copy_app").val($('#form_copyApp').data('ddslick').selectedData.value);
                            }
                            break;
                            
                    } //end switch what they want to base app on
                    break;

                case 2:
                    if ($('#form_name').val().trim() == "") {
                        msg = msg + "{% trans %}properties.build.app.fill.name{% endtrans %}\n";
                    }
                    
                    if (mlab_edit_mode == 'update') {
                        if ($('#form_active_version').val().trim() == "" || isNaN(parseFloat($('#form_active_version').val())) || parseFloat($('#form_active_version').val()) < 1 ) {
                            msg = msg + "{% trans %}properties.build.app.fill.version{% endtrans %}\n";
                        }
                    }

                    if (icon_created) {
                        $("#form_iconFile").val(document.getElementById("app_icon_designer").toDataURL());
                    } else {
                        $("#form_iconFile").val("");
                    }

                    var file_name = $("#form_splashFile").val().trim();
                    if (file_name != "") {
                        var file_type = file_name.substr(file_name.lastIndexOf('.') + 1).toLowerCase();
                        var regex = /png|jpg|jpeg/g;
                        if (!regex.test(file_type)) {
                            msg = msg + "{% trans %}properties.build.app.fill.splash.format{% endtrans %}\n";
                        }
                    }
                    break;

                case 3:
                    if ($('#form_description').val().trim() == "") {
                        msg = msg + "{% trans %}properties.build.app.fill.description{% endtrans %}\n";
                    }  


                    if ($('#form_keywords').val().trim() == "") {
                        msg = msg + "{% trans %}properties.build.app.fill.keywords{% endtrans %}\n";
                    }

                    if ($('#mlab_tag_1').val() == null || $('#mlab_tag_1').val().trim() == "") {
                        msg = msg + "{% trans %}properties.build.app.fill.main.category{% endtrans %}\n";
                    }  
                
//moving to last page, display all info so they can check before committing
                    if (msg == '') {
                        $('#form_tags').val(JSON.stringify([$('#mlab_tag_1').val(), $('#mlab_tag_2').val(), $('#mlab_tag_3').val()]))
                        var action = $("input[type='radio'][name='select_base']:checked").val();
                        var based_on = "";
                        switch(action) {
                            case "template":
                                based_on = "{% trans %}properties.build.app.summery.1{% endtrans %} " + $('#form_template').data('ddslick').selectedData.text + " {% trans %}properties.build.app.summery.2{% endtrans %}";
                                break;
                            case "existing_app":
                                based_on = "{% trans %}properties.build.app.summery.3{% endtrans %} " + $('#form_copyApp').data('ddslick').selectedData.text + " {% trans %}properties.build.app.summery.4{% endtrans %}";
                                break;
                            case "office_file":
                                based_on = "{% trans %}properties.build.app.summery.5{% endtrans %} " + $("#form_importFile").val() + " {% trans %}properties.build.app.summery.6{% endtrans %} " + $('#form_template').data('ddslick').selectedData.text + " {% trans %}properties.build.app.summery.7{% endtrans %}";
                                break;
                        } //end switch what they want to base app on                        
                        var summary = 
                                      "<fieldset>" +
                                      "<legend>{% trans %}builder.new.app.submit.name{% endtrans %}:</span> " + $('#form_name').val() + "</legend>" + 
                                      "<span class='mlab_app_new_summary'>" + based_on + "</span>" + 
                                      "<div class='mlab_icon_summary'><img src='" + (icon_created ? document.getElementById("app_icon_designer").toDataURL() : "{{icon_default}}") + "' width='128' height='128'>" +
                                     
                                      "<br><span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.descriptionLab{% endtrans %}:</span> " + $('#form_description').val() +
                                      "<br><span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.keywords{% endtrans %}:</span> " + $('#form_keywords').val() + 
                                      "<br><span class='mlab_app_new_summary'>{% trans %}builder.new.app.submit.category{% endtrans %}:</span> " + 
                                      $('#mlab_tag_1 option:selected').html() + " - " +
                                      $('#mlab_tag_2 option:selected').html() + " - " +
                                      $('#mlab_tag_3 option:selected').html() + "</div>" +
                                      "<div class='hidden mlab_splash'><img id='mlab_splash_preview' width='128' height='128'><span class='hidden mlab_app_new_summary'>{% trans %}builder.new.app.submit.splashScreen{% endtrans %}</span></div>" + 
                                      "</fieldset>" +
                                      "<p>{% trans %}builder.new.app.submit.description{% endtrans %}</p>";


                        $("#mlab_app_new_summary").html(summary);

//load local image for preview
                        if ($("#form_splashFile").val().trim() != "") {
                            var fr = new FileReader();
                            fr.readAsDataURL(document.getElementById("form_splashFile").files[0]);

                            fr.onload = function(oFREvent) {
                                document.getElementById("mlab_splash_preview").src = oFREvent.target.result;
                            };
                        }
                        
                    }
                    break;
                    
                case 4:

//reset the template select box so it returns value properly
                    $('#form_template').ddslick('destroy');
                    $('#form_copyApp').ddslick('destroy');
//here we submit the data via AJAX, call function that must be in page that this dialog is called up in!                  
                    mlab_app_submit_properties($("#mlab_form_app"));
                    break;
                
            } //end switch for tabs

//if the error message is filled in then we display it and bail
            if (msg != '') {
                alert(msg);
                return false;
            }
            
//if no error message we move to next or previous tab and update caption on the buttons
            $("#mlab_app_new_previous").removeClass("hidden");
            
//opening final tab 
            if (curr_tab == (tot_tabs - 2)) {
                $("#mlab_app_new_next").text(caption_finished);
            }
            
//going backward: hide previous button if first page, rename next button 
        } else {
            if (curr_tab == 1) {
                $("#mlab_app_new_previous").addClass("hidden");
            }
            $("#mlab_app_new_next").text(caption_next);
        }
        
//select relevant tab
        $('#build_app_properties').tabs('option', 'active', curr_tab + direction);
        
    }
    
    /**
        * submits data for new app from the dialog box where we collect details of the new app  
        */
    function mlab_app_submit_properties(form) {
        formData = new FormData(document.getElementById('mlab_form_app'))

        $.ajax({
            url: form.attr( "action" ),  //Server script to process data, should be createAction in app controller 
            type: 'POST',
            // Form data 
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            success: function( data ) {
                if (data.result == 'FAILURE') {
                    alert(data.message);
                    $('#form_copyApp').ddslick({
                        width: 300,
                        imagePosition: "left",
                        selectText: "{% trans %}app.select.app.to.copy{% endtrans %}"
                    });

                    $('#form_template').ddslick({
                        width: 300,
                        height: 110,
                        imagePosition: "left",
                        selectText: "{% trans %}app.select.template{% endtrans %}"
                    });


                } else {
//here we update the list of apps with the new app details
                    $("#builder_dialog_new_app").dialog("close");
                    $(data.html).prependTo("#table_app");
                    location.href = location.origin + $(data.html).find("a").first().attr("href");
                }
            },
            
            error: function(e) {
                alert('{% trans %}properties.build.app.error{% endtrans %}'); 
                console.log(e);
                $('#form_copyApp').ddslick({
                    width: 300,
                    imagePosition: "left",
                    selectText: "{% trans %}app.select.app.to.copy{% endtrans %}"
                });

                $('#form_template').ddslick({
                    width: 300,
                    height: 110,
                    imagePosition: "left",
                    selectText: "{% trans %}app.select.template{% endtrans %}"
                });

            }
        });
    }

</script>
{% endblock %}